// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('The provided Module[\'ENVIRONMENT\'] value is not valid. It must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = console.log;
  if (!Module['printErr']) Module['printErr'] = console.warn;

  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    if (!nodeFS) nodeFS = require('fs');
    if (!nodePath) nodePath = require('path');
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function shell_read() { throw 'no read() available' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status, toThrow) {
      quit(status);
    }
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function shell_read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.responseType = 'arraybuffer';
      xhr.send(null);
      return xhr.response;
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
      } else {
        onerror();
      }
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function shell_print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function shell_printErr(x) {
      console.warn(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}
if (!Module['quit']) {
  Module['quit'] = function(status, toThrow) {
    throw toThrow;
  }
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
    return value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      // optimize away arguments usage in common cases
      if (sig.length === 1) {
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func);
        };
      } else if (sig.length === 2) {
        sigCache[func] = function dynCall_wrapper(arg) {
          return Runtime.dynCall(sig, func, [arg]);
        };
      } else {
        // general case
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func, Array.prototype.slice.call(arguments));
        };
      }
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { assert(DYNAMICTOP_PTR);var ret = HEAP32[DYNAMICTOP_PTR>>2];var end = (((ret + size + 15)|0) & -16);HEAP32[DYNAMICTOP_PTR>>2] = end;if (end >= TOTAL_MEMORY) {var success = enlargeMemory();if (!success) {HEAP32[DYNAMICTOP_PTR>>2] = ret;return 0;}}return ret;},
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



Module["Runtime"] = Runtime;



//========================================
// Runtime essentials
//========================================

var ABORT = 0; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try { func = eval('_' + ident); } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = Runtime.stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface.
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if ((!opts || !opts.async) && typeof EmterpreterAsync === 'object') {
      assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling ccall');
    }
    if (opts && opts.async) assert(!returnType, 'async ccalls cannot return values');
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*[a-zA-Z$_0-9]*\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }

  // sources of useful functions. we create this lazily as it can trigger a source decompression on this entire file
  var JSsource = null;
  function ensureJSsource() {
    if (!JSsource) {
      JSsource = {};
      for (var fun in JSfuncs) {
        if (JSfuncs.hasOwnProperty(fun)) {
          // Elements of toCsource are arrays of three items:
          // the code, and the return value
          JSsource[fun] = parseJSFunc(JSfuncs[fun]);
        }
      }
    }
  }

  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      ensureJSsource();
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=(' + convertCode.returnValue + ');';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    funcstr += "if (typeof EmterpreterAsync === 'object') { assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling cwrap') }";
    if (!numericArgs) {
      // If we had a stack, restore it
      ensureJSsource();
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module["setValue"] = setValue;

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module["getValue"] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : Runtime.staticAlloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module["allocate"] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if (!runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module["getMemory"] = getMemory;

/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module["Pointer_stringify"] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module["AsciiToString"] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module["stringToAscii"] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}
Module["UTF8ArrayToString"] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}
Module["UTF8ToString"] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module["stringToUTF8Array"] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}
Module["stringToUTF8"] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module["lengthBytesUTF8"] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}


function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}


function demangle(func) {
  var __cxa_demangle_func = Module['___cxa_demangle'] || Module['__cxa_demangle'];
  if (__cxa_demangle_func) {
    try {
      var s =
        func.substr(1);
      var len = lengthBytesUTF8(s)+1;
      var buf = _malloc(len);
      stringToUTF8(s, buf, len);
      var status = _malloc(4);
      var ret = __cxa_demangle_func(buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed
    } catch(e) {
      // ignore problems here
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
    // failure when using libcxxabi, don't demangle
    return func;
  }
  Runtime.warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (x + ' [' + y + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}
Module["stackTrace"] = stackTrace;

// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;
var MIN_TOTAL_MEMORY = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
  // Also test the global address 0 for integrity. This check is not compatible with SAFE_SPLIT_MEMORY though, since that mode already tests all address 0 accesses on its own.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - Module['asm'].stackSave() + allocSize) + ' bytes available!');
}

function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}


function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
if (TOTAL_MEMORY < TOTAL_STACK) Module.printErr('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  assert(buffer.byteLength === TOTAL_MEMORY);
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module["addOnInit"] = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = addOnPostRun;

// Tools

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module["intArrayFromString"] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module["intArrayToString"] = intArrayToString;

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  Runtime.warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}
Module["writeStringToMemory"] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}
Module["writeArrayToMemory"] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

if (!Math['trunc']) Math['trunc'] = function(x) {
  return x < 0 ? Math.ceil(x) : Math.floor(x);
};
Math.trunc = Math['trunc'];

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module["addRunDependency"] = addRunDependency;

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module["removeRunDependency"] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;






// === Body ===

var ASM_CONSTS = [];




STATIC_BASE = Runtime.GLOBAL_BASE;

STATICTOP = STATIC_BASE + 13616;
/* global initializers */  __ATINIT__.push({ func: function() { __GLOBAL__sub_I_estimator_cc() } }, { func: function() { __GLOBAL__sub_I_bind_cpp() } });


/* memory initializer */ allocate([116,7,0,0,236,8,0,0,0,0,0,0,1,0,0,0,32,0,0,0,0,0,0,0,116,7,0,0,16,9,0,0,0,0,0,0,1,0,0,0,56,0,0,0,0,0,0,0,128,6,0,0,60,9,0,0,128,6,0,0,102,9,0,0,60,7,0,0,125,9,0,0,1,0,0,0,8,0,0,0,60,7,0,0,169,9,0,0,0,0,0,0,8,0,0,0,88,7,0,0,43,10,0,0,60,7,0,0,69,10,0,0,0,0,0,0,128,0,0,0,128,6,0,0,96,10,0,0,60,7,0,0,139,10,0,0,1,0,0,0,128,0,0,0,128,6,0,0,73,13,0,0,128,6,0,0,104,13,0,0,128,6,0,0,135,13,0,0,128,6,0,0,166,13,0,0,128,6,0,0,197,13,0,0,128,6,0,0,228,13,0,0,128,6,0,0,3,14,0,0,128,6,0,0,34,14,0,0,128,6,0,0,65,14,0,0,128,6,0,0,96,14,0,0,128,6,0,0,127,14,0,0,128,6,0,0,158,14,0,0,116,7,0,0,189,14,0,0,0,0,0,0,1,0,0,0,16,1,0,0,0,0,0,0,128,6,0,0,252,14,0,0,116,7,0,0,34,15,0,0,0,0,0,0,1,0,0,0,16,1,0,0,0,0,0,0,116,7,0,0,97,15,0,0,0,0,0,0,1,0,0,0,16,1,0,0,0,0,0,0,128,6,0,0,199,26,0,0,168,6,0,0,39,27,0,0,96,1,0,0,0,0,0,0,168,6,0,0,212,26,0,0,112,1,0,0,0,0,0,0,128,6,0,0,245,26,0,0,168,6,0,0,2,27,0,0,80,1,0,0,0,0,0,0,168,6,0,0,74,28,0,0,72,1,0,0,0,0,0,0,168,6,0,0,87,28,0,0,72,1,0,0,0,0,0,0,168,6,0,0,103,28,0,0,152,1,0,0,0,0,0,0,168,6,0,0,120,28,0,0,152,1,0,0,0,0,0,0,168,6,0,0,173,28,0,0,96,1,0,0,0,0,0,0,168,6,0,0,137,28,0,0,200,1,0,0,0,0,0,0,168,6,0,0,207,28,0,0,96,1,0,0,0,0,0,0,32,7,0,0,247,28,0,0,32,7,0,0,249,28,0,0,32,7,0,0,252,28,0,0,32,7,0,0,254,28,0,0,32,7,0,0,0,29,0,0,32,7,0,0,2,29,0,0,32,7,0,0,4,29,0,0,32,7,0,0,6,29,0,0,32,7,0,0,8,29,0,0,32,7,0,0,10,29,0,0,32,7,0,0,129,34,0,0,32,7,0,0,12,29,0,0,32,7,0,0,14,29,0,0,32,7,0,0,16,29,0,0,168,6,0,0,18,29,0,0,96,1,0,0,0,0,0,0,168,6,0,0,51,29,0,0,80,1,0,0,0,0,0,0,8,2,0,0,8,0,0,0,64,2,0,0,56,2,0,0,64,0,0,0,8,0,0,0,64,2,0,0,64,2,0,0,72,0,0,0,248,1,0,0,88,0,0,0,64,2,0,0,56,2,0,0,248,1,0,0,88,0,0,0,56,2,0,0,88,0,0,0,248,1,0,0,112,0,0,0,8,0,0,0,56,2,0,0,8,0,0,0,112,0,0,0,248,1,0,0,112,0,0,0,56,2,0,0,112,0,0,0,128,0,0,0,112,0,0,0,104,0,0,0,56,2,0,0,88,2,0,0,1,0,0,0,112,0,0,0,2,0,0,192,3,0,0,192,4,0,0,192,5,0,0,192,6,0,0,192,7,0,0,192,8,0,0,192,9,0,0,192,10,0,0,192,11,0,0,192,12,0,0,192,13,0,0,192,14,0,0,192,15,0,0,192,16,0,0,192,17,0,0,192,18,0,0,192,19,0,0,192,20,0,0,192,21,0,0,192,22,0,0,192,23,0,0,192,24,0,0,192,25,0,0,192,26,0,0,192,27,0,0,192,28,0,0,192,29,0,0,192,30,0,0,192,31,0,0,192,0,0,0,179,1,0,0,195,2,0,0,195,3,0,0,195,4,0,0,195,5,0,0,195,6,0,0,195,7,0,0,195,8,0,0,195,9,0,0,195,10,0,0,195,11,0,0,195,12,0,0,195,13,0,0,211,14,0,0,195,15,0,0,195,0,0,12,187,1,0,12,195,2,0,12,195,3,0,12,195,4,0,12,211,224,3,0,0,5,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,31,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,5,0,0,5,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,3,0,0,0,39,49,0,0,0,4,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,95,112,137,0,255,9,47,15,6,0,0,0,0,0,0,0,80,1,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,0,0,0,0,120,1,0,0,7,0,0,0,15,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,0,0,0,0,136,1,0,0,19,0,0,0,20,0,0,0,21,0,0,0,0,0,0,0,152,1,0,0,22,0,0,0,23,0,0,0,24,0,0,0,0,0,0,0,168,1,0,0,22,0,0,0,25,0,0,0,24,0,0,0,0,0,0,0,184,1,0,0,22,0,0,0,26,0,0,0,24,0,0,0,0,0,0,0,232,1,0,0,7,0,0,0,27,0,0,0,9,0,0,0,10,0,0,0,28,0,0,0,0,0,0,0,216,1,0,0,7,0,0,0,29,0,0,0,9,0,0,0,10,0,0,0,30,0,0,0,0,0,0,0,104,2,0,0,7,0,0,0,31,0,0,0,9,0,0,0,10,0,0,0,32,0,0,0,0,0,0,0,120,2,0,0,7,0,0,0,33,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,70,97,105,108,101,100,32,116,111,32,112,97,114,115,101,32,103,97,109,101,32,102,105,108,101,32,91,37,115,93,10,0,85,115,97,103,101,58,32,101,115,116,105,109,97,116,111,114,32,60,102,105,108,101,46,103,97,109,101,62,32,46,46,46,10,0,114,0,70,97,105,108,101,100,32,116,111,32,111,112,101,110,32,102,105,108,101,32,37,115,10,0,73,110,118,97,108,105,100,32,103,97,109,101,32,102,105,108,101,10,0,104,101,105,103,104,116,32,37,100,10,0,119,105,100,116,104,32,37,100,10,0,112,108,97,121,101,114,95,116,111,95,109,111,118,101,32,37,100,10,0,37,100,0,37,115,10,0,104,101,105,103,104,116,58,32,37,100,10,0,119,105,100,116,104,58,32,37,100,10,0,112,108,97,121,101,114,32,116,111,32,109,111,118,101,58,32,37,100,10,0,10,10,0,83,99,111,114,101,58,32,37,102,10,0,84,105,109,101,32,101,108,97,112,115,101,100,58,32,37,102,32,109,115,10,0,62,62,62,32,87,65,82,78,73,78,71,58,32,69,115,116,105,109,97,116,111,114,32,116,111,111,107,32,116,111,111,32,108,111,110,103,32,116,111,32,112,114,111,100,117,99,101,32,97,32,114,101,115,117,108,116,32,60,60,60,10,0,86,101,99,116,111,114,73,110,116,0,112,117,115,104,95,98,97,99,107,0,114,101,115,105,122,101,0,115,105,122,101,0,103,101,116,0,115,101,116,0,105,105,105,105,105,0,78,83,116,51,95,95,50,54,118,101,99,116,111,114,73,105,78,83,95,57,97,108,108,111,99,97,116,111,114,73,105,69,69,69,69,0,78,83,116,51,95,95,50,49,51,95,95,118,101,99,116,111,114,95,98,97,115,101,73,105,78,83,95,57,97,108,108,111,99,97,116,111,114,73,105,69,69,69,69,0,78,83,116,51,95,95,50,50,48,95,95,118,101,99,116,111,114,95,98,97,115,101,95,99,111,109,109,111,110,73,76,98,49,69,69,69,0,105,105,105,105,0,78,49,48,101,109,115,99,114,105,112,116,101,110,51,118,97,108,69,0,105,105,105,0,80,75,78,83,116,51,95,95,50,54,118,101,99,116,111,114,73,105,78,83,95,57,97,108,108,111,99,97,116,111,114,73,105,69,69,69,69,0,118,105,105,105,105,0,80,78,83,116,51,95,95,50,54,118,101,99,116,111,114,73,105,78,83,95,57,97,108,108,111,99,97,116,111,114,73,105,69,69,69,69,0,118,105,105,105,0,118,105,0,118,0,105,105,0,71,111,98,97,110,0,101,115,116,105,109,97,116,101,0,115,99,111,114,101,0,112,114,105,110,116,0,103,101,116,83,99,111,114,101,86,101,99,116,111,114,0,112,111,112,117,108,97,116,101,66,111,97,114,100,0,67,111,108,111,114,0,69,77,80,84,89,0,66,76,65,67,75,0,87,72,73,84,69,0,78,49,53,115,99,111,114,101,95,101,115,116,105,109,97,116,111,114,53,67,111,108,111,114,69,0,80,78,49,53,115,99,111,114,101,95,101,115,116,105,109,97,116,111,114,53,71,111,98,97,110,69,0,78,49,53,115,99,111,114,101,95,101,115,116,105,109,97,116,111,114,53,71,111,98,97,110,69,0,118,105,105,0,37,99,32,0,10,0,105,105,105,105,105,102,0,80,75,78,49,53,115,99,111,114,101,95,101,115,116,105,109,97,116,111,114,53,71,111,98,97,110,69,0,115,116,100,58,58,98,97,115,105,99,95,115,116,114,105,110,103,60,117,110,115,105,103,110,101,100,32,99,104,97,114,62,0,115,116,100,58,58,119,115,116,114,105,110,103,0,101,109,115,99,114,105,112,116,101,110,58,58,118,97,108,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,99,104,97,114,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,115,105,103,110,101,100,32,99,104,97,114,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,110,115,105,103,110,101,100,32,99,104,97,114,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,115,104,111,114,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,110,115,105,103,110,101,100,32,115,104,111,114,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,105,110,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,110,115,105,103,110,101,100,32,105,110,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,108,111,110,103,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,110,115,105,103,110,101,100,32,108,111,110,103,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,105,110,116,56,95,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,105,110,116,56,95,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,105,110,116,49,54,95,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,105,110,116,49,54,95,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,105,110,116,51,50,95,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,105,110,116,51,50,95,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,102,108,111,97,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,100,111,117,98,108,101,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,108,111,110,103,32,100,111,117,98,108,101,62,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,101,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,100,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,102,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,109,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,108,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,106,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,105,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,116,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,115,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,104,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,97,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,99,69,69,0,78,83,116,51,95,95,50,49,50,98,97,115,105,99,95,115,116,114,105,110,103,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,119,69,69,69,69,0,78,83,116,51,95,95,50,50,49,95,95,98,97,115,105,99,95,115,116,114,105,110,103,95,99,111,109,109,111,110,73,76,98,49,69,69,69,0,78,83,116,51,95,95,50,49,50,98,97,115,105,99,95,115,116,114,105,110,103,73,104,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,104,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,104,69,69,69,69,0,78,83,116,51,95,95,50,49,50,98,97,115,105,99,95,115,116,114,105,110,103,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,99,69,69,69,69,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,3,4,5,6,7,8,9,255,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,4,7,3,6,5,0,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,45,43,32,32,32,48,88,48,120,0,40,110,117,108,108,41,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,105,110,102,0,73,78,70,0,78,65,78,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,84,33,34,25,13,1,2,3,17,75,28,12,16,4,11,29,18,30,39,104,110,111,112,113,98,32,5,6,15,19,20,21,26,8,22,7,40,36,23,24,9,10,14,27,31,37,35,131,130,125,38,42,43,60,61,62,63,67,71,74,77,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,105,106,107,108,114,115,116,121,122,123,124,0,73,108,108,101,103,97,108,32,98,121,116,101,32,115,101,113,117,101,110,99,101,0,68,111,109,97,105,110,32,101,114,114,111,114,0,82,101,115,117,108,116,32,110,111,116,32,114,101,112,114,101,115,101,110,116,97,98,108,101,0,78,111,116,32,97,32,116,116,121,0,80,101,114,109,105,115,115,105,111,110,32,100,101,110,105,101,100,0,79,112,101,114,97,116,105,111,110,32,110,111,116,32,112,101,114,109,105,116,116,101,100,0,78,111,32,115,117,99,104,32,102,105,108,101,32,111,114,32,100,105,114,101,99,116,111,114,121,0,78,111,32,115,117,99,104,32,112,114,111,99,101,115,115,0,70,105,108,101,32,101,120,105,115,116,115,0,86,97,108,117,101,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,100,97,116,97,32,116,121,112,101,0,78,111,32,115,112,97,99,101,32,108,101,102,116,32,111,110,32,100,101,118,105,99,101,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,82,101,115,111,117,114,99,101,32,98,117,115,121,0,73,110,116,101,114,114,117,112,116,101,100,32,115,121,115,116,101,109,32,99,97,108,108,0,82,101,115,111,117,114,99,101,32,116,101,109,112,111,114,97,114,105,108,121,32,117,110,97,118,97,105,108,97,98,108,101,0,73,110,118,97,108,105,100,32,115,101,101,107,0,67,114,111,115,115,45,100,101,118,105,99,101,32,108,105,110,107,0,82,101,97,100,45,111,110,108,121,32,102,105,108,101,32,115,121,115,116,101,109,0,68,105,114,101,99,116,111,114,121,32,110,111,116,32,101,109,112,116,121,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,112,101,101,114,0,79,112,101,114,97,116,105,111,110,32,116,105,109,101,100,32,111,117,116,0,67,111,110,110,101,99,116,105,111,110,32,114,101,102,117,115,101,100,0,72,111,115,116,32,105,115,32,100,111,119,110,0,72,111,115,116,32,105,115,32,117,110,114,101,97,99,104,97,98,108,101,0,65,100,100,114,101,115,115,32,105,110,32,117,115,101,0,66,114,111,107,101,110,32,112,105,112,101,0,73,47,79,32,101,114,114,111,114,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,32,111,114,32,97,100,100,114,101,115,115,0,66,108,111,99,107,32,100,101,118,105,99,101,32,114,101,113,117,105,114,101,100,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,0,78,111,116,32,97,32,100,105,114,101,99,116,111,114,121,0,73,115,32,97,32,100,105,114,101,99,116,111,114,121,0,84,101,120,116,32,102,105,108,101,32,98,117,115,121,0,69,120,101,99,32,102,111,114,109,97,116,32,101,114,114,111,114,0,73,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,0,65,114,103,117,109,101,110,116,32,108,105,115,116,32,116,111,111,32,108,111,110,103,0,83,121,109,98,111,108,105,99,32,108,105,110,107,32,108,111,111,112,0,70,105,108,101,110,97,109,101,32,116,111,111,32,108,111,110,103,0,84,111,111,32,109,97,110,121,32,111,112,101,110,32,102,105,108,101,115,32,105,110,32,115,121,115,116,101,109,0,78,111,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,115,32,97,118,97,105,108,97,98,108,101,0,66,97,100,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,0,78,111,32,99,104,105,108,100,32,112,114,111,99,101,115,115,0,66,97,100,32,97,100,100,114,101,115,115,0,70,105,108,101,32,116,111,111,32,108,97,114,103,101,0,84,111,111,32,109,97,110,121,32,108,105,110,107,115,0,78,111,32,108,111,99,107,115,32,97,118,97,105,108,97,98,108,101,0,82,101,115,111,117,114,99,101,32,100,101,97,100,108,111,99,107,32,119,111,117,108,100,32,111,99,99,117,114,0,83,116,97,116,101,32,110,111,116,32,114,101,99,111,118,101,114,97,98,108,101,0,80,114,101,118,105,111,117,115,32,111,119,110,101,114,32,100,105,101,100,0,79,112,101,114,97,116,105,111,110,32,99,97,110,99,101,108,101,100,0,70,117,110,99,116,105,111,110,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,78,111,32,109,101,115,115,97,103,101,32,111,102,32,100,101,115,105,114,101,100,32,116,121,112,101,0,73,100,101,110,116,105,102,105,101,114,32,114,101,109,111,118,101,100,0,68,101,118,105,99,101,32,110,111,116,32,97,32,115,116,114,101,97,109,0,78,111,32,100,97,116,97,32,97,118,97,105,108,97,98,108,101,0,68,101,118,105,99,101,32,116,105,109,101,111,117,116,0,79,117,116,32,111,102,32,115,116,114,101,97,109,115,32,114,101,115,111,117,114,99,101,115,0,76,105,110,107,32,104,97,115,32,98,101,101,110,32,115,101,118,101,114,101,100,0,80,114,111,116,111,99,111,108,32,101,114,114,111,114,0,66,97,100,32,109,101,115,115,97,103,101,0,70,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,105,110,32,98,97,100,32,115,116,97,116,101,0,78,111,116,32,97,32,115,111,99,107,101,116,0,68,101,115,116,105,110,97,116,105,111,110,32,97,100,100,114,101,115,115,32,114,101,113,117,105,114,101,100,0,77,101,115,115,97,103,101,32,116,111,111,32,108,97,114,103,101,0,80,114,111,116,111,99,111,108,32,119,114,111,110,103,32,116,121,112,101,32,102,111,114,32,115,111,99,107,101,116,0,80,114,111,116,111,99,111,108,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,80,114,111,116,111,99,111,108,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,83,111,99,107,101,116,32,116,121,112,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,78,111,116,32,115,117,112,112,111,114,116,101,100,0,80,114,111,116,111,99,111,108,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,65,100,100,114,101,115,115,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,98,121,32,112,114,111,116,111,99,111,108,0,65,100,100,114,101,115,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,78,101,116,119,111,114,107,32,105,115,32,100,111,119,110,0,78,101,116,119,111,114,107,32,117,110,114,101,97,99,104,97,98,108,101,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,110,101,116,119,111,114,107,0,67,111,110,110,101,99,116,105,111,110,32,97,98,111,114,116,101,100,0,78,111,32,98,117,102,102,101,114,32,115,112,97,99,101,32,97,118,97,105,108,97,98,108,101,0,83,111,99,107,101,116,32,105,115,32,99,111,110,110,101,99,116,101,100,0,83,111,99,107,101,116,32,110,111,116,32,99,111,110,110,101,99,116,101,100,0,67,97,110,110,111,116,32,115,101,110,100,32,97,102,116,101,114,32,115,111,99,107,101,116,32,115,104,117,116,100,111,119,110,0,79,112,101,114,97,116,105,111,110,32,97,108,114,101,97,100,121,32,105,110,32,112,114,111,103,114,101,115,115,0,79,112,101,114,97,116,105,111,110,32,105,110,32,112,114,111,103,114,101,115,115,0,83,116,97,108,101,32,102,105,108,101,32,104,97,110,100,108,101,0,82,101,109,111,116,101,32,73,47,79,32,101,114,114,111,114,0,81,117,111,116,97,32,101,120,99,101,101,100,101,100,0,78,111,32,109,101,100,105,117,109,32,102,111,117,110,100,0,87,114,111,110,103,32,109,101,100,105,117,109,32,116,121,112,101,0,78,111,32,101,114,114,111,114,32,105,110,102,111,114,109,97,116,105,111,110,0,0,105,110,102,105,110,105,116,121,0,110,97,110,0,114,119,97,0,118,101,99,116,111,114,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,58,32,37,115,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,102,111,114,101,105,103,110,32,101,120,99,101,112,116,105,111,110,0,116,101,114,109,105,110,97,116,105,110,103,0,117,110,99,97,117,103,104,116,0,83,116,57,101,120,99,101,112,116,105,111,110,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,83,116,57,116,121,112,101,95,105,110,102,111,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,112,116,104,114,101,97,100,95,111,110,99,101,32,102,97,105,108,117,114,101,32,105,110,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,95,102,97,115,116,40,41,0,99,97,110,110,111,116,32,99,114,101,97,116,101,32,112,116,104,114,101,97,100,32,107,101,121,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,99,97,110,110,111,116,32,122,101,114,111,32,111,117,116,32,116,104,114,101,97,100,32,118,97,108,117,101,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,114,101,116,117,114,110,101,100,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,116,104,114,101,119,32,97,110,32,101,120,99,101,112,116,105,111,110,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,83,116,57,98,97,100,95,97,108,108,111,99,0,83,116,49,49,108,111,103,105,99,95,101,114,114,111,114,0,83,116,49,50,108,101,110,103,116,104,95,101,114,114,111,114,0,83,116,49,50,111,117,116,95,111,102,95,114,97,110,103,101,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,57,95,95,112,111,105,110,116,101,114,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,112,98,97,115,101,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,51,95,95,102,117,110,100,97,109,101,110,116,97,108,95,116,121,112,101,95,105,110,102,111,69,0,118,0,68,110,0,98,0,99,0,104,0,97,0,115,0,116,0,105,0,106,0,109,0,102,0,100,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,101,110,117,109,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,49,95,95,118,109,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,32,99,111,110,115,116,0,32,118,111,108,97,116,105,108,101,0,32,114,101,115,116,114,105,99,116,0,32,99,111,109,112,108,101,120,0,32,105,109,97,103,105,110,97,114,121,0,32,91,0,32,40,0,41,0,40,0,38,38,0,111,98,106,99,95,111,98,106,101,99,116,60,0,42,0,38,0,111,98,106,99,112,114,111,116,111,0,32,0,60,0,62,0,32,118,101,99,116,111,114,91,0,93,0,112,105,120,101,108,32,118,101,99,116,111,114,91,0,38,61,0,61,0,44,0,126,0,58,58,0,100,101,108,101,116,101,91,93,32,0,100,101,108,101,116,101,32,0,47,0,47,61,0,94,0,94,61,0,61,61,0,62,61,0,41,91,0,60,61,0,60,60,0,60,60,61,0,45,0,45,61,0,42,61,0,45,45,0,41,45,45,0,33,61,0,33,0,124,124,0,124,0,124,61,0,45,62,42,0,43,0,43,61,0,43,43,0,41,43,43,0,41,32,63,32,40,0,41,32,58,32,40,0,37,0,37,61,0,62,62,0,62,62,61,0,116,104,114,111,119,0,116,104,114,111,119,32,0,116,121,112,101,105,100,40,0,115,105,122,101,111,102,46,46,46,40,0,44,32,0,115,105,122,101,111,102,32,40,0,115,116,97,116,105,99,95,99,97,115,116,60,0,62,40,0,114,101,105,110,116,101,114,112,114,101,116,95,99,97,115,116,60,0,45,62,0,110,111,101,120,99,101,112,116,32,40,0,91,93,32,0,41,32,0,46,0,46,42,0,115,116,100,58,58,0,111,112,101,114,97,116,111,114,38,38,0,111,112,101,114,97,116,111,114,38,0,111,112,101,114,97,116,111,114,38,61,0,111,112,101,114,97,116,111,114,61,0,111,112,101,114,97,116,111,114,40,41,0,111,112,101,114,97,116,111,114,44,0,111,112,101,114,97,116,111,114,126,0,111,112,101,114,97,116,111,114,32,0,111,112,101,114,97,116,111,114,32,100,101,108,101,116,101,91,93,0,111,112,101,114,97,116,111,114,42,0,111,112,101,114,97,116,111,114,47,0,111,112,101,114,97,116,111,114,47,61,0,111,112,101,114,97,116,111,114,94,0,111,112,101,114,97,116,111,114,94,61,0,111,112,101,114,97,116,111,114,61,61,0,111,112,101,114,97,116,111,114,62,61,0,111,112,101,114,97,116,111,114,62,0,111,112,101,114,97,116,111,114,91,93,0,111,112,101,114,97,116,111,114,60,61,0,111,112,101,114,97,116,111,114,34,34,32,0,111,112,101,114,97,116,111,114,60,60,0,111,112,101,114,97,116,111,114,60,60,61,0,111,112,101,114,97,116,111,114,60,0,111,112,101,114,97,116,111,114,45,0,111,112,101,114,97,116,111,114,45,61,0,111,112,101,114,97,116,111,114,42,61,0,111,112,101,114,97,116,111,114,45,45,0,111,112,101,114,97,116,111,114,32,110,101,119,91,93,0,111,112,101,114,97,116,111,114,33,61,0,111,112,101,114,97,116,111,114,33,0,111,112,101,114,97,116,111,114,32,110,101,119,0,111,112,101,114,97,116,111,114,124,124,0,111,112,101,114,97,116,111,114,124,0,111,112,101,114,97,116,111,114,124,61,0,111,112,101,114,97,116,111,114,45,62,42,0,111,112,101,114,97,116,111,114,43,0,111,112,101,114,97,116,111,114,43,61,0,111,112,101,114,97,116,111,114,43,43,0,111,112,101,114,97,116,111,114,45,62,0,111,112,101,114,97,116,111,114,63,0,111,112,101,114,97,116,111,114,37,0,111,112,101,114,97,116,111,114,37,61,0,111,112,101,114,97,116,111,114,62,62,0,111,112,101,114,97,116,111,114,62,62,61,0,111,112,101,114,97,116,111,114,32,100,101,108,101,116,101,0,39,117,110,110,97,109,101,100,0,39,108,97,109,98,100,97,39,40,0,115,116,100,58,58,115,116,114,105,110,103,0,115,116,100,58,58,98,97,115,105,99,95,115,116,114,105,110,103,60,99,104,97,114,44,32,115,116,100,58,58,99,104,97,114,95,116,114,97,105,116,115,60,99,104,97,114,62,44,32,115,116,100,58,58,97,108,108,111,99,97,116,111,114,60,99,104,97,114,62,32,62,0,98,97,115,105,99,95,115,116,114,105,110,103,0,115,116,100,58,58,105,115,116,114,101,97,109,0,115,116,100,58,58,98,97,115,105,99,95,105,115,116,114,101,97,109,60,99,104,97,114,44,32,115,116,100,58,58,99,104,97,114,95,116,114,97,105,116,115,60,99,104,97,114,62,32,62,0,98,97,115,105,99,95,105,115,116,114,101,97,109,0,115,116,100,58,58,111,115,116,114,101,97,109,0,115,116,100,58,58,98,97,115,105,99,95,111,115,116,114,101,97,109,60,99,104,97,114,44,32,115,116,100,58,58,99,104,97,114,95,116,114,97,105,116,115,60,99,104,97,114,62,32,62,0,98,97,115,105,99,95,111,115,116,114,101,97,109,0,115,116,100,58,58,105,111,115,116,114,101,97,109,0,115,116,100,58,58,98,97,115,105,99,95,105,111,115,116,114,101,97,109,60,99,104,97,114,44,32,115,116,100,58,58,99,104,97,114,95,116,114,97,105,116,115,60,99,104,97,114,62,32,62,0,98,97,115,105,99,95,105,111,115,116,114,101,97,109,0,100,121,110,97,109,105,99,95,99,97,115,116,60,0,41,40,0,99,111,110,115,116,95,99,97,115,116,60,0,97,108,105,103,110,111,102,32,40,0,102,112,0,119,99,104,97,114,95,116,0,102,97,108,115,101,0,116,114,117,101,0,99,104,97,114,0,115,105,103,110,101,100,32,99,104,97,114,0,117,110,115,105,103,110,101,100,32,99,104,97,114,0,115,104,111,114,116,0,117,110,115,105,103,110,101,100,32,115,104,111,114,116,0,117,0,108,0,117,108,0,108,108,0,117,108,108,0,95,95,105,110,116,49,50,56,0,117,110,115,105,103,110,101,100,32,95,95,105,110,116,49,50,56,0,37,76,97,76,0,37,97,0,37,97,102,0,100,101,99,108,116,121,112,101,40,0,115,116,100,58,58,97,108,108,111,99,97,116,111,114,0,115,116,100,58,58,98,97,115,105,99,95,115,116,114,105,110,103,0,58,58,115,116,114,105,110,103,32,108,105,116,101,114,97,108,0,115,116,100,0,95,71,76,79,66,65,76,95,95,78,0,40,97,110,111,110,121,109,111,117,115,32,110,97,109,101,115,112,97,99,101,41,0,32,62,0,84,95,0,105,100,0,58,58,42,0,32,38,0,32,38,38,0,32,91,93,0,118,111,105,100,0,98,111,111,108,0,105,110,116,0,117,110,115,105,103,110,101,100,32,105,110,116,0,108,111,110,103,0,117,110,115,105,103,110,101,100,32,108,111,110,103,0,108,111,110,103,32,108,111,110,103,0,102,108,111,97,116,0,108,111,110,103,32,100,111,117,98,108,101,0,95,95,102,108,111,97,116,49,50,56,0,46,46,46,0,100,101,99,105,109,97,108,54,52,0,100,101,99,105,109,97,108,49,50,56,0,100,101,99,105,109,97,108,51,50,0,100,101,99,105,109,97,108,49,54,0,99,104,97,114,51,50,95,116,0,99,104,97,114,49,54,95,116,0,97,117,116,111,0,115,116,100,58,58,110,117,108,108,112,116,114,95,116,0,100,111,117,98,108,101,0,117,110,115,105,103,110,101,100,32,108,111,110,103,32,108,111,110,103,0,95,98,108,111,99,107,95,105,110,118,111,107,101,0,105,110,118,111,99,97,116,105,111,110,32,102,117,110,99,116,105,111,110,32,102,111,114,32,98,108,111,99,107,32,105,110,32,0,118,116,97,98,108,101,32,102,111,114,32,0,86,84,84,32,102,111,114,32,0,116,121,112,101,105,110,102,111,32,102,111,114,32,0,116,121,112,101,105,110,102,111,32,110,97,109,101,32,102,111,114,32,0,99,111,118,97,114,105,97,110,116,32,114,101,116,117,114,110,32,116,104,117,110,107,32,116,111,32,0,99,111,110,115,116,114,117,99,116,105,111,110,32,118,116,97,98,108,101,32,102,111,114,32,0,45,105,110,45,0,118,105,114,116,117,97,108,32,116,104,117,110,107,32,116,111,32,0,110,111,110,45,118,105,114,116,117,97,108,32,116,104,117,110,107,32,116,111,32,0,103,117,97,114,100,32,118,97,114,105,97,98,108,101,32,102,111,114,32,0,114,101,102,101,114,101,110,99,101,32,116,101,109,112,111,114,97,114,121,32,102,111,114,32,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


   
  Module["_i64Subtract"] = _i64Subtract;

   
  Module["_i64Add"] = _i64Add;

  
  
  
  function embind_init_charCodes() {
      var codes = new Array(256);
      for (var i = 0; i < 256; ++i) {
          codes[i] = String.fromCharCode(i);
      }
      embind_charCodes = codes;
    }var embind_charCodes=undefined;function readLatin1String(ptr) {
      var ret = "";
      var c = ptr;
      while (HEAPU8[c]) {
          ret += embind_charCodes[HEAPU8[c++]];
      }
      return ret;
    }
  
  
  var awaitingDependencies={};
  
  var registeredTypes={};
  
  var typeDependencies={};
  
  
  
  
  
  
  var char_0=48;
  
  var char_9=57;function makeLegalFunctionName(name) {
      if (undefined === name) {
          return '_unknown';
      }
      name = name.replace(/[^a-zA-Z0-9_]/g, '$');
      var f = name.charCodeAt(0);
      if (f >= char_0 && f <= char_9) {
          return '_' + name;
      } else {
          return name;
      }
    }function createNamedFunction(name, body) {
      name = makeLegalFunctionName(name);
      /*jshint evil:true*/
      return new Function(
          "body",
          "return function " + name + "() {\n" +
          "    \"use strict\";" +
          "    return body.apply(this, arguments);\n" +
          "};\n"
      )(body);
    }function extendError(baseErrorType, errorName) {
      var errorClass = createNamedFunction(errorName, function(message) {
          this.name = errorName;
          this.message = message;
  
          var stack = (new Error(message)).stack;
          if (stack !== undefined) {
              this.stack = this.toString() + '\n' +
                  stack.replace(/^Error(:[^\n]*)?\n/, '');
          }
      });
      errorClass.prototype = Object.create(baseErrorType.prototype);
      errorClass.prototype.constructor = errorClass;
      errorClass.prototype.toString = function() {
          if (this.message === undefined) {
              return this.name;
          } else {
              return this.name + ': ' + this.message;
          }
      };
  
      return errorClass;
    }var BindingError=undefined;function throwBindingError(message) {
      throw new BindingError(message);
    }
  
  
  
  var InternalError=undefined;function throwInternalError(message) {
      throw new InternalError(message);
    }function whenDependentTypesAreResolved(myTypes, dependentTypes, getTypeConverters) {
      myTypes.forEach(function(type) {
          typeDependencies[type] = dependentTypes;
      });
  
      function onComplete(typeConverters) {
          var myTypeConverters = getTypeConverters(typeConverters);
          if (myTypeConverters.length !== myTypes.length) {
              throwInternalError('Mismatched type converter count');
          }
          for (var i = 0; i < myTypes.length; ++i) {
              registerType(myTypes[i], myTypeConverters[i]);
          }
      }
  
      var typeConverters = new Array(dependentTypes.length);
      var unregisteredTypes = [];
      var registered = 0;
      dependentTypes.forEach(function(dt, i) {
          if (registeredTypes.hasOwnProperty(dt)) {
              typeConverters[i] = registeredTypes[dt];
          } else {
              unregisteredTypes.push(dt);
              if (!awaitingDependencies.hasOwnProperty(dt)) {
                  awaitingDependencies[dt] = [];
              }
              awaitingDependencies[dt].push(function() {
                  typeConverters[i] = registeredTypes[dt];
                  ++registered;
                  if (registered === unregisteredTypes.length) {
                      onComplete(typeConverters);
                  }
              });
          }
      });
      if (0 === unregisteredTypes.length) {
          onComplete(typeConverters);
      }
    }function registerType(rawType, registeredInstance, options) {
      options = options || {};
  
      if (!('argPackAdvance' in registeredInstance)) {
          throw new TypeError('registerType registeredInstance requires argPackAdvance');
      }
  
      var name = registeredInstance.name;
      if (!rawType) {
          throwBindingError('type "' + name + '" must have a positive integer typeid pointer');
      }
      if (registeredTypes.hasOwnProperty(rawType)) {
          if (options.ignoreDuplicateRegistrations) {
              return;
          } else {
              throwBindingError("Cannot register type '" + name + "' twice");
          }
      }
  
      registeredTypes[rawType] = registeredInstance;
      delete typeDependencies[rawType];
  
      if (awaitingDependencies.hasOwnProperty(rawType)) {
          var callbacks = awaitingDependencies[rawType];
          delete awaitingDependencies[rawType];
          callbacks.forEach(function(cb) {
              cb();
          });
      }
    }function __embind_register_void(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          isVoid: true, // void return values can be optimized out sometimes
          name: name,
          'argPackAdvance': 0,
          'fromWireType': function() {
              return undefined;
          },
          'toWireType': function(destructors, o) {
              // TODO: assert if anything else is given?
              return undefined;
          },
      });
    }

  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        // A rethrown exception can reach refcount 0; it must not be discarded
        // Its next handler will clear the rethrown flag and addRef it, prior to
        // final decRef and destruction here
        if (info.refcount === 0 && !info.rethrown) {
          if (info.destructor) {
            Module['dynCall_vi'](info.destructor, ptr);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      throw ptr;
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((Runtime.setTempRet0(0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((Runtime.setTempRet0(0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((Runtime.setTempRet0(typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((Runtime.setTempRet0(throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      EXCEPTIONS.infos[ptr] = {
        ptr: ptr,
        adjusted: ptr,
        type: type,
        destructor: destructor,
        refcount: 0,
        caught: false,
        rethrown: false
      };
      EXCEPTIONS.last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr;
    }

   
  Module["_memset"] = _memset;

  
  function getShiftFromSize(size) {
      switch (size) {
          case 1: return 0;
          case 2: return 1;
          case 4: return 2;
          case 8: return 3;
          default:
              throw new TypeError('Unknown type size: ' + size);
      }
    }function __embind_register_bool(rawType, name, size, trueValue, falseValue) {
      var shift = getShiftFromSize(size);
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(wt) {
              // ambiguous emscripten ABI: sometimes return values are
              // true or false, and sometimes integers (0 or 1)
              return !!wt;
          },
          'toWireType': function(destructors, o) {
              return o ? trueValue : falseValue;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': function(pointer) {
              // TODO: if heap is fixed (like in asm.js) this could be executed outside
              var heap;
              if (size === 1) {
                  heap = HEAP8;
              } else if (size === 2) {
                  heap = HEAP16;
              } else if (size === 4) {
                  heap = HEAP32;
              } else {
                  throw new TypeError("Unknown boolean type size: " + name);
              }
              return this['fromWireType'](heap[pointer >> shift]);
          },
          destructorFunction: null, // This type does not need a destructor
      });
    }

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _abort() {
      Module['abort']();
    }

  
  
  function _free() {
  }
  Module["_free"] = _free;function ___cxa_free_exception(ptr) {
      try {
        return _free(ptr);
      } catch(e) { // XXX FIXME
        Module.printErr('exception during cxa_free_exception: ' + e);
      }
    }function ___cxa_end_catch() {
      // Clear state flag.
      Module['setThrew'](0);
      // Call destructor if one is registered then clear it.
      var ptr = EXCEPTIONS.caught.pop();
      if (ptr) {
        EXCEPTIONS.decRef(EXCEPTIONS.deAdjust(ptr));
        EXCEPTIONS.last = 0; // XXX in decRef?
      }
    }


  function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return;
      Module['dynCall_v'](func);
      _pthread_once.seen[ptr] = 1;
    }

  
  
  
  function ClassHandle_isAliasOf(other) {
      if (!(this instanceof ClassHandle)) {
          return false;
      }
      if (!(other instanceof ClassHandle)) {
          return false;
      }
  
      var leftClass = this.$$.ptrType.registeredClass;
      var left = this.$$.ptr;
      var rightClass = other.$$.ptrType.registeredClass;
      var right = other.$$.ptr;
  
      while (leftClass.baseClass) {
          left = leftClass.upcast(left);
          leftClass = leftClass.baseClass;
      }
  
      while (rightClass.baseClass) {
          right = rightClass.upcast(right);
          rightClass = rightClass.baseClass;
      }
  
      return leftClass === rightClass && left === right;
    }
  
  
  function shallowCopyInternalPointer(o) {
      return {
          count: o.count,
          deleteScheduled: o.deleteScheduled,
          preservePointerOnDelete: o.preservePointerOnDelete,
          ptr: o.ptr,
          ptrType: o.ptrType,
          smartPtr: o.smartPtr,
          smartPtrType: o.smartPtrType,
      };
    }
  
  function throwInstanceAlreadyDeleted(obj) {
      function getInstanceTypeName(handle) {
        return handle.$$.ptrType.registeredClass.name;
      }
      throwBindingError(getInstanceTypeName(obj) + ' instance already deleted');
    }function ClassHandle_clone() {
      if (!this.$$.ptr) {
          throwInstanceAlreadyDeleted(this);
      }
  
      if (this.$$.preservePointerOnDelete) {
          this.$$.count.value += 1;
          return this;
      } else {
          var clone = Object.create(Object.getPrototypeOf(this), {
              $$: {
                  value: shallowCopyInternalPointer(this.$$),
              }
          });
  
          clone.$$.count.value += 1;
          clone.$$.deleteScheduled = false;
          return clone;
      }
    }
  
  
  function runDestructor(handle) {
      var $$ = handle.$$;
      if ($$.smartPtr) {
          $$.smartPtrType.rawDestructor($$.smartPtr);
      } else {
          $$.ptrType.registeredClass.rawDestructor($$.ptr);
      }
    }function ClassHandle_delete() {
      if (!this.$$.ptr) {
          throwInstanceAlreadyDeleted(this);
      }
  
      if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
          throwBindingError('Object already scheduled for deletion');
      }
  
      this.$$.count.value -= 1;
      var toDelete = 0 === this.$$.count.value;
      if (toDelete) {
          runDestructor(this);
      }
      if (!this.$$.preservePointerOnDelete) {
          this.$$.smartPtr = undefined;
          this.$$.ptr = undefined;
      }
    }
  
  function ClassHandle_isDeleted() {
      return !this.$$.ptr;
    }
  
  
  var delayFunction=undefined;
  
  var deletionQueue=[];
  
  function flushPendingDeletes() {
      while (deletionQueue.length) {
          var obj = deletionQueue.pop();
          obj.$$.deleteScheduled = false;
          obj['delete']();
      }
    }function ClassHandle_deleteLater() {
      if (!this.$$.ptr) {
          throwInstanceAlreadyDeleted(this);
      }
      if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
          throwBindingError('Object already scheduled for deletion');
      }
      deletionQueue.push(this);
      if (deletionQueue.length === 1 && delayFunction) {
          delayFunction(flushPendingDeletes);
      }
      this.$$.deleteScheduled = true;
      return this;
    }function init_ClassHandle() {
      ClassHandle.prototype['isAliasOf'] = ClassHandle_isAliasOf;
      ClassHandle.prototype['clone'] = ClassHandle_clone;
      ClassHandle.prototype['delete'] = ClassHandle_delete;
      ClassHandle.prototype['isDeleted'] = ClassHandle_isDeleted;
      ClassHandle.prototype['deleteLater'] = ClassHandle_deleteLater;
    }function ClassHandle() {
    }
  
  var registeredPointers={};
  
  
  function ensureOverloadTable(proto, methodName, humanName) {
      if (undefined === proto[methodName].overloadTable) {
          var prevFunc = proto[methodName];
          // Inject an overload resolver function that routes to the appropriate overload based on the number of arguments.
          proto[methodName] = function() {
              // TODO This check can be removed in -O3 level "unsafe" optimizations.
              if (!proto[methodName].overloadTable.hasOwnProperty(arguments.length)) {
                  throwBindingError("Function '" + humanName + "' called with an invalid number of arguments (" + arguments.length + ") - expects one of (" + proto[methodName].overloadTable + ")!");
              }
              return proto[methodName].overloadTable[arguments.length].apply(this, arguments);
          };
          // Move the previous function into the overload table.
          proto[methodName].overloadTable = [];
          proto[methodName].overloadTable[prevFunc.argCount] = prevFunc;
      }
    }function exposePublicSymbol(name, value, numArguments) {
      if (Module.hasOwnProperty(name)) {
          if (undefined === numArguments || (undefined !== Module[name].overloadTable && undefined !== Module[name].overloadTable[numArguments])) {
              throwBindingError("Cannot register public name '" + name + "' twice");
          }
  
          // We are exposing a function with the same name as an existing function. Create an overload table and a function selector
          // that routes between the two.
          ensureOverloadTable(Module, name, name);
          if (Module.hasOwnProperty(numArguments)) {
              throwBindingError("Cannot register multiple overloads of a function with the same number of arguments (" + numArguments + ")!");
          }
          // Add the new function into the overload table.
          Module[name].overloadTable[numArguments] = value;
      }
      else {
          Module[name] = value;
          if (undefined !== numArguments) {
              Module[name].numArguments = numArguments;
          }
      }
    }
  
  function RegisteredClass(
      name,
      constructor,
      instancePrototype,
      rawDestructor,
      baseClass,
      getActualType,
      upcast,
      downcast
    ) {
      this.name = name;
      this.constructor = constructor;
      this.instancePrototype = instancePrototype;
      this.rawDestructor = rawDestructor;
      this.baseClass = baseClass;
      this.getActualType = getActualType;
      this.upcast = upcast;
      this.downcast = downcast;
      this.pureVirtualFunctions = [];
    }
  
  
  
  function upcastPointer(ptr, ptrClass, desiredClass) {
      while (ptrClass !== desiredClass) {
          if (!ptrClass.upcast) {
              throwBindingError("Expected null or instance of " + desiredClass.name + ", got an instance of " + ptrClass.name);
          }
          ptr = ptrClass.upcast(ptr);
          ptrClass = ptrClass.baseClass;
      }
      return ptr;
    }function constNoSmartPtrRawPointerToWireType(destructors, handle) {
      if (handle === null) {
          if (this.isReference) {
              throwBindingError('null is not a valid ' + this.name);
          }
          return 0;
      }
  
      if (!handle.$$) {
          throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
          throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
      return ptr;
    }
  
  function genericPointerToWireType(destructors, handle) {
      if (handle === null) {
          if (this.isReference) {
              throwBindingError('null is not a valid ' + this.name);
          }
  
          if (this.isSmartPointer) {
              var ptr = this.rawConstructor();
              if (destructors !== null) {
                  destructors.push(this.rawDestructor, ptr);
              }
              return ptr;
          } else {
              return 0;
          }
      }
  
      if (!handle.$$) {
          throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
          throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      if (!this.isConst && handle.$$.ptrType.isConst) {
          throwBindingError('Cannot convert argument of type ' + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + ' to parameter type ' + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
  
      if (this.isSmartPointer) {
          // TODO: this is not strictly true
          // We could support BY_EMVAL conversions from raw pointers to smart pointers
          // because the smart pointer can hold a reference to the handle
          if (undefined === handle.$$.smartPtr) {
              throwBindingError('Passing raw pointer to smart pointer is illegal');
          }
  
          switch (this.sharingPolicy) {
              case 0: // NONE
                  // no upcasting
                  if (handle.$$.smartPtrType === this) {
                      ptr = handle.$$.smartPtr;
                  } else {
                      throwBindingError('Cannot convert argument of type ' + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + ' to parameter type ' + this.name);
                  }
                  break;
  
              case 1: // INTRUSIVE
                  ptr = handle.$$.smartPtr;
                  break;
  
              case 2: // BY_EMVAL
                  if (handle.$$.smartPtrType === this) {
                      ptr = handle.$$.smartPtr;
                  } else {
                      var clonedHandle = handle['clone']();
                      ptr = this.rawShare(
                          ptr,
                          __emval_register(function() {
                              clonedHandle['delete']();
                          })
                      );
                      if (destructors !== null) {
                          destructors.push(this.rawDestructor, ptr);
                      }
                  }
                  break;
  
              default:
                  throwBindingError('Unsupporting sharing policy');
          }
      }
      return ptr;
    }
  
  function nonConstNoSmartPtrRawPointerToWireType(destructors, handle) {
      if (handle === null) {
          if (this.isReference) {
              throwBindingError('null is not a valid ' + this.name);
          }
          return 0;
      }
  
      if (!handle.$$) {
          throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
          throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      if (handle.$$.ptrType.isConst) {
          throwBindingError('Cannot convert argument of type ' + handle.$$.ptrType.name + ' to parameter type ' + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
      return ptr;
    }
  
  
  function simpleReadValueFromPointer(pointer) {
      return this['fromWireType'](HEAPU32[pointer >> 2]);
    }
  
  function RegisteredPointer_getPointee(ptr) {
      if (this.rawGetPointee) {
          ptr = this.rawGetPointee(ptr);
      }
      return ptr;
    }
  
  function RegisteredPointer_destructor(ptr) {
      if (this.rawDestructor) {
          this.rawDestructor(ptr);
      }
    }
  
  function RegisteredPointer_deleteObject(handle) {
      if (handle !== null) {
          handle['delete']();
      }
    }
  
  
  function downcastPointer(ptr, ptrClass, desiredClass) {
      if (ptrClass === desiredClass) {
          return ptr;
      }
      if (undefined === desiredClass.baseClass) {
          return null; // no conversion
      }
  
      var rv = downcastPointer(ptr, ptrClass, desiredClass.baseClass);
      if (rv === null) {
          return null;
      }
      return desiredClass.downcast(rv);
    }
  
  
  
  
  function getInheritedInstanceCount() {
      return Object.keys(registeredInstances).length;
    }
  
  function getLiveInheritedInstances() {
      var rv = [];
      for (var k in registeredInstances) {
          if (registeredInstances.hasOwnProperty(k)) {
              rv.push(registeredInstances[k]);
          }
      }
      return rv;
    }
  
  function setDelayFunction(fn) {
      delayFunction = fn;
      if (deletionQueue.length && delayFunction) {
          delayFunction(flushPendingDeletes);
      }
    }function init_embind() {
      Module['getInheritedInstanceCount'] = getInheritedInstanceCount;
      Module['getLiveInheritedInstances'] = getLiveInheritedInstances;
      Module['flushPendingDeletes'] = flushPendingDeletes;
      Module['setDelayFunction'] = setDelayFunction;
    }var registeredInstances={};
  
  function getBasestPointer(class_, ptr) {
      if (ptr === undefined) {
          throwBindingError('ptr should not be undefined');
      }
      while (class_.baseClass) {
          ptr = class_.upcast(ptr);
          class_ = class_.baseClass;
      }
      return ptr;
    }function getInheritedInstance(class_, ptr) {
      ptr = getBasestPointer(class_, ptr);
      return registeredInstances[ptr];
    }
  
  function makeClassHandle(prototype, record) {
      if (!record.ptrType || !record.ptr) {
          throwInternalError('makeClassHandle requires ptr and ptrType');
      }
      var hasSmartPtrType = !!record.smartPtrType;
      var hasSmartPtr = !!record.smartPtr;
      if (hasSmartPtrType !== hasSmartPtr) {
          throwInternalError('Both smartPtrType and smartPtr must be specified');
      }
      record.count = { value: 1 };
      return Object.create(prototype, {
          $$: {
              value: record,
          },
      });
    }function RegisteredPointer_fromWireType(ptr) {
      // ptr is a raw pointer (or a raw smartpointer)
  
      // rawPointer is a maybe-null raw pointer
      var rawPointer = this.getPointee(ptr);
      if (!rawPointer) {
          this.destructor(ptr);
          return null;
      }
  
      var registeredInstance = getInheritedInstance(this.registeredClass, rawPointer);
      if (undefined !== registeredInstance) {
          // JS object has been neutered, time to repopulate it
          if (0 === registeredInstance.$$.count.value) {
              registeredInstance.$$.ptr = rawPointer;
              registeredInstance.$$.smartPtr = ptr;
              return registeredInstance['clone']();
          } else {
              // else, just increment reference count on existing object
              // it already has a reference to the smart pointer
              var rv = registeredInstance['clone']();
              this.destructor(ptr);
              return rv;
          }
      }
  
      function makeDefaultHandle() {
          if (this.isSmartPointer) {
              return makeClassHandle(this.registeredClass.instancePrototype, {
                  ptrType: this.pointeeType,
                  ptr: rawPointer,
                  smartPtrType: this,
                  smartPtr: ptr,
              });
          } else {
              return makeClassHandle(this.registeredClass.instancePrototype, {
                  ptrType: this,
                  ptr: ptr,
              });
          }
      }
  
      var actualType = this.registeredClass.getActualType(rawPointer);
      var registeredPointerRecord = registeredPointers[actualType];
      if (!registeredPointerRecord) {
          return makeDefaultHandle.call(this);
      }
  
      var toType;
      if (this.isConst) {
          toType = registeredPointerRecord.constPointerType;
      } else {
          toType = registeredPointerRecord.pointerType;
      }
      var dp = downcastPointer(
          rawPointer,
          this.registeredClass,
          toType.registeredClass);
      if (dp === null) {
          return makeDefaultHandle.call(this);
      }
      if (this.isSmartPointer) {
          return makeClassHandle(toType.registeredClass.instancePrototype, {
              ptrType: toType,
              ptr: dp,
              smartPtrType: this,
              smartPtr: ptr,
          });
      } else {
          return makeClassHandle(toType.registeredClass.instancePrototype, {
              ptrType: toType,
              ptr: dp,
          });
      }
    }function init_RegisteredPointer() {
      RegisteredPointer.prototype.getPointee = RegisteredPointer_getPointee;
      RegisteredPointer.prototype.destructor = RegisteredPointer_destructor;
      RegisteredPointer.prototype['argPackAdvance'] = 8;
      RegisteredPointer.prototype['readValueFromPointer'] = simpleReadValueFromPointer;
      RegisteredPointer.prototype['deleteObject'] = RegisteredPointer_deleteObject;
      RegisteredPointer.prototype['fromWireType'] = RegisteredPointer_fromWireType;
    }function RegisteredPointer(
      name,
      registeredClass,
      isReference,
      isConst,
  
      // smart pointer properties
      isSmartPointer,
      pointeeType,
      sharingPolicy,
      rawGetPointee,
      rawConstructor,
      rawShare,
      rawDestructor
    ) {
      this.name = name;
      this.registeredClass = registeredClass;
      this.isReference = isReference;
      this.isConst = isConst;
  
      // smart pointer properties
      this.isSmartPointer = isSmartPointer;
      this.pointeeType = pointeeType;
      this.sharingPolicy = sharingPolicy;
      this.rawGetPointee = rawGetPointee;
      this.rawConstructor = rawConstructor;
      this.rawShare = rawShare;
      this.rawDestructor = rawDestructor;
  
      if (!isSmartPointer && registeredClass.baseClass === undefined) {
          if (isConst) {
              this['toWireType'] = constNoSmartPtrRawPointerToWireType;
              this.destructorFunction = null;
          } else {
              this['toWireType'] = nonConstNoSmartPtrRawPointerToWireType;
              this.destructorFunction = null;
          }
      } else {
          this['toWireType'] = genericPointerToWireType;
          // Here we must leave this.destructorFunction undefined, since whether genericPointerToWireType returns
          // a pointer that needs to be freed up is runtime-dependent, and cannot be evaluated at registration time.
          // TODO: Create an alternative mechanism that allows removing the use of var destructors = []; array in
          //       craftInvokerFunction altogether.
      }
    }
  
  function replacePublicSymbol(name, value, numArguments) {
      if (!Module.hasOwnProperty(name)) {
          throwInternalError('Replacing nonexistant public symbol');
      }
      // If there's an overload table for this symbol, replace the symbol in the overload table instead.
      if (undefined !== Module[name].overloadTable && undefined !== numArguments) {
          Module[name].overloadTable[numArguments] = value;
      }
      else {
          Module[name] = value;
          Module[name].argCount = numArguments;
      }
    }
  
  function requireFunction(signature, rawFunction) {
      signature = readLatin1String(signature);
  
      function makeDynCaller(dynCall) {
          var args = [];
          for (var i = 1; i < signature.length; ++i) {
              args.push('a' + i);
          }
  
          var name = 'dynCall_' + signature + '_' + rawFunction;
          var body = 'return function ' + name + '(' + args.join(', ') + ') {\n';
          body    += '    return dynCall(rawFunction' + (args.length ? ', ' : '') + args.join(', ') + ');\n';
          body    += '};\n';
  
          return (new Function('dynCall', 'rawFunction', body))(dynCall, rawFunction);
      }
  
      var fp;
      if (Module['FUNCTION_TABLE_' + signature] !== undefined) {
          fp = Module['FUNCTION_TABLE_' + signature][rawFunction];
      } else if (typeof FUNCTION_TABLE !== "undefined") {
          fp = FUNCTION_TABLE[rawFunction];
      } else {
          // asm.js does not give direct access to the function tables,
          // and thus we must go through the dynCall interface which allows
          // calling into a signature's function table by pointer value.
          //
          // https://github.com/dherman/asm.js/issues/83
          //
          // This has three main penalties:
          // - dynCall is another function call in the path from JavaScript to C++.
          // - JITs may not predict through the function table indirection at runtime.
          var dc = Module["asm"]['dynCall_' + signature];
          if (dc === undefined) {
              // We will always enter this branch if the signature
              // contains 'f' and PRECISE_F32 is not enabled.
              //
              // Try again, replacing 'f' with 'd'.
              dc = Module["asm"]['dynCall_' + signature.replace(/f/g, 'd')];
              if (dc === undefined) {
                  throwBindingError("No dynCall invoker for signature: " + signature);
              }
          }
          fp = makeDynCaller(dc);
      }
  
      if (typeof fp !== "function") {
          throwBindingError("unknown function pointer with signature " + signature + ": " + rawFunction);
      }
      return fp;
    }
  
  
  var UnboundTypeError=undefined;
  
  function getTypeName(type) {
      var ptr = ___getTypeName(type);
      var rv = readLatin1String(ptr);
      _free(ptr);
      return rv;
    }function throwUnboundTypeError(message, types) {
      var unboundTypes = [];
      var seen = {};
      function visit(type) {
          if (seen[type]) {
              return;
          }
          if (registeredTypes[type]) {
              return;
          }
          if (typeDependencies[type]) {
              typeDependencies[type].forEach(visit);
              return;
          }
          unboundTypes.push(type);
          seen[type] = true;
      }
      types.forEach(visit);
  
      throw new UnboundTypeError(message + ': ' + unboundTypes.map(getTypeName).join([', ']));
    }function __embind_register_class(
      rawType,
      rawPointerType,
      rawConstPointerType,
      baseClassRawType,
      getActualTypeSignature,
      getActualType,
      upcastSignature,
      upcast,
      downcastSignature,
      downcast,
      name,
      destructorSignature,
      rawDestructor
    ) {
      name = readLatin1String(name);
      getActualType = requireFunction(getActualTypeSignature, getActualType);
      if (upcast) {
          upcast = requireFunction(upcastSignature, upcast);
      }
      if (downcast) {
          downcast = requireFunction(downcastSignature, downcast);
      }
      rawDestructor = requireFunction(destructorSignature, rawDestructor);
      var legalFunctionName = makeLegalFunctionName(name);
  
      exposePublicSymbol(legalFunctionName, function() {
          // this code cannot run if baseClassRawType is zero
          throwUnboundTypeError('Cannot construct ' + name + ' due to unbound types', [baseClassRawType]);
      });
  
      whenDependentTypesAreResolved(
          [rawType, rawPointerType, rawConstPointerType],
          baseClassRawType ? [baseClassRawType] : [],
          function(base) {
              base = base[0];
  
              var baseClass;
              var basePrototype;
              if (baseClassRawType) {
                  baseClass = base.registeredClass;
                  basePrototype = baseClass.instancePrototype;
              } else {
                  basePrototype = ClassHandle.prototype;
              }
  
              var constructor = createNamedFunction(legalFunctionName, function() {
                  if (Object.getPrototypeOf(this) !== instancePrototype) {
                      throw new BindingError("Use 'new' to construct " + name);
                  }
                  if (undefined === registeredClass.constructor_body) {
                      throw new BindingError(name + " has no accessible constructor");
                  }
                  var body = registeredClass.constructor_body[arguments.length];
                  if (undefined === body) {
                      throw new BindingError("Tried to invoke ctor of " + name + " with invalid number of parameters (" + arguments.length + ") - expected (" + Object.keys(registeredClass.constructor_body).toString() + ") parameters instead!");
                  }
                  return body.apply(this, arguments);
              });
  
              var instancePrototype = Object.create(basePrototype, {
                  constructor: { value: constructor },
              });
  
              constructor.prototype = instancePrototype;
  
              var registeredClass = new RegisteredClass(
                  name,
                  constructor,
                  instancePrototype,
                  rawDestructor,
                  baseClass,
                  getActualType,
                  upcast,
                  downcast);
  
              var referenceConverter = new RegisteredPointer(
                  name,
                  registeredClass,
                  true,
                  false,
                  false);
  
              var pointerConverter = new RegisteredPointer(
                  name + '*',
                  registeredClass,
                  false,
                  false,
                  false);
  
              var constPointerConverter = new RegisteredPointer(
                  name + ' const*',
                  registeredClass,
                  false,
                  true,
                  false);
  
              registeredPointers[rawType] = {
                  pointerType: pointerConverter,
                  constPointerType: constPointerConverter
              };
  
              replacePublicSymbol(legalFunctionName, constructor);
  
              return [referenceConverter, pointerConverter, constPointerConverter];
          }
      );
    }

  
  function _malloc(bytes) {
      /* Over-allocate to make sure it is byte-aligned by 8.
       * This will leak memory, but this is only the dummy
       * implementation (replaced by dlmalloc normally) so
       * not an issue.
       */
      var ptr = Runtime.dynamicAlloc(bytes + 8);
      return (ptr+8) & 0xFFFFFFF8;
    }
  Module["_malloc"] = _malloc;function __embind_register_std_string(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              var length = HEAPU32[value >> 2];
              var a = new Array(length);
              for (var i = 0; i < length; ++i) {
                  a[i] = String.fromCharCode(HEAPU8[value + 4 + i]);
              }
              _free(value);
              return a.join('');
          },
          'toWireType': function(destructors, value) {
              if (value instanceof ArrayBuffer) {
                  value = new Uint8Array(value);
              }
  
              function getTAElement(ta, index) {
                  return ta[index];
              }
              function getStringElement(string, index) {
                  return string.charCodeAt(index);
              }
              var getElement;
              if (value instanceof Uint8Array) {
                  getElement = getTAElement;
              } else if (value instanceof Uint8ClampedArray) {
                  getElement = getTAElement;
              } else if (value instanceof Int8Array) {
                  getElement = getTAElement;
              } else if (typeof value === 'string') {
                  getElement = getStringElement;
              } else {
                  throwBindingError('Cannot pass non-string to std::string');
              }
  
              // assumes 4-byte alignment
              var length = value.length;
              var ptr = _malloc(4 + length);
              HEAPU32[ptr >> 2] = length;
              for (var i = 0; i < length; ++i) {
                  var charCode = getElement(value, i);
                  if (charCode > 255) {
                      _free(ptr);
                      throwBindingError('String has UTF-16 code units that do not fit in 8 bits');
                  }
                  HEAPU8[ptr + 4 + i] = charCode;
              }
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  function ___lock() {}

  function ___unlock() {}

  
  var emval_free_list=[];
  
  var emval_handle_array=[{},{value:undefined},{value:null},{value:true},{value:false}];function __emval_decref(handle) {
      if (handle > 4 && 0 === --emval_handle_array[handle].refcount) {
          emval_handle_array[handle] = undefined;
          emval_free_list.push(handle);
      }
    }

  
  var PTHREAD_SPECIFIC={};function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

  function _clock() {
      if (_clock.start === undefined) _clock.start = Date.now();
      return ((Date.now() - _clock.start) * (1000000 / 1000))|0;
    }

  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

  
  
  
  function count_emval_handles() {
      var count = 0;
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              ++count;
          }
      }
      return count;
    }
  
  function get_first_emval() {
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              return emval_handle_array[i];
          }
      }
      return null;
    }function init_emval() {
      Module['count_emval_handles'] = count_emval_handles;
      Module['get_first_emval'] = get_first_emval;
    }function __emval_register(value) {
  
      switch(value){
        case undefined :{ return 1; }
        case null :{ return 2; }
        case true :{ return 3; }
        case false :{ return 4; }
        default:{
          var handle = emval_free_list.length ?
              emval_free_list.pop() :
              emval_handle_array.length;
  
          emval_handle_array[handle] = {refcount: 1, value: value};
          return handle;
          }
        }
    }
  
  function requireRegisteredType(rawType, humanName) {
      var impl = registeredTypes[rawType];
      if (undefined === impl) {
          throwBindingError(humanName + " has unknown type " + getTypeName(rawType));
      }
      return impl;
    }function __emval_take_value(type, argv) {
      type = requireRegisteredType(type, '_emval_take_value');
      var v = type['readValueFromPointer'](argv);
      return __emval_register(v);
    }

  
  function _embind_repr(v) {
      if (v === null) {
          return 'null';
      }
      var t = typeof v;
      if (t === 'object' || t === 'array' || t === 'function') {
          return v.toString();
      } else {
          return '' + v;
      }
    }
  
  function integerReadValueFromPointer(name, shift, signed) {
      // integers are quite common, so generate very specialized functions
      switch (shift) {
          case 0: return signed ?
              function readS8FromPointer(pointer) { return HEAP8[pointer]; } :
              function readU8FromPointer(pointer) { return HEAPU8[pointer]; };
          case 1: return signed ?
              function readS16FromPointer(pointer) { return HEAP16[pointer >> 1]; } :
              function readU16FromPointer(pointer) { return HEAPU16[pointer >> 1]; };
          case 2: return signed ?
              function readS32FromPointer(pointer) { return HEAP32[pointer >> 2]; } :
              function readU32FromPointer(pointer) { return HEAPU32[pointer >> 2]; };
          default:
              throw new TypeError("Unknown integer type: " + name);
      }
    }function __embind_register_integer(primitiveType, name, size, minRange, maxRange) {
      name = readLatin1String(name);
      if (maxRange === -1) { // LLVM doesn't have signed and unsigned 32-bit types, so u32 literals come out as 'i32 -1'. Always treat those as max u32.
          maxRange = 4294967295;
      }
  
      var shift = getShiftFromSize(size);
      
      var fromWireType = function(value) {
          return value;
      };
      
      if (minRange === 0) {
          var bitshift = 32 - 8*size;
          fromWireType = function(value) {
              return (value << bitshift) >>> bitshift;
          };
      }
  
      registerType(primitiveType, {
          name: name,
          'fromWireType': fromWireType,
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following two if()s and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              if (value < minRange || value > maxRange) {
                  throw new TypeError('Passing a number "' + _embind_repr(value) + '" from JS side to C/C++ side to an argument of type "' + name + '", which is outside the valid range [' + minRange + ', ' + maxRange + ']!');
              }
              return value | 0;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': integerReadValueFromPointer(name, shift, minRange !== 0),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

  function __embind_register_emval(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(handle) {
              var rv = emval_handle_array[handle].value;
              __emval_decref(handle);
              return rv;
          },
          'toWireType': function(destructors, value) {
              return __emval_register(value);
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: null, // This type does not need a destructor
  
          // TODO: do we need a deleteObject here?  write a test where
          // emval is passed into JS via an interface
      });
    }

  function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  
  
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var isPosixPlatform = (process.platform != 'win32'); // Node doesn't offer a direct check, so test by exclusion
  
              var fd = process.stdin.fd;
              if (isPosixPlatform) {
                // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
                var usingDevice = false;
                try {
                  fd = fs.openSync('/dev/stdin', 'r');
                  usingDevice = true;
                } catch (e) {}
              }
  
              try {
                bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.length : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        if (!req) {
          return callback("Unable to connect to IndexedDB");
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        flags &= ~0x200000 /*O_PATH*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x800 /*O_NONBLOCK*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x8000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x80000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            // Issue 4254: Using curr as a node name will prevent the node
            // from being found in FS.nameTable when FS.open is called on
            // a path which holds a child of this node,
            // given that all FS functions assume node names
            // are just their corresponding parts within their given path,
            // rather than incremental aggregates which include their parent's
            // directories.
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=STATICTOP; STATICTOP += 16;;
  
  var _stdout=STATICTOP; STATICTOP += 16;;
  
  var _stderr=STATICTOP; STATICTOP += 16;;var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function (path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != ERRNO_CODES.EEXIST) throw e;
          }
        }
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //Module.printErr(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21506: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  
  function heap32VectorToArray(count, firstElement) {
      var array = [];
      for (var i = 0; i < count; i++) {
          array.push(HEAP32[(firstElement >> 2) + i]);
      }
      return array;
    }
  
  function runDestructors(destructors) {
      while (destructors.length) {
          var ptr = destructors.pop();
          var del = destructors.pop();
          del(ptr);
      }
    }function __embind_register_class_constructor(
      rawClassType,
      argCount,
      rawArgTypesAddr,
      invokerSignature,
      invoker,
      rawConstructor
    ) {
      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      invoker = requireFunction(invokerSignature, invoker);
  
      whenDependentTypesAreResolved([], [rawClassType], function(classType) {
          classType = classType[0];
          var humanName = 'constructor ' + classType.name;
  
          if (undefined === classType.registeredClass.constructor_body) {
              classType.registeredClass.constructor_body = [];
          }
          if (undefined !== classType.registeredClass.constructor_body[argCount - 1]) {
              throw new BindingError("Cannot register multiple constructors with identical number of parameters (" + (argCount-1) + ") for class '" + classType.name + "'! Overload resolution is currently only performed using the parameter count, not actual type info!");
          }
          classType.registeredClass.constructor_body[argCount - 1] = function unboundTypeHandler() {
              throwUnboundTypeError('Cannot construct ' + classType.name + ' due to unbound types', rawArgTypes);
          };
  
          whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
              classType.registeredClass.constructor_body[argCount - 1] = function constructor_body() {
                  if (arguments.length !== argCount - 1) {
                      throwBindingError(humanName + ' called with ' + arguments.length + ' arguments, expected ' + (argCount-1));
                  }
                  var destructors = [];
                  var args = new Array(argCount);
                  args[0] = rawConstructor;
                  for (var i = 1; i < argCount; ++i) {
                      args[i] = argTypes[i]['toWireType'](destructors, arguments[i - 1]);
                  }
  
                  var ptr = invoker.apply(null, args);
                  runDestructors(destructors);
  
                  return argTypes[0]['fromWireType'](ptr);
              };
              return [];
          });
          return [];
      });
    }

  
  function floatReadValueFromPointer(name, shift) {
      switch (shift) {
          case 2: return function(pointer) {
              return this['fromWireType'](HEAPF32[pointer >> 2]);
          };
          case 3: return function(pointer) {
              return this['fromWireType'](HEAPF64[pointer >> 3]);
          };
          default:
              throw new TypeError("Unknown float type: " + name);
      }
    }function __embind_register_float(rawType, name, size) {
      var shift = getShiftFromSize(size);
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              return value;
          },
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following if() and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              return value;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': floatReadValueFromPointer(name, shift),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  function ___cxa_find_matching_catch_2() {
          return ___cxa_find_matching_catch.apply(null, arguments);
        }

  function ___cxa_find_matching_catch_3() {
          return ___cxa_find_matching_catch.apply(null, arguments);
        }

  function ___cxa_begin_catch(ptr) {
      var info = EXCEPTIONS.infos[ptr];
      if (info && !info.caught) {
        info.caught = true;
        __ZSt18uncaught_exceptionv.uncaught_exception--;
      }
      if (info) info.rethrown = false;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
  var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_STATIC); 
  Module["_llvm_cttz_i32"] = _llvm_cttz_i32; 
  Module["___udivmoddi4"] = ___udivmoddi4; 
  Module["___udivdi3"] = ___udivdi3;

  function __emval_incref(handle) {
      if (handle > 4) {
          emval_handle_array[handle].refcount += 1;
      }
    }

  
   
  Module["___muldsi3"] = ___muldsi3; 
  Module["___muldi3"] = ___muldi3;

  function __embind_register_enum_value(
      rawEnumType,
      name,
      enumValue
    ) {
      var enumType = requireRegisteredType(rawEnumType, 'enum');
      name = readLatin1String(name);
  
      var Enum = enumType.constructor;
  
      var Value = Object.create(enumType.constructor.prototype, {
          value: {value: enumValue},
          constructor: {value: createNamedFunction(enumType.name + '_' + name, function() {})},
      });
      Enum.values[enumValue] = Value;
      Enum[name] = Value;
    }

   
  Module["_sbrk"] = _sbrk;

   
  Module["_memmove"] = _memmove;

  function __embind_register_std_wstring(rawType, charSize, name) {
      // nb. do not cache HEAPU16 and HEAPU32, they may be destroyed by enlargeMemory().
      name = readLatin1String(name);
      var getHeap, shift;
      if (charSize === 2) {
          getHeap = function() { return HEAPU16; };
          shift = 1;
      } else if (charSize === 4) {
          getHeap = function() { return HEAPU32; };
          shift = 2;
      }
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              var HEAP = getHeap();
              var length = HEAPU32[value >> 2];
              var a = new Array(length);
              var start = (value + 4) >> shift;
              for (var i = 0; i < length; ++i) {
                  a[i] = String.fromCharCode(HEAP[start + i]);
              }
              _free(value);
              return a.join('');
          },
          'toWireType': function(destructors, value) {
              // assumes 4-byte alignment
              var HEAP = getHeap();
              var length = value.length;
              var ptr = _malloc(4 + length * charSize);
              HEAPU32[ptr >> 2] = length;
              var start = (ptr + 4) >> shift;
              for (var i = 0; i < length; ++i) {
                  HEAP[start + i] = value.charCodeAt(i);
              }
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  function ___gxx_personality_v0() {
    }

   
  Module["___uremdi3"] = ___uremdi3;

   
  Module["_llvm_bswap_i32"] = _llvm_bswap_i32;

  function __embind_register_memory_view(rawType, dataTypeIndex, name) {
      var typeMapping = [
          Int8Array,
          Uint8Array,
          Int16Array,
          Uint16Array,
          Int32Array,
          Uint32Array,
          Float32Array,
          Float64Array,
      ];
  
      var TA = typeMapping[dataTypeIndex];
  
      function decodeMemoryView(handle) {
          handle = handle >> 2;
          var heap = HEAPU32;
          var size = heap[handle]; // in elements
          var data = heap[handle + 1]; // byte offset into emscripten heap
          return new TA(heap['buffer'], data, size);
      }
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': decodeMemoryView,
          'argPackAdvance': 8,
          'readValueFromPointer': decodeMemoryView,
      }, {
          ignoreDuplicateRegistrations: true,
      });
    }


  function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      // NOTE: offset_high is unused - Emscripten's off_t is 32-bit
      var offset = offset_low;
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
  function new_(constructor, argumentList) {
      if (!(constructor instanceof Function)) {
          throw new TypeError('new_ called with constructor type ' + typeof(constructor) + " which is not a function");
      }
  
      /*
       * Previously, the following line was just:
  
       function dummy() {};
  
       * Unfortunately, Chrome was preserving 'dummy' as the object's name, even though at creation, the 'dummy' has the
       * correct constructor name.  Thus, objects created with IMVU.new would show up in the debugger as 'dummy', which
       * isn't very helpful.  Using IMVU.createNamedFunction addresses the issue.  Doublely-unfortunately, there's no way
       * to write a test for this behavior.  -NRD 2013.02.22
       */
      var dummy = createNamedFunction(constructor.name || 'unknownFunctionName', function(){});
      dummy.prototype = constructor.prototype;
      var obj = new dummy;
  
      var r = constructor.apply(obj, argumentList);
      return (r instanceof Object) ? r : obj;
    }function craftInvokerFunction(humanName, argTypes, classType, cppInvokerFunc, cppTargetFunc) {
      // humanName: a human-readable string name for the function to be generated.
      // argTypes: An array that contains the embind type objects for all types in the function signature.
      //    argTypes[0] is the type object for the function return value.
      //    argTypes[1] is the type object for function this object/class type, or null if not crafting an invoker for a class method.
      //    argTypes[2...] are the actual function parameters.
      // classType: The embind type object for the class to be bound, or null if this is not a method of a class.
      // cppInvokerFunc: JS Function object to the C++-side function that interops into C++ code.
      // cppTargetFunc: Function pointer (an integer to FUNCTION_TABLE) to the target C++ function the cppInvokerFunc will end up calling.
      var argCount = argTypes.length;
  
      if (argCount < 2) {
          throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!");
      }
  
      var isClassMethodFunc = (argTypes[1] !== null && classType !== null);
  
      // Free functions with signature "void function()" do not need an invoker that marshalls between wire types.
  // TODO: This omits argument count check - enable only at -O3 or similar.
  //    if (ENABLE_UNSAFE_OPTS && argCount == 2 && argTypes[0].name == "void" && !isClassMethodFunc) {
  //       return FUNCTION_TABLE[fn];
  //    }
  
      var argsList = "";
      var argsListWired = "";
      for(var i = 0; i < argCount - 2; ++i) {
          argsList += (i!==0?", ":"")+"arg"+i;
          argsListWired += (i!==0?", ":"")+"arg"+i+"Wired";
      }
  
      var invokerFnBody =
          "return function "+makeLegalFunctionName(humanName)+"("+argsList+") {\n" +
          "if (arguments.length !== "+(argCount - 2)+") {\n" +
              "throwBindingError('function "+humanName+" called with ' + arguments.length + ' arguments, expected "+(argCount - 2)+" args!');\n" +
          "}\n";
  
  
      // Determine if we need to use a dynamic stack to store the destructors for the function parameters.
      // TODO: Remove this completely once all function invokers are being dynamically generated.
      var needsDestructorStack = false;
  
      for(var i = 1; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here.
          if (argTypes[i] !== null && argTypes[i].destructorFunction === undefined) { // The type does not define a destructor function - must use dynamic stack
              needsDestructorStack = true;
              break;
          }
      }
  
      if (needsDestructorStack) {
          invokerFnBody +=
              "var destructors = [];\n";
      }
  
      var dtorStack = needsDestructorStack ? "destructors" : "null";
      var args1 = ["throwBindingError", "invoker", "fn", "runDestructors", "retType", "classParam"];
      var args2 = [throwBindingError, cppInvokerFunc, cppTargetFunc, runDestructors, argTypes[0], argTypes[1]];
  
  
      if (isClassMethodFunc) {
          invokerFnBody += "var thisWired = classParam.toWireType("+dtorStack+", this);\n";
      }
  
      for(var i = 0; i < argCount - 2; ++i) {
          invokerFnBody += "var arg"+i+"Wired = argType"+i+".toWireType("+dtorStack+", arg"+i+"); // "+argTypes[i+2].name+"\n";
          args1.push("argType"+i);
          args2.push(argTypes[i+2]);
      }
  
      if (isClassMethodFunc) {
          argsListWired = "thisWired" + (argsListWired.length > 0 ? ", " : "") + argsListWired;
      }
  
      var returns = (argTypes[0].name !== "void");
  
      invokerFnBody +=
          (returns?"var rv = ":"") + "invoker(fn"+(argsListWired.length>0?", ":"")+argsListWired+");\n";
  
      if (needsDestructorStack) {
          invokerFnBody += "runDestructors(destructors);\n";
      } else {
          for(var i = isClassMethodFunc?1:2; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here. Also skip class type if not a method.
              var paramName = (i === 1 ? "thisWired" : ("arg"+(i - 2)+"Wired"));
              if (argTypes[i].destructorFunction !== null) {
                  invokerFnBody += paramName+"_dtor("+paramName+"); // "+argTypes[i].name+"\n";
                  args1.push(paramName+"_dtor");
                  args2.push(argTypes[i].destructorFunction);
              }
          }
      }
  
      if (returns) {
          invokerFnBody += "var ret = retType.fromWireType(rv);\n" +
                           "return ret;\n";
      } else {
      }
      invokerFnBody += "}\n";
  
      args1.push(invokerFnBody);
  
      var invokerFunction = new_(Function, args1).apply(null, args2);
      return invokerFunction;
    }function __embind_register_class_function(
      rawClassType,
      methodName,
      argCount,
      rawArgTypesAddr, // [ReturnType, ThisType, Args...]
      invokerSignature,
      rawInvoker,
      context,
      isPureVirtual
    ) {
      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      methodName = readLatin1String(methodName);
      rawInvoker = requireFunction(invokerSignature, rawInvoker);
  
      whenDependentTypesAreResolved([], [rawClassType], function(classType) {
          classType = classType[0];
          var humanName = classType.name + '.' + methodName;
  
          if (isPureVirtual) {
              classType.registeredClass.pureVirtualFunctions.push(methodName);
          }
  
          function unboundTypesHandler() {
              throwUnboundTypeError('Cannot call ' + humanName + ' due to unbound types', rawArgTypes);
          }
  
          var proto = classType.registeredClass.instancePrototype;
          var method = proto[methodName];
          if (undefined === method || (undefined === method.overloadTable && method.className !== classType.name && method.argCount === argCount - 2)) {
              // This is the first overload to be registered, OR we are replacing a function in the base class with a function in the derived class.
              unboundTypesHandler.argCount = argCount - 2;
              unboundTypesHandler.className = classType.name;
              proto[methodName] = unboundTypesHandler;
          } else {
              // There was an existing function with the same name registered. Set up a function overload routing table.
              ensureOverloadTable(proto, methodName, humanName);
              proto[methodName].overloadTable[argCount - 2] = unboundTypesHandler;
          }
  
          whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
  
              var memberFunction = craftInvokerFunction(humanName, argTypes, classType, rawInvoker, context);
  
              // Replace the initial unbound-handler-stub function with the appropriate member function, now that all types
              // are resolved. If multiple overloads are registered for this function, the function goes into an overload table.
              if (undefined === proto[methodName].overloadTable) {
                  // Set argCount in case an overload is registered later
                  memberFunction.argCount = argCount - 2;
                  proto[methodName] = memberFunction;
              } else {
                  proto[methodName].overloadTable[argCount - 2] = memberFunction;
              }
  
              return [];
          });
          return [];
      });
    }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  function enumReadValueFromPointer(name, shift, signed) {
      switch (shift) {
          case 0: return function(pointer) {
              var heap = signed ? HEAP8 : HEAPU8;
              return this['fromWireType'](heap[pointer]);
          };
          case 1: return function(pointer) {
              var heap = signed ? HEAP16 : HEAPU16;
              return this['fromWireType'](heap[pointer >> 1]);
          };
          case 2: return function(pointer) {
              var heap = signed ? HEAP32 : HEAPU32;
              return this['fromWireType'](heap[pointer >> 2]);
          };
          default:
              throw new TypeError("Unknown integer type: " + name);
      }
    }function __embind_register_enum(
      rawType,
      name,
      size,
      isSigned
    ) {
      var shift = getShiftFromSize(size);
      name = readLatin1String(name);
  
      function ctor() {
      }
      ctor.values = {};
  
      registerType(rawType, {
          name: name,
          constructor: ctor,
          'fromWireType': function(c) {
              return this.constructor.values[c];
          },
          'toWireType': function(destructors, c) {
              return c.value;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': enumReadValueFromPointer(name, shift, isSigned),
          destructorFunction: null,
      });
      exposePublicSymbol(name, ctor);
    }

  function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -ERRNO_CODES.EINVAL;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        case 12: {
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        case 13:
        case 14:
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -ERRNO_CODES.EINVAL; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default: {
          return -ERRNO_CODES.EINVAL;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
embind_init_charCodes();
BindingError = Module['BindingError'] = extendError(Error, 'BindingError');;
InternalError = Module['InternalError'] = extendError(Error, 'InternalError');;
init_ClassHandle();
init_RegisteredPointer();
init_embind();;
UnboundTypeError = Module['UnboundTypeError'] = extendError(Error, 'UnboundTypeError');;
init_emval();;
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });;
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
DYNAMICTOP_PTR = allocate(1, "i32", ALLOC_STATIC);

STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = Runtime.alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");


function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_i(x) { Module["printErr"]("Invalid function pointer called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiid(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiid(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiid(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiid"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiid(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiid"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "abortStackOverflow": abortStackOverflow, "nullFunc_iiii": nullFunc_iiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_i": nullFunc_i, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_viiiid": nullFunc_viiiid, "nullFunc_ii": nullFunc_ii, "nullFunc_viii": nullFunc_viii, "nullFunc_v": nullFunc_v, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiiiid": nullFunc_iiiiid, "nullFunc_viiii": nullFunc_viiii, "invoke_iiii": invoke_iiii, "invoke_viiiii": invoke_viiiii, "invoke_i": invoke_i, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_viiiid": invoke_viiiid, "invoke_ii": invoke_ii, "invoke_viii": invoke_viii, "invoke_v": invoke_v, "invoke_iiiii": invoke_iiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_iii": invoke_iii, "invoke_iiiiid": invoke_iiiiid, "invoke_viiii": invoke_viiii, "___syscall221": ___syscall221, "floatReadValueFromPointer": floatReadValueFromPointer, "simpleReadValueFromPointer": simpleReadValueFromPointer, "throwInternalError": throwInternalError, "get_first_emval": get_first_emval, "getLiveInheritedInstances": getLiveInheritedInstances, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "ClassHandle": ClassHandle, "getShiftFromSize": getShiftFromSize, "___cxa_begin_catch": ___cxa_begin_catch, "_emscripten_memcpy_big": _emscripten_memcpy_big, "runDestructor": runDestructor, "throwInstanceAlreadyDeleted": throwInstanceAlreadyDeleted, "RegisteredPointer_fromWireType": RegisteredPointer_fromWireType, "_clock": _clock, "init_RegisteredPointer": init_RegisteredPointer, "ClassHandle_isAliasOf": ClassHandle_isAliasOf, "flushPendingDeletes": flushPendingDeletes, "__embind_register_enum_value": __embind_register_enum_value, "makeClassHandle": makeClassHandle, "whenDependentTypesAreResolved": whenDependentTypesAreResolved, "__embind_register_class_constructor": __embind_register_class_constructor, "init_ClassHandle": init_ClassHandle, "___syscall140": ___syscall140, "ClassHandle_clone": ClassHandle_clone, "___syscall145": ___syscall145, "___syscall146": ___syscall146, "RegisteredClass": RegisteredClass, "___cxa_free_exception": ___cxa_free_exception, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "embind_init_charCodes": embind_init_charCodes, "___setErrNo": ___setErrNo, "__embind_register_bool": __embind_register_bool, "___resumeException": ___resumeException, "createNamedFunction": createNamedFunction, "__embind_register_emval": __embind_register_emval, "__emval_decref": __emval_decref, "_pthread_once": _pthread_once, "__embind_register_class": __embind_register_class, "constNoSmartPtrRawPointerToWireType": constNoSmartPtrRawPointerToWireType, "heap32VectorToArray": heap32VectorToArray, "ClassHandle_delete": ClassHandle_delete, "RegisteredPointer_destructor": RegisteredPointer_destructor, "___syscall6": ___syscall6, "___syscall5": ___syscall5, "ensureOverloadTable": ensureOverloadTable, "_time": _time, "new_": new_, "downcastPointer": downcastPointer, "_exit": _exit, "replacePublicSymbol": replacePublicSymbol, "init_embind": init_embind, "ClassHandle_deleteLater": ClassHandle_deleteLater, "integerReadValueFromPointer": integerReadValueFromPointer, "RegisteredPointer_deleteObject": RegisteredPointer_deleteObject, "ClassHandle_isDeleted": ClassHandle_isDeleted, "__embind_register_integer": __embind_register_integer, "___cxa_allocate_exception": ___cxa_allocate_exception, "__emval_take_value": __emval_take_value, "___cxa_end_catch": ___cxa_end_catch, "enumReadValueFromPointer": enumReadValueFromPointer, "_embind_repr": _embind_repr, "_pthread_getspecific": _pthread_getspecific, "throwUnboundTypeError": throwUnboundTypeError, "craftInvokerFunction": craftInvokerFunction, "runDestructors": runDestructors, "requireRegisteredType": requireRegisteredType, "makeLegalFunctionName": makeLegalFunctionName, "_pthread_key_create": _pthread_key_create, "upcastPointer": upcastPointer, "init_emval": init_emval, "shallowCopyInternalPointer": shallowCopyInternalPointer, "nonConstNoSmartPtrRawPointerToWireType": nonConstNoSmartPtrRawPointerToWireType, "_abort": _abort, "throwBindingError": throwBindingError, "getTypeName": getTypeName, "exposePublicSymbol": exposePublicSymbol, "__embind_register_std_string": __embind_register_std_string, "___lock": ___lock, "__embind_register_memory_view": __embind_register_memory_view, "getInheritedInstance": getInheritedInstance, "setDelayFunction": setDelayFunction, "___gxx_personality_v0": ___gxx_personality_v0, "extendError": extendError, "__embind_register_void": __embind_register_void, "___cxa_find_matching_catch_3": ___cxa_find_matching_catch_3, "RegisteredPointer_getPointee": RegisteredPointer_getPointee, "__emval_register": __emval_register, "___cxa_find_matching_catch_2": ___cxa_find_matching_catch_2, "__embind_register_class_function": __embind_register_class_function, "__exit": __exit, "RegisteredPointer": RegisteredPointer, "__emval_incref": __emval_incref, "readLatin1String": readLatin1String, "getBasestPointer": getBasestPointer, "getInheritedInstanceCount": getInheritedInstanceCount, "__embind_register_float": __embind_register_float, "___syscall54": ___syscall54, "___unlock": ___unlock, "__embind_register_std_wstring": __embind_register_std_wstring, "_pthread_setspecific": _pthread_setspecific, "genericPointerToWireType": genericPointerToWireType, "registerType": registerType, "___cxa_throw": ___cxa_throw, "__embind_register_enum": __embind_register_enum, "count_emval_handles": count_emval_handles, "requireFunction": requireFunction, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "cttz_i8": cttz_i8 };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
'almost asm';


  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);

  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var cttz_i8=env.cttz_i8|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntS = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var abortStackOverflow=env.abortStackOverflow;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_viiiid=env.nullFunc_viiiid;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_iiiiid=env.nullFunc_iiiiid;
  var nullFunc_viiii=env.nullFunc_viiii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_i=env.invoke_i;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_viiiid=env.invoke_viiiid;
  var invoke_ii=env.invoke_ii;
  var invoke_viii=env.invoke_viii;
  var invoke_v=env.invoke_v;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiiiid=env.invoke_iiiiid;
  var invoke_viiii=env.invoke_viiii;
  var ___syscall221=env.___syscall221;
  var floatReadValueFromPointer=env.floatReadValueFromPointer;
  var simpleReadValueFromPointer=env.simpleReadValueFromPointer;
  var throwInternalError=env.throwInternalError;
  var get_first_emval=env.get_first_emval;
  var getLiveInheritedInstances=env.getLiveInheritedInstances;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var ClassHandle=env.ClassHandle;
  var getShiftFromSize=env.getShiftFromSize;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var runDestructor=env.runDestructor;
  var throwInstanceAlreadyDeleted=env.throwInstanceAlreadyDeleted;
  var RegisteredPointer_fromWireType=env.RegisteredPointer_fromWireType;
  var _clock=env._clock;
  var init_RegisteredPointer=env.init_RegisteredPointer;
  var ClassHandle_isAliasOf=env.ClassHandle_isAliasOf;
  var flushPendingDeletes=env.flushPendingDeletes;
  var __embind_register_enum_value=env.__embind_register_enum_value;
  var makeClassHandle=env.makeClassHandle;
  var whenDependentTypesAreResolved=env.whenDependentTypesAreResolved;
  var __embind_register_class_constructor=env.__embind_register_class_constructor;
  var init_ClassHandle=env.init_ClassHandle;
  var ___syscall140=env.___syscall140;
  var ClassHandle_clone=env.ClassHandle_clone;
  var ___syscall145=env.___syscall145;
  var ___syscall146=env.___syscall146;
  var RegisteredClass=env.RegisteredClass;
  var ___cxa_free_exception=env.___cxa_free_exception;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var embind_init_charCodes=env.embind_init_charCodes;
  var ___setErrNo=env.___setErrNo;
  var __embind_register_bool=env.__embind_register_bool;
  var ___resumeException=env.___resumeException;
  var createNamedFunction=env.createNamedFunction;
  var __embind_register_emval=env.__embind_register_emval;
  var __emval_decref=env.__emval_decref;
  var _pthread_once=env._pthread_once;
  var __embind_register_class=env.__embind_register_class;
  var constNoSmartPtrRawPointerToWireType=env.constNoSmartPtrRawPointerToWireType;
  var heap32VectorToArray=env.heap32VectorToArray;
  var ClassHandle_delete=env.ClassHandle_delete;
  var RegisteredPointer_destructor=env.RegisteredPointer_destructor;
  var ___syscall6=env.___syscall6;
  var ___syscall5=env.___syscall5;
  var ensureOverloadTable=env.ensureOverloadTable;
  var _time=env._time;
  var new_=env.new_;
  var downcastPointer=env.downcastPointer;
  var _exit=env._exit;
  var replacePublicSymbol=env.replacePublicSymbol;
  var init_embind=env.init_embind;
  var ClassHandle_deleteLater=env.ClassHandle_deleteLater;
  var integerReadValueFromPointer=env.integerReadValueFromPointer;
  var RegisteredPointer_deleteObject=env.RegisteredPointer_deleteObject;
  var ClassHandle_isDeleted=env.ClassHandle_isDeleted;
  var __embind_register_integer=env.__embind_register_integer;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var __emval_take_value=env.__emval_take_value;
  var ___cxa_end_catch=env.___cxa_end_catch;
  var enumReadValueFromPointer=env.enumReadValueFromPointer;
  var _embind_repr=env._embind_repr;
  var _pthread_getspecific=env._pthread_getspecific;
  var throwUnboundTypeError=env.throwUnboundTypeError;
  var craftInvokerFunction=env.craftInvokerFunction;
  var runDestructors=env.runDestructors;
  var requireRegisteredType=env.requireRegisteredType;
  var makeLegalFunctionName=env.makeLegalFunctionName;
  var _pthread_key_create=env._pthread_key_create;
  var upcastPointer=env.upcastPointer;
  var init_emval=env.init_emval;
  var shallowCopyInternalPointer=env.shallowCopyInternalPointer;
  var nonConstNoSmartPtrRawPointerToWireType=env.nonConstNoSmartPtrRawPointerToWireType;
  var _abort=env._abort;
  var throwBindingError=env.throwBindingError;
  var getTypeName=env.getTypeName;
  var exposePublicSymbol=env.exposePublicSymbol;
  var __embind_register_std_string=env.__embind_register_std_string;
  var ___lock=env.___lock;
  var __embind_register_memory_view=env.__embind_register_memory_view;
  var getInheritedInstance=env.getInheritedInstance;
  var setDelayFunction=env.setDelayFunction;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var extendError=env.extendError;
  var __embind_register_void=env.__embind_register_void;
  var ___cxa_find_matching_catch_3=env.___cxa_find_matching_catch_3;
  var RegisteredPointer_getPointee=env.RegisteredPointer_getPointee;
  var __emval_register=env.__emval_register;
  var ___cxa_find_matching_catch_2=env.___cxa_find_matching_catch_2;
  var __embind_register_class_function=env.__embind_register_class_function;
  var __exit=env.__exit;
  var RegisteredPointer=env.RegisteredPointer;
  var __emval_incref=env.__emval_incref;
  var readLatin1String=env.readLatin1String;
  var getBasestPointer=env.getBasestPointer;
  var getInheritedInstanceCount=env.getInheritedInstanceCount;
  var __embind_register_float=env.__embind_register_float;
  var ___syscall54=env.___syscall54;
  var ___unlock=env.___unlock;
  var __embind_register_std_wstring=env.__embind_register_std_wstring;
  var _pthread_setspecific=env._pthread_setspecific;
  var genericPointerToWireType=env.genericPointerToWireType;
  var registerType=env.registerType;
  var ___cxa_throw=env.___cxa_throw;
  var __embind_register_enum=env.__embind_register_enum;
  var count_emval_handles=env.count_emval_handles;
  var requireFunction=env.requireFunction;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS

function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
  if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(size|0);

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function __Z5scan1P8_IO_FILEPKcPv($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = $4;
 $8 = $5;
 HEAP32[$vararg_buffer>>2] = $8;
 $9 = (_fscanf($6,$7,$vararg_buffer)|0);
 $10 = ($9|0)!=(1);
 if ($10) {
  $11 = HEAP32[247]|0;
  $12 = $4;
  HEAP32[$vararg_buffer1>>2] = $12;
  (_fprintf($11,1940,$vararg_buffer1)|0);
  _exit(1);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function _main($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0;
 var $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer17 = 0, $vararg_buffer19 = 0, $vararg_buffer21 = 0, $vararg_buffer24 = 0, $vararg_buffer27 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 5440|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(5440|0);
 $vararg_buffer27 = sp + 96|0;
 $vararg_buffer24 = sp + 88|0;
 $vararg_buffer21 = sp + 80|0;
 $vararg_buffer19 = sp + 72|0;
 $vararg_buffer17 = sp + 64|0;
 $vararg_buffer14 = sp + 56|0;
 $vararg_buffer11 = sp + 48|0;
 $vararg_buffer8 = sp + 40|0;
 $vararg_buffer5 = sp + 32|0;
 $vararg_buffer3 = sp + 24|0;
 $vararg_buffer1 = sp + 16|0;
 $vararg_buffer = sp + 8|0;
 $9 = sp + 5184|0;
 $10 = sp + 5152|0;
 $11 = sp + 2632|0;
 $14 = sp + 104|0;
 $2 = 0;
 $3 = $0;
 $4 = $1;
 $16 = (_time((0|0))|0);
 _srand($16);
 $17 = $3;
 $18 = ($17|0)<(2);
 if ($18) {
  $19 = HEAP32[247]|0;
  (_fprintf($19,1972,$vararg_buffer)|0);
  $2 = -1;
  $87 = $2;
  STACKTOP = sp;return ($87|0);
 }
 $7 = 1;
 while(1) {
  $20 = $7;
  $21 = $3;
  $22 = ($20|0)<($21|0);
  if (!($22)) {
   label = 19;
   break;
  }
  $23 = $4;
  $24 = $7;
  $25 = (($23) + ($24<<2)|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (_fopen($26,2006)|0);
  $8 = $27;
  $28 = $8;
  $29 = ($28|0)!=(0|0);
  if (!($29)) {
   label = 6;
   break;
  }
  $35 = $8;
  $36 = (_fgets($9,256,$35)|0);
  $37 = ($36|0)!=(0|0);
  if (!($37)) {
   label = 9;
   break;
  }
  $38 = HEAP8[$9>>0]|0;
  $39 = $38 << 24 >> 24;
  $40 = ($39|0)!=(35);
  if ($40) {
   label = 9;
   break;
  }
  __ZN15score_estimator5GobanC2Ev($11);
  $42 = $8;
  $43 = ((($11)) + 4|0);
  __Z5scan1P8_IO_FILEPKcPv($42,2051,$43);
  $44 = $8;
  __Z5scan1P8_IO_FILEPKcPv($44,2062,$11);
  $45 = $8;
  __Z5scan1P8_IO_FILEPKcPv($45,2072,$10);
  $12 = 0;
  while(1) {
   $46 = $12;
   $47 = ((($11)) + 4|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ($46|0)<($48|0);
   if (!($49)) {
    break;
   }
   $13 = 0;
   while(1) {
    $50 = $13;
    $51 = HEAP32[$11>>2]|0;
    $52 = ($50|0)<($51|0);
    if (!($52)) {
     break;
    }
    $53 = $8;
    $54 = ((($11)) + 8|0);
    $55 = $12;
    $56 = (($54) + (($55*100)|0)|0);
    $57 = $13;
    $58 = (($56) + ($57<<2)|0);
    __Z5scan1P8_IO_FILEPKcPv($53,2091,$58);
    $59 = $13;
    $60 = (($59) + 1)|0;
    $13 = $60;
   }
   $61 = $12;
   $62 = (($61) + 1)|0;
   $12 = $62;
  }
  $63 = $4;
  $64 = $7;
  $65 = (($63) + ($64<<2)|0);
  $66 = HEAP32[$65>>2]|0;
  HEAP32[$vararg_buffer5>>2] = $66;
  (_printf(2094,$vararg_buffer5)|0);
  $67 = ((($11)) + 4|0);
  $68 = HEAP32[$67>>2]|0;
  HEAP32[$vararg_buffer8>>2] = $68;
  (_printf(2098,$vararg_buffer8)|0);
  $69 = HEAP32[$11>>2]|0;
  HEAP32[$vararg_buffer11>>2] = $69;
  (_printf(2110,$vararg_buffer11)|0);
  $70 = HEAP32[$10>>2]|0;
  HEAP32[$vararg_buffer14>>2] = $70;
  (_printf(2121,$vararg_buffer14)|0);
  __ZN15score_estimator5Goban5printEv($11);
  (_printf(2141,$vararg_buffer17)|0);
  $71 = (_clock()|0);
  $5 = $71;
  __ZN15score_estimator5Goban8estimateENS_5ColorEif($14,$11,-1,10000,0.34999999403953552);
  $72 = (_clock()|0);
  $6 = $72;
  __ZN15score_estimator5Goban5printEv($14);
  (_printf(2141,$vararg_buffer19)|0);
  $73 = (__ZN15score_estimator5Goban5scoreEv($14)|0);
  $74 = (+($73|0));
  $75 = $74 - 0.5;
  HEAPF64[$vararg_buffer21>>3] = $75;
  (_printf(2144,$vararg_buffer21)|0);
  $76 = $6;
  $77 = $5;
  $78 = (($76) - ($77))|0;
  $79 = (+($78|0));
  $80 = $79 / 1.0E+6;
  $15 = $80;
  $81 = $15;
  $82 = $81 * 750.0;
  HEAPF64[$vararg_buffer24>>3] = $82;
  (_printf(2155,$vararg_buffer24)|0);
  $83 = $15;
  $84 = $83 > 1.0;
  if ($84) {
   (_printf(2176,$vararg_buffer27)|0);
  }
  $85 = $7;
  $86 = (($85) + 1)|0;
  $7 = $86;
 }
 if ((label|0) == 6) {
  $30 = HEAP32[247]|0;
  $31 = $4;
  $32 = $7;
  $33 = (($31) + ($32<<2)|0);
  $34 = HEAP32[$33>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $34;
  (_fprintf($30,2008,$vararg_buffer1)|0);
  $2 = -1;
  $87 = $2;
  STACKTOP = sp;return ($87|0);
 }
 else if ((label|0) == 9) {
  $41 = HEAP32[247]|0;
  (_fprintf($41,2032,$vararg_buffer3)|0);
  $2 = -1;
  $87 = $2;
  STACKTOP = sp;return ($87|0);
 }
 else if ((label|0) == 19) {
  $87 = $2;
  STACKTOP = sp;return ($87|0);
 }
 return (0)|0;
}
function __GLOBAL__sub_I_estimator_cc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init();
 ___cxx_global_var_init_1();
 ___cxx_global_var_init_11();
 return;
}
function ___cxx_global_var_init() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN15score_estimator5GobanC2Ev(9456);
 return;
}
function ___cxx_global_var_init_1() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN15score_estimator45EmscriptenBindingInitializer_my_class_exampleC2Ev(12565);
 return;
}
function ___cxx_global_var_init_11() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN15score_estimator41EmscriptenBindingInitializer_stl_wrappersC2Ev(12564);
 return;
}
function __ZN15score_estimator41EmscriptenBindingInitializer_stl_wrappersC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 __ZN10emscripten15register_vectorIiEENS_6class_INSt3__26vectorIT_NS2_9allocatorIS4_EEEENS_8internal11NoBaseClassEEEPKc(2238);
 STACKTOP = sp;return;
}
function __ZN10emscripten15register_vectorIiEENS_6class_INSt3__26vectorIT_NS2_9allocatorIS4_EEEENS_8internal11NoBaseClassEEEPKc($0) {
 $0 = $0|0;
 var $$field = 0, $$field11 = 0, $$field14 = 0, $$field19 = 0, $$field22 = 0, $$field27 = 0, $$field30 = 0, $$field37 = 0, $$field40 = 0, $$field6 = 0, $$index1 = 0, $$index13 = 0, $$index17 = 0, $$index21 = 0, $$index25 = 0, $$index29 = 0, $$index3 = 0, $$index33 = 0, $$index35 = 0, $$index39 = 0;
 var $$index43 = 0, $$index5 = 0, $$index9 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $4 = sp + 228|0;
 $5 = sp + 250|0;
 $10 = sp + 208|0;
 $11 = sp + 249|0;
 $16 = sp + 184|0;
 $18 = sp + 248|0;
 $19 = sp + 16|0;
 $23 = sp + 160|0;
 $25 = sp + 247|0;
 $26 = sp + 8|0;
 $30 = sp + 136|0;
 $32 = sp + 246|0;
 $33 = sp;
 $37 = sp + 245|0;
 $51 = sp + 56|0;
 $52 = sp + 48|0;
 $53 = sp + 244|0;
 $54 = sp + 40|0;
 $55 = sp + 32|0;
 $56 = sp + 24|0;
 $50 = $0;
 HEAP32[$51>>2] = (37);
 $$index1 = ((($51)) + 4|0);
 HEAP32[$$index1>>2] = 0;
 HEAP32[$52>>2] = (38);
 $$index3 = ((($52)) + 4|0);
 HEAP32[$$index3>>2] = 0;
 $57 = $50;
 $44 = $53;
 $45 = $57;
 __ZN10emscripten8internal11NoBaseClass6verifyINSt3__26vectorIiNS3_9allocatorIiEEEEEEvv();
 $46 = 39;
 $58 = (__ZN10emscripten8internal11NoBaseClass11getUpcasterINSt3__26vectorIiNS3_9allocatorIiEEEEEEPFvvEv()|0);
 $47 = $58;
 $59 = (__ZN10emscripten8internal11NoBaseClass13getDowncasterINSt3__26vectorIiNS3_9allocatorIiEEEEEEPFvvEv()|0);
 $48 = $59;
 $49 = 40;
 $60 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorIiNS2_9allocatorIiEEEEE3getEv()|0);
 $61 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerINSt3__26vectorIiNS3_9allocatorIiEEEEEEE3getEv()|0);
 $62 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIKNSt3__26vectorIiNS3_9allocatorIiEEEEEEE3getEv()|0);
 $63 = (__ZN10emscripten8internal11NoBaseClass3getEv()|0);
 $64 = $46;
 $43 = $64;
 $65 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $66 = $46;
 $67 = $47;
 $42 = $67;
 $68 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $69 = $47;
 $70 = $48;
 $41 = $70;
 $71 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $72 = $48;
 $73 = $45;
 $74 = $49;
 $40 = $74;
 $75 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
 $76 = $49;
 __embind_register_class(($60|0),($61|0),($62|0),($63|0),($65|0),($66|0),($68|0),($69|0),($71|0),($72|0),($73|0),($75|0),($76|0));
 $39 = $53;
 $77 = $39;
 $35 = $77;
 $36 = 41;
 $78 = $35;
 $38 = 42;
 $79 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorIiNS2_9allocatorIiEEEEE3getEv()|0);
 $80 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPNSt3__26vectorIiNS5_9allocatorIiEEEEEE8getCountEv($37)|0);
 $81 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPNSt3__26vectorIiNS5_9allocatorIiEEEEEE8getTypesEv($37)|0);
 $82 = $38;
 $34 = $82;
 $83 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $84 = $38;
 $85 = $36;
 __embind_register_class_constructor(($79|0),($80|0),($81|0),($83|0),($84|0),($85|0));
 $$field = HEAP32[$51>>2]|0;
 $$index5 = ((($51)) + 4|0);
 $$field6 = HEAP32[$$index5>>2]|0;
 HEAP32[$54>>2] = $$field;
 $$index9 = ((($54)) + 4|0);
 HEAP32[$$index9>>2] = $$field6;
 ;HEAP8[$33>>0]=HEAP8[$54>>0]|0;HEAP8[$33+1>>0]=HEAP8[$54+1>>0]|0;HEAP8[$33+2>>0]=HEAP8[$54+2>>0]|0;HEAP8[$33+3>>0]=HEAP8[$54+3>>0]|0;HEAP8[$33+4>>0]=HEAP8[$54+4>>0]|0;HEAP8[$33+5>>0]=HEAP8[$54+5>>0]|0;HEAP8[$33+6>>0]=HEAP8[$54+6>>0]|0;HEAP8[$33+7>>0]=HEAP8[$54+7>>0]|0;
 $$field11 = HEAP32[$33>>2]|0;
 $$index13 = ((($33)) + 4|0);
 $$field14 = HEAP32[$$index13>>2]|0;
 $28 = $78;
 $29 = 2248;
 HEAP32[$30>>2] = $$field11;
 $$index17 = ((($30)) + 4|0);
 HEAP32[$$index17>>2] = $$field14;
 $86 = $28;
 $31 = 43;
 $87 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorIiNS2_9allocatorIiEEEEE3getEv()|0);
 $88 = $29;
 $89 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIiNS5_9allocatorIiEEEEEERKiEE8getCountEv($32)|0);
 $90 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIiNS5_9allocatorIiEEEEEERKiEE8getTypesEv($32)|0);
 $91 = $31;
 $27 = $91;
 $92 = (__ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv()|0);
 $93 = $31;
 $94 = (__ZN10emscripten8internal10getContextIMNSt3__26vectorIiNS2_9allocatorIiEEEEFvRKiEEEPT_RKSB_($30)|0);
 __embind_register_class_function(($87|0),($88|0),($89|0),($90|0),($92|0),($93|0),($94|0),0);
 $$field19 = HEAP32[$52>>2]|0;
 $$index21 = ((($52)) + 4|0);
 $$field22 = HEAP32[$$index21>>2]|0;
 HEAP32[$55>>2] = $$field19;
 $$index25 = ((($55)) + 4|0);
 HEAP32[$$index25>>2] = $$field22;
 ;HEAP8[$26>>0]=HEAP8[$55>>0]|0;HEAP8[$26+1>>0]=HEAP8[$55+1>>0]|0;HEAP8[$26+2>>0]=HEAP8[$55+2>>0]|0;HEAP8[$26+3>>0]=HEAP8[$55+3>>0]|0;HEAP8[$26+4>>0]=HEAP8[$55+4>>0]|0;HEAP8[$26+5>>0]=HEAP8[$55+5>>0]|0;HEAP8[$26+6>>0]=HEAP8[$55+6>>0]|0;HEAP8[$26+7>>0]=HEAP8[$55+7>>0]|0;
 $$field27 = HEAP32[$26>>2]|0;
 $$index29 = ((($26)) + 4|0);
 $$field30 = HEAP32[$$index29>>2]|0;
 $21 = $86;
 $22 = 2258;
 HEAP32[$23>>2] = $$field27;
 $$index33 = ((($23)) + 4|0);
 HEAP32[$$index33>>2] = $$field30;
 $95 = $21;
 $24 = 44;
 $96 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorIiNS2_9allocatorIiEEEEE3getEv()|0);
 $97 = $22;
 $98 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIiNS5_9allocatorIiEEEEEEjRKiEE8getCountEv($25)|0);
 $99 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIiNS5_9allocatorIiEEEEEEjRKiEE8getTypesEv($25)|0);
 $100 = $24;
 $20 = $100;
 $101 = (__ZN10emscripten8internal19getGenericSignatureIJviiiiEEEPKcv()|0);
 $102 = $24;
 $103 = (__ZN10emscripten8internal10getContextIMNSt3__26vectorIiNS2_9allocatorIiEEEEFvjRKiEEEPT_RKSB_($23)|0);
 __embind_register_class_function(($96|0),($97|0),($98|0),($99|0),($101|0),($102|0),($103|0),0);
 HEAP32[$56>>2] = (45);
 $$index35 = ((($56)) + 4|0);
 HEAP32[$$index35>>2] = 0;
 ;HEAP8[$19>>0]=HEAP8[$56>>0]|0;HEAP8[$19+1>>0]=HEAP8[$56+1>>0]|0;HEAP8[$19+2>>0]=HEAP8[$56+2>>0]|0;HEAP8[$19+3>>0]=HEAP8[$56+3>>0]|0;HEAP8[$19+4>>0]=HEAP8[$56+4>>0]|0;HEAP8[$19+5>>0]=HEAP8[$56+5>>0]|0;HEAP8[$19+6>>0]=HEAP8[$56+6>>0]|0;HEAP8[$19+7>>0]=HEAP8[$56+7>>0]|0;
 $$field37 = HEAP32[$19>>2]|0;
 $$index39 = ((($19)) + 4|0);
 $$field40 = HEAP32[$$index39>>2]|0;
 $14 = $95;
 $15 = 2265;
 HEAP32[$16>>2] = $$field37;
 $$index43 = ((($16)) + 4|0);
 HEAP32[$$index43>>2] = $$field40;
 $104 = $14;
 $17 = 46;
 $105 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorIiNS2_9allocatorIiEEEEE3getEv()|0);
 $106 = $15;
 $107 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJjNS0_17AllowedRawPointerIKNSt3__26vectorIiNS5_9allocatorIiEEEEEEEE8getCountEv($18)|0);
 $108 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJjNS0_17AllowedRawPointerIKNSt3__26vectorIiNS5_9allocatorIiEEEEEEEE8getTypesEv($18)|0);
 $109 = $17;
 $13 = $109;
 $110 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 $111 = $17;
 $112 = (__ZN10emscripten8internal10getContextIMNSt3__26vectorIiNS2_9allocatorIiEEEEKFjvEEEPT_RKS9_($16)|0);
 __embind_register_class_function(($105|0),($106|0),($107|0),($108|0),($110|0),($111|0),($112|0),0);
 $8 = $104;
 $9 = 2270;
 HEAP32[$10>>2] = 47;
 $113 = $8;
 $12 = 48;
 $114 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorIiNS2_9allocatorIiEEEEE3getEv()|0);
 $115 = $9;
 $116 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valERKNSt3__26vectorIiNS5_9allocatorIiEEEEjEE8getCountEv($11)|0);
 $117 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valERKNSt3__26vectorIiNS5_9allocatorIiEEEEjEE8getTypesEv($11)|0);
 $118 = $12;
 $7 = $118;
 $119 = (__ZN10emscripten8internal19getGenericSignatureIJiiiiEEEPKcv()|0);
 $120 = $12;
 $121 = (__ZN10emscripten8internal10getContextIPFNS_3valERKNSt3__26vectorIiNS3_9allocatorIiEEEEjEEEPT_RKSC_($10)|0);
 __embind_register_class_function(($114|0),($115|0),($116|0),($117|0),($119|0),($120|0),($121|0),0);
 $2 = $113;
 $3 = 2274;
 HEAP32[$4>>2] = 49;
 $6 = 50;
 $122 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorIiNS2_9allocatorIiEEEEE3getEv()|0);
 $123 = $3;
 $124 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbRNSt3__26vectorIiNS4_9allocatorIiEEEEjRKiEE8getCountEv($5)|0);
 $125 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbRNSt3__26vectorIiNS4_9allocatorIiEEEEjRKiEE8getTypesEv($5)|0);
 $126 = $6;
 $1 = $126;
 $127 = (__ZN10emscripten8internal19getGenericSignatureIJiiiiiEEEPKcv()|0);
 $128 = $6;
 $129 = (__ZN10emscripten8internal10getContextIPFbRNSt3__26vectorIiNS2_9allocatorIiEEEEjRKiEEEPT_RKSC_($4)|0);
 __embind_register_class_function(($122|0),($123|0),($124|0),($125|0),($127|0),($128|0),($129|0),0);
 STACKTOP = sp;return;
}
function __ZNSt3__26vectorIiNS_9allocatorIiEEE9push_backERKi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $10 = sp;
 $15 = sp + 89|0;
 $25 = sp + 88|0;
 $23 = $0;
 $24 = $1;
 $26 = $23;
 $27 = ((($26)) + 4|0);
 $28 = HEAP32[$27>>2]|0;
 $22 = $26;
 $29 = $22;
 $30 = ((($29)) + 8|0);
 $21 = $30;
 $31 = $21;
 $20 = $31;
 $32 = $20;
 $33 = HEAP32[$32>>2]|0;
 $34 = ($28|0)!=($33|0);
 if ($34) {
  __ZNSt3__26vectorIiNS_9allocatorIiEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($25,$26,1);
  $19 = $26;
  $35 = $19;
  $36 = ((($35)) + 8|0);
  $18 = $36;
  $37 = $18;
  $17 = $37;
  $38 = $17;
  $39 = ((($26)) + 4|0);
  $40 = HEAP32[$39>>2]|0;
  $16 = $40;
  $41 = $16;
  $42 = $24;
  $12 = $38;
  $13 = $41;
  $14 = $42;
  $43 = $12;
  $44 = $13;
  $45 = $14;
  $11 = $45;
  $46 = $11;
  ;HEAP8[$10>>0]=HEAP8[$15>>0]|0;
  $7 = $43;
  $8 = $44;
  $9 = $46;
  $47 = $7;
  $48 = $8;
  $49 = $9;
  $6 = $49;
  $50 = $6;
  $3 = $47;
  $4 = $48;
  $5 = $50;
  $51 = $4;
  $52 = $5;
  $2 = $52;
  $53 = $2;
  $54 = HEAP32[$53>>2]|0;
  HEAP32[$51>>2] = $54;
  __ZNSt3__26vectorIiNS_9allocatorIiEEE24__RAII_IncreaseAnnotator6__doneEv($25);
  $55 = ((($26)) + 4|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = ((($56)) + 4|0);
  HEAP32[$55>>2] = $57;
  STACKTOP = sp;return;
 } else {
  $58 = $24;
  __ZNSt3__26vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIRKiEEvOT_($26,$58);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__26vectorIiNS_9allocatorIiEEE6resizeEjRKi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $7 = sp;
 $10 = sp + 88|0;
 $22 = $0;
 $23 = $1;
 $24 = $2;
 $26 = $22;
 $21 = $26;
 $27 = $21;
 $28 = ((($27)) + 4|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$27>>2]|0;
 $31 = $29;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = (($33|0) / 4)&-1;
 $25 = $34;
 $35 = $25;
 $36 = $23;
 $37 = ($35>>>0)<($36>>>0);
 if ($37) {
  $38 = $23;
  $39 = $25;
  $40 = (($38) - ($39))|0;
  $41 = $24;
  __ZNSt3__26vectorIiNS_9allocatorIiEEE8__appendEjRKi($26,$40,$41);
  STACKTOP = sp;return;
 }
 $42 = $25;
 $43 = $23;
 $44 = ($42>>>0)>($43>>>0);
 if (!($44)) {
  STACKTOP = sp;return;
 }
 $45 = HEAP32[$26>>2]|0;
 $46 = $23;
 $47 = (($45) + ($46<<2)|0);
 $18 = $26;
 $19 = $47;
 $48 = $18;
 $17 = $48;
 $49 = $17;
 $50 = ((($49)) + 4|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = HEAP32[$49>>2]|0;
 $53 = $51;
 $54 = $52;
 $55 = (($53) - ($54))|0;
 $56 = (($55|0) / 4)&-1;
 $20 = $56;
 $57 = $19;
 $15 = $48;
 $16 = $57;
 $58 = $15;
 while(1) {
  $59 = $16;
  $60 = ((($58)) + 4|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ($59|0)!=($61|0);
  if (!($62)) {
   break;
  }
  $14 = $58;
  $63 = $14;
  $64 = ((($63)) + 8|0);
  $13 = $64;
  $65 = $13;
  $12 = $65;
  $66 = $12;
  $67 = ((($58)) + 4|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = ((($68)) + -4|0);
  HEAP32[$67>>2] = $69;
  $11 = $69;
  $70 = $11;
  $8 = $66;
  $9 = $70;
  $71 = $8;
  $72 = $9;
  ;HEAP8[$7>>0]=HEAP8[$10>>0]|0;
  $5 = $71;
  $6 = $72;
  $73 = $5;
  $74 = $6;
  $3 = $73;
  $4 = $74;
 }
 $75 = $20;
 __THREW__ = 0;
 invoke_vii(51,($48|0),($75|0));
 $76 = __THREW__; __THREW__ = 0;
 $77 = $76&1;
 if ($77) {
  $78 = ___cxa_find_matching_catch_3(0|0)|0;
  $79 = tempRet0;
  ___clang_call_terminate($78);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZN10emscripten8internal11NoBaseClass6verifyINSt3__26vectorIiNS3_9allocatorIiEEEEEEvv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10emscripten8internal13getActualTypeINSt3__26vectorIiNS2_9allocatorIiEEEEEEPKvPT_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (__ZN10emscripten8internal14getLightTypeIDINSt3__26vectorIiNS2_9allocatorIiEEEEEEPKvRKT_($2)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZN10emscripten8internal11NoBaseClass11getUpcasterINSt3__26vectorIiNS3_9allocatorIiEEEEEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal11NoBaseClass13getDowncasterINSt3__26vectorIiNS3_9allocatorIiEEEEEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal14raw_destructorINSt3__26vectorIiNS2_9allocatorIiEEEEEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)==(0|0);
 if ($3) {
  STACKTOP = sp;return;
 }
 __ZNSt3__26vectorIiNS_9allocatorIiEEED2Ev($2);
 __ZdlPv($2);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal6TypeIDINSt3__26vectorIiNS2_9allocatorIiEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__26vectorIiNS2_9allocatorIiEEEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerINSt3__26vectorIiNS3_9allocatorIiEEEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPNSt3__26vectorIiNS2_9allocatorIiEEEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIKNSt3__26vectorIiNS3_9allocatorIiEEEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPKNSt3__26vectorIiNS2_9allocatorIiEEEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11NoBaseClass3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2520|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2518|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2515|0);
}
function __ZN10emscripten8internal12operator_newINSt3__26vectorIiNS2_9allocatorIiEEEEJEEEPT_DpOT0_() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = sp + 24|0;
 $6 = sp + 12|0;
 $10 = (__Znwj(12)|0);
 $9 = $10;
 $11 = $9;
 $8 = $11;
 $12 = $8;
 $7 = $12;
 HEAP32[$12>>2] = 0;
 $13 = ((($12)) + 4|0);
 HEAP32[$13>>2] = 0;
 $14 = ((($12)) + 8|0);
 $5 = $14;
 HEAP32[$6>>2] = 0;
 $15 = $5;
 $4 = $6;
 $16 = $4;
 $17 = HEAP32[$16>>2]|0;
 $2 = $15;
 HEAP32[$3>>2] = $17;
 $18 = $2;
 $1 = $18;
 $0 = $3;
 $19 = $0;
 $20 = HEAP32[$19>>2]|0;
 HEAP32[$18>>2] = $20;
 STACKTOP = sp;return ($10|0);
}
function __ZN10emscripten8internal7InvokerIPNSt3__26vectorIiNS2_9allocatorIiEEEEJEE6invokeEPFS7_vE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (FUNCTION_TABLE_i[$2 & 127]()|0);
 $4 = (__ZN10emscripten8internal11BindingTypeIPNSt3__26vectorIiNS2_9allocatorIiEEEEE10toWireTypeES7_($3)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPNSt3__26vectorIiNS5_9allocatorIiEEEEEE8getCountEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return 1;
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPNSt3__26vectorIiNS5_9allocatorIiEEEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS0_17AllowedRawPointerINSt3__26vectorIiNS4_9allocatorIiEEEEEEEEEE3getEv()|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorIiNS2_9allocatorIiEEEEFvRKiEvPS6_JS8_EE6invokeERKSA_SB_i($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $6 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $4;
 $8 = (__ZN10emscripten8internal11BindingTypeIPNSt3__26vectorIiNS2_9allocatorIiEEEEE12fromWireTypeES7_($7)|0);
 $9 = $3;
 $$field = HEAP32[$9>>2]|0;
 $$index1 = ((($9)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 $10 = $$field2 >> 1;
 $11 = (($8) + ($10)|0);
 $12 = $$field2 & 1;
 $13 = ($12|0)!=(0);
 if ($13) {
  $14 = HEAP32[$11>>2]|0;
  $15 = (($14) + ($$field)|0);
  $16 = HEAP32[$15>>2]|0;
  $20 = $16;
 } else {
  $17 = $$field;
  $20 = $17;
 }
 $18 = $5;
 $19 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($18)|0);
 HEAP32[$6>>2] = $19;
 FUNCTION_TABLE_vii[$20 & 127]($11,$6);
 STACKTOP = sp;return;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIiNS5_9allocatorIiEEEEEERKiEE8getCountEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return 3;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIiNS5_9allocatorIiEEEEEERKiEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIiNS4_9allocatorIiEEEEEERKiEEEE3getEv()|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2510|0);
}
function __ZN10emscripten8internal10getContextIMNSt3__26vectorIiNS2_9allocatorIiEEEEFvRKiEEEPT_RKSB_($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__Znwj(8)|0);
 $3 = $1;
 $$field = HEAP32[$3>>2]|0;
 $$index1 = ((($3)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 HEAP32[$2>>2] = $$field;
 $$index5 = ((($2)) + 4|0);
 HEAP32[$$index5>>2] = $$field2;
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorIiNS2_9allocatorIiEEEEFvjRKiEvPS6_JjS8_EE6invokeERKSA_SB_ji($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $8 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $9 = $5;
 $10 = (__ZN10emscripten8internal11BindingTypeIPNSt3__26vectorIiNS2_9allocatorIiEEEEE12fromWireTypeES7_($9)|0);
 $11 = $4;
 $$field = HEAP32[$11>>2]|0;
 $$index1 = ((($11)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 $12 = $$field2 >> 1;
 $13 = (($10) + ($12)|0);
 $14 = $$field2 & 1;
 $15 = ($14|0)!=(0);
 if ($15) {
  $16 = HEAP32[$13>>2]|0;
  $17 = (($16) + ($$field)|0);
  $18 = HEAP32[$17>>2]|0;
  $24 = $18;
 } else {
  $19 = $$field;
  $24 = $19;
 }
 $20 = $6;
 $21 = (__ZN10emscripten8internal11BindingTypeIjE12fromWireTypeEj($20)|0);
 $22 = $7;
 $23 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($22)|0);
 HEAP32[$8>>2] = $23;
 FUNCTION_TABLE_viii[$24 & 127]($13,$21,$8);
 STACKTOP = sp;return;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIiNS5_9allocatorIiEEEEEEjRKiEE8getCountEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return 4;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIiNS5_9allocatorIiEEEEEEjRKiEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIiNS4_9allocatorIiEEEEEEjRKiEEEE3getEv()|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJviiiiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2467|0);
}
function __ZN10emscripten8internal10getContextIMNSt3__26vectorIiNS2_9allocatorIiEEEEFvjRKiEEEPT_RKSB_($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__Znwj(8)|0);
 $3 = $1;
 $$field = HEAP32[$3>>2]|0;
 $$index1 = ((($3)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 HEAP32[$2>>2] = $$field;
 $$index5 = ((($2)) + 4|0);
 HEAP32[$$index5>>2] = $$field2;
 STACKTOP = sp;return ($2|0);
}
function __ZNKSt3__26vectorIiNS_9allocatorIiEEE4sizeEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$2>>2]|0;
 $6 = $4;
 $7 = $5;
 $8 = (($6) - ($7))|0;
 $9 = (($8|0) / 4)&-1;
 STACKTOP = sp;return ($9|0);
}
function __ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorIiNS2_9allocatorIiEEEEKFjvEjPKS6_JEE6invokeERKS8_SA_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $2 = $0;
 $3 = $1;
 $5 = $3;
 $6 = (__ZN10emscripten8internal11BindingTypeIPKNSt3__26vectorIiNS2_9allocatorIiEEEEE12fromWireTypeES8_($5)|0);
 $7 = $2;
 $$field = HEAP32[$7>>2]|0;
 $$index1 = ((($7)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 $8 = $$field2 >> 1;
 $9 = (($6) + ($8)|0);
 $10 = $$field2 & 1;
 $11 = ($10|0)!=(0);
 if ($11) {
  $12 = HEAP32[$9>>2]|0;
  $13 = (($12) + ($$field)|0);
  $14 = HEAP32[$13>>2]|0;
  $16 = $14;
 } else {
  $15 = $$field;
  $16 = $15;
 }
 $17 = (FUNCTION_TABLE_ii[$16 & 127]($9)|0);
 HEAP32[$4>>2] = $17;
 $18 = (__ZN10emscripten8internal11BindingTypeIjE10toWireTypeERKj($4)|0);
 STACKTOP = sp;return ($18|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJjNS0_17AllowedRawPointerIKNSt3__26vectorIiNS5_9allocatorIiEEEEEEEE8getCountEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return 2;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJjNS0_17AllowedRawPointerIKNSt3__26vectorIiNS5_9allocatorIiEEEEEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJjNS0_17AllowedRawPointerIKNSt3__26vectorIiNS4_9allocatorIiEEEEEEEEEE3getEv()|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2425|0);
}
function __ZN10emscripten8internal10getContextIMNSt3__26vectorIiNS2_9allocatorIiEEEEKFjvEEEPT_RKS9_($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__Znwj(8)|0);
 $3 = $1;
 $$field = HEAP32[$3>>2]|0;
 $$index1 = ((($3)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 HEAP32[$2>>2] = $$field;
 $$index5 = ((($2)) + 4|0);
 HEAP32[$$index5>>2] = $$field2;
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal12VectorAccessINSt3__26vectorIiNS2_9allocatorIiEEEEE3getERKS6_j($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $1;
 $7 = $2;
 $8 = $7;
 $9 = $6;
 $5 = $9;
 $10 = $5;
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$10>>2]|0;
 $14 = $12;
 $15 = $13;
 $16 = (($14) - ($15))|0;
 $17 = (($16|0) / 4)&-1;
 $18 = ($8>>>0)<($17>>>0);
 if ($18) {
  $19 = $6;
  $20 = $7;
  $3 = $19;
  $4 = $20;
  $21 = $3;
  $22 = HEAP32[$21>>2]|0;
  $23 = $4;
  $24 = (($22) + ($23<<2)|0);
  __ZN10emscripten3valC2IRKiEEOT_($0,$24);
  STACKTOP = sp;return;
 } else {
  __ZN10emscripten3val9undefinedEv($0);
  STACKTOP = sp;return;
 }
}
function __ZN10emscripten8internal15FunctionInvokerIPFNS_3valERKNSt3__26vectorIiNS3_9allocatorIiEEEEjES2_S9_JjEE6invokeEPSB_PS7_j($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = sp + 8|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $9 = $3;
 $10 = HEAP32[$9>>2]|0;
 $11 = $4;
 $12 = (__ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorIiNS2_9allocatorIiEEEEE12fromWireTypeEPS6_($11)|0);
 $13 = $5;
 $14 = (__ZN10emscripten8internal11BindingTypeIjE12fromWireTypeEj($13)|0);
 FUNCTION_TABLE_viii[$10 & 127]($6,$12,$14);
 __THREW__ = 0;
 $15 = (invoke_ii(52,($6|0))|0);
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if ($17) {
  $18 = ___cxa_find_matching_catch_2()|0;
  $19 = tempRet0;
  $7 = $18;
  $8 = $19;
  __ZN10emscripten3valD2Ev($6);
  $20 = $7;
  $21 = $8;
  ___resumeException($20|0);
  // unreachable;
 } else {
  __ZN10emscripten3valD2Ev($6);
  STACKTOP = sp;return ($15|0);
 }
 return (0)|0;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valERKNSt3__26vectorIiNS5_9allocatorIiEEEEjEE8getCountEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return 3;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valERKNSt3__26vectorIiNS5_9allocatorIiEEEEjEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS_3valERKNSt3__26vectorIiNS4_9allocatorIiEEEEjEEEE3getEv()|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJiiiiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2401|0);
}
function __ZN10emscripten8internal10getContextIPFNS_3valERKNSt3__26vectorIiNS3_9allocatorIiEEEEjEEEPT_RKSC_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__Znwj(4)|0);
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$2>>2] = $4;
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal12VectorAccessINSt3__26vectorIiNS2_9allocatorIiEEEEE3setERS6_jRKi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = $5;
 $11 = $6;
 $3 = $10;
 $4 = $11;
 $12 = $3;
 $13 = HEAP32[$12>>2]|0;
 $14 = $4;
 $15 = (($13) + ($14<<2)|0);
 HEAP32[$15>>2] = $9;
 STACKTOP = sp;return 1;
}
function __ZN10emscripten8internal15FunctionInvokerIPFbRNSt3__26vectorIiNS2_9allocatorIiEEEEjRKiEbS7_JjS9_EE6invokeEPSB_PS6_ji($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $8 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $9 = $4;
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (__ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorIiNS2_9allocatorIiEEEEE12fromWireTypeEPS6_($11)|0);
 $13 = $6;
 $14 = (__ZN10emscripten8internal11BindingTypeIjE12fromWireTypeEj($13)|0);
 $15 = $7;
 $16 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($15)|0);
 HEAP32[$8>>2] = $16;
 $17 = (FUNCTION_TABLE_iiii[$10 & 127]($12,$14,$8)|0);
 $18 = (__ZN10emscripten8internal11BindingTypeIbE10toWireTypeEb($17)|0);
 STACKTOP = sp;return ($18|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbRNSt3__26vectorIiNS4_9allocatorIiEEEEjRKiEE8getCountEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return 4;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbRNSt3__26vectorIiNS4_9allocatorIiEEEEjRKiEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbRNSt3__26vectorIiNS3_9allocatorIiEEEEjRKiEEEE3getEv()|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJiiiiiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2278|0);
}
function __ZN10emscripten8internal10getContextIPFbRNSt3__26vectorIiNS2_9allocatorIiEEEEjRKiEEEPT_RKSC_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__Znwj(4)|0);
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$2>>2] = $4;
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbRNSt3__26vectorIiNS3_9allocatorIiEEEEjRKiEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (648|0);
}
function __ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorIiNS2_9allocatorIiEEEEE12fromWireTypeEPS6_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal11BindingTypeIjE12fromWireTypeEj($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal11BindingTypeIbE10toWireTypeEb($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0&1;
 $1 = $2;
 $3 = $1;
 $4 = $3&1;
 STACKTOP = sp;return ($4|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS_3valERKNSt3__26vectorIiNS4_9allocatorIiEEEEjEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (664|0);
}
function __ZN10emscripten8internal11BindingTypeINS_3valEE10toWireTypeERKS2_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 __emval_incref(($3|0));
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 STACKTOP = sp;return ($5|0);
}
function __ZN10emscripten3valD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 __THREW__ = 0;
 invoke_vi(53,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch_3(0|0)|0;
  $7 = tempRet0;
  ___clang_call_terminate($6);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function ___clang_call_terminate($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___cxa_begin_catch(($0|0))|0);
 __ZSt9terminatev();
 // unreachable;
}
function __ZN10emscripten3valC2IRKiEEOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp;
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = $4;
 $2 = $7;
 $8 = $2;
 __ZN10emscripten8internal12WireTypePackIJRKiEEC2ES3_($5,$8);
 $9 = (__ZN10emscripten8internal6TypeIDIRKiE3getEv()|0);
 $10 = (__ZNK10emscripten8internal12WireTypePackIJRKiEEcvPKvEv($5)|0);
 $11 = (__emval_take_value(($9|0),($10|0))|0);
 HEAP32[$6>>2] = $11;
 STACKTOP = sp;return;
}
function __ZN10emscripten3val9undefinedEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2EPNS_8internal7_EM_VALE($0,(1));
 return;
}
function __ZN10emscripten3valC2EPNS_8internal7_EM_VALE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 HEAP32[$4>>2] = $5;
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal12WireTypePackIJRKiEEC2ES3_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $9 = sp;
 $7 = $0;
 $8 = $1;
 $10 = $7;
 $6 = $10;
 $11 = $6;
 HEAP32[$9>>2] = $11;
 $12 = $8;
 $2 = $12;
 $13 = $2;
 $4 = $9;
 $5 = $13;
 $14 = $4;
 $15 = $5;
 $3 = $15;
 $16 = $3;
 $17 = (__ZN10emscripten8internal11BindingTypeIiE10toWireTypeERKi($16)|0);
 __ZN10emscripten8internal20writeGenericWireTypeIiEEvRPNS0_15GenericWireTypeET_($14,$17);
 $18 = $4;
 __ZN10emscripten8internal21writeGenericWireTypesERPNS0_15GenericWireTypeE($18);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal6TypeIDIRKiE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIRKiE3getEv()|0);
 return ($0|0);
}
function __ZNK10emscripten8internal12WireTypePackIJRKiEEcvPKvEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $1 = $3;
 $4 = $1;
 STACKTOP = sp;return ($4|0);
}
function __ZN10emscripten8internal11LightTypeIDIRKiE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (568|0);
}
function __ZN10emscripten8internal11BindingTypeIiE10toWireTypeERKi($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN10emscripten8internal20writeGenericWireTypeIiEEvRPNS0_15GenericWireTypeET_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = $2;
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$6>>2] = $4;
 $7 = $2;
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 8|0);
 HEAP32[$7>>2] = $9;
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal21writeGenericWireTypesERPNS0_15GenericWireTypeE($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJjNS0_17AllowedRawPointerIKNSt3__26vectorIiNS4_9allocatorIiEEEEEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (676|0);
}
function __ZN10emscripten8internal11BindingTypeIPKNSt3__26vectorIiNS2_9allocatorIiEEEEE12fromWireTypeES8_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal11BindingTypeIjE10toWireTypeERKj($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIiNS4_9allocatorIiEEEEEEjRKiEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (684|0);
}
function __ZN10emscripten8internal11BindingTypeIPNSt3__26vectorIiNS2_9allocatorIiEEEEE12fromWireTypeES7_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIiNS4_9allocatorIiEEEEEERKiEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (700|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS0_17AllowedRawPointerINSt3__26vectorIiNS4_9allocatorIiEEEEEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (712|0);
}
function __ZN10emscripten8internal11BindingTypeIPNSt3__26vectorIiNS2_9allocatorIiEEEEE10toWireTypeES7_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal11LightTypeIDIPKNSt3__26vectorIiNS2_9allocatorIiEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (72|0);
}
function __ZN10emscripten8internal11LightTypeIDIPNSt3__26vectorIiNS2_9allocatorIiEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (88|0);
}
function __ZN10emscripten8internal11LightTypeIDINSt3__26vectorIiNS2_9allocatorIiEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (8|0);
}
function __ZNSt3__26vectorIiNS_9allocatorIiEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 __ZNSt3__213__vector_baseIiNS_9allocatorIiEEED2Ev($2);
 STACKTOP = sp;return;
}
function __ZNSt3__213__vector_baseIiNS_9allocatorIiEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $19 = sp;
 $22 = sp + 116|0;
 $30 = $0;
 $31 = $30;
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)!=(0|0);
 if (!($33)) {
  STACKTOP = sp;return;
 }
 $29 = $31;
 $34 = $29;
 $35 = HEAP32[$34>>2]|0;
 $27 = $34;
 $28 = $35;
 $36 = $27;
 while(1) {
  $37 = $28;
  $38 = ((($36)) + 4|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = ($37|0)!=($39|0);
  if (!($40)) {
   break;
  }
  $26 = $36;
  $41 = $26;
  $42 = ((($41)) + 8|0);
  $25 = $42;
  $43 = $25;
  $24 = $43;
  $44 = $24;
  $45 = ((($36)) + 4|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = ((($46)) + -4|0);
  HEAP32[$45>>2] = $47;
  $23 = $47;
  $48 = $23;
  $20 = $44;
  $21 = $48;
  $49 = $20;
  $50 = $21;
  ;HEAP8[$19>>0]=HEAP8[$22>>0]|0;
  $17 = $49;
  $18 = $50;
  $51 = $17;
  $52 = $18;
  $15 = $51;
  $16 = $52;
 }
 $7 = $31;
 $53 = $7;
 $54 = ((($53)) + 8|0);
 $6 = $54;
 $55 = $6;
 $5 = $55;
 $56 = $5;
 $57 = HEAP32[$31>>2]|0;
 $4 = $31;
 $58 = $4;
 $3 = $58;
 $59 = $3;
 $60 = ((($59)) + 8|0);
 $2 = $60;
 $61 = $2;
 $1 = $61;
 $62 = $1;
 $63 = HEAP32[$62>>2]|0;
 $64 = HEAP32[$58>>2]|0;
 $65 = $63;
 $66 = $64;
 $67 = (($65) - ($66))|0;
 $68 = (($67|0) / 4)&-1;
 $12 = $56;
 $13 = $57;
 $14 = $68;
 $69 = $12;
 $70 = $13;
 $71 = $14;
 $9 = $69;
 $10 = $70;
 $11 = $71;
 $72 = $10;
 $8 = $72;
 $73 = $8;
 __ZdlPv($73);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal14getLightTypeIDINSt3__26vectorIiNS2_9allocatorIiEEEEEEPKvRKT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return (8|0);
}
function __ZNSt3__26vectorIiNS_9allocatorIiEEE8__appendEjRKi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $9 = sp + 8|0;
 $12 = sp + 242|0;
 $20 = sp + 176|0;
 $23 = sp + 164|0;
 $36 = sp;
 $41 = sp + 241|0;
 $50 = sp + 240|0;
 $58 = sp + 20|0;
 $54 = $0;
 $55 = $1;
 $56 = $2;
 $61 = $54;
 $53 = $61;
 $62 = $53;
 $63 = ((($62)) + 8|0);
 $52 = $63;
 $64 = $52;
 $51 = $64;
 $65 = $51;
 $66 = HEAP32[$65>>2]|0;
 $67 = ((($61)) + 4|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = $66;
 $70 = $68;
 $71 = (($69) - ($70))|0;
 $72 = (($71|0) / 4)&-1;
 $73 = $55;
 $74 = ($72>>>0)>=($73>>>0);
 if ($74) {
  $75 = $55;
  $76 = $56;
  $46 = $61;
  $47 = $75;
  $48 = $76;
  $77 = $46;
  $45 = $77;
  $78 = $45;
  $79 = ((($78)) + 8|0);
  $44 = $79;
  $80 = $44;
  $43 = $80;
  $81 = $43;
  $49 = $81;
  while(1) {
   __ZNSt3__26vectorIiNS_9allocatorIiEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($50,$77,1);
   $82 = $49;
   $83 = ((($77)) + 4|0);
   $84 = HEAP32[$83>>2]|0;
   $42 = $84;
   $85 = $42;
   $86 = $48;
   $38 = $82;
   $39 = $85;
   $40 = $86;
   $87 = $38;
   $88 = $39;
   $89 = $40;
   $37 = $89;
   $90 = $37;
   ;HEAP8[$36>>0]=HEAP8[$41>>0]|0;
   $33 = $87;
   $34 = $88;
   $35 = $90;
   $91 = $33;
   $92 = $34;
   $93 = $35;
   $32 = $93;
   $94 = $32;
   $29 = $91;
   $30 = $92;
   $31 = $94;
   $95 = $30;
   $96 = $31;
   $28 = $96;
   $97 = $28;
   $98 = HEAP32[$97>>2]|0;
   HEAP32[$95>>2] = $98;
   $99 = ((($77)) + 4|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = ((($100)) + 4|0);
   HEAP32[$99>>2] = $101;
   $102 = $47;
   $103 = (($102) + -1)|0;
   $47 = $103;
   __ZNSt3__26vectorIiNS_9allocatorIiEEE24__RAII_IncreaseAnnotator6__doneEv($50);
   $104 = $47;
   $105 = ($104>>>0)>(0);
   if (!($105)) {
    break;
   }
  }
  STACKTOP = sp;return;
 }
 $27 = $61;
 $106 = $27;
 $107 = ((($106)) + 8|0);
 $26 = $107;
 $108 = $26;
 $25 = $108;
 $109 = $25;
 $57 = $109;
 $24 = $61;
 $110 = $24;
 $111 = ((($110)) + 4|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = HEAP32[$110>>2]|0;
 $114 = $112;
 $115 = $113;
 $116 = (($114) - ($115))|0;
 $117 = (($116|0) / 4)&-1;
 $118 = $55;
 $119 = (($117) + ($118))|0;
 $19 = $61;
 HEAP32[$20>>2] = $119;
 $120 = $19;
 $121 = (__ZNKSt3__26vectorIiNS_9allocatorIiEEE8max_sizeEv($120)|0);
 $21 = $121;
 $122 = HEAP32[$20>>2]|0;
 $123 = $21;
 $124 = ($122>>>0)>($123>>>0);
 if ($124) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($120);
 }
 $17 = $120;
 $125 = $17;
 $16 = $125;
 $126 = $16;
 $15 = $126;
 $127 = $15;
 $128 = ((($127)) + 8|0);
 $14 = $128;
 $129 = $14;
 $13 = $129;
 $130 = $13;
 $131 = HEAP32[$130>>2]|0;
 $132 = HEAP32[$126>>2]|0;
 $133 = $131;
 $134 = $132;
 $135 = (($133) - ($134))|0;
 $136 = (($135|0) / 4)&-1;
 $22 = $136;
 $137 = $22;
 $138 = $21;
 $139 = (($138>>>0) / 2)&-1;
 $140 = ($137>>>0)>=($139>>>0);
 if ($140) {
  $141 = $21;
  $18 = $141;
 } else {
  $142 = $22;
  $143 = $142<<1;
  HEAP32[$23>>2] = $143;
  $10 = $23;
  $11 = $20;
  $144 = $10;
  $145 = $11;
  ;HEAP8[$9>>0]=HEAP8[$12>>0]|0;
  $7 = $144;
  $8 = $145;
  $146 = $7;
  $147 = $8;
  $4 = $9;
  $5 = $146;
  $6 = $147;
  $148 = $5;
  $149 = HEAP32[$148>>2]|0;
  $150 = $6;
  $151 = HEAP32[$150>>2]|0;
  $152 = ($149>>>0)<($151>>>0);
  $153 = $8;
  $154 = $7;
  $155 = $152 ? $153 : $154;
  $156 = HEAP32[$155>>2]|0;
  $18 = $156;
 }
 $157 = $18;
 $3 = $61;
 $158 = $3;
 $159 = ((($158)) + 4|0);
 $160 = HEAP32[$159>>2]|0;
 $161 = HEAP32[$158>>2]|0;
 $162 = $160;
 $163 = $161;
 $164 = (($162) - ($163))|0;
 $165 = (($164|0) / 4)&-1;
 $166 = $57;
 __ZNSt3__214__split_bufferIiRNS_9allocatorIiEEEC2EjjS3_($58,$157,$165,$166);
 $167 = $55;
 $168 = $56;
 __THREW__ = 0;
 invoke_viii(54,($58|0),($167|0),($168|0));
 $169 = __THREW__; __THREW__ = 0;
 $170 = $169&1;
 if ($170) {
  $173 = ___cxa_find_matching_catch_2()|0;
  $174 = tempRet0;
  $59 = $173;
  $60 = $174;
  __ZNSt3__214__split_bufferIiRNS_9allocatorIiEEED2Ev($58);
  $175 = $59;
  $176 = $60;
  ___resumeException($175|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vii(55,($61|0),($58|0));
 $171 = __THREW__; __THREW__ = 0;
 $172 = $171&1;
 if ($172) {
  $173 = ___cxa_find_matching_catch_2()|0;
  $174 = tempRet0;
  $59 = $173;
  $60 = $174;
  __ZNSt3__214__split_bufferIiRNS_9allocatorIiEEED2Ev($58);
  $175 = $59;
  $176 = $60;
  ___resumeException($175|0);
  // unreachable;
 }
 __ZNSt3__214__split_bufferIiRNS_9allocatorIiEEED2Ev($58);
 STACKTOP = sp;return;
}
function __ZNKSt3__26vectorIiNS_9allocatorIiEEE17__annotate_shrinkEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $16 = $0;
 $17 = $1;
 $18 = $16;
 $15 = $18;
 $19 = $15;
 $20 = HEAP32[$19>>2]|0;
 $14 = $20;
 $21 = $14;
 $13 = $18;
 $22 = $13;
 $23 = HEAP32[$22>>2]|0;
 $12 = $23;
 $24 = $12;
 $6 = $18;
 $25 = $6;
 $5 = $25;
 $26 = $5;
 $4 = $26;
 $27 = $4;
 $28 = ((($27)) + 8|0);
 $3 = $28;
 $29 = $3;
 $2 = $29;
 $30 = $2;
 $31 = HEAP32[$30>>2]|0;
 $32 = HEAP32[$26>>2]|0;
 $33 = $31;
 $34 = $32;
 $35 = (($33) - ($34))|0;
 $36 = (($35|0) / 4)&-1;
 $37 = (($24) + ($36<<2)|0);
 $8 = $18;
 $38 = $8;
 $39 = HEAP32[$38>>2]|0;
 $7 = $39;
 $40 = $7;
 $41 = $17;
 $42 = (($40) + ($41<<2)|0);
 $10 = $18;
 $43 = $10;
 $44 = HEAP32[$43>>2]|0;
 $9 = $44;
 $45 = $9;
 $11 = $18;
 $46 = $11;
 $47 = ((($46)) + 4|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = HEAP32[$46>>2]|0;
 $50 = $48;
 $51 = $49;
 $52 = (($50) - ($51))|0;
 $53 = (($52|0) / 4)&-1;
 $54 = (($45) + ($53<<2)|0);
 __ZNKSt3__26vectorIiNS_9allocatorIiEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($18,$21,$37,$42,$54);
 STACKTOP = sp;return;
}
function __ZNKSt3__26vectorIiNS_9allocatorIiEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 STACKTOP = sp;return;
}
function __ZNSt3__26vectorIiNS_9allocatorIiEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 STACKTOP = sp;return;
}
function __ZNSt3__26vectorIiNS_9allocatorIiEEE24__RAII_IncreaseAnnotator6__doneEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return;
}
function __ZNKSt3__26vectorIiNS_9allocatorIiEEE8max_sizeEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $6 = sp + 8|0;
 $9 = sp + 77|0;
 $12 = sp;
 $14 = sp + 76|0;
 $19 = sp + 16|0;
 $20 = sp + 12|0;
 $18 = $0;
 $21 = $18;
 $17 = $21;
 $22 = $17;
 $23 = ((($22)) + 8|0);
 $16 = $23;
 $24 = $16;
 $15 = $24;
 $25 = $15;
 $13 = $25;
 $26 = $13;
 ;HEAP8[$12>>0]=HEAP8[$14>>0]|0;
 $11 = $26;
 $27 = $11;
 $10 = $27;
 HEAP32[$19>>2] = 1073741823;
 $28 = (4294967295 / 2)&-1;
 HEAP32[$20>>2] = $28;
 $7 = $19;
 $8 = $20;
 $29 = $7;
 $30 = $8;
 ;HEAP8[$6>>0]=HEAP8[$9>>0]|0;
 $4 = $29;
 $5 = $30;
 $31 = $5;
 $32 = $4;
 $1 = $6;
 $2 = $31;
 $3 = $32;
 $33 = $2;
 $34 = HEAP32[$33>>2]|0;
 $35 = $3;
 $36 = HEAP32[$35>>2]|0;
 $37 = ($34>>>0)<($36>>>0);
 $38 = $5;
 $39 = $4;
 $40 = $37 ? $38 : $39;
 $41 = HEAP32[$40>>2]|0;
 STACKTOP = sp;return ($41|0);
}
function __ZNSt3__214__split_bufferIiRNS_9allocatorIiEEEC2EjjS3_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $21 = sp + 36|0;
 $25 = sp + 20|0;
 $27 = $0;
 $28 = $1;
 $29 = $2;
 $30 = $3;
 $31 = $27;
 $32 = ((($31)) + 12|0);
 $33 = $30;
 $24 = $32;
 HEAP32[$25>>2] = 0;
 $26 = $33;
 $34 = $24;
 $23 = $25;
 $35 = $23;
 $36 = HEAP32[$35>>2]|0;
 $37 = $26;
 $17 = $37;
 $38 = $17;
 $20 = $34;
 HEAP32[$21>>2] = $36;
 $22 = $38;
 $39 = $20;
 $19 = $21;
 $40 = $19;
 $41 = HEAP32[$40>>2]|0;
 HEAP32[$39>>2] = $41;
 $42 = ((($39)) + 4|0);
 $43 = $22;
 $18 = $43;
 $44 = $18;
 HEAP32[$42>>2] = $44;
 $45 = $28;
 $46 = ($45|0)!=(0);
 do {
  if ($46) {
   $6 = $31;
   $47 = $6;
   $48 = ((($47)) + 12|0);
   $5 = $48;
   $49 = $5;
   $4 = $49;
   $50 = $4;
   $51 = ((($50)) + 4|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = $28;
   $12 = $52;
   $13 = $53;
   $54 = $12;
   $55 = $13;
   $9 = $54;
   $10 = $55;
   $11 = 0;
   $56 = $9;
   $57 = $10;
   $8 = $56;
   $58 = ($57>>>0)>(1073741823);
   if ($58) {
    $59 = (___cxa_allocate_exception(4)|0);
    __ZNSt9bad_allocC2Ev($59);
    ___cxa_throw(($59|0),(392|0),(19|0));
    // unreachable;
   } else {
    $60 = $10;
    $61 = $60<<2;
    $7 = $61;
    $62 = $7;
    $63 = (__Znwj($62)|0);
    $64 = $63;
    break;
   }
  } else {
   $64 = 0;
  }
 } while(0);
 HEAP32[$31>>2] = $64;
 $65 = HEAP32[$31>>2]|0;
 $66 = $29;
 $67 = (($65) + ($66<<2)|0);
 $68 = ((($31)) + 8|0);
 HEAP32[$68>>2] = $67;
 $69 = ((($31)) + 4|0);
 HEAP32[$69>>2] = $67;
 $70 = HEAP32[$31>>2]|0;
 $71 = $28;
 $72 = (($70) + ($71<<2)|0);
 $16 = $31;
 $73 = $16;
 $74 = ((($73)) + 12|0);
 $15 = $74;
 $75 = $15;
 $14 = $75;
 $76 = $14;
 HEAP32[$76>>2] = $72;
 STACKTOP = sp;return;
}
function __ZNSt3__214__split_bufferIiRNS_9allocatorIiEEE18__construct_at_endEjRKi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $12 = sp;
 $17 = sp + 84|0;
 $21 = $0;
 $22 = $1;
 $23 = $2;
 $25 = $21;
 $20 = $25;
 $26 = $20;
 $27 = ((($26)) + 12|0);
 $19 = $27;
 $28 = $19;
 $18 = $28;
 $29 = $18;
 $30 = ((($29)) + 4|0);
 $31 = HEAP32[$30>>2]|0;
 $24 = $31;
 while(1) {
  $32 = $24;
  $33 = ((($25)) + 8|0);
  $34 = HEAP32[$33>>2]|0;
  $3 = $34;
  $35 = $3;
  $36 = $23;
  $14 = $32;
  $15 = $35;
  $16 = $36;
  $37 = $14;
  $38 = $15;
  $39 = $16;
  $13 = $39;
  $40 = $13;
  ;HEAP8[$12>>0]=HEAP8[$17>>0]|0;
  $9 = $37;
  $10 = $38;
  $11 = $40;
  $41 = $9;
  $42 = $10;
  $43 = $11;
  $8 = $43;
  $44 = $8;
  $5 = $41;
  $6 = $42;
  $7 = $44;
  $45 = $6;
  $46 = $7;
  $4 = $46;
  $47 = $4;
  $48 = HEAP32[$47>>2]|0;
  HEAP32[$45>>2] = $48;
  $49 = ((($25)) + 8|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($50)) + 4|0);
  HEAP32[$49>>2] = $51;
  $52 = $22;
  $53 = (($52) + -1)|0;
  $22 = $53;
  $54 = $22;
  $55 = ($54>>>0)>(0);
  if (!($55)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__26vectorIiNS_9allocatorIiEEE26__swap_out_circular_bufferERNS_14__split_bufferIiRS2_EE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $7 = sp + 120|0;
 $13 = sp + 96|0;
 $25 = sp + 48|0;
 $36 = $0;
 $37 = $1;
 $38 = $36;
 __ZNKSt3__26vectorIiNS_9allocatorIiEEE17__annotate_deleteEv($38);
 $35 = $38;
 $39 = $35;
 $40 = ((($39)) + 8|0);
 $34 = $40;
 $41 = $34;
 $33 = $41;
 $42 = $33;
 $43 = HEAP32[$38>>2]|0;
 $44 = ((($38)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = $37;
 $47 = ((($46)) + 4|0);
 $27 = $42;
 $28 = $43;
 $29 = $45;
 $30 = $47;
 $48 = $29;
 $49 = $28;
 $50 = $48;
 $51 = $49;
 $52 = (($50) - ($51))|0;
 $53 = (($52|0) / 4)&-1;
 $31 = $53;
 $54 = $31;
 $55 = $30;
 $56 = HEAP32[$55>>2]|0;
 $57 = (0 - ($54))|0;
 $58 = (($56) + ($57<<2)|0);
 HEAP32[$55>>2] = $58;
 $59 = $31;
 $60 = ($59|0)>(0);
 if ($60) {
  $61 = $30;
  $62 = HEAP32[$61>>2]|0;
  $63 = $28;
  $64 = $31;
  $65 = $64<<2;
  _memcpy(($62|0),($63|0),($65|0))|0;
 }
 $66 = $37;
 $67 = ((($66)) + 4|0);
 $5 = $38;
 $6 = $67;
 $68 = $5;
 $4 = $68;
 $69 = $4;
 $70 = HEAP32[$69>>2]|0;
 HEAP32[$7>>2] = $70;
 $71 = $6;
 $2 = $71;
 $72 = $2;
 $73 = HEAP32[$72>>2]|0;
 $74 = $5;
 HEAP32[$74>>2] = $73;
 $3 = $7;
 $75 = $3;
 $76 = HEAP32[$75>>2]|0;
 $77 = $6;
 HEAP32[$77>>2] = $76;
 $78 = ((($38)) + 4|0);
 $79 = $37;
 $80 = ((($79)) + 8|0);
 $11 = $78;
 $12 = $80;
 $81 = $11;
 $10 = $81;
 $82 = $10;
 $83 = HEAP32[$82>>2]|0;
 HEAP32[$13>>2] = $83;
 $84 = $12;
 $8 = $84;
 $85 = $8;
 $86 = HEAP32[$85>>2]|0;
 $87 = $11;
 HEAP32[$87>>2] = $86;
 $9 = $13;
 $88 = $9;
 $89 = HEAP32[$88>>2]|0;
 $90 = $12;
 HEAP32[$90>>2] = $89;
 $16 = $38;
 $91 = $16;
 $92 = ((($91)) + 8|0);
 $15 = $92;
 $93 = $15;
 $14 = $93;
 $94 = $14;
 $95 = $37;
 $19 = $95;
 $96 = $19;
 $97 = ((($96)) + 12|0);
 $18 = $97;
 $98 = $18;
 $17 = $98;
 $99 = $17;
 $23 = $94;
 $24 = $99;
 $100 = $23;
 $22 = $100;
 $101 = $22;
 $102 = HEAP32[$101>>2]|0;
 HEAP32[$25>>2] = $102;
 $103 = $24;
 $20 = $103;
 $104 = $20;
 $105 = HEAP32[$104>>2]|0;
 $106 = $23;
 HEAP32[$106>>2] = $105;
 $21 = $25;
 $107 = $21;
 $108 = HEAP32[$107>>2]|0;
 $109 = $24;
 HEAP32[$109>>2] = $108;
 $110 = $37;
 $111 = ((($110)) + 4|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = $37;
 HEAP32[$113>>2] = $112;
 $26 = $38;
 $114 = $26;
 $115 = ((($114)) + 4|0);
 $116 = HEAP32[$115>>2]|0;
 $117 = HEAP32[$114>>2]|0;
 $118 = $116;
 $119 = $117;
 $120 = (($118) - ($119))|0;
 $121 = (($120|0) / 4)&-1;
 __ZNKSt3__26vectorIiNS_9allocatorIiEEE14__annotate_newEj($38,$121);
 $32 = $38;
 STACKTOP = sp;return;
}
function __ZNSt3__214__split_bufferIiRNS_9allocatorIiEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $19 = sp + 8|0;
 $22 = sp + 133|0;
 $29 = sp;
 $32 = sp + 132|0;
 $34 = $0;
 $35 = $34;
 $33 = $35;
 $36 = $33;
 $37 = ((($36)) + 4|0);
 $38 = HEAP32[$37>>2]|0;
 $30 = $36;
 $31 = $38;
 $39 = $30;
 $40 = $31;
 ;HEAP8[$29>>0]=HEAP8[$32>>0]|0;
 $27 = $39;
 $28 = $40;
 $41 = $27;
 while(1) {
  $42 = $28;
  $43 = ((($41)) + 8|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = ($42|0)!=($44|0);
  if (!($45)) {
   break;
  }
  $26 = $41;
  $46 = $26;
  $47 = ((($46)) + 12|0);
  $25 = $47;
  $48 = $25;
  $24 = $48;
  $49 = $24;
  $50 = ((($49)) + 4|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = ((($41)) + 8|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = ((($53)) + -4|0);
  HEAP32[$52>>2] = $54;
  $23 = $54;
  $55 = $23;
  $20 = $51;
  $21 = $55;
  $56 = $20;
  $57 = $21;
  ;HEAP8[$19>>0]=HEAP8[$22>>0]|0;
  $17 = $56;
  $18 = $57;
  $58 = $17;
  $59 = $18;
  $15 = $58;
  $16 = $59;
 }
 $60 = HEAP32[$35>>2]|0;
 $61 = ($60|0)!=(0|0);
 if (!($61)) {
  STACKTOP = sp;return;
 }
 $14 = $35;
 $62 = $14;
 $63 = ((($62)) + 12|0);
 $13 = $63;
 $64 = $13;
 $12 = $64;
 $65 = $12;
 $66 = ((($65)) + 4|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = HEAP32[$35>>2]|0;
 $4 = $35;
 $69 = $4;
 $3 = $69;
 $70 = $3;
 $71 = ((($70)) + 12|0);
 $2 = $71;
 $72 = $2;
 $1 = $72;
 $73 = $1;
 $74 = HEAP32[$73>>2]|0;
 $75 = HEAP32[$69>>2]|0;
 $76 = $74;
 $77 = $75;
 $78 = (($76) - ($77))|0;
 $79 = (($78|0) / 4)&-1;
 $9 = $67;
 $10 = $68;
 $11 = $79;
 $80 = $9;
 $81 = $10;
 $82 = $11;
 $6 = $80;
 $7 = $81;
 $8 = $82;
 $83 = $7;
 $5 = $83;
 $84 = $5;
 __ZdlPv($84);
 STACKTOP = sp;return;
}
function __ZNKSt3__26vectorIiNS_9allocatorIiEEE17__annotate_deleteEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $20 = $0;
 $21 = $20;
 $19 = $21;
 $22 = $19;
 $23 = HEAP32[$22>>2]|0;
 $18 = $23;
 $24 = $18;
 $17 = $21;
 $25 = $17;
 $26 = HEAP32[$25>>2]|0;
 $16 = $26;
 $27 = $16;
 $5 = $21;
 $28 = $5;
 $4 = $28;
 $29 = $4;
 $3 = $29;
 $30 = $3;
 $31 = ((($30)) + 8|0);
 $2 = $31;
 $32 = $2;
 $1 = $32;
 $33 = $1;
 $34 = HEAP32[$33>>2]|0;
 $35 = HEAP32[$29>>2]|0;
 $36 = $34;
 $37 = $35;
 $38 = (($36) - ($37))|0;
 $39 = (($38|0) / 4)&-1;
 $40 = (($27) + ($39<<2)|0);
 $7 = $21;
 $41 = $7;
 $42 = HEAP32[$41>>2]|0;
 $6 = $42;
 $43 = $6;
 $8 = $21;
 $44 = $8;
 $45 = ((($44)) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = HEAP32[$44>>2]|0;
 $48 = $46;
 $49 = $47;
 $50 = (($48) - ($49))|0;
 $51 = (($50|0) / 4)&-1;
 $52 = (($43) + ($51<<2)|0);
 $10 = $21;
 $53 = $10;
 $54 = HEAP32[$53>>2]|0;
 $9 = $54;
 $55 = $9;
 $15 = $21;
 $56 = $15;
 $14 = $56;
 $57 = $14;
 $13 = $57;
 $58 = $13;
 $59 = ((($58)) + 8|0);
 $12 = $59;
 $60 = $12;
 $11 = $60;
 $61 = $11;
 $62 = HEAP32[$61>>2]|0;
 $63 = HEAP32[$57>>2]|0;
 $64 = $62;
 $65 = $63;
 $66 = (($64) - ($65))|0;
 $67 = (($66|0) / 4)&-1;
 $68 = (($55) + ($67<<2)|0);
 __ZNKSt3__26vectorIiNS_9allocatorIiEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($21,$24,$40,$52,$68);
 STACKTOP = sp;return;
}
function __ZNKSt3__26vectorIiNS_9allocatorIiEEE14__annotate_newEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $20 = $0;
 $21 = $1;
 $22 = $20;
 $19 = $22;
 $23 = $19;
 $24 = HEAP32[$23>>2]|0;
 $18 = $24;
 $25 = $18;
 $17 = $22;
 $26 = $17;
 $27 = HEAP32[$26>>2]|0;
 $16 = $27;
 $28 = $16;
 $6 = $22;
 $29 = $6;
 $5 = $29;
 $30 = $5;
 $4 = $30;
 $31 = $4;
 $32 = ((($31)) + 8|0);
 $3 = $32;
 $33 = $3;
 $2 = $33;
 $34 = $2;
 $35 = HEAP32[$34>>2]|0;
 $36 = HEAP32[$30>>2]|0;
 $37 = $35;
 $38 = $36;
 $39 = (($37) - ($38))|0;
 $40 = (($39|0) / 4)&-1;
 $41 = (($28) + ($40<<2)|0);
 $8 = $22;
 $42 = $8;
 $43 = HEAP32[$42>>2]|0;
 $7 = $43;
 $44 = $7;
 $13 = $22;
 $45 = $13;
 $12 = $45;
 $46 = $12;
 $11 = $46;
 $47 = $11;
 $48 = ((($47)) + 8|0);
 $10 = $48;
 $49 = $10;
 $9 = $49;
 $50 = $9;
 $51 = HEAP32[$50>>2]|0;
 $52 = HEAP32[$46>>2]|0;
 $53 = $51;
 $54 = $52;
 $55 = (($53) - ($54))|0;
 $56 = (($55|0) / 4)&-1;
 $57 = (($44) + ($56<<2)|0);
 $15 = $22;
 $58 = $15;
 $59 = HEAP32[$58>>2]|0;
 $14 = $59;
 $60 = $14;
 $61 = $21;
 $62 = (($60) + ($61<<2)|0);
 __ZNKSt3__26vectorIiNS_9allocatorIiEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($22,$25,$41,$57,$62);
 STACKTOP = sp;return;
}
function __ZNSt3__26vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIRKiEEvOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $10 = sp + 8|0;
 $15 = sp + 201|0;
 $24 = sp;
 $27 = sp + 200|0;
 $35 = sp + 80|0;
 $38 = sp + 68|0;
 $46 = sp + 20|0;
 $43 = $0;
 $44 = $1;
 $49 = $43;
 $42 = $49;
 $50 = $42;
 $51 = ((($50)) + 8|0);
 $41 = $51;
 $52 = $41;
 $40 = $52;
 $53 = $40;
 $45 = $53;
 $39 = $49;
 $54 = $39;
 $55 = ((($54)) + 4|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = HEAP32[$54>>2]|0;
 $58 = $56;
 $59 = $57;
 $60 = (($58) - ($59))|0;
 $61 = (($60|0) / 4)&-1;
 $62 = (($61) + 1)|0;
 $34 = $49;
 HEAP32[$35>>2] = $62;
 $63 = $34;
 $64 = (__ZNKSt3__26vectorIiNS_9allocatorIiEEE8max_sizeEv($63)|0);
 $36 = $64;
 $65 = HEAP32[$35>>2]|0;
 $66 = $36;
 $67 = ($65>>>0)>($66>>>0);
 if ($67) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($63);
 }
 $32 = $63;
 $68 = $32;
 $31 = $68;
 $69 = $31;
 $30 = $69;
 $70 = $30;
 $71 = ((($70)) + 8|0);
 $29 = $71;
 $72 = $29;
 $28 = $72;
 $73 = $28;
 $74 = HEAP32[$73>>2]|0;
 $75 = HEAP32[$69>>2]|0;
 $76 = $74;
 $77 = $75;
 $78 = (($76) - ($77))|0;
 $79 = (($78|0) / 4)&-1;
 $37 = $79;
 $80 = $37;
 $81 = $36;
 $82 = (($81>>>0) / 2)&-1;
 $83 = ($80>>>0)>=($82>>>0);
 if ($83) {
  $84 = $36;
  $33 = $84;
 } else {
  $85 = $37;
  $86 = $85<<1;
  HEAP32[$38>>2] = $86;
  $25 = $38;
  $26 = $35;
  $87 = $25;
  $88 = $26;
  ;HEAP8[$24>>0]=HEAP8[$27>>0]|0;
  $22 = $87;
  $23 = $88;
  $89 = $22;
  $90 = $23;
  $19 = $24;
  $20 = $89;
  $21 = $90;
  $91 = $20;
  $92 = HEAP32[$91>>2]|0;
  $93 = $21;
  $94 = HEAP32[$93>>2]|0;
  $95 = ($92>>>0)<($94>>>0);
  $96 = $23;
  $97 = $22;
  $98 = $95 ? $96 : $97;
  $99 = HEAP32[$98>>2]|0;
  $33 = $99;
 }
 $100 = $33;
 $18 = $49;
 $101 = $18;
 $102 = ((($101)) + 4|0);
 $103 = HEAP32[$102>>2]|0;
 $104 = HEAP32[$101>>2]|0;
 $105 = $103;
 $106 = $104;
 $107 = (($105) - ($106))|0;
 $108 = (($107|0) / 4)&-1;
 $109 = $45;
 __ZNSt3__214__split_bufferIiRNS_9allocatorIiEEEC2EjjS3_($46,$100,$108,$109);
 $110 = $45;
 $111 = ((($46)) + 8|0);
 $112 = HEAP32[$111>>2]|0;
 $17 = $112;
 $113 = $17;
 $114 = $44;
 $16 = $114;
 $115 = $16;
 $12 = $110;
 $13 = $113;
 $14 = $115;
 $116 = $12;
 $117 = $13;
 $118 = $14;
 $11 = $118;
 $119 = $11;
 ;HEAP8[$10>>0]=HEAP8[$15>>0]|0;
 $7 = $116;
 $8 = $117;
 $9 = $119;
 $120 = $7;
 $121 = $8;
 $122 = $9;
 $6 = $122;
 $123 = $6;
 $3 = $120;
 $4 = $121;
 $5 = $123;
 $124 = $4;
 $125 = $5;
 $2 = $125;
 $126 = $2;
 $127 = HEAP32[$126>>2]|0;
 HEAP32[$124>>2] = $127;
 $128 = ((($46)) + 8|0);
 $129 = HEAP32[$128>>2]|0;
 $130 = ((($129)) + 4|0);
 HEAP32[$128>>2] = $130;
 __THREW__ = 0;
 invoke_vii(55,($49|0),($46|0));
 $131 = __THREW__; __THREW__ = 0;
 $132 = $131&1;
 if ($132) {
  $133 = ___cxa_find_matching_catch_2()|0;
  $134 = tempRet0;
  $47 = $133;
  $48 = $134;
  __ZNSt3__214__split_bufferIiRNS_9allocatorIiEEED2Ev($46);
  $135 = $47;
  $136 = $48;
  ___resumeException($135|0);
  // unreachable;
 } else {
  __ZNSt3__214__split_bufferIiRNS_9allocatorIiEEED2Ev($46);
  STACKTOP = sp;return;
 }
}
function __ZN15score_estimator45EmscriptenBindingInitializer_my_class_exampleC2Ev($0) {
 $0 = $0|0;
 var $$field = 0, $$field11 = 0, $$field14 = 0, $$field21 = 0, $$field24 = 0, $$field31 = 0, $$field34 = 0, $$field4 = 0, $$field41 = 0, $$field44 = 0, $$index1 = 0, $$index13 = 0, $$index17 = 0, $$index19 = 0, $$index23 = 0, $$index27 = 0, $$index29 = 0, $$index3 = 0, $$index33 = 0, $$index37 = 0;
 var $$index39 = 0, $$index43 = 0, $$index47 = 0, $$index7 = 0, $$index9 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(288|0);
 $4 = sp + 248|0;
 $6 = sp + 275|0;
 $7 = sp + 32|0;
 $11 = sp + 224|0;
 $13 = sp + 274|0;
 $14 = sp + 24|0;
 $18 = sp + 200|0;
 $20 = sp + 273|0;
 $21 = sp + 16|0;
 $25 = sp + 176|0;
 $27 = sp + 272|0;
 $28 = sp + 8|0;
 $32 = sp + 152|0;
 $34 = sp + 271|0;
 $35 = sp;
 $39 = sp + 270|0;
 $53 = sp + 269|0;
 $54 = sp + 72|0;
 $55 = sp + 64|0;
 $56 = sp + 56|0;
 $57 = sp + 48|0;
 $58 = sp + 40|0;
 $59 = sp + 268|0;
 $52 = $0;
 $46 = $53;
 $47 = 2523;
 __ZN10emscripten8internal11NoBaseClass6verifyIN15score_estimator5GobanEEEvv();
 $48 = 56;
 $60 = (__ZN10emscripten8internal11NoBaseClass11getUpcasterIN15score_estimator5GobanEEEPFvvEv()|0);
 $49 = $60;
 $61 = (__ZN10emscripten8internal11NoBaseClass13getDowncasterIN15score_estimator5GobanEEEPFvvEv()|0);
 $50 = $61;
 $51 = 57;
 $62 = (__ZN10emscripten8internal6TypeIDIN15score_estimator5GobanEE3getEv()|0);
 $63 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIN15score_estimator5GobanEEEE3getEv()|0);
 $64 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIKN15score_estimator5GobanEEEE3getEv()|0);
 $65 = (__ZN10emscripten8internal11NoBaseClass3getEv()|0);
 $66 = $48;
 $45 = $66;
 $67 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $68 = $48;
 $69 = $49;
 $44 = $69;
 $70 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $71 = $49;
 $72 = $50;
 $43 = $72;
 $73 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $74 = $50;
 $75 = $47;
 $76 = $51;
 $42 = $76;
 $77 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
 $78 = $51;
 __embind_register_class(($62|0),($63|0),($64|0),($65|0),($67|0),($68|0),($70|0),($71|0),($73|0),($74|0),($75|0),($77|0),($78|0));
 $41 = $53;
 $79 = $41;
 $37 = $79;
 $38 = 58;
 $80 = $37;
 $40 = 59;
 $81 = (__ZN10emscripten8internal6TypeIDIN15score_estimator5GobanEE3getEv()|0);
 $82 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPN15score_estimator5GobanEEE8getCountEv($39)|0);
 $83 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPN15score_estimator5GobanEEE8getTypesEv($39)|0);
 $84 = $40;
 $36 = $84;
 $85 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $86 = $40;
 $87 = $38;
 __embind_register_class_constructor(($81|0),($82|0),($83|0),($85|0),($86|0),($87|0));
 HEAP32[$54>>2] = (60);
 $$index1 = ((($54)) + 4|0);
 HEAP32[$$index1>>2] = 0;
 ;HEAP8[$35>>0]=HEAP8[$54>>0]|0;HEAP8[$35+1>>0]=HEAP8[$54+1>>0]|0;HEAP8[$35+2>>0]=HEAP8[$54+2>>0]|0;HEAP8[$35+3>>0]=HEAP8[$54+3>>0]|0;HEAP8[$35+4>>0]=HEAP8[$54+4>>0]|0;HEAP8[$35+5>>0]=HEAP8[$54+5>>0]|0;HEAP8[$35+6>>0]=HEAP8[$54+6>>0]|0;HEAP8[$35+7>>0]=HEAP8[$54+7>>0]|0;
 $$field = HEAP32[$35>>2]|0;
 $$index3 = ((($35)) + 4|0);
 $$field4 = HEAP32[$$index3>>2]|0;
 $30 = $80;
 $31 = 2529;
 HEAP32[$32>>2] = $$field;
 $$index7 = ((($32)) + 4|0);
 HEAP32[$$index7>>2] = $$field4;
 $88 = $30;
 $33 = 61;
 $89 = (__ZN10emscripten8internal6TypeIDIN15score_estimator5GobanEE3getEv()|0);
 $90 = $31;
 $91 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN15score_estimator5GobanENS0_17AllowedRawPointerIS5_EENS4_5ColorEifEE8getCountEv($34)|0);
 $92 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN15score_estimator5GobanENS0_17AllowedRawPointerIS5_EENS4_5ColorEifEE8getTypesEv($34)|0);
 $93 = $33;
 $29 = $93;
 $94 = (__ZN10emscripten8internal19getGenericSignatureIJiiiiifEEEPKcv()|0);
 $95 = $33;
 $96 = (__ZN10emscripten8internal10getContextIMN15score_estimator5GobanEFS3_NS2_5ColorEifEEEPT_RKS7_($32)|0);
 __embind_register_class_function(($89|0),($90|0),($91|0),($92|0),($94|0),($95|0),($96|0),0);
 HEAP32[$55>>2] = (62);
 $$index9 = ((($55)) + 4|0);
 HEAP32[$$index9>>2] = 0;
 ;HEAP8[$28>>0]=HEAP8[$55>>0]|0;HEAP8[$28+1>>0]=HEAP8[$55+1>>0]|0;HEAP8[$28+2>>0]=HEAP8[$55+2>>0]|0;HEAP8[$28+3>>0]=HEAP8[$55+3>>0]|0;HEAP8[$28+4>>0]=HEAP8[$55+4>>0]|0;HEAP8[$28+5>>0]=HEAP8[$55+5>>0]|0;HEAP8[$28+6>>0]=HEAP8[$55+6>>0]|0;HEAP8[$28+7>>0]=HEAP8[$55+7>>0]|0;
 $$field11 = HEAP32[$28>>2]|0;
 $$index13 = ((($28)) + 4|0);
 $$field14 = HEAP32[$$index13>>2]|0;
 $23 = $88;
 $24 = 2538;
 HEAP32[$25>>2] = $$field11;
 $$index17 = ((($25)) + 4|0);
 HEAP32[$$index17>>2] = $$field14;
 $97 = $23;
 $26 = 63;
 $98 = (__ZN10emscripten8internal6TypeIDIN15score_estimator5GobanEE3getEv()|0);
 $99 = $24;
 $100 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiNS0_17AllowedRawPointerIN15score_estimator5GobanEEEEE8getCountEv($27)|0);
 $101 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiNS0_17AllowedRawPointerIN15score_estimator5GobanEEEEE8getTypesEv($27)|0);
 $102 = $26;
 $22 = $102;
 $103 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 $104 = $26;
 $105 = (__ZN10emscripten8internal10getContextIMN15score_estimator5GobanEFivEEEPT_RKS6_($25)|0);
 __embind_register_class_function(($98|0),($99|0),($100|0),($101|0),($103|0),($104|0),($105|0),0);
 HEAP32[$56>>2] = (64);
 $$index19 = ((($56)) + 4|0);
 HEAP32[$$index19>>2] = 0;
 ;HEAP8[$21>>0]=HEAP8[$56>>0]|0;HEAP8[$21+1>>0]=HEAP8[$56+1>>0]|0;HEAP8[$21+2>>0]=HEAP8[$56+2>>0]|0;HEAP8[$21+3>>0]=HEAP8[$56+3>>0]|0;HEAP8[$21+4>>0]=HEAP8[$56+4>>0]|0;HEAP8[$21+5>>0]=HEAP8[$56+5>>0]|0;HEAP8[$21+6>>0]=HEAP8[$56+6>>0]|0;HEAP8[$21+7>>0]=HEAP8[$56+7>>0]|0;
 $$field21 = HEAP32[$21>>2]|0;
 $$index23 = ((($21)) + 4|0);
 $$field24 = HEAP32[$$index23>>2]|0;
 $16 = $97;
 $17 = 2544;
 HEAP32[$18>>2] = $$field21;
 $$index27 = ((($18)) + 4|0);
 HEAP32[$$index27>>2] = $$field24;
 $106 = $16;
 $19 = 65;
 $107 = (__ZN10emscripten8internal6TypeIDIN15score_estimator5GobanEE3getEv()|0);
 $108 = $17;
 $109 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerIN15score_estimator5GobanEEEEE8getCountEv($20)|0);
 $110 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerIN15score_estimator5GobanEEEEE8getTypesEv($20)|0);
 $111 = $19;
 $15 = $111;
 $112 = (__ZN10emscripten8internal19getGenericSignatureIJviiEEEPKcv()|0);
 $113 = $19;
 $114 = (__ZN10emscripten8internal10getContextIMN15score_estimator5GobanEFvvEEEPT_RKS6_($18)|0);
 __embind_register_class_function(($107|0),($108|0),($109|0),($110|0),($112|0),($113|0),($114|0),0);
 HEAP32[$57>>2] = (66);
 $$index29 = ((($57)) + 4|0);
 HEAP32[$$index29>>2] = 0;
 ;HEAP8[$14>>0]=HEAP8[$57>>0]|0;HEAP8[$14+1>>0]=HEAP8[$57+1>>0]|0;HEAP8[$14+2>>0]=HEAP8[$57+2>>0]|0;HEAP8[$14+3>>0]=HEAP8[$57+3>>0]|0;HEAP8[$14+4>>0]=HEAP8[$57+4>>0]|0;HEAP8[$14+5>>0]=HEAP8[$57+5>>0]|0;HEAP8[$14+6>>0]=HEAP8[$57+6>>0]|0;HEAP8[$14+7>>0]=HEAP8[$57+7>>0]|0;
 $$field31 = HEAP32[$14>>2]|0;
 $$index33 = ((($14)) + 4|0);
 $$field34 = HEAP32[$$index33>>2]|0;
 $9 = $106;
 $10 = 2550;
 HEAP32[$11>>2] = $$field31;
 $$index37 = ((($11)) + 4|0);
 HEAP32[$$index37>>2] = $$field34;
 $115 = $9;
 $12 = 67;
 $116 = (__ZN10emscripten8internal6TypeIDIN15score_estimator5GobanEE3getEv()|0);
 $117 = $10;
 $118 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__26vectorIiNS4_9allocatorIiEEEENS0_17AllowedRawPointerIN15score_estimator5GobanEEEEE8getCountEv($13)|0);
 $119 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__26vectorIiNS4_9allocatorIiEEEENS0_17AllowedRawPointerIN15score_estimator5GobanEEEEE8getTypesEv($13)|0);
 $120 = $12;
 $8 = $120;
 $121 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 $122 = $12;
 $123 = (__ZN10emscripten8internal10getContextIMN15score_estimator5GobanEFNSt3__26vectorIiNS4_9allocatorIiEEEEvEEEPT_RKSB_($11)|0);
 __embind_register_class_function(($116|0),($117|0),($118|0),($119|0),($121|0),($122|0),($123|0),0);
 HEAP32[$58>>2] = (68);
 $$index39 = ((($58)) + 4|0);
 HEAP32[$$index39>>2] = 0;
 ;HEAP8[$7>>0]=HEAP8[$58>>0]|0;HEAP8[$7+1>>0]=HEAP8[$58+1>>0]|0;HEAP8[$7+2>>0]=HEAP8[$58+2>>0]|0;HEAP8[$7+3>>0]=HEAP8[$58+3>>0]|0;HEAP8[$7+4>>0]=HEAP8[$58+4>>0]|0;HEAP8[$7+5>>0]=HEAP8[$58+5>>0]|0;HEAP8[$7+6>>0]=HEAP8[$58+6>>0]|0;HEAP8[$7+7>>0]=HEAP8[$58+7>>0]|0;
 $$field41 = HEAP32[$7>>2]|0;
 $$index43 = ((($7)) + 4|0);
 $$field44 = HEAP32[$$index43>>2]|0;
 $2 = $115;
 $3 = 2565;
 HEAP32[$4>>2] = $$field41;
 $$index47 = ((($4)) + 4|0);
 HEAP32[$$index47>>2] = $$field44;
 $5 = 69;
 $124 = (__ZN10emscripten8internal6TypeIDIN15score_estimator5GobanEE3getEv()|0);
 $125 = $3;
 $126 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerIN15score_estimator5GobanEEENSt3__26vectorIiNS8_9allocatorIiEEEEiEE8getCountEv($6)|0);
 $127 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerIN15score_estimator5GobanEEENSt3__26vectorIiNS8_9allocatorIiEEEEiEE8getTypesEv($6)|0);
 $128 = $5;
 $1 = $128;
 $129 = (__ZN10emscripten8internal19getGenericSignatureIJviiiiEEEPKcv()|0);
 $130 = $5;
 $131 = (__ZN10emscripten8internal10getContextIMN15score_estimator5GobanEFvNSt3__26vectorIiNS4_9allocatorIiEEEEiEEEPT_RKSB_($4)|0);
 __embind_register_class_function(($124|0),($125|0),($126|0),($127|0),($129|0),($130|0),($131|0),0);
 __ZN10emscripten5enum_IN15score_estimator5ColorEEC2EPKc($59,2579);
 $132 = (__ZN10emscripten5enum_IN15score_estimator5ColorEE5valueEPKcS2_($59,2585,0)|0);
 $133 = (__ZN10emscripten5enum_IN15score_estimator5ColorEE5valueEPKcS2_($132,2591,1)|0);
 (__ZN10emscripten5enum_IN15score_estimator5ColorEE5valueEPKcS2_($133,2597,-1)|0);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal11NoBaseClass6verifyIN15score_estimator5GobanEEEvv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10emscripten8internal13getActualTypeIN15score_estimator5GobanEEEPKvPT_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (__ZN10emscripten8internal14getLightTypeIDIN15score_estimator5GobanEEEPKvRKT_($2)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZN10emscripten8internal11NoBaseClass11getUpcasterIN15score_estimator5GobanEEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal11NoBaseClass13getDowncasterIN15score_estimator5GobanEEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal14raw_destructorIN15score_estimator5GobanEEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  __ZdlPv($2);
 }
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal6TypeIDIN15score_estimator5GobanEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIN15score_estimator5GobanEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIN15score_estimator5GobanEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPN15score_estimator5GobanEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIKN15score_estimator5GobanEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPKN15score_estimator5GobanEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal12operator_newIN15score_estimator5GobanEJEEEPT_DpOT0_() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = (__Znwj(2520)|0);
 __THREW__ = 0;
 invoke_vi(70,($2|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch_2()|0;
  $6 = tempRet0;
  $0 = $5;
  $1 = $6;
  __ZdlPv($2);
  $7 = $0;
  $8 = $1;
  ___resumeException($7|0);
  // unreachable;
 } else {
  STACKTOP = sp;return ($2|0);
 }
 return (0)|0;
}
function __ZN10emscripten8internal7InvokerIPN15score_estimator5GobanEJEE6invokeEPFS4_vE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (FUNCTION_TABLE_i[$2 & 127]()|0);
 $4 = (__ZN10emscripten8internal11BindingTypeIPN15score_estimator5GobanEE10toWireTypeES4_($3)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPN15score_estimator5GobanEEE8getCountEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return 1;
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPN15score_estimator5GobanEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS0_17AllowedRawPointerIN15score_estimator5GobanEEEEEEE3getEv()|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN15score_estimator5Goban8estimateENS_5ColorEif($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = +$4;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0.0, $117 = 0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0.0, $133 = 0, $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 7776|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(7776|0);
 $$byval_copy7 = sp + 7768|0;
 $$byval_copy6 = sp + 7760|0;
 $$byval_copy5 = sp + 7752|0;
 $$byval_copy4 = sp + 7744|0;
 $$byval_copy3 = sp + 7736|0;
 $$byval_copy2 = sp + 7728|0;
 $$byval_copy1 = sp + 7720|0;
 $$byval_copy = sp + 7712|0;
 $9 = sp + 5192|0;
 $10 = sp + 5184|0;
 $12 = sp + 2656|0;
 $15 = sp + 2640|0;
 $16 = sp + 2632|0;
 $17 = sp + 2624|0;
 $18 = sp + 2616|0;
 $19 = sp + 2608|0;
 $22 = sp + 80|0;
 $25 = sp + 64|0;
 $28 = sp + 48|0;
 $31 = sp + 32|0;
 $32 = sp + 24|0;
 $33 = sp + 16|0;
 $34 = sp + 8|0;
 $35 = sp;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 $36 = $5;
 __ZN15score_estimator5GobanC2ERKS0_($0,$36);
 $37 = ((($36)) + 2508|0);
 HEAP32[$37>>2] = 0;
 __ZN15score_estimator5PointC2Eii($10,-1,-1);
 $38 = ((($36)) + 2512|0);
 ;HEAP32[$38>>2]=HEAP32[$10>>2]|0;HEAP32[$38+4>>2]=HEAP32[$10+4>>2]|0;
 _memset(($9|0),0,2500)|0;
 $11 = 0;
 while(1) {
  $39 = $11;
  $40 = $7;
  $41 = ($39|0)<($40|0);
  if (!($41)) {
   break;
  }
  __ZN15score_estimator5GobanC2ERKS0_($12,$36);
  $42 = $6;
  __ZN15score_estimator5Goban17play_out_positionENS_5ColorE($12,$42);
  $13 = 0;
  while(1) {
   $43 = $13;
   $44 = ((($36)) + 4|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = ($43|0)<($45|0);
   if (!($46)) {
    break;
   }
   $14 = 0;
   while(1) {
    $47 = $14;
    $48 = HEAP32[$36>>2]|0;
    $49 = ($47|0)<($48|0);
    if (!($49)) {
     break;
    }
    $50 = $14;
    $51 = $13;
    __ZN15score_estimator5PointC2Eii($15,$50,$51);
    $52 = (__ZN15score_estimator5GobanixERKNS_5PointE($12,$15)|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = ($53|0)==(0);
    if ($54) {
     ;HEAP32[$16>>2]=HEAP32[$15>>2]|0;HEAP32[$16+4>>2]=HEAP32[$15+4>>2]|0;
     ;HEAP32[$$byval_copy>>2]=HEAP32[$16>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$16+4>>2]|0;
     $55 = (__ZN15score_estimator5Goban12is_territoryENS_5PointENS_5ColorE($12,$$byval_copy,1)|0);
     if ($55) {
      ;HEAP32[$17>>2]=HEAP32[$15>>2]|0;HEAP32[$17+4>>2]=HEAP32[$15+4>>2]|0;
      ;HEAP32[$$byval_copy1>>2]=HEAP32[$17>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$17+4>>2]|0;
      __ZN15score_estimator5Goban14fill_territoryENS_5PointENS_5ColorE($12,$$byval_copy1,1);
     }
     ;HEAP32[$18>>2]=HEAP32[$15>>2]|0;HEAP32[$18+4>>2]=HEAP32[$15+4>>2]|0;
     ;HEAP32[$$byval_copy2>>2]=HEAP32[$18>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$18+4>>2]|0;
     $56 = (__ZN15score_estimator5Goban12is_territoryENS_5PointENS_5ColorE($12,$$byval_copy2,-1)|0);
     if ($56) {
      ;HEAP32[$19>>2]=HEAP32[$15>>2]|0;HEAP32[$19+4>>2]=HEAP32[$15+4>>2]|0;
      ;HEAP32[$$byval_copy3>>2]=HEAP32[$19>>2]|0;HEAP32[$$byval_copy3+4>>2]=HEAP32[$19+4>>2]|0;
      __ZN15score_estimator5Goban14fill_territoryENS_5PointENS_5ColorE($12,$$byval_copy3,-1);
     }
    }
    $57 = $14;
    $58 = (($57) + 1)|0;
    $14 = $58;
   }
   $59 = $13;
   $60 = (($59) + 1)|0;
   $13 = $60;
  }
  $20 = 0;
  while(1) {
   $61 = $20;
   $62 = ((($36)) + 4|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = ($61|0)<($63|0);
   if (!($64)) {
    break;
   }
   $21 = 0;
   while(1) {
    $65 = $21;
    $66 = HEAP32[$36>>2]|0;
    $67 = ($65|0)<($66|0);
    if (!($67)) {
     break;
    }
    $68 = ((($12)) + 8|0);
    $69 = $20;
    $70 = (($68) + (($69*100)|0)|0);
    $71 = $21;
    $72 = (($70) + ($71<<2)|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = $20;
    $75 = (($9) + (($74*100)|0)|0);
    $76 = $21;
    $77 = (($75) + ($76<<2)|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = (($78) + ($73))|0;
    HEAP32[$77>>2] = $79;
    $80 = $21;
    $81 = (($80) + 1)|0;
    $21 = $81;
   }
   $82 = $20;
   $83 = (($82) + 1)|0;
   $20 = $83;
  }
  $84 = $11;
  $85 = (($84) + 1)|0;
  $11 = $85;
 }
 __ZN15score_estimator5GobanC2Ev($22);
 $23 = 0;
 while(1) {
  $86 = $23;
  $87 = ((($36)) + 4|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = ($86|0)<($88|0);
  if (!($89)) {
   break;
  }
  $24 = 0;
  while(1) {
   $90 = $24;
   $91 = HEAP32[$36>>2]|0;
   $92 = ($90|0)<($91|0);
   if (!($92)) {
    break;
   }
   $93 = $24;
   $94 = $23;
   __ZN15score_estimator5PointC2Eii($25,$93,$94);
   $95 = (__ZN15score_estimator5GobanixERKNS_5PointE($22,$25)|0);
   $96 = HEAP32[$95>>2]|0;
   $97 = ($96|0)!=(0);
   if (!($97)) {
    __ZN15score_estimator5Goban29synchronize_tracking_countersEPA25_iRS0_RNS_5PointE($36,$9,$22,$25);
   }
   $98 = $24;
   $99 = (($98) + 1)|0;
   $24 = $99;
  }
  $100 = $23;
  $101 = (($100) + 1)|0;
  $23 = $101;
 }
 $26 = 0;
 while(1) {
  $102 = $26;
  $103 = ((($36)) + 4|0);
  $104 = HEAP32[$103>>2]|0;
  $105 = ($102|0)<($104|0);
  if (!($105)) {
   break;
  }
  $27 = 0;
  while(1) {
   $106 = $27;
   $107 = HEAP32[$36>>2]|0;
   $108 = ($106|0)<($107|0);
   if (!($108)) {
    break;
   }
   $109 = $27;
   $110 = $26;
   __ZN15score_estimator5PointC2Eii($28,$109,$110);
   $111 = $26;
   $112 = (($9) + (($111*100)|0)|0);
   $113 = $27;
   $114 = (($112) + ($113<<2)|0);
   $115 = HEAP32[$114>>2]|0;
   $116 = (+($115|0));
   $117 = $7;
   $118 = (+($117|0));
   $119 = $8;
   $120 = $118 * $119;
   $121 = $116 > $120;
   if ($121) {
    $122 = ((($0)) + 8|0);
    $123 = $26;
    $124 = (($122) + (($123*100)|0)|0);
    $125 = $27;
    $126 = (($124) + ($125<<2)|0);
    HEAP32[$126>>2] = 1;
   } else {
    $127 = $26;
    $128 = (($9) + (($127*100)|0)|0);
    $129 = $27;
    $130 = (($128) + ($129<<2)|0);
    $131 = HEAP32[$130>>2]|0;
    $132 = (+($131|0));
    $133 = $7;
    $134 = (+($133|0));
    $135 = $8;
    $136 = -$135;
    $137 = $134 * $136;
    $138 = $132 < $137;
    $139 = ((($0)) + 8|0);
    $140 = $26;
    $141 = (($139) + (($140*100)|0)|0);
    $142 = $27;
    $143 = (($141) + ($142<<2)|0);
    $$sink = $138 ? -1 : 0;
    HEAP32[$143>>2] = $$sink;
   }
   $144 = $27;
   $145 = (($144) + 1)|0;
   $27 = $145;
  }
  $146 = $26;
  $147 = (($146) + 1)|0;
  $26 = $147;
 }
 $29 = 0;
 while(1) {
  $148 = $29;
  $149 = ((($36)) + 4|0);
  $150 = HEAP32[$149>>2]|0;
  $151 = ($148|0)<($150|0);
  if (!($151)) {
   break;
  }
  $30 = 0;
  while(1) {
   $152 = $30;
   $153 = HEAP32[$36>>2]|0;
   $154 = ($152|0)<($153|0);
   if (!($154)) {
    break;
   }
   $155 = $30;
   $156 = $29;
   __ZN15score_estimator5PointC2Eii($31,$155,$156);
   $157 = (__ZN15score_estimator5GobanixERKNS_5PointE($0,$31)|0);
   $158 = HEAP32[$157>>2]|0;
   $159 = ($158|0)==(0);
   if ($159) {
    ;HEAP32[$32>>2]=HEAP32[$31>>2]|0;HEAP32[$32+4>>2]=HEAP32[$31+4>>2]|0;
    ;HEAP32[$$byval_copy4>>2]=HEAP32[$32>>2]|0;HEAP32[$$byval_copy4+4>>2]=HEAP32[$32+4>>2]|0;
    $160 = (__ZN15score_estimator5Goban12is_territoryENS_5PointENS_5ColorE($0,$$byval_copy4,1)|0);
    if ($160) {
     ;HEAP32[$33>>2]=HEAP32[$31>>2]|0;HEAP32[$33+4>>2]=HEAP32[$31+4>>2]|0;
     ;HEAP32[$$byval_copy5>>2]=HEAP32[$33>>2]|0;HEAP32[$$byval_copy5+4>>2]=HEAP32[$33+4>>2]|0;
     __ZN15score_estimator5Goban14fill_territoryENS_5PointENS_5ColorE($0,$$byval_copy5,1);
    }
    ;HEAP32[$34>>2]=HEAP32[$31>>2]|0;HEAP32[$34+4>>2]=HEAP32[$31+4>>2]|0;
    ;HEAP32[$$byval_copy6>>2]=HEAP32[$34>>2]|0;HEAP32[$$byval_copy6+4>>2]=HEAP32[$34+4>>2]|0;
    $161 = (__ZN15score_estimator5Goban12is_territoryENS_5PointENS_5ColorE($0,$$byval_copy6,-1)|0);
    if ($161) {
     ;HEAP32[$35>>2]=HEAP32[$31>>2]|0;HEAP32[$35+4>>2]=HEAP32[$31+4>>2]|0;
     ;HEAP32[$$byval_copy7>>2]=HEAP32[$35>>2]|0;HEAP32[$$byval_copy7+4>>2]=HEAP32[$35+4>>2]|0;
     __ZN15score_estimator5Goban14fill_territoryENS_5PointENS_5ColorE($0,$$byval_copy7,-1);
    }
   }
   $162 = $30;
   $163 = (($162) + 1)|0;
   $30 = $163;
  }
  $164 = $29;
  $165 = (($164) + 1)|0;
  $29 = $165;
 }
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal13MethodInvokerIMN15score_estimator5GobanEFS3_NS2_5ColorEifES3_PS3_JS4_ifEE6invokeERKS6_S7_S4_if($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = +$4;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0;
 var $27 = 0.0, $28 = 0, $29 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2544|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(2544|0);
 $10 = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $11 = $6;
 $12 = (__ZN10emscripten8internal11BindingTypeIPN15score_estimator5GobanEE12fromWireTypeES4_($11)|0);
 $13 = $5;
 $$field = HEAP32[$13>>2]|0;
 $$index1 = ((($13)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 $14 = $$field2 >> 1;
 $15 = (($12) + ($14)|0);
 $16 = $$field2 & 1;
 $17 = ($16|0)!=(0);
 if ($17) {
  $18 = HEAP32[$15>>2]|0;
  $19 = (($18) + ($$field)|0);
  $20 = HEAP32[$19>>2]|0;
  $28 = $20;
 } else {
  $21 = $$field;
  $28 = $21;
 }
 $22 = $7;
 $23 = (__ZN10emscripten8internal15EnumBindingTypeIN15score_estimator5ColorEE12fromWireTypeES3_($22)|0);
 $24 = $8;
 $25 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($24)|0);
 $26 = $9;
 $27 = (+__ZN10emscripten8internal11BindingTypeIfE12fromWireTypeEf($26));
 FUNCTION_TABLE_viiiid[$28 & 63]($10,$15,$23,$25,$27);
 $29 = (__ZN10emscripten8internal18GenericBindingTypeIN15score_estimator5GobanEE10toWireTypeEOS3_($10)|0);
 STACKTOP = sp;return ($29|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN15score_estimator5GobanENS0_17AllowedRawPointerIS5_EENS4_5ColorEifEE8getCountEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return 5;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN15score_estimator5GobanENS0_17AllowedRawPointerIS5_EENS4_5ColorEifEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJN15score_estimator5GobanENS0_17AllowedRawPointerIS4_EENS3_5ColorEifEEEE3getEv()|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJiiiiifEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2692|0);
}
function __ZN10emscripten8internal10getContextIMN15score_estimator5GobanEFS3_NS2_5ColorEifEEEPT_RKS7_($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__Znwj(8)|0);
 $3 = $1;
 $$field = HEAP32[$3>>2]|0;
 $$index1 = ((($3)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 HEAP32[$2>>2] = $$field;
 $$index5 = ((($2)) + 4|0);
 HEAP32[$$index5>>2] = $$field2;
 STACKTOP = sp;return ($2|0);
}
function __ZN15score_estimator5Goban5scoreEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $5 = $1;
 $2 = 0;
 $3 = 0;
 while(1) {
  $6 = $3;
  $7 = ((($5)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($6|0)<($8|0);
  if (!($9)) {
   break;
  }
  $4 = 0;
  while(1) {
   $10 = $4;
   $11 = HEAP32[$5>>2]|0;
   $12 = ($10|0)<($11|0);
   if (!($12)) {
    break;
   }
   $13 = ((($5)) + 8|0);
   $14 = $3;
   $15 = (($13) + (($14*100)|0)|0);
   $16 = $4;
   $17 = (($15) + ($16<<2)|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = $2;
   $20 = (($19) + ($18))|0;
   $2 = $20;
   $21 = $4;
   $22 = (($21) + 1)|0;
   $4 = $22;
  }
  $23 = $3;
  $24 = (($23) + 1)|0;
  $3 = $24;
 }
 $25 = $2;
 STACKTOP = sp;return ($25|0);
}
function __ZN10emscripten8internal13MethodInvokerIMN15score_estimator5GobanEFivEiPS3_JEE6invokeERKS5_S6_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $2 = $0;
 $3 = $1;
 $5 = $3;
 $6 = (__ZN10emscripten8internal11BindingTypeIPN15score_estimator5GobanEE12fromWireTypeES4_($5)|0);
 $7 = $2;
 $$field = HEAP32[$7>>2]|0;
 $$index1 = ((($7)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 $8 = $$field2 >> 1;
 $9 = (($6) + ($8)|0);
 $10 = $$field2 & 1;
 $11 = ($10|0)!=(0);
 if ($11) {
  $12 = HEAP32[$9>>2]|0;
  $13 = (($12) + ($$field)|0);
  $14 = HEAP32[$13>>2]|0;
  $16 = $14;
 } else {
  $15 = $$field;
  $16 = $15;
 }
 $17 = (FUNCTION_TABLE_ii[$16 & 127]($9)|0);
 HEAP32[$4>>2] = $17;
 $18 = (__ZN10emscripten8internal11BindingTypeIiE10toWireTypeERKi($4)|0);
 STACKTOP = sp;return ($18|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiNS0_17AllowedRawPointerIN15score_estimator5GobanEEEEE8getCountEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return 2;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiNS0_17AllowedRawPointerIN15score_estimator5GobanEEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJiNS0_17AllowedRawPointerIN15score_estimator5GobanEEEEEEE3getEv()|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal10getContextIMN15score_estimator5GobanEFivEEEPT_RKS6_($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__Znwj(8)|0);
 $3 = $1;
 $$field = HEAP32[$3>>2]|0;
 $$index1 = ((($3)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 HEAP32[$2>>2] = $$field;
 $$index5 = ((($2)) + 4|0);
 HEAP32[$$index5>>2] = $$field2;
 STACKTOP = sp;return ($2|0);
}
function __ZN15score_estimator5Goban5printEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $0;
 $4 = $1;
 $2 = 0;
 while(1) {
  $5 = $2;
  $6 = ((($4)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($5|0)<($7|0);
  if (!($8)) {
   break;
  }
  $3 = 0;
  while(1) {
   $9 = $3;
   $10 = HEAP32[$4>>2]|0;
   $11 = ($9|0)<($10|0);
   if (!($11)) {
    break;
   }
   $12 = ((($4)) + 8|0);
   $13 = $2;
   $14 = (($12) + (($13*100)|0)|0);
   $15 = $3;
   $16 = (($14) + ($15<<2)|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)==(-1);
   if ($18) {
    $28 = 95;
   } else {
    $19 = ((($4)) + 8|0);
    $20 = $2;
    $21 = (($19) + (($20*100)|0)|0);
    $22 = $3;
    $23 = (($21) + ($22<<2)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ($24|0)==(1);
    $26 = $25 ? 111 : 32;
    $28 = $26;
   }
   $27 = $28 << 24 >> 24;
   HEAP32[$vararg_buffer>>2] = $27;
   (_printf(2686,$vararg_buffer)|0);
   $29 = $3;
   $30 = (($29) + 1)|0;
   $3 = $30;
  }
  (_printf(2690,$vararg_buffer1)|0);
  $31 = $2;
  $32 = (($31) + 1)|0;
  $2 = $32;
 }
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal13MethodInvokerIMN15score_estimator5GobanEFvvEvPS3_JEE6invokeERKS5_S6_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = (__ZN10emscripten8internal11BindingTypeIPN15score_estimator5GobanEE12fromWireTypeES4_($4)|0);
 $6 = $2;
 $$field = HEAP32[$6>>2]|0;
 $$index1 = ((($6)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 $7 = $$field2 >> 1;
 $8 = (($5) + ($7)|0);
 $9 = $$field2 & 1;
 $10 = ($9|0)!=(0);
 if ($10) {
  $11 = HEAP32[$8>>2]|0;
  $12 = (($11) + ($$field)|0);
  $13 = HEAP32[$12>>2]|0;
  $15 = $13;
  FUNCTION_TABLE_vi[$15 & 127]($8);
  STACKTOP = sp;return;
 } else {
  $14 = $$field;
  $15 = $14;
  FUNCTION_TABLE_vi[$15 & 127]($8);
  STACKTOP = sp;return;
 }
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerIN15score_estimator5GobanEEEEE8getCountEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return 2;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerIN15score_estimator5GobanEEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerIN15score_estimator5GobanEEEEEEE3getEv()|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJviiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2682|0);
}
function __ZN10emscripten8internal10getContextIMN15score_estimator5GobanEFvvEEEPT_RKS6_($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__Znwj(8)|0);
 $3 = $1;
 $$field = HEAP32[$3>>2]|0;
 $$index1 = ((($3)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 HEAP32[$2>>2] = $$field;
 $$index5 = ((($2)) + 4|0);
 HEAP32[$$index5>>2] = $$field2;
 STACKTOP = sp;return ($2|0);
}
function __ZN15score_estimator5Goban14getScoreVectorEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $10 = sp;
 $15 = sp + 150|0;
 $25 = sp + 149|0;
 $29 = sp + 48|0;
 $32 = sp + 36|0;
 $37 = sp + 148|0;
 $36 = $1;
 $42 = $36;
 $$expand_i1_val = 0;
 HEAP8[$37>>0] = $$expand_i1_val;
 $35 = $0;
 $43 = $35;
 $34 = $43;
 $44 = $34;
 $33 = $44;
 HEAP32[$44>>2] = 0;
 $45 = ((($44)) + 4|0);
 HEAP32[$45>>2] = 0;
 $46 = ((($44)) + 8|0);
 $31 = $46;
 HEAP32[$32>>2] = 0;
 $47 = $31;
 $30 = $32;
 $48 = $30;
 $49 = HEAP32[$48>>2]|0;
 $28 = $47;
 HEAP32[$29>>2] = $49;
 $50 = $28;
 $27 = $50;
 $26 = $29;
 $51 = $26;
 $52 = HEAP32[$51>>2]|0;
 HEAP32[$50>>2] = $52;
 $38 = 0;
 L1: while(1) {
  $53 = $38;
  $54 = ((($42)) + 4|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = ($53|0)<($55|0);
  if (!($56)) {
   break;
  }
  $39 = 0;
  while(1) {
   $57 = $39;
   $58 = HEAP32[$42>>2]|0;
   $59 = ($57|0)<($58|0);
   if (!($59)) {
    break;
   }
   $60 = ((($42)) + 8|0);
   $61 = $39;
   $62 = (($60) + (($61*100)|0)|0);
   $63 = $38;
   $64 = (($62) + ($63<<2)|0);
   $23 = $0;
   $24 = $64;
   $65 = $23;
   $66 = ((($65)) + 4|0);
   $67 = HEAP32[$66>>2]|0;
   $22 = $65;
   $68 = $22;
   $69 = ((($68)) + 8|0);
   $21 = $69;
   $70 = $21;
   $20 = $70;
   $71 = $20;
   $72 = HEAP32[$71>>2]|0;
   $73 = ($67|0)!=($72|0);
   if ($73) {
    __ZNSt3__26vectorIiNS_9allocatorIiEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($25,$65,1);
    $19 = $65;
    $74 = $19;
    $75 = ((($74)) + 8|0);
    $18 = $75;
    $76 = $18;
    $17 = $76;
    $77 = $17;
    $78 = ((($65)) + 4|0);
    $79 = HEAP32[$78>>2]|0;
    $16 = $79;
    $80 = $16;
    $81 = $24;
    $12 = $77;
    $13 = $80;
    $14 = $81;
    $82 = $12;
    $83 = $13;
    $84 = $14;
    $11 = $84;
    $85 = $11;
    ;HEAP8[$10>>0]=HEAP8[$15>>0]|0;
    $7 = $82;
    $8 = $83;
    $9 = $85;
    $86 = $7;
    $87 = $8;
    $88 = $9;
    $6 = $88;
    $89 = $6;
    $3 = $86;
    $4 = $87;
    $5 = $89;
    $90 = $4;
    $91 = $5;
    $2 = $91;
    $92 = $2;
    $93 = HEAP32[$92>>2]|0;
    HEAP32[$90>>2] = $93;
    __ZNSt3__26vectorIiNS_9allocatorIiEEE24__RAII_IncreaseAnnotator6__doneEv($25);
    $94 = ((($65)) + 4|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = ((($95)) + 4|0);
    HEAP32[$94>>2] = $96;
   } else {
    $97 = $24;
    __THREW__ = 0;
    invoke_vii(71,($65|0),($97|0));
    $98 = __THREW__; __THREW__ = 0;
    $99 = $98&1;
    if ($99) {
     label = 9;
     break L1;
    }
   }
   $100 = $39;
   $101 = (($100) + 1)|0;
   $39 = $101;
  }
  $106 = $38;
  $107 = (($106) + 1)|0;
  $38 = $107;
 }
 if ((label|0) == 9) {
  $102 = ___cxa_find_matching_catch_2()|0;
  $103 = tempRet0;
  $40 = $102;
  $41 = $103;
  __ZNSt3__26vectorIiNS_9allocatorIiEEED2Ev($0);
  $104 = $40;
  $105 = $41;
  ___resumeException($104|0);
  // unreachable;
 }
 $$expand_i1_val2 = 1;
 HEAP8[$37>>0] = $$expand_i1_val2;
 $$pre_trunc = HEAP8[$37>>0]|0;
 $108 = $$pre_trunc&1;
 if ($108) {
  STACKTOP = sp;return;
 }
 __ZNSt3__26vectorIiNS_9allocatorIiEEED2Ev($0);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal13MethodInvokerIMN15score_estimator5GobanEFNSt3__26vectorIiNS4_9allocatorIiEEEEvES8_PS3_JEE6invokeERKSA_SB_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 8|0;
 $2 = $0;
 $3 = $1;
 $7 = $3;
 $8 = (__ZN10emscripten8internal11BindingTypeIPN15score_estimator5GobanEE12fromWireTypeES4_($7)|0);
 $9 = $2;
 $$field = HEAP32[$9>>2]|0;
 $$index1 = ((($9)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 $10 = $$field2 >> 1;
 $11 = (($8) + ($10)|0);
 $12 = $$field2 & 1;
 $13 = ($12|0)!=(0);
 if ($13) {
  $14 = HEAP32[$11>>2]|0;
  $15 = (($14) + ($$field)|0);
  $16 = HEAP32[$15>>2]|0;
  $18 = $16;
 } else {
  $17 = $$field;
  $18 = $17;
 }
 FUNCTION_TABLE_vii[$18 & 127]($4,$11);
 __THREW__ = 0;
 $19 = (invoke_ii(72,($4|0))|0);
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $22 = ___cxa_find_matching_catch_2()|0;
  $23 = tempRet0;
  $5 = $22;
  $6 = $23;
  __ZNSt3__26vectorIiNS_9allocatorIiEEED2Ev($4);
  $24 = $5;
  $25 = $6;
  ___resumeException($24|0);
  // unreachable;
 } else {
  __ZNSt3__26vectorIiNS_9allocatorIiEEED2Ev($4);
  STACKTOP = sp;return ($19|0);
 }
 return (0)|0;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__26vectorIiNS4_9allocatorIiEEEENS0_17AllowedRawPointerIN15score_estimator5GobanEEEEE8getCountEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return 2;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__26vectorIiNS4_9allocatorIiEEEENS0_17AllowedRawPointerIN15score_estimator5GobanEEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__26vectorIiNS3_9allocatorIiEEEENS0_17AllowedRawPointerIN15score_estimator5GobanEEEEEEE3getEv()|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal10getContextIMN15score_estimator5GobanEFNSt3__26vectorIiNS4_9allocatorIiEEEEvEEEPT_RKSB_($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__Znwj(8)|0);
 $3 = $1;
 $$field = HEAP32[$3>>2]|0;
 $$index1 = ((($3)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 HEAP32[$2>>2] = $$field;
 $$index5 = ((($2)) + 4|0);
 HEAP32[$$index5>>2] = $$field2;
 STACKTOP = sp;return ($2|0);
}
function __ZN15score_estimator5Goban13populateBoardENSt3__26vectorIiNS1_9allocatorIiEEEEi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $2;
 $9 = $4;
 $8 = 0;
 while(1) {
  $10 = $8;
  $3 = $1;
  $11 = $3;
  $12 = ((($11)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = HEAP32[$11>>2]|0;
  $15 = $13;
  $16 = $14;
  $17 = (($15) - ($16))|0;
  $18 = (($17|0) / 4)&-1;
  $19 = ($10>>>0)<($18>>>0);
  if (!($19)) {
   break;
  }
  $20 = $8;
  $21 = $5;
  $22 = (($20|0) % ($21|0))&-1;
  $6 = $22;
  $23 = $8;
  $24 = $5;
  $25 = (($23|0) / ($24|0))&-1;
  $7 = $25;
  $26 = $8;
  $27 = (__ZNSt3__26vectorIiNS_9allocatorIiEEE2atEj($1,$26)|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ((($9)) + 8|0);
  $30 = $6;
  $31 = (($29) + (($30*100)|0)|0);
  $32 = $7;
  $33 = (($31) + ($32<<2)|0);
  HEAP32[$33>>2] = $28;
  $34 = $8;
  $35 = (($34) + 1)|0;
  $8 = $35;
 }
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal13MethodInvokerIMN15score_estimator5GobanEFvNSt3__26vectorIiNS4_9allocatorIiEEEEiEvPS3_JS8_iEE6invokeERKSA_SB_PS8_i($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $8 = sp + 8|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $11 = $5;
 $12 = (__ZN10emscripten8internal11BindingTypeIPN15score_estimator5GobanEE12fromWireTypeES4_($11)|0);
 $13 = $4;
 $$field = HEAP32[$13>>2]|0;
 $$index1 = ((($13)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 $14 = $$field2 >> 1;
 $15 = (($12) + ($14)|0);
 $16 = $$field2 & 1;
 $17 = ($16|0)!=(0);
 if ($17) {
  $18 = HEAP32[$15>>2]|0;
  $19 = (($18) + ($$field)|0);
  $20 = HEAP32[$19>>2]|0;
  $28 = $20;
 } else {
  $21 = $$field;
  $28 = $21;
 }
 $22 = $6;
 $23 = (__ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorIiNS2_9allocatorIiEEEEE12fromWireTypeEPS6_($22)|0);
 __ZNSt3__26vectorIiNS_9allocatorIiEEEC2ERKS3_($8,$23);
 $24 = $7;
 __THREW__ = 0;
 $25 = (invoke_ii(73,($24|0))|0);
 $26 = __THREW__; __THREW__ = 0;
 $27 = $26&1;
 if ($27) {
  $31 = ___cxa_find_matching_catch_2()|0;
  $32 = tempRet0;
  $9 = $31;
  $10 = $32;
  __ZNSt3__26vectorIiNS_9allocatorIiEEED2Ev($8);
  $33 = $9;
  $34 = $10;
  ___resumeException($33|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_viii($28|0,($15|0),($8|0),($25|0));
 $29 = __THREW__; __THREW__ = 0;
 $30 = $29&1;
 if ($30) {
  $31 = ___cxa_find_matching_catch_2()|0;
  $32 = tempRet0;
  $9 = $31;
  $10 = $32;
  __ZNSt3__26vectorIiNS_9allocatorIiEEED2Ev($8);
  $33 = $9;
  $34 = $10;
  ___resumeException($33|0);
  // unreachable;
 } else {
  __ZNSt3__26vectorIiNS_9allocatorIiEEED2Ev($8);
  STACKTOP = sp;return;
 }
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerIN15score_estimator5GobanEEENSt3__26vectorIiNS8_9allocatorIiEEEEiEE8getCountEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return 4;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerIN15score_estimator5GobanEEENSt3__26vectorIiNS8_9allocatorIiEEEEiEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerIN15score_estimator5GobanEEENSt3__26vectorIiNS7_9allocatorIiEEEEiEEEE3getEv()|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal10getContextIMN15score_estimator5GobanEFvNSt3__26vectorIiNS4_9allocatorIiEEEEiEEEPT_RKSB_($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__Znwj(8)|0);
 $3 = $1;
 $$field = HEAP32[$3>>2]|0;
 $$index1 = ((($3)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 HEAP32[$2>>2] = $$field;
 $$index5 = ((($2)) + 4|0);
 HEAP32[$$index5>>2] = $$field2;
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten5enum_IN15score_estimator5ColorEEC2EPKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = (__ZN10emscripten8internal6TypeIDIN15score_estimator5ColorEE3getEv()|0);
 $5 = $3;
 __embind_register_enum(($4|0),($5|0),4,1);
 STACKTOP = sp;return;
}
function __ZN10emscripten5enum_IN15score_estimator5ColorEE5valueEPKcS2_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = (__ZN10emscripten8internal6TypeIDIN15score_estimator5ColorEE3getEv()|0);
 $8 = $4;
 $9 = $5;
 __embind_register_enum_value(($7|0),($8|0),($9|0));
 STACKTOP = sp;return ($6|0);
}
function __ZN10emscripten8internal6TypeIDIN15score_estimator5ColorEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIN15score_estimator5ColorEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIN15score_estimator5ColorEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (104|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerIN15score_estimator5GobanEEENSt3__26vectorIiNS7_9allocatorIiEEEEiEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (716|0);
}
function __ZN10emscripten8internal11BindingTypeIPN15score_estimator5GobanEE12fromWireTypeES4_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 STACKTOP = sp;return ($2|0);
}
function __ZNSt3__26vectorIiNS_9allocatorIiEEEC2ERKS3_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $7 = sp + 84|0;
 $8 = sp + 16|0;
 $11 = sp + 72|0;
 $12 = sp + 111|0;
 $13 = sp + 8|0;
 $17 = sp + 110|0;
 $19 = sp;
 $21 = sp + 109|0;
 $27 = sp + 108|0;
 $25 = $0;
 $26 = $1;
 $31 = $25;
 $32 = $26;
 $24 = $32;
 $33 = $24;
 $34 = ((($33)) + 8|0);
 $23 = $34;
 $35 = $23;
 $22 = $35;
 $36 = $22;
 $20 = $36;
 $37 = $20;
 ;HEAP8[$19>>0]=HEAP8[$21>>0]|0;
 $18 = $37;
 $15 = $31;
 $16 = $27;
 $38 = $15;
 $14 = $38;
 HEAP32[$38>>2] = 0;
 $39 = ((($38)) + 4|0);
 HEAP32[$39>>2] = 0;
 $40 = ((($38)) + 8|0);
 ;HEAP8[$13>>0]=HEAP8[$17>>0]|0;
 $10 = $40;
 HEAP32[$11>>2] = 0;
 $41 = $10;
 $9 = $11;
 $42 = $9;
 $43 = HEAP32[$42>>2]|0;
 $3 = $13;
 ;HEAP8[$8>>0]=HEAP8[$12>>0]|0;
 $6 = $41;
 HEAP32[$7>>2] = $43;
 $44 = $6;
 $5 = $8;
 $4 = $7;
 $45 = $4;
 $46 = HEAP32[$45>>2]|0;
 HEAP32[$44>>2] = $46;
 $47 = $26;
 $2 = $47;
 $48 = $2;
 $49 = ((($48)) + 4|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = HEAP32[$48>>2]|0;
 $52 = $50;
 $53 = $51;
 $54 = (($52) - ($53))|0;
 $55 = (($54|0) / 4)&-1;
 $28 = $55;
 $56 = $28;
 $57 = ($56>>>0)>(0);
 if (!($57)) {
  STACKTOP = sp;return;
 }
 $58 = $28;
 __THREW__ = 0;
 invoke_vii(74,($31|0),($58|0));
 $59 = __THREW__; __THREW__ = 0;
 $60 = $59&1;
 if ($60) {
  $69 = ___cxa_find_matching_catch_2()|0;
  $70 = tempRet0;
  $29 = $69;
  $30 = $70;
  __ZNSt3__213__vector_baseIiNS_9allocatorIiEEED2Ev($31);
  $71 = $29;
  $72 = $30;
  ___resumeException($71|0);
  // unreachable;
 }
 $61 = $26;
 $62 = HEAP32[$61>>2]|0;
 $63 = $26;
 $64 = ((($63)) + 4|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = $28;
 __THREW__ = 0;
 invoke_viiii(75,($31|0),($62|0),($65|0),($66|0));
 $67 = __THREW__; __THREW__ = 0;
 $68 = $67&1;
 if ($68) {
  $69 = ___cxa_find_matching_catch_2()|0;
  $70 = tempRet0;
  $29 = $69;
  $30 = $70;
  __ZNSt3__213__vector_baseIiNS_9allocatorIiEEED2Ev($31);
  $71 = $29;
  $72 = $30;
  ___resumeException($71|0);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__26vectorIiNS_9allocatorIiEEE8allocateEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $15 = $0;
 $16 = $1;
 $17 = $15;
 $18 = $16;
 $19 = (__ZNKSt3__26vectorIiNS_9allocatorIiEEE8max_sizeEv($17)|0);
 $20 = ($18>>>0)>($19>>>0);
 if ($20) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($17);
 }
 $14 = $17;
 $21 = $14;
 $22 = ((($21)) + 8|0);
 $13 = $22;
 $23 = $13;
 $12 = $23;
 $24 = $12;
 $25 = $16;
 $10 = $24;
 $11 = $25;
 $26 = $10;
 $27 = $11;
 $7 = $26;
 $8 = $27;
 $9 = 0;
 $28 = $7;
 $29 = $8;
 $6 = $28;
 $30 = ($29>>>0)>(1073741823);
 if ($30) {
  $31 = (___cxa_allocate_exception(4)|0);
  __ZNSt9bad_allocC2Ev($31);
  ___cxa_throw(($31|0),(392|0),(19|0));
  // unreachable;
 } else {
  $32 = $8;
  $33 = $32<<2;
  $5 = $33;
  $34 = $5;
  $35 = (__Znwj($34)|0);
  $36 = ((($17)) + 4|0);
  HEAP32[$36>>2] = $35;
  HEAP32[$17>>2] = $35;
  $37 = HEAP32[$17>>2]|0;
  $38 = $16;
  $39 = (($37) + ($38<<2)|0);
  $4 = $17;
  $40 = $4;
  $41 = ((($40)) + 8|0);
  $3 = $41;
  $42 = $3;
  $2 = $42;
  $43 = $2;
  HEAP32[$43>>2] = $39;
  __ZNKSt3__26vectorIiNS_9allocatorIiEEE14__annotate_newEj($17,0);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__26vectorIiNS_9allocatorIiEEE18__construct_at_endIPiEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES7_S7_j($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $17 = sp + 52|0;
 $12 = $0;
 $13 = $1;
 $14 = $2;
 $15 = $3;
 $18 = $12;
 $11 = $18;
 $19 = $11;
 $20 = ((($19)) + 8|0);
 $10 = $20;
 $21 = $10;
 $9 = $21;
 $22 = $9;
 $16 = $22;
 $23 = $15;
 __ZNSt3__26vectorIiNS_9allocatorIiEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($17,$18,$23);
 $24 = $16;
 $25 = $13;
 $26 = $14;
 $27 = ((($18)) + 4|0);
 $4 = $24;
 $5 = $25;
 $6 = $26;
 $7 = $27;
 $28 = $6;
 $29 = $5;
 $30 = $28;
 $31 = $29;
 $32 = (($30) - ($31))|0;
 $33 = (($32|0) / 4)&-1;
 $8 = $33;
 $34 = $8;
 $35 = ($34|0)>(0);
 if (!($35)) {
  __ZNSt3__26vectorIiNS_9allocatorIiEEE24__RAII_IncreaseAnnotator6__doneEv($17);
  STACKTOP = sp;return;
 }
 $36 = $7;
 $37 = HEAP32[$36>>2]|0;
 $38 = $5;
 $39 = $8;
 $40 = $39<<2;
 _memcpy(($37|0),($38|0),($40|0))|0;
 $41 = $8;
 $42 = $7;
 $43 = HEAP32[$42>>2]|0;
 $44 = (($43) + ($41<<2)|0);
 HEAP32[$42>>2] = $44;
 __ZNSt3__26vectorIiNS_9allocatorIiEEE24__RAII_IncreaseAnnotator6__doneEv($17);
 STACKTOP = sp;return;
}
function __ZNSt3__26vectorIiNS_9allocatorIiEEE2atEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $3;
 $6 = $4;
 $2 = $5;
 $7 = $2;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$7>>2]|0;
 $11 = $9;
 $12 = $10;
 $13 = (($11) - ($12))|0;
 $14 = (($13|0) / 4)&-1;
 $15 = ($6>>>0)>=($14>>>0);
 if ($15) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_out_of_rangeEv($5);
 }
 $16 = HEAP32[$5>>2]|0;
 $17 = $4;
 $18 = (($16) + ($17<<2)|0);
 STACKTOP = sp;return ($18|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__26vectorIiNS3_9allocatorIiEEEENS0_17AllowedRawPointerIN15score_estimator5GobanEEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (732|0);
}
function __ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorIiNS2_9allocatorIiEEEEE10toWireTypeEOS6_($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $5 = sp + 104|0;
 $6 = sp + 8|0;
 $9 = sp + 92|0;
 $10 = sp + 125|0;
 $11 = sp;
 $15 = sp + 124|0;
 $32 = $0;
 $33 = (__Znwj(12)|0);
 $34 = $32;
 $31 = $34;
 $35 = $31;
 $29 = $33;
 $30 = $35;
 $36 = $29;
 $37 = $30;
 $28 = $37;
 $38 = $28;
 $39 = ((($38)) + 8|0);
 $27 = $39;
 $40 = $27;
 $26 = $40;
 $41 = $26;
 $25 = $41;
 $42 = $25;
 $13 = $36;
 $14 = $42;
 $43 = $13;
 $12 = $43;
 HEAP32[$43>>2] = 0;
 $44 = ((($43)) + 4|0);
 HEAP32[$44>>2] = 0;
 $45 = ((($43)) + 8|0);
 ;HEAP8[$11>>0]=HEAP8[$15>>0]|0;
 $8 = $45;
 HEAP32[$9>>2] = 0;
 $46 = $8;
 $7 = $9;
 $47 = $7;
 $48 = HEAP32[$47>>2]|0;
 $1 = $11;
 ;HEAP8[$6>>0]=HEAP8[$10>>0]|0;
 $4 = $46;
 HEAP32[$5>>2] = $48;
 $49 = $4;
 $3 = $6;
 $2 = $5;
 $50 = $2;
 $51 = HEAP32[$50>>2]|0;
 HEAP32[$49>>2] = $51;
 $52 = $30;
 $53 = HEAP32[$52>>2]|0;
 HEAP32[$36>>2] = $53;
 $54 = $30;
 $55 = ((($54)) + 4|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = ((($36)) + 4|0);
 HEAP32[$57>>2] = $56;
 $58 = $30;
 $18 = $58;
 $59 = $18;
 $60 = ((($59)) + 8|0);
 $17 = $60;
 $61 = $17;
 $16 = $61;
 $62 = $16;
 $63 = HEAP32[$62>>2]|0;
 $21 = $36;
 $64 = $21;
 $65 = ((($64)) + 8|0);
 $20 = $65;
 $66 = $20;
 $19 = $66;
 $67 = $19;
 HEAP32[$67>>2] = $63;
 $68 = $30;
 $24 = $68;
 $69 = $24;
 $70 = ((($69)) + 8|0);
 $23 = $70;
 $71 = $23;
 $22 = $71;
 $72 = $22;
 HEAP32[$72>>2] = 0;
 $73 = $30;
 $74 = ((($73)) + 4|0);
 HEAP32[$74>>2] = 0;
 $75 = $30;
 HEAP32[$75>>2] = 0;
 STACKTOP = sp;return ($33|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerIN15score_estimator5GobanEEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (740|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJiNS0_17AllowedRawPointerIN15score_estimator5GobanEEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (748|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJN15score_estimator5GobanENS0_17AllowedRawPointerIS4_EENS3_5ColorEifEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (756|0);
}
function __ZN10emscripten8internal15EnumBindingTypeIN15score_estimator5ColorEE12fromWireTypeES3_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal11BindingTypeIfE12fromWireTypeEf($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 STACKTOP = sp;return (+$2);
}
function __ZN10emscripten8internal18GenericBindingTypeIN15score_estimator5GobanEE10toWireTypeEOS3_($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $5 = (__Znwj(2520)|0);
 $6 = $2;
 $1 = $6;
 $7 = $1;
 __THREW__ = 0;
 invoke_vii(76,($5|0),($7|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $10 = ___cxa_find_matching_catch_2()|0;
  $11 = tempRet0;
  $3 = $10;
  $4 = $11;
  __ZdlPv($5);
  $12 = $3;
  $13 = $4;
  ___resumeException($12|0);
  // unreachable;
 } else {
  STACKTOP = sp;return ($5|0);
 }
 return (0)|0;
}
function __ZN15score_estimator5GobanC2ERKS0_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $6 = $2;
 $7 = ((($6)) + 2512|0);
 __ZN15score_estimator5PointC2Ev($7);
 $8 = $3;
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$6>>2] = $9;
 $10 = $3;
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($6)) + 4|0);
 HEAP32[$13>>2] = $12;
 $4 = 0;
 while(1) {
  $14 = $4;
  $15 = ((($6)) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($14|0)<($16|0);
  if (!($17)) {
   break;
  }
  $5 = 0;
  while(1) {
   $18 = $5;
   $19 = HEAP32[$6>>2]|0;
   $20 = ($18|0)<($19|0);
   if (!($20)) {
    break;
   }
   $21 = $3;
   $22 = ((($21)) + 8|0);
   $23 = $4;
   $24 = (($22) + (($23*100)|0)|0);
   $25 = $5;
   $26 = (($24) + ($25<<2)|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = ((($6)) + 8|0);
   $29 = $4;
   $30 = (($28) + (($29*100)|0)|0);
   $31 = $5;
   $32 = (($30) + ($31<<2)|0);
   HEAP32[$32>>2] = $27;
   $33 = $5;
   $34 = (($33) + 1)|0;
   $5 = $34;
  }
  $35 = $4;
  $36 = (($35) + 1)|0;
  $4 = $36;
 }
 __ZN15score_estimator5Goban4initEv($6);
 STACKTOP = sp;return;
}
function __ZN15score_estimator5PointC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return;
}
function __ZN15score_estimator5Goban4initEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $1 = $0;
 $3 = $1;
 $4 = ((($3)) + 2508|0);
 HEAP32[$4>>2] = 0;
 __ZN15score_estimator5PointC2Eii($2,-1,-1);
 $5 = ((($3)) + 2512|0);
 ;HEAP32[$5>>2]=HEAP32[$2>>2]|0;HEAP32[$5+4>>2]=HEAP32[$2+4>>2]|0;
 STACKTOP = sp;return;
}
function __ZN15score_estimator5PointC2Eii($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = $4;
 HEAP32[$6>>2] = $7;
 $8 = ((($6)) + 4|0);
 $9 = $5;
 HEAP32[$8>>2] = $9;
 STACKTOP = sp;return;
}
function __ZN15score_estimator5Goban17play_out_positionENS_5ColorE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 10128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(10128|0);
 $$byval_copy1 = sp + 10112|0;
 $$byval_copy = sp + 10104|0;
 $4 = sp + 5092|0;
 $5 = sp + 88|0;
 $8 = sp + 72|0;
 $10 = sp + 64|0;
 $11 = sp + 56|0;
 $12 = sp + 48|0;
 $13 = sp + 40|0;
 $15 = sp + 24|0;
 $16 = sp + 16|0;
 $17 = sp + 8|0;
 $18 = sp;
 $2 = $0;
 $3 = $1;
 $19 = $2;
 __ZN15score_estimator5Vec_tILi625EEC2Ev($4);
 __ZN15score_estimator5Vec_tILi625EEC2Ev($5);
 $6 = 0;
 while(1) {
  $20 = $6;
  $21 = ((($19)) + 4|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($20|0)<($22|0);
  if (!($23)) {
   break;
  }
  $7 = 0;
  while(1) {
   $24 = $7;
   $25 = HEAP32[$19>>2]|0;
   $26 = ($24|0)<($25|0);
   if (!($26)) {
    break;
   }
   $27 = ((($19)) + 8|0);
   $28 = $6;
   $29 = (($27) + (($28*100)|0)|0);
   $30 = $7;
   $31 = (($29) + ($30<<2)|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($32|0)==(0);
   if ($33) {
    $34 = $7;
    $35 = $6;
    __ZN15score_estimator5PointC2Eii($8,$34,$35);
    __ZN15score_estimator5Vec_tILi625EE4pushERKNS_5PointE($4,$8);
   }
   $36 = $7;
   $37 = (($36) + 1)|0;
   $7 = $37;
  }
  $38 = $6;
  $39 = (($38) + 1)|0;
  $6 = $39;
 }
 $9 = 1000;
 while(1) {
  $40 = ((($4)) + 5000|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ($41|0)>(0);
  if (!($42)) {
   label = 21;
   break;
  }
  $43 = $9;
  $44 = (($43) + -1)|0;
  $9 = $44;
  $45 = ($44|0)>(0);
  if (!($45)) {
   label = 21;
   break;
  }
  $46 = (_rand()|0);
  $47 = ((($4)) + 5000|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (($46|0) % ($48|0))&-1;
  HEAP32[$10>>2] = $49;
  $50 = (__ZN15score_estimator5Vec_tILi625EEixERKi($4,$10)|0);
  ;HEAP32[$11>>2]=HEAP32[$50>>2]|0;HEAP32[$11+4>>2]=HEAP32[$50+4>>2]|0;
  ;HEAP32[$12>>2]=HEAP32[$11>>2]|0;HEAP32[$12+4>>2]=HEAP32[$11+4>>2]|0;
  $51 = $3;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$12>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$12+4>>2]|0;
  $52 = (__ZN15score_estimator5Goban6is_eyeENS_5PointENS_5ColorE($19,$$byval_copy,$51)|0);
  if ($52) {
   $53 = HEAP32[$10>>2]|0;
   __ZN15score_estimator5Vec_tILi625EE6removeEi($13,$4,$53);
   __ZN15score_estimator5Vec_tILi625EE4pushERKNS_5PointE($5,$13);
   continue;
  }
  ;HEAP32[$15>>2]=HEAP32[$11>>2]|0;HEAP32[$15+4>>2]=HEAP32[$11+4>>2]|0;
  $54 = $3;
  ;HEAP32[$$byval_copy1>>2]=HEAP32[$15>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$15+4>>2]|0;
  $55 = (__ZN15score_estimator5Goban16place_and_removeENS_5PointENS_5ColorERNS_5Vec_tILi625EEE($19,$$byval_copy1,$54,$4)|0);
  $14 = $55;
  $56 = $14;
  $57 = ($56|0)==(0);
  if (!($57)) {
   $69 = $14;
   $70 = ($69|0)==(1);
   if (!($70)) {
    continue;
   }
   $71 = HEAP32[$10>>2]|0;
   __ZN15score_estimator5Vec_tILi625EE6removeEi($18,$4,$71);
   __ZN15score_estimator5Vec_tILi625EE4pushERKNS_5PointE($5,$18);
   continue;
  }
  $58 = HEAP32[$10>>2]|0;
  __ZN15score_estimator5Vec_tILi625EE6removeEi($16,$4,$58);
  $59 = $3;
  $60 = (0 - ($59))|0;
  $3 = $60;
  HEAP32[$17>>2] = 0;
  while(1) {
   $61 = HEAP32[$17>>2]|0;
   $62 = ((($5)) + 5000|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = ($61|0)<($63|0);
   if (!($64)) {
    break;
   }
   $65 = (__ZN15score_estimator5Vec_tILi625EEixERKi($5,$17)|0);
   __ZN15score_estimator5Vec_tILi625EE4pushERKNS_5PointE($4,$65);
   $66 = HEAP32[$17>>2]|0;
   $67 = (($66) + 1)|0;
   HEAP32[$17>>2] = $67;
  }
  $68 = ((($5)) + 5000|0);
  HEAP32[$68>>2] = 0;
 }
 if ((label|0) == 21) {
  STACKTOP = sp;return;
 }
}
function __ZN15score_estimator5GobanixERKNS_5PointE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = ((($4)) + 8|0);
 $6 = $3;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($5) + (($8*100)|0)|0);
 $10 = $3;
 $11 = HEAP32[$10>>2]|0;
 $12 = (($9) + ($11<<2)|0);
 STACKTOP = sp;return ($12|0);
}
function __ZN15score_estimator5Goban12is_territoryENS_5PointENS_5ColorE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 5088|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(5088|0);
 $3 = sp + 5076|0;
 $6 = sp + 64|0;
 $7 = sp + 28|0;
 $9 = sp + 16|0;
 $10 = sp + 8|0;
 $11 = sp;
 $4 = $0;
 $5 = $2;
 $12 = $4;
 __ZN15score_estimator5Vec_tILi625EEC2Ev($6);
 __ZN15score_estimator5Vec_tILi4EEC2Ev($7);
 $13 = HEAP32[194]|0;
 $14 = (($13) + 1)|0;
 HEAP32[194] = $14;
 $8 = $14;
 __ZN15score_estimator5Vec_tILi625EE4pushERKNS_5PointE($6,$1);
 $15 = $8;
 $16 = (__ZN15score_estimator5GobanixERKNS_5PointE(9456,$1)|0);
 HEAP32[$16>>2] = $15;
 L1: while(1) {
  $17 = ((($6)) + 5000|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)!=(0);
  if (!($19)) {
   label = 11;
   break;
  }
  __ZN15score_estimator5Vec_tILi625EE6removeEi($9,$6,0);
  $20 = (__ZN15score_estimator5GobanixERKNS_5PointE($12,$9)|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)==(0);
  if (!($22)) {
   $36 = (__ZN15score_estimator5GobanixERKNS_5PointE($12,$9)|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = $5;
   $39 = ($37|0)!=($38|0);
   if ($39) {
    label = 10;
    break;
   } else {
    continue;
   }
  }
  __ZN15score_estimator5Goban13get_neighborsERKNS_5PointERNS_5Vec_tILi4EEE($12,$9,$7);
  HEAP32[$10>>2] = 0;
  while(1) {
   $23 = HEAP32[$10>>2]|0;
   $24 = ((($7)) + 32|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($23|0)<($25|0);
   if (!($26)) {
    continue L1;
   }
   $27 = (__ZN15score_estimator5Vec_tILi4EEixERKi($7,$10)|0);
   ;HEAP32[$11>>2]=HEAP32[$27>>2]|0;HEAP32[$11+4>>2]=HEAP32[$27+4>>2]|0;
   $28 = (__ZN15score_estimator5GobanixERKNS_5PointE(9456,$11)|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = $8;
   $31 = ($29|0)==($30|0);
   if (!($31)) {
    $32 = $8;
    $33 = (__ZN15score_estimator5GobanixERKNS_5PointE(9456,$11)|0);
    HEAP32[$33>>2] = $32;
    __ZN15score_estimator5Vec_tILi625EE4pushERKNS_5PointE($6,$11);
   }
   $34 = HEAP32[$10>>2]|0;
   $35 = (($34) + 1)|0;
   HEAP32[$10>>2] = $35;
  }
 }
 if ((label|0) == 10) {
  $$expand_i1_val = 0;
  HEAP8[$3>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$3>>0]|0;
  $40 = $$pre_trunc&1;
  STACKTOP = sp;return ($40|0);
 }
 else if ((label|0) == 11) {
  $$expand_i1_val2 = 1;
  HEAP8[$3>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$3>>0]|0;
  $40 = $$pre_trunc&1;
  STACKTOP = sp;return ($40|0);
 }
 return (0)|0;
}
function __ZN15score_estimator5Goban14fill_territoryENS_5PointENS_5ColorE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 5088|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(5088|0);
 $5 = sp + 64|0;
 $6 = sp + 28|0;
 $8 = sp + 16|0;
 $9 = sp + 8|0;
 $10 = sp;
 $3 = $0;
 $4 = $2;
 $11 = $3;
 __ZN15score_estimator5Vec_tILi625EEC2Ev($5);
 __ZN15score_estimator5Vec_tILi4EEC2Ev($6);
 $12 = HEAP32[194]|0;
 $13 = (($12) + 1)|0;
 HEAP32[194] = $13;
 $7 = $13;
 __ZN15score_estimator5Vec_tILi625EE4pushERKNS_5PointE($5,$1);
 $14 = $7;
 $15 = (__ZN15score_estimator5GobanixERKNS_5PointE(9456,$1)|0);
 HEAP32[$15>>2] = $14;
 L1: while(1) {
  $16 = ((($5)) + 5000|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)!=(0);
  if (!($18)) {
   break;
  }
  __ZN15score_estimator5Vec_tILi625EE6removeEi($8,$5,0);
  $19 = (__ZN15score_estimator5GobanixERKNS_5PointE($11,$8)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(0);
  if (!($21)) {
   continue;
  }
  $22 = $4;
  $23 = (__ZN15score_estimator5GobanixERKNS_5PointE($11,$8)|0);
  HEAP32[$23>>2] = $22;
  __ZN15score_estimator5Goban13get_neighborsERKNS_5PointERNS_5Vec_tILi4EEE($11,$8,$6);
  HEAP32[$9>>2] = 0;
  while(1) {
   $24 = HEAP32[$9>>2]|0;
   $25 = ((($6)) + 32|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ($24|0)<($26|0);
   if (!($27)) {
    continue L1;
   }
   $28 = (__ZN15score_estimator5Vec_tILi4EEixERKi($6,$9)|0);
   ;HEAP32[$10>>2]=HEAP32[$28>>2]|0;HEAP32[$10+4>>2]=HEAP32[$28+4>>2]|0;
   $29 = (__ZN15score_estimator5GobanixERKNS_5PointE(9456,$10)|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = $7;
   $32 = ($30|0)==($31|0);
   if (!($32)) {
    $33 = $7;
    $34 = (__ZN15score_estimator5GobanixERKNS_5PointE(9456,$10)|0);
    HEAP32[$34>>2] = $33;
    __ZN15score_estimator5Vec_tILi625EE4pushERKNS_5PointE($5,$10);
   }
   $35 = HEAP32[$9>>2]|0;
   $36 = (($35) + 1)|0;
   HEAP32[$9>>2] = $36;
  }
 }
 STACKTOP = sp;return;
}
function __ZN15score_estimator5Goban29synchronize_tracking_countersEPA25_iRS0_RNS_5PointE($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 10112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(10112|0);
 $8 = sp + 5088|0;
 $9 = sp + 5052|0;
 $12 = sp + 40|0;
 $13 = sp + 32|0;
 $14 = sp + 24|0;
 $15 = sp + 16|0;
 $16 = sp + 8|0;
 $17 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $18 = $4;
 __ZN15score_estimator5Vec_tILi625EEC2Ev($8);
 __ZN15score_estimator5Vec_tILi4EEC2Ev($9);
 $19 = $7;
 $20 = (__ZN15score_estimator5GobanixERKNS_5PointE($18,$19)|0);
 $21 = HEAP32[$20>>2]|0;
 $10 = $21;
 $22 = $5;
 $23 = $7;
 $24 = ((($23)) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($22) + (($25*100)|0)|0);
 $27 = $7;
 $28 = HEAP32[$27>>2]|0;
 $29 = (($26) + ($28<<2)|0);
 $30 = HEAP32[$29>>2]|0;
 $11 = $30;
 __ZN15score_estimator5Vec_tILi625EEC2Ev($12);
 $31 = $7;
 __ZN15score_estimator5Vec_tILi625EE4pushERKNS_5PointE($8,$31);
 $32 = $6;
 $33 = $7;
 $34 = (__ZN15score_estimator5GobanixERKNS_5PointE($32,$33)|0);
 HEAP32[$34>>2] = 1;
 $35 = $10;
 $36 = ($35|0)==(0);
 if ($36) {
  STACKTOP = sp;return;
 }
 L3: while(1) {
  $37 = ((($8)) + 5000|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($38|0)!=(0);
  if (!($39)) {
   break;
  }
  __ZN15score_estimator5Vec_tILi625EE6removeEi($13,$8,0);
  __ZN15score_estimator5Vec_tILi625EE4pushERKNS_5PointE($12,$13);
  $40 = $11;
  $41 = ($40|0)<(0);
  $42 = $5;
  $43 = ((($13)) + 4|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = (($42) + (($44*100)|0)|0);
  $46 = HEAP32[$13>>2]|0;
  $47 = (($45) + ($46<<2)|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = $11;
  $50 = ($48|0)<($49|0);
  do {
   if ($41) {
    if ($50) {
     $51 = $5;
     $52 = ((($13)) + 4|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = (($51) + (($53*100)|0)|0);
     $55 = HEAP32[$13>>2]|0;
     $56 = (($54) + ($55<<2)|0);
     $57 = HEAP32[$56>>2]|0;
     $67 = $57;
     break;
    } else {
     $58 = $11;
     $67 = $58;
     break;
    }
   } else {
    if ($50) {
     $59 = $11;
     $67 = $59;
     break;
    } else {
     $60 = $5;
     $61 = ((($13)) + 4|0);
     $62 = HEAP32[$61>>2]|0;
     $63 = (($60) + (($62*100)|0)|0);
     $64 = HEAP32[$13>>2]|0;
     $65 = (($63) + ($64<<2)|0);
     $66 = HEAP32[$65>>2]|0;
     $67 = $66;
     break;
    }
   }
  } while(0);
  $11 = $67;
  __ZN15score_estimator5Goban13get_neighborsERKNS_5PointERNS_5Vec_tILi4EEE($18,$13,$9);
  HEAP32[$14>>2] = 0;
  while(1) {
   $68 = HEAP32[$14>>2]|0;
   $69 = ((($9)) + 32|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = ($68|0)<($70|0);
   if (!($71)) {
    continue L3;
   }
   $72 = (__ZN15score_estimator5Vec_tILi4EEixERKi($9,$14)|0);
   ;HEAP32[$15>>2]=HEAP32[$72>>2]|0;HEAP32[$15+4>>2]=HEAP32[$72+4>>2]|0;
   $73 = (__ZN15score_estimator5GobanixERKNS_5PointE($18,$15)|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = $10;
   $76 = ($74|0)==($75|0);
   if ($76) {
    $77 = $6;
    $78 = (__ZN15score_estimator5GobanixERKNS_5PointE($77,$15)|0);
    $79 = HEAP32[$78>>2]|0;
    $80 = ($79|0)!=(0);
    if (!($80)) {
     $81 = $6;
     $82 = (__ZN15score_estimator5GobanixERKNS_5PointE($81,$15)|0);
     HEAP32[$82>>2] = 1;
     __ZN15score_estimator5Vec_tILi625EE4pushERKNS_5PointE($8,$15);
    }
   }
   $83 = HEAP32[$14>>2]|0;
   $84 = (($83) + 1)|0;
   HEAP32[$14>>2] = $84;
  }
 }
 HEAP32[$16>>2] = 0;
 while(1) {
  $85 = HEAP32[$16>>2]|0;
  $86 = ((($12)) + 5000|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = ($85|0)<($87|0);
  if (!($88)) {
   break;
  }
  $89 = (__ZN15score_estimator5Vec_tILi625EEixERKi($12,$16)|0);
  ;HEAP32[$17>>2]=HEAP32[$89>>2]|0;HEAP32[$17+4>>2]=HEAP32[$89+4>>2]|0;
  $90 = $11;
  $91 = $5;
  $92 = ((($17)) + 4|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = (($91) + (($93*100)|0)|0);
  $95 = HEAP32[$17>>2]|0;
  $96 = (($94) + ($95<<2)|0);
  HEAP32[$96>>2] = $90;
  $97 = HEAP32[$16>>2]|0;
  $98 = (($97) + 1)|0;
  HEAP32[$16>>2] = $98;
 }
 STACKTOP = sp;return;
}
function __ZN15score_estimator5Vec_tILi625EEC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 5000|0);
 $4 = $2;
 while(1) {
  __ZN15score_estimator5PointC2Ev($4);
  $5 = ((($4)) + 8|0);
  $6 = ($5|0)==($3|0);
  if ($6) {
   break;
  } else {
   $4 = $5;
  }
 }
 $7 = ((($2)) + 5000|0);
 HEAP32[$7>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN15score_estimator5Vec_tILi4EEC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 32|0);
 $4 = $2;
 while(1) {
  __ZN15score_estimator5PointC2Ev($4);
  $5 = ((($4)) + 8|0);
  $6 = ($5|0)==($3|0);
  if ($6) {
   break;
  } else {
   $4 = $5;
  }
 }
 $7 = ((($2)) + 32|0);
 HEAP32[$7>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN15score_estimator5Vec_tILi625EE4pushERKNS_5PointE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = ((($4)) + 5000|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 1)|0;
 HEAP32[$6>>2] = $8;
 $9 = (($4) + ($7<<3)|0);
 ;HEAP32[$9>>2]=HEAP32[$5>>2]|0;HEAP32[$9+4>>2]=HEAP32[$5+4>>2]|0;
 STACKTOP = sp;return;
}
function __ZN15score_estimator5Vec_tILi625EE6removeEi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = $4;
 $7 = (($5) + ($6<<3)|0);
 ;HEAP32[$0>>2]=HEAP32[$7>>2]|0;HEAP32[$0+4>>2]=HEAP32[$7+4>>2]|0;
 $8 = ((($5)) + 5000|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + -1)|0;
 HEAP32[$8>>2] = $10;
 $11 = (($5) + ($10<<3)|0);
 $12 = $4;
 $13 = (($5) + ($12<<3)|0);
 ;HEAP32[$13>>2]=HEAP32[$11>>2]|0;HEAP32[$13+4>>2]=HEAP32[$11+4>>2]|0;
 STACKTOP = sp;return;
}
function __ZN15score_estimator5Goban13get_neighborsERKNS_5PointERNS_5Vec_tILi4EEE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = sp + 24|0;
 $7 = sp + 16|0;
 $8 = sp + 8|0;
 $9 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $10 = $3;
 $11 = $5;
 $12 = ((($11)) + 32|0);
 HEAP32[$12>>2] = 0;
 $13 = $4;
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)>(0);
 if ($15) {
  $16 = $5;
  $17 = $4;
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) - 1)|0;
  $20 = $4;
  $21 = ((($20)) + 4|0);
  $22 = HEAP32[$21>>2]|0;
  __ZN15score_estimator5PointC2Eii($6,$19,$22);
  __ZN15score_estimator5Vec_tILi4EE4pushERKNS_5PointE($16,$6);
 }
 $23 = $4;
 $24 = HEAP32[$23>>2]|0;
 $25 = (($24) + 1)|0;
 $26 = HEAP32[$10>>2]|0;
 $27 = ($25|0)<($26|0);
 if ($27) {
  $28 = $5;
  $29 = $4;
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) + 1)|0;
  $32 = $4;
  $33 = ((($32)) + 4|0);
  $34 = HEAP32[$33>>2]|0;
  __ZN15score_estimator5PointC2Eii($7,$31,$34);
  __ZN15score_estimator5Vec_tILi4EE4pushERKNS_5PointE($28,$7);
 }
 $35 = $4;
 $36 = ((($35)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ($37|0)>(0);
 if ($38) {
  $39 = $5;
  $40 = $4;
  $41 = HEAP32[$40>>2]|0;
  $42 = $4;
  $43 = ((($42)) + 4|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = (($44) - 1)|0;
  __ZN15score_estimator5PointC2Eii($8,$41,$45);
  __ZN15score_estimator5Vec_tILi4EE4pushERKNS_5PointE($39,$8);
 }
 $46 = $4;
 $47 = ((($46)) + 4|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = (($48) + 1)|0;
 $50 = ((($10)) + 4|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = ($49|0)<($51|0);
 if (!($52)) {
  STACKTOP = sp;return;
 }
 $53 = $5;
 $54 = $4;
 $55 = HEAP32[$54>>2]|0;
 $56 = $4;
 $57 = ((($56)) + 4|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = (($58) + 1)|0;
 __ZN15score_estimator5PointC2Eii($9,$55,$59);
 __ZN15score_estimator5Vec_tILi4EE4pushERKNS_5PointE($53,$9);
 STACKTOP = sp;return;
}
function __ZN15score_estimator5Vec_tILi4EEixERKi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) + ($6<<3)|0);
 STACKTOP = sp;return ($7|0);
}
function __ZN15score_estimator5Vec_tILi625EEixERKi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) + ($6<<3)|0);
 STACKTOP = sp;return ($7|0);
}
function __ZN15score_estimator5Vec_tILi4EE4pushERKNS_5PointE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = ((($4)) + 32|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 1)|0;
 HEAP32[$6>>2] = $8;
 $9 = (($4) + ($7<<3)|0);
 ;HEAP32[$9>>2]=HEAP32[$5>>2]|0;HEAP32[$9+4>>2]=HEAP32[$5+4>>2]|0;
 STACKTOP = sp;return;
}
function __ZN15score_estimator5GobanC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 2512|0);
 __ZN15score_estimator5PointC2Ev($3);
 HEAP32[$2>>2] = 19;
 $4 = ((($2)) + 4|0);
 HEAP32[$4>>2] = 19;
 $5 = ((($2)) + 8|0);
 _memset(($5|0),0,2500)|0;
 __ZN15score_estimator5Goban4initEv($2);
 STACKTOP = sp;return;
}
function __ZN15score_estimator5Goban6is_eyeENS_5PointENS_5ColorE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp + 8|0;
 $4 = $0;
 $5 = $2;
 $6 = $4;
 $7 = HEAP32[$1>>2]|0;
 $8 = ($7|0)==(0);
 if ($8) {
  label = 3;
 } else {
  $9 = ((($6)) + 8|0);
  $10 = ((($1)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($9) + (($11*100)|0)|0);
  $13 = HEAP32[$1>>2]|0;
  $14 = (($13) - 1)|0;
  $15 = (($12) + ($14<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $5;
  $18 = ($16|0)==($17|0);
  if ($18) {
   label = 3;
  }
 }
 do {
  if ((label|0) == 3) {
   $19 = HEAP32[$1>>2]|0;
   $20 = HEAP32[$6>>2]|0;
   $21 = (($20) - 1)|0;
   $22 = ($19|0)==($21|0);
   if (!($22)) {
    $23 = ((($6)) + 8|0);
    $24 = ((($1)) + 4|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = (($23) + (($25*100)|0)|0);
    $27 = HEAP32[$1>>2]|0;
    $28 = (($27) + 1)|0;
    $29 = (($26) + ($28<<2)|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = $5;
    $32 = ($30|0)==($31|0);
    if (!($32)) {
     break;
    }
   }
   $33 = ((($1)) + 4|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = ($34|0)==(0);
   if (!($35)) {
    $36 = ((($6)) + 8|0);
    $37 = ((($1)) + 4|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = (($38) - 1)|0;
    $40 = (($36) + (($39*100)|0)|0);
    $41 = HEAP32[$1>>2]|0;
    $42 = (($40) + ($41<<2)|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = $5;
    $45 = ($43|0)==($44|0);
    if (!($45)) {
     break;
    }
   }
   $46 = ((($1)) + 4|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = ((($6)) + 4|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = (($49) - 1)|0;
   $51 = ($47|0)==($50|0);
   if (!($51)) {
    $52 = ((($6)) + 8|0);
    $53 = ((($1)) + 4|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = (($54) + 1)|0;
    $56 = (($52) + (($55*100)|0)|0);
    $57 = HEAP32[$1>>2]|0;
    $58 = (($56) + ($57<<2)|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = $5;
    $61 = ($59|0)==($60|0);
    if (!($61)) {
     break;
    }
   }
   $$expand_i1_val = 1;
   HEAP8[$3>>0] = $$expand_i1_val;
   $$pre_trunc = HEAP8[$3>>0]|0;
   $62 = $$pre_trunc&1;
   STACKTOP = sp;return ($62|0);
  }
 } while(0);
 $$expand_i1_val2 = 0;
 HEAP8[$3>>0] = $$expand_i1_val2;
 $$pre_trunc = HEAP8[$3>>0]|0;
 $62 = $$pre_trunc&1;
 STACKTOP = sp;return ($62|0);
}
function __ZN15score_estimator5Goban16place_and_removeENS_5PointENS_5ColorERNS_5Vec_tILi625EEE($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $$byval_copy = sp + 64|0;
 $10 = sp + 12|0;
 $11 = sp + 8|0;
 $12 = sp;
 $5 = $0;
 $6 = $2;
 $7 = $3;
 $13 = $5;
 $14 = ((($13)) + 2508|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)!=(0);
 if ($16) {
  $17 = ((($13)) + 2512|0);
  $18 = (__ZNK15score_estimator5PointeqERKS0_($1,$17)|0);
  if ($18) {
   $4 = 1;
   $56 = $4;
   STACKTOP = sp;return ($56|0);
  }
 }
 $8 = 1;
 $9 = 0;
 __ZN15score_estimator5Vec_tILi4EEC2Ev($10);
 __ZN15score_estimator5Goban13get_neighborsERKNS_5PointERNS_5Vec_tILi4EEE($13,$1,$10);
 $19 = $6;
 $20 = (__ZN15score_estimator5GobanixERKNS_5PointE($13,$1)|0);
 HEAP32[$20>>2] = $19;
 $21 = HEAP32[194]|0;
 $22 = (($21) + 1)|0;
 HEAP32[194] = $22;
 HEAP32[$11>>2] = 0;
 while(1) {
  $23 = HEAP32[$11>>2]|0;
  $24 = ((($10)) + 32|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ($23|0)<($25|0);
  if (!($26)) {
   break;
  }
  $27 = (__ZN15score_estimator5Vec_tILi4EEixERKi($10,$11)|0);
  $28 = (__ZN15score_estimator5GobanixERKNS_5PointE($13,$27)|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $6;
  $31 = (0 - ($30))|0;
  $32 = ($29|0)==($31|0);
  if ($32) {
   $33 = (__ZN15score_estimator5Vec_tILi4EEixERKi($10,$11)|0);
   $34 = (__ZN15score_estimator5GobanixERKNS_5PointE(9456,$33)|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = HEAP32[194]|0;
   $37 = ($35|0)!=($36|0);
   if ($37) {
    $38 = (__ZN15score_estimator5Vec_tILi4EEixERKi($10,$11)|0);
    $39 = (__ZN15score_estimator5Goban13has_libertiesERKNS_5PointE($13,$38)|0);
    if (!($39)) {
     $40 = (__ZN15score_estimator5Vec_tILi4EEixERKi($10,$11)|0);
     ;HEAP32[$12>>2]=HEAP32[$40>>2]|0;HEAP32[$12+4>>2]=HEAP32[$40+4>>2]|0;
     $41 = $7;
     ;HEAP32[$$byval_copy>>2]=HEAP32[$12>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$12+4>>2]|0;
     $42 = (__ZN15score_estimator5Goban12remove_groupENS_5PointERNS_5Vec_tILi625EEE($13,$$byval_copy,$41)|0);
     $43 = ($42|0)==(1);
     if ($43) {
      $8 = 0;
      $44 = ((($13)) + 2508|0);
      HEAP32[$44>>2] = 1;
      $45 = (__ZN15score_estimator5Vec_tILi4EEixERKi($10,$11)|0);
      $46 = ((($13)) + 2512|0);
      ;HEAP32[$46>>2]=HEAP32[$45>>2]|0;HEAP32[$46+4>>2]=HEAP32[$45+4>>2]|0;
     }
     $9 = 1;
    }
   }
  }
  $47 = HEAP32[$11>>2]|0;
  $48 = (($47) + 1)|0;
  HEAP32[$11>>2] = $48;
 }
 $49 = $9;
 $50 = $49&1;
 if (!($50)) {
  $51 = (__ZN15score_estimator5Goban13has_libertiesERKNS_5PointE($13,$1)|0);
  if (!($51)) {
   $52 = (__ZN15score_estimator5GobanixERKNS_5PointE($13,$1)|0);
   HEAP32[$52>>2] = 0;
   $4 = 1;
   $56 = $4;
   STACKTOP = sp;return ($56|0);
  }
 }
 $53 = $8;
 $54 = $53&1;
 if ($54) {
  $55 = ((($13)) + 2508|0);
  HEAP32[$55>>2] = 0;
 }
 $4 = 0;
 $56 = $4;
 STACKTOP = sp;return ($56|0);
}
function __ZNK15score_estimator5PointeqERKS0_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = HEAP32[$4>>2]|0;
 $6 = $3;
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5|0)==($7|0);
 if (!($8)) {
  $15 = 0;
  STACKTOP = sp;return ($15|0);
 }
 $9 = ((($4)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $3;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($10|0)==($13|0);
 $15 = $14;
 STACKTOP = sp;return ($15|0);
}
function __ZN15score_estimator5Goban13has_libertiesERKNS_5PointE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$expand_i1_val8 = 0, $$pre_trunc = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 5072|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(5072|0);
 $2 = sp + 5068|0;
 $5 = sp + 56|0;
 $10 = sp + 32|0;
 $3 = $0;
 $4 = $1;
 $19 = $3;
 __ZN15score_estimator5Vec_tILi625EEC2Ev($5);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($20) - 1)|0;
 $6 = $21;
 $22 = ((($19)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (($23) - 1)|0;
 $7 = $24;
 $25 = $4;
 $26 = (__ZN15score_estimator5GobanixERKNS_5PointE($19,$25)|0);
 $27 = HEAP32[$26>>2]|0;
 $8 = $27;
 $28 = HEAP32[194]|0;
 $29 = (($28) + 1)|0;
 HEAP32[194] = $29;
 $9 = $29;
 $30 = $4;
 __ZN15score_estimator5Vec_tILi625EE4pushERKNS_5PointE($5,$30);
 $31 = $9;
 $32 = $4;
 $33 = (__ZN15score_estimator5GobanixERKNS_5PointE(9456,$32)|0);
 HEAP32[$33>>2] = $31;
 while(1) {
  $34 = ((($5)) + 5000|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = ($35|0)!=(0);
  if (!($36)) {
   label = 27;
   break;
  }
  $37 = ((($5)) + 5000|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (($38) - 1)|0;
  __ZN15score_estimator5Vec_tILi625EE6removeEi($10,$5,$39);
  $40 = HEAP32[$10>>2]|0;
  $41 = ($40|0)>(0);
  if ($41) {
   $42 = ((($5)) + 5000|0);
   $43 = (__ZN15score_estimator5Vec_tILi625EEixERKi($5,$42)|0);
   $11 = $43;
   $44 = HEAP32[$10>>2]|0;
   $45 = (($44) - 1)|0;
   $46 = $11;
   HEAP32[$46>>2] = $45;
   $47 = ((($10)) + 4|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = $11;
   $50 = ((($49)) + 4|0);
   HEAP32[$50>>2] = $48;
   $51 = ((($19)) + 8|0);
   $52 = $11;
   $53 = ((($52)) + 4|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = (($51) + (($54*100)|0)|0);
   $56 = $11;
   $57 = HEAP32[$56>>2]|0;
   $58 = (($55) + ($57<<2)|0);
   $59 = HEAP32[$58>>2]|0;
   $12 = $59;
   $60 = $12;
   $61 = ($60|0)==(0);
   if ($61) {
    label = 5;
    break;
   }
   $62 = $12;
   $63 = $8;
   $64 = ($62|0)==($63|0);
   if ($64) {
    $65 = $11;
    $66 = ((($65)) + 4|0);
    $67 = HEAP32[$66>>2]|0;
    $68 = ((9464) + (($67*100)|0)|0);
    $69 = $11;
    $70 = HEAP32[$69>>2]|0;
    $71 = (($68) + ($70<<2)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = $9;
    $74 = ($72|0)!=($73|0);
    if ($74) {
     $75 = $9;
     $76 = $11;
     $77 = ((($76)) + 4|0);
     $78 = HEAP32[$77>>2]|0;
     $79 = ((9464) + (($78*100)|0)|0);
     $80 = $11;
     $81 = HEAP32[$80>>2]|0;
     $82 = (($79) + ($81<<2)|0);
     HEAP32[$82>>2] = $75;
     $83 = ((($5)) + 5000|0);
     $84 = HEAP32[$83>>2]|0;
     $85 = (($84) + 1)|0;
     HEAP32[$83>>2] = $85;
    }
   }
  }
  $86 = HEAP32[$10>>2]|0;
  $87 = $6;
  $88 = ($86|0)<($87|0);
  if ($88) {
   $89 = ((($5)) + 5000|0);
   $90 = (__ZN15score_estimator5Vec_tILi625EEixERKi($5,$89)|0);
   $13 = $90;
   $91 = HEAP32[$10>>2]|0;
   $92 = (($91) + 1)|0;
   $93 = $13;
   HEAP32[$93>>2] = $92;
   $94 = ((($10)) + 4|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = $13;
   $97 = ((($96)) + 4|0);
   HEAP32[$97>>2] = $95;
   $98 = ((($19)) + 8|0);
   $99 = $13;
   $100 = ((($99)) + 4|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = (($98) + (($101*100)|0)|0);
   $103 = $13;
   $104 = HEAP32[$103>>2]|0;
   $105 = (($102) + ($104<<2)|0);
   $106 = HEAP32[$105>>2]|0;
   $14 = $106;
   $107 = $14;
   $108 = ($107|0)==(0);
   if ($108) {
    label = 11;
    break;
   }
   $109 = $14;
   $110 = $8;
   $111 = ($109|0)==($110|0);
   if ($111) {
    $112 = $13;
    $113 = ((($112)) + 4|0);
    $114 = HEAP32[$113>>2]|0;
    $115 = ((9464) + (($114*100)|0)|0);
    $116 = $13;
    $117 = HEAP32[$116>>2]|0;
    $118 = (($115) + ($117<<2)|0);
    $119 = HEAP32[$118>>2]|0;
    $120 = $9;
    $121 = ($119|0)!=($120|0);
    if ($121) {
     $122 = $9;
     $123 = $13;
     $124 = ((($123)) + 4|0);
     $125 = HEAP32[$124>>2]|0;
     $126 = ((9464) + (($125*100)|0)|0);
     $127 = $13;
     $128 = HEAP32[$127>>2]|0;
     $129 = (($126) + ($128<<2)|0);
     HEAP32[$129>>2] = $122;
     $130 = ((($5)) + 5000|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = (($131) + 1)|0;
     HEAP32[$130>>2] = $132;
    }
   }
  }
  $133 = ((($10)) + 4|0);
  $134 = HEAP32[$133>>2]|0;
  $135 = ($134|0)>(0);
  if ($135) {
   $136 = ((($5)) + 5000|0);
   $137 = (__ZN15score_estimator5Vec_tILi625EEixERKi($5,$136)|0);
   $15 = $137;
   $138 = HEAP32[$10>>2]|0;
   $139 = $15;
   HEAP32[$139>>2] = $138;
   $140 = ((($10)) + 4|0);
   $141 = HEAP32[$140>>2]|0;
   $142 = (($141) - 1)|0;
   $143 = $15;
   $144 = ((($143)) + 4|0);
   HEAP32[$144>>2] = $142;
   $145 = ((($19)) + 8|0);
   $146 = $15;
   $147 = ((($146)) + 4|0);
   $148 = HEAP32[$147>>2]|0;
   $149 = (($145) + (($148*100)|0)|0);
   $150 = $15;
   $151 = HEAP32[$150>>2]|0;
   $152 = (($149) + ($151<<2)|0);
   $153 = HEAP32[$152>>2]|0;
   $16 = $153;
   $154 = $16;
   $155 = ($154|0)==(0);
   if ($155) {
    label = 17;
    break;
   }
   $156 = $16;
   $157 = $8;
   $158 = ($156|0)==($157|0);
   if ($158) {
    $159 = $15;
    $160 = ((($159)) + 4|0);
    $161 = HEAP32[$160>>2]|0;
    $162 = ((9464) + (($161*100)|0)|0);
    $163 = $15;
    $164 = HEAP32[$163>>2]|0;
    $165 = (($162) + ($164<<2)|0);
    $166 = HEAP32[$165>>2]|0;
    $167 = $9;
    $168 = ($166|0)!=($167|0);
    if ($168) {
     $169 = $9;
     $170 = $15;
     $171 = ((($170)) + 4|0);
     $172 = HEAP32[$171>>2]|0;
     $173 = ((9464) + (($172*100)|0)|0);
     $174 = $15;
     $175 = HEAP32[$174>>2]|0;
     $176 = (($173) + ($175<<2)|0);
     HEAP32[$176>>2] = $169;
     $177 = ((($5)) + 5000|0);
     $178 = HEAP32[$177>>2]|0;
     $179 = (($178) + 1)|0;
     HEAP32[$177>>2] = $179;
    }
   }
  }
  $180 = ((($10)) + 4|0);
  $181 = HEAP32[$180>>2]|0;
  $182 = $7;
  $183 = ($181|0)<($182|0);
  if (!($183)) {
   continue;
  }
  $184 = ((($5)) + 5000|0);
  $185 = (__ZN15score_estimator5Vec_tILi625EEixERKi($5,$184)|0);
  $17 = $185;
  $186 = HEAP32[$10>>2]|0;
  $187 = $17;
  HEAP32[$187>>2] = $186;
  $188 = ((($10)) + 4|0);
  $189 = HEAP32[$188>>2]|0;
  $190 = (($189) + 1)|0;
  $191 = $17;
  $192 = ((($191)) + 4|0);
  HEAP32[$192>>2] = $190;
  $193 = ((($19)) + 8|0);
  $194 = $17;
  $195 = ((($194)) + 4|0);
  $196 = HEAP32[$195>>2]|0;
  $197 = (($193) + (($196*100)|0)|0);
  $198 = $17;
  $199 = HEAP32[$198>>2]|0;
  $200 = (($197) + ($199<<2)|0);
  $201 = HEAP32[$200>>2]|0;
  $18 = $201;
  $202 = $18;
  $203 = ($202|0)==(0);
  if ($203) {
   label = 23;
   break;
  }
  $204 = $18;
  $205 = $8;
  $206 = ($204|0)==($205|0);
  if (!($206)) {
   continue;
  }
  $207 = $17;
  $208 = ((($207)) + 4|0);
  $209 = HEAP32[$208>>2]|0;
  $210 = ((9464) + (($209*100)|0)|0);
  $211 = $17;
  $212 = HEAP32[$211>>2]|0;
  $213 = (($210) + ($212<<2)|0);
  $214 = HEAP32[$213>>2]|0;
  $215 = $9;
  $216 = ($214|0)!=($215|0);
  if (!($216)) {
   continue;
  }
  $217 = $9;
  $218 = $17;
  $219 = ((($218)) + 4|0);
  $220 = HEAP32[$219>>2]|0;
  $221 = ((9464) + (($220*100)|0)|0);
  $222 = $17;
  $223 = HEAP32[$222>>2]|0;
  $224 = (($221) + ($223<<2)|0);
  HEAP32[$224>>2] = $217;
  $225 = ((($5)) + 5000|0);
  $226 = HEAP32[$225>>2]|0;
  $227 = (($226) + 1)|0;
  HEAP32[$225>>2] = $227;
 }
 if ((label|0) == 5) {
  $$expand_i1_val = 1;
  HEAP8[$2>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$2>>0]|0;
  $228 = $$pre_trunc&1;
  STACKTOP = sp;return ($228|0);
 }
 else if ((label|0) == 11) {
  $$expand_i1_val2 = 1;
  HEAP8[$2>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$2>>0]|0;
  $228 = $$pre_trunc&1;
  STACKTOP = sp;return ($228|0);
 }
 else if ((label|0) == 17) {
  $$expand_i1_val4 = 1;
  HEAP8[$2>>0] = $$expand_i1_val4;
  $$pre_trunc = HEAP8[$2>>0]|0;
  $228 = $$pre_trunc&1;
  STACKTOP = sp;return ($228|0);
 }
 else if ((label|0) == 23) {
  $$expand_i1_val6 = 1;
  HEAP8[$2>>0] = $$expand_i1_val6;
  $$pre_trunc = HEAP8[$2>>0]|0;
  $228 = $$pre_trunc&1;
  STACKTOP = sp;return ($228|0);
 }
 else if ((label|0) == 27) {
  $$expand_i1_val8 = 0;
  HEAP8[$2>>0] = $$expand_i1_val8;
  $$pre_trunc = HEAP8[$2>>0]|0;
  $228 = $$pre_trunc&1;
  STACKTOP = sp;return ($228|0);
 }
 return (0)|0;
}
function __ZN15score_estimator5Goban12remove_groupENS_5PointERNS_5Vec_tILi625EEE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 7616|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(7616|0);
 $5 = sp + 5080|0;
 $6 = sp + 76|0;
 $7 = sp + 40|0;
 $10 = sp + 24|0;
 $11 = sp + 16|0;
 $12 = sp + 8|0;
 $3 = $0;
 $4 = $2;
 $14 = $3;
 __ZN15score_estimator5GobanC2Ev($5);
 __ZN15score_estimator5Vec_tILi625EEC2Ev($6);
 __ZN15score_estimator5Vec_tILi4EEC2Ev($7);
 $8 = 0;
 $15 = (__ZN15score_estimator5GobanixERKNS_5PointE($14,$1)|0);
 $16 = HEAP32[$15>>2]|0;
 $9 = $16;
 __ZN15score_estimator5Vec_tILi625EE4pushERKNS_5PointE($6,$1);
 $17 = (__ZN15score_estimator5GobanixERKNS_5PointE($5,$1)|0);
 HEAP32[$17>>2] = 1;
 L1: while(1) {
  $18 = ((($6)) + 5000|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19|0)!=(0);
  if (!($20)) {
   break;
  }
  __ZN15score_estimator5Vec_tILi625EE6removeEi($10,$6,0);
  $21 = (__ZN15score_estimator5GobanixERKNS_5PointE($14,$10)|0);
  HEAP32[$21>>2] = 0;
  $22 = $4;
  __ZN15score_estimator5Vec_tILi625EE4pushERKNS_5PointE($22,$10);
  $23 = $8;
  $24 = (($23) + 1)|0;
  $8 = $24;
  __ZN15score_estimator5Goban13get_neighborsERKNS_5PointERNS_5Vec_tILi4EEE($14,$10,$7);
  HEAP32[$11>>2] = 0;
  while(1) {
   $25 = HEAP32[$11>>2]|0;
   $26 = ((($7)) + 32|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = ($25|0)<($27|0);
   if (!($28)) {
    continue L1;
   }
   $29 = (__ZN15score_estimator5Vec_tILi4EEixERKi($7,$11)|0);
   ;HEAP32[$12>>2]=HEAP32[$29>>2]|0;HEAP32[$12+4>>2]=HEAP32[$29+4>>2]|0;
   $30 = (__ZN15score_estimator5GobanixERKNS_5PointE($5,$12)|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ($31|0)!=(0);
   if (!($32)) {
    $33 = (__ZN15score_estimator5GobanixERKNS_5PointE($5,$12)|0);
    HEAP32[$33>>2] = 1;
    $34 = (__ZN15score_estimator5GobanixERKNS_5PointE($14,$12)|0);
    $35 = HEAP32[$34>>2]|0;
    $13 = $35;
    $36 = $13;
    $37 = $9;
    $38 = ($36|0)==($37|0);
    if ($38) {
     __ZN15score_estimator5Vec_tILi625EE4pushERKNS_5PointE($6,$12);
    }
   }
   $39 = HEAP32[$11>>2]|0;
   $40 = (($39) + 1)|0;
   HEAP32[$11>>2] = $40;
  }
 }
 $41 = $8;
 STACKTOP = sp;return ($41|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS0_17AllowedRawPointerIN15score_estimator5GobanEEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (780|0);
}
function __ZN10emscripten8internal11BindingTypeIPN15score_estimator5GobanEE10toWireTypeES4_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal11LightTypeIDIPKN15score_estimator5GobanEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (136|0);
}
function __ZN10emscripten8internal11LightTypeIDIPN15score_estimator5GobanEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (112|0);
}
function __ZN10emscripten8internal11LightTypeIDIN15score_estimator5GobanEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (128|0);
}
function __ZN10emscripten8internal14getLightTypeIDIN15score_estimator5GobanEEEPKvRKT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return (128|0);
}
function __ZNSt3__211char_traitsIcE6lengthEPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (_strlen($2)|0);
 STACKTOP = sp;return ($3|0);
}
function __GLOBAL__sub_I_bind_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init_41();
 return;
}
function ___cxx_global_var_init_41() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN53EmscriptenBindingInitializer_native_and_builtin_typesC2Ev(12566);
 return;
}
function __ZN53EmscriptenBindingInitializer_native_and_builtin_typesC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDIvE3getEv()|0);
 __embind_register_void(($2|0),(9005|0));
 $3 = (__ZN10emscripten8internal6TypeIDIbE3getEv()|0);
 __embind_register_bool(($3|0),(9010|0),1,1,0);
 __ZN12_GLOBAL__N_1L16register_integerIcEEvPKc(8779);
 __ZN12_GLOBAL__N_1L16register_integerIaEEvPKc(8784);
 __ZN12_GLOBAL__N_1L16register_integerIhEEvPKc(8796);
 __ZN12_GLOBAL__N_1L16register_integerIsEEvPKc(8810);
 __ZN12_GLOBAL__N_1L16register_integerItEEvPKc(8816);
 __ZN12_GLOBAL__N_1L16register_integerIiEEvPKc(9015);
 __ZN12_GLOBAL__N_1L16register_integerIjEEvPKc(9019);
 __ZN12_GLOBAL__N_1L16register_integerIlEEvPKc(9032);
 __ZN12_GLOBAL__N_1L16register_integerImEEvPKc(9037);
 __ZN12_GLOBAL__N_1L14register_floatIfEEvPKc(9061);
 __ZN12_GLOBAL__N_1L14register_floatIdEEvPKc(9173);
 $4 = (__ZN10emscripten8internal6TypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv()|0);
 __embind_register_std_string(($4|0),(8388|0));
 $5 = (__ZN10emscripten8internal6TypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv()|0);
 __embind_register_std_string(($5|0),(2727|0));
 $6 = (__ZN10emscripten8internal6TypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv()|0);
 __embind_register_std_wstring(($6|0),4,(2760|0));
 $7 = (__ZN10emscripten8internal6TypeIDINS_3valEE3getEv()|0);
 __embind_register_emval(($7|0),(2773|0));
 __ZN12_GLOBAL__N_1L20register_memory_viewIcEEvPKc(2789);
 __ZN12_GLOBAL__N_1L20register_memory_viewIaEEvPKc(2819);
 __ZN12_GLOBAL__N_1L20register_memory_viewIhEEvPKc(2856);
 __ZN12_GLOBAL__N_1L20register_memory_viewIsEEvPKc(2895);
 __ZN12_GLOBAL__N_1L20register_memory_viewItEEvPKc(2926);
 __ZN12_GLOBAL__N_1L20register_memory_viewIiEEvPKc(2966);
 __ZN12_GLOBAL__N_1L20register_memory_viewIjEEvPKc(2995);
 __ZN12_GLOBAL__N_1L20register_memory_viewIlEEvPKc(3033);
 __ZN12_GLOBAL__N_1L20register_memory_viewImEEvPKc(3063);
 __ZN12_GLOBAL__N_1L20register_memory_viewIaEEvPKc(3102);
 __ZN12_GLOBAL__N_1L20register_memory_viewIhEEvPKc(3134);
 __ZN12_GLOBAL__N_1L20register_memory_viewIsEEvPKc(3167);
 __ZN12_GLOBAL__N_1L20register_memory_viewItEEvPKc(3200);
 __ZN12_GLOBAL__N_1L20register_memory_viewIiEEvPKc(3234);
 __ZN12_GLOBAL__N_1L20register_memory_viewIjEEvPKc(3267);
 __ZN12_GLOBAL__N_1L20register_memory_viewIfEEvPKc(3301);
 __ZN12_GLOBAL__N_1L20register_memory_viewIdEEvPKc(3332);
 __ZN12_GLOBAL__N_1L20register_memory_viewIeEEvPKc(3364);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal6TypeIDIvE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIvE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDIbE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIbE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_1L16register_integerIcEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDIcE3getEv()|0);
 $3 = $1;
 $4 = -128 << 24 >> 24;
 $5 = 127 << 24 >> 24;
 __embind_register_integer(($2|0),($3|0),1,($4|0),($5|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L16register_integerIaEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDIaE3getEv()|0);
 $3 = $1;
 $4 = -128 << 24 >> 24;
 $5 = 127 << 24 >> 24;
 __embind_register_integer(($2|0),($3|0),1,($4|0),($5|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L16register_integerIhEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDIhE3getEv()|0);
 $3 = $1;
 $4 = 0;
 $5 = 255;
 __embind_register_integer(($2|0),($3|0),1,($4|0),($5|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L16register_integerIsEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDIsE3getEv()|0);
 $3 = $1;
 $4 = -32768 << 16 >> 16;
 $5 = 32767 << 16 >> 16;
 __embind_register_integer(($2|0),($3|0),2,($4|0),($5|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L16register_integerItEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDItE3getEv()|0);
 $3 = $1;
 $4 = 0;
 $5 = 65535;
 __embind_register_integer(($2|0),($3|0),2,($4|0),($5|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L16register_integerIiEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDIiE3getEv()|0);
 $3 = $1;
 __embind_register_integer(($2|0),($3|0),4,-2147483648,2147483647);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L16register_integerIjEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDIjE3getEv()|0);
 $3 = $1;
 __embind_register_integer(($2|0),($3|0),4,0,-1);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L16register_integerIlEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDIlE3getEv()|0);
 $3 = $1;
 __embind_register_integer(($2|0),($3|0),4,-2147483648,2147483647);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L16register_integerImEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDImE3getEv()|0);
 $3 = $1;
 __embind_register_integer(($2|0),($3|0),4,0,-1);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L14register_floatIfEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDIfE3getEv()|0);
 $3 = $1;
 __embind_register_float(($2|0),($3|0),4);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L14register_floatIdEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDIdE3getEv()|0);
 $3 = $1;
 __embind_register_float(($2|0),($3|0),8);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal6TypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS_3valEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_3valEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIcEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIcEEE3getEv()|0);
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIcEENS_15TypedArrayIndexEv()|0);
 $4 = $1;
 __embind_register_memory_view(($2|0),($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIaEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIaEEE3getEv()|0);
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIaEENS_15TypedArrayIndexEv()|0);
 $4 = $1;
 __embind_register_memory_view(($2|0),($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIhEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIhEEE3getEv()|0);
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIhEENS_15TypedArrayIndexEv()|0);
 $4 = $1;
 __embind_register_memory_view(($2|0),($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIsEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIsEEE3getEv()|0);
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIsEENS_15TypedArrayIndexEv()|0);
 $4 = $1;
 __embind_register_memory_view(($2|0),($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewItEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewItEEE3getEv()|0);
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexItEENS_15TypedArrayIndexEv()|0);
 $4 = $1;
 __embind_register_memory_view(($2|0),($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIiEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIiEEE3getEv()|0);
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIiEENS_15TypedArrayIndexEv()|0);
 $4 = $1;
 __embind_register_memory_view(($2|0),($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIjEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIjEEE3getEv()|0);
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIjEENS_15TypedArrayIndexEv()|0);
 $4 = $1;
 __embind_register_memory_view(($2|0),($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIlEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIlEEE3getEv()|0);
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIlEENS_15TypedArrayIndexEv()|0);
 $4 = $1;
 __embind_register_memory_view(($2|0),($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewImEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewImEEE3getEv()|0);
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexImEENS_15TypedArrayIndexEv()|0);
 $4 = $1;
 __embind_register_memory_view(($2|0),($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIfEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIfEEE3getEv()|0);
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIfEENS_15TypedArrayIndexEv()|0);
 $4 = $1;
 __embind_register_memory_view(($2|0),($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIdEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIdEEE3getEv()|0);
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIdEENS_15TypedArrayIndexEv()|0);
 $4 = $1;
 __embind_register_memory_view(($2|0),($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIeEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIeEEE3getEv()|0);
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIeEENS_15TypedArrayIndexEv()|0);
 $4 = $1;
 __embind_register_memory_view(($2|0),($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIeEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIeEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIeEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 7;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIeEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (152|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIdEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIdEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIdEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 7;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIdEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (160|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIfEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIfEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIfEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 6;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIfEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (168|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewImEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewImEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexImEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 5;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewImEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (176|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIlEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIlEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIlEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIlEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (184|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIjEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIjEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIjEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 5;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIjEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (192|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIiEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIiEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIiEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIiEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (200|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewItEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewItEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexItEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 3;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewItEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (208|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIsEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIsEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIsEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIsEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (216|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIhEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIhEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIhEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIhEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (224|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIaEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIaEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIaEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIaEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (232|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIcEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIcEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIcEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIcEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (240|0);
}
function __ZN10emscripten8internal11LightTypeIDINS_3valEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (64|0);
}
function __ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (248|0);
}
function __ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (280|0);
}
function __ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (304|0);
}
function __ZN10emscripten8internal6TypeIDIdE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIdE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIdE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (608|0);
}
function __ZN10emscripten8internal6TypeIDIfE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIfE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIfE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (600|0);
}
function __ZN10emscripten8internal6TypeIDImE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDImE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDImE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (592|0);
}
function __ZN10emscripten8internal6TypeIDIlE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIlE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIlE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (584|0);
}
function __ZN10emscripten8internal6TypeIDIjE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIjE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIjE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (576|0);
}
function __ZN10emscripten8internal6TypeIDIiE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIiE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIiE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (568|0);
}
function __ZN10emscripten8internal6TypeIDItE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDItE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDItE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (560|0);
}
function __ZN10emscripten8internal6TypeIDIsE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIsE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIsE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (552|0);
}
function __ZN10emscripten8internal6TypeIDIhE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIhE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIhE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (536|0);
}
function __ZN10emscripten8internal6TypeIDIaE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIaE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIaE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (544|0);
}
function __ZN10emscripten8internal6TypeIDIcE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIcE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIcE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (528|0);
}
function __ZN10emscripten8internal11LightTypeIDIbE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (520|0);
}
function __ZN10emscripten8internal11LightTypeIDIvE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (504|0);
}
function ___getTypeName($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $1 = $3;
 $4 = $1;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (___strdup($6)|0);
 STACKTOP = sp;return ($7|0);
}
function _emscripten_get_global_libc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (11976|0);
}
function ___stdio_close($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = ((($0)) + 60|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_dummy_738($2)|0);
 HEAP32[$vararg_buffer>>2] = $3;
 $4 = (___syscall6(6,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function ___stdio_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$04756 = 0, $$04855 = 0, $$04954 = 0, $$051 = 0, $$1 = 0, $$150 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0;
 var $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $3 = sp + 32|0;
 $4 = ((($0)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 $6 = ((($3)) + 4|0);
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - ($5))|0;
 HEAP32[$6>>2] = $9;
 $10 = ((($3)) + 8|0);
 HEAP32[$10>>2] = $1;
 $11 = ((($3)) + 12|0);
 HEAP32[$11>>2] = $2;
 $12 = (($9) + ($2))|0;
 $13 = ((($0)) + 60|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $3;
 HEAP32[$vararg_buffer>>2] = $14;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $15;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 2;
 $16 = (___syscall146(146,($vararg_buffer|0))|0);
 $17 = (___syscall_ret($16)|0);
 $18 = ($12|0)==($17|0);
 L1: do {
  if ($18) {
   label = 3;
  } else {
   $$04756 = 2;$$04855 = $12;$$04954 = $3;$26 = $17;
   while(1) {
    $25 = ($26|0)<(0);
    if ($25) {
     break;
    }
    $34 = (($$04855) - ($26))|0;
    $35 = ((($$04954)) + 4|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ($26>>>0)>($36>>>0);
    $38 = ((($$04954)) + 8|0);
    $$150 = $37 ? $38 : $$04954;
    $39 = $37 << 31 >> 31;
    $$1 = (($39) + ($$04756))|0;
    $40 = $37 ? $36 : 0;
    $$0 = (($26) - ($40))|0;
    $41 = HEAP32[$$150>>2]|0;
    $42 = (($41) + ($$0)|0);
    HEAP32[$$150>>2] = $42;
    $43 = ((($$150)) + 4|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = (($44) - ($$0))|0;
    HEAP32[$43>>2] = $45;
    $46 = HEAP32[$13>>2]|0;
    $47 = $$150;
    HEAP32[$vararg_buffer3>>2] = $46;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $47;
    $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
    HEAP32[$vararg_ptr7>>2] = $$1;
    $48 = (___syscall146(146,($vararg_buffer3|0))|0);
    $49 = (___syscall_ret($48)|0);
    $50 = ($34|0)==($49|0);
    if ($50) {
     label = 3;
     break L1;
    } else {
     $$04756 = $$1;$$04855 = $34;$$04954 = $$150;$26 = $49;
    }
   }
   $27 = ((($0)) + 16|0);
   HEAP32[$27>>2] = 0;
   HEAP32[$4>>2] = 0;
   HEAP32[$7>>2] = 0;
   $28 = HEAP32[$0>>2]|0;
   $29 = $28 | 32;
   HEAP32[$0>>2] = $29;
   $30 = ($$04756|0)==(2);
   if ($30) {
    $$051 = 0;
   } else {
    $31 = ((($$04954)) + 4|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = (($2) - ($32))|0;
    $$051 = $33;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $19 = ((($0)) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($0)) + 16|0);
  HEAP32[$24>>2] = $23;
  HEAP32[$4>>2] = $20;
  HEAP32[$7>>2] = $20;
  $$051 = $2;
 }
 STACKTOP = sp;return ($$051|0);
}
function ___stdio_seek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 20|0;
 $4 = ((($0)) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $3;
 HEAP32[$vararg_buffer>>2] = $5;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $1;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $6;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $2;
 $7 = (___syscall140(140,($vararg_buffer|0))|0);
 $8 = (___syscall_ret($7)|0);
 $9 = ($8|0)<(0);
 if ($9) {
  HEAP32[$3>>2] = -1;
  $10 = -1;
 } else {
  $$pre = HEAP32[$3>>2]|0;
  $10 = $$pre;
 }
 STACKTOP = sp;return ($10|0);
}
function ___syscall_ret($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0>>>0)>(4294963200);
 if ($1) {
  $2 = (0 - ($0))|0;
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = $2;
  $$0 = -1;
 } else {
  $$0 = $0;
 }
 return ($$0|0);
}
function ___errno_location() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___pthread_self_108()|0);
 $1 = ((($0)) + 64|0);
 return ($1|0);
}
function ___pthread_self_108() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _pthread_self() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1116|0);
}
function _dummy_738($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function ___stdio_read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 16|0;
 HEAP32[$3>>2] = $1;
 $4 = ((($3)) + 4|0);
 $5 = ((($0)) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0);
 $8 = $7&1;
 $9 = (($2) - ($8))|0;
 HEAP32[$4>>2] = $9;
 $10 = ((($3)) + 8|0);
 $11 = ((($0)) + 44|0);
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$10>>2] = $12;
 $13 = ((($3)) + 12|0);
 HEAP32[$13>>2] = $6;
 $14 = ((($0)) + 60|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $3;
 HEAP32[$vararg_buffer>>2] = $15;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $16;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 2;
 $17 = (___syscall145(145,($vararg_buffer|0))|0);
 $18 = (___syscall_ret($17)|0);
 $19 = ($18|0)<(1);
 if ($19) {
  $20 = $18 & 48;
  $21 = $20 ^ 16;
  $22 = HEAP32[$0>>2]|0;
  $23 = $22 | $21;
  HEAP32[$0>>2] = $23;
  $$0 = $18;
 } else {
  $24 = HEAP32[$4>>2]|0;
  $25 = ($18>>>0)>($24>>>0);
  if ($25) {
   $26 = (($18) - ($24))|0;
   $27 = HEAP32[$11>>2]|0;
   $28 = ((($0)) + 4|0);
   HEAP32[$28>>2] = $27;
   $29 = (($27) + ($26)|0);
   $30 = ((($0)) + 8|0);
   HEAP32[$30>>2] = $29;
   $31 = HEAP32[$5>>2]|0;
   $32 = ($31|0)==(0);
   if ($32) {
    $$0 = $2;
   } else {
    $33 = ((($27)) + 1|0);
    HEAP32[$28>>2] = $33;
    $34 = HEAP8[$27>>0]|0;
    $35 = (($2) + -1)|0;
    $36 = (($1) + ($35)|0);
    HEAP8[$36>>0] = $34;
    $$0 = $2;
   }
  } else {
   $$0 = $18;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___stdout_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 16|0;
 $4 = ((($0)) + 36|0);
 HEAP32[$4>>2] = 2;
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 & 64;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ((($0)) + 60|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $3;
  HEAP32[$vararg_buffer>>2] = $9;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21523;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $10;
  $11 = (___syscall54(54,($vararg_buffer|0))|0);
  $12 = ($11|0)==(0);
  if (!($12)) {
   $13 = ((($0)) + 75|0);
   HEAP8[$13>>0] = -1;
  }
 }
 $14 = (___stdio_write($0,$1,$2)|0);
 STACKTOP = sp;return ($14|0);
}
function _isupper($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -65)|0;
 $2 = ($1>>>0)<(26);
 $3 = $2&1;
 return ($3|0);
}
function ___shlim($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 104|0);
 HEAP32[$2>>2] = $1;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $4;
 $8 = $6;
 $9 = (($7) - ($8))|0;
 $10 = ((($0)) + 108|0);
 HEAP32[$10>>2] = $9;
 $11 = ($1|0)!=(0);
 $12 = ($9|0)>($1|0);
 $or$cond = $11 & $12;
 $13 = (($6) + ($1)|0);
 $$sink = $or$cond ? $13 : $4;
 $14 = ((($0)) + 100|0);
 HEAP32[$14>>2] = $$sink;
 return;
}
function ___intscan($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0154222 = 0, $$0157 = 0, $$0157$ = 0, $$0159 = 0, $$1155192 = 0, $$1158 = 0, $$1160 = 0, $$1160169 = 0, $$1165 = 0, $$1165167 = 0, $$1165168 = 0, $$166 = 0, $$2156210 = 0, $$2161$be = 0, $$2161$lcssa = 0, $$3162$be = 0, $$3162215 = 0, $$4163$be = 0, $$4163$lcssa = 0, $$5$be = 0;
 var $$6$be = 0, $$6$lcssa = 0, $$7$be = 0, $$7198 = 0, $$8 = 0, $$9$be = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond12 = 0;
 var $or$cond187 = 0, $or$cond5 = 0, $or$cond7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ($1>>>0)>(36);
 L1: do {
  if ($5) {
   $8 = (___errno_location()|0);
   HEAP32[$8>>2] = 22;
   $289 = 0;$290 = 0;
  } else {
   $6 = ((($0)) + 4|0);
   $7 = ((($0)) + 100|0);
   while(1) {
    $9 = HEAP32[$6>>2]|0;
    $10 = HEAP32[$7>>2]|0;
    $11 = ($9>>>0)<($10>>>0);
    if ($11) {
     $12 = ((($9)) + 1|0);
     HEAP32[$6>>2] = $12;
     $13 = HEAP8[$9>>0]|0;
     $14 = $13&255;
     $16 = $14;
    } else {
     $15 = (___shgetc($0)|0);
     $16 = $15;
    }
    $17 = (_isspace($16)|0);
    $18 = ($17|0)==(0);
    if ($18) {
     break;
    }
   }
   L11: do {
    switch ($16|0) {
    case 43: case 45:  {
     $19 = ($16|0)==(45);
     $20 = $19 << 31 >> 31;
     $21 = HEAP32[$6>>2]|0;
     $22 = HEAP32[$7>>2]|0;
     $23 = ($21>>>0)<($22>>>0);
     if ($23) {
      $24 = ((($21)) + 1|0);
      HEAP32[$6>>2] = $24;
      $25 = HEAP8[$21>>0]|0;
      $26 = $25&255;
      $$0157 = $20;$$0159 = $26;
      break L11;
     } else {
      $27 = (___shgetc($0)|0);
      $$0157 = $20;$$0159 = $27;
      break L11;
     }
     break;
    }
    default: {
     $$0157 = 0;$$0159 = $16;
    }
    }
   } while(0);
   $28 = ($1|0)==(0);
   $29 = $1 | 16;
   $30 = ($29|0)==(16);
   $31 = ($$0159|0)==(48);
   $or$cond5 = $30 & $31;
   do {
    if ($or$cond5) {
     $32 = HEAP32[$6>>2]|0;
     $33 = HEAP32[$7>>2]|0;
     $34 = ($32>>>0)<($33>>>0);
     if ($34) {
      $35 = ((($32)) + 1|0);
      HEAP32[$6>>2] = $35;
      $36 = HEAP8[$32>>0]|0;
      $37 = $36&255;
      $40 = $37;
     } else {
      $38 = (___shgetc($0)|0);
      $40 = $38;
     }
     $39 = $40 | 32;
     $41 = ($39|0)==(120);
     if (!($41)) {
      if ($28) {
       $$1160169 = $40;$$1165168 = 8;
       label = 46;
       break;
      } else {
       $$1160 = $40;$$1165 = $1;
       label = 32;
       break;
      }
     }
     $42 = HEAP32[$6>>2]|0;
     $43 = HEAP32[$7>>2]|0;
     $44 = ($42>>>0)<($43>>>0);
     if ($44) {
      $45 = ((($42)) + 1|0);
      HEAP32[$6>>2] = $45;
      $46 = HEAP8[$42>>0]|0;
      $47 = $46&255;
      $50 = $47;
     } else {
      $48 = (___shgetc($0)|0);
      $50 = $48;
     }
     $49 = ((4001) + ($50)|0);
     $51 = HEAP8[$49>>0]|0;
     $52 = ($51&255)>(15);
     if ($52) {
      $53 = HEAP32[$7>>2]|0;
      $54 = ($53|0)!=(0|0);
      if ($54) {
       $55 = HEAP32[$6>>2]|0;
       $56 = ((($55)) + -1|0);
       HEAP32[$6>>2] = $56;
      }
      $57 = ($2|0)==(0);
      if ($57) {
       ___shlim($0,0);
       $289 = 0;$290 = 0;
       break L1;
      }
      if (!($54)) {
       $289 = 0;$290 = 0;
       break L1;
      }
      $58 = HEAP32[$6>>2]|0;
      $59 = ((($58)) + -1|0);
      HEAP32[$6>>2] = $59;
      $289 = 0;$290 = 0;
      break L1;
     } else {
      $$1160169 = $50;$$1165168 = 16;
      label = 46;
     }
    } else {
     $$166 = $28 ? 10 : $1;
     $60 = ((4001) + ($$0159)|0);
     $61 = HEAP8[$60>>0]|0;
     $62 = $61&255;
     $63 = ($62>>>0)<($$166>>>0);
     if ($63) {
      $$1160 = $$0159;$$1165 = $$166;
      label = 32;
     } else {
      $64 = HEAP32[$7>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $66 = HEAP32[$6>>2]|0;
       $67 = ((($66)) + -1|0);
       HEAP32[$6>>2] = $67;
      }
      ___shlim($0,0);
      $68 = (___errno_location()|0);
      HEAP32[$68>>2] = 22;
      $289 = 0;$290 = 0;
      break L1;
     }
    }
   } while(0);
   L43: do {
    if ((label|0) == 32) {
     $69 = ($$1165|0)==(10);
     if ($69) {
      $70 = (($$1160) + -48)|0;
      $71 = ($70>>>0)<(10);
      if ($71) {
       $$0154222 = 0;$74 = $70;
       while(1) {
        $72 = ($$0154222*10)|0;
        $73 = (($72) + ($74))|0;
        $75 = HEAP32[$6>>2]|0;
        $76 = HEAP32[$7>>2]|0;
        $77 = ($75>>>0)<($76>>>0);
        if ($77) {
         $78 = ((($75)) + 1|0);
         HEAP32[$6>>2] = $78;
         $79 = HEAP8[$75>>0]|0;
         $80 = $79&255;
         $$2161$be = $80;
        } else {
         $81 = (___shgetc($0)|0);
         $$2161$be = $81;
        }
        $82 = (($$2161$be) + -48)|0;
        $83 = ($82>>>0)<(10);
        $84 = ($73>>>0)<(429496729);
        $85 = $83 & $84;
        if ($85) {
         $$0154222 = $73;$74 = $82;
        } else {
         break;
        }
       }
       $$2161$lcssa = $$2161$be;$291 = $73;$292 = 0;
      } else {
       $$2161$lcssa = $$1160;$291 = 0;$292 = 0;
      }
      $86 = (($$2161$lcssa) + -48)|0;
      $87 = ($86>>>0)<(10);
      if ($87) {
       $$3162215 = $$2161$lcssa;$88 = $291;$89 = $292;$93 = $86;
       while(1) {
        $90 = (___muldi3(($88|0),($89|0),10,0)|0);
        $91 = tempRet0;
        $92 = ($93|0)<(0);
        $94 = $92 << 31 >> 31;
        $95 = $93 ^ -1;
        $96 = $94 ^ -1;
        $97 = ($91>>>0)>($96>>>0);
        $98 = ($90>>>0)>($95>>>0);
        $99 = ($91|0)==($96|0);
        $100 = $99 & $98;
        $101 = $97 | $100;
        if ($101) {
         $$1165167 = 10;$$8 = $$3162215;$293 = $88;$294 = $89;
         label = 72;
         break L43;
        }
        $102 = (_i64Add(($90|0),($91|0),($93|0),($94|0))|0);
        $103 = tempRet0;
        $104 = HEAP32[$6>>2]|0;
        $105 = HEAP32[$7>>2]|0;
        $106 = ($104>>>0)<($105>>>0);
        if ($106) {
         $107 = ((($104)) + 1|0);
         HEAP32[$6>>2] = $107;
         $108 = HEAP8[$104>>0]|0;
         $109 = $108&255;
         $$3162$be = $109;
        } else {
         $110 = (___shgetc($0)|0);
         $$3162$be = $110;
        }
        $111 = (($$3162$be) + -48)|0;
        $112 = ($111>>>0)<(10);
        $113 = ($103>>>0)<(429496729);
        $114 = ($102>>>0)<(2576980378);
        $115 = ($103|0)==(429496729);
        $116 = $115 & $114;
        $117 = $113 | $116;
        $or$cond7 = $112 & $117;
        if ($or$cond7) {
         $$3162215 = $$3162$be;$88 = $102;$89 = $103;$93 = $111;
        } else {
         break;
        }
       }
       $118 = ($111>>>0)>(9);
       if ($118) {
        $$1158 = $$0157;$263 = $103;$265 = $102;
       } else {
        $$1165167 = 10;$$8 = $$3162$be;$293 = $102;$294 = $103;
        label = 72;
       }
      } else {
       $$1158 = $$0157;$263 = $292;$265 = $291;
      }
     } else {
      $$1160169 = $$1160;$$1165168 = $$1165;
      label = 46;
     }
    }
   } while(0);
   L63: do {
    if ((label|0) == 46) {
     $119 = (($$1165168) + -1)|0;
     $120 = $119 & $$1165168;
     $121 = ($120|0)==(0);
     if ($121) {
      $126 = ($$1165168*23)|0;
      $127 = $126 >>> 5;
      $128 = $127 & 7;
      $129 = (4257 + ($128)|0);
      $130 = HEAP8[$129>>0]|0;
      $131 = $130 << 24 >> 24;
      $132 = ((4001) + ($$1160169)|0);
      $133 = HEAP8[$132>>0]|0;
      $134 = $133&255;
      $135 = ($134>>>0)<($$1165168>>>0);
      if ($135) {
       $$1155192 = 0;$138 = $134;
       while(1) {
        $136 = $$1155192 << $131;
        $137 = $138 | $136;
        $139 = HEAP32[$6>>2]|0;
        $140 = HEAP32[$7>>2]|0;
        $141 = ($139>>>0)<($140>>>0);
        if ($141) {
         $142 = ((($139)) + 1|0);
         HEAP32[$6>>2] = $142;
         $143 = HEAP8[$139>>0]|0;
         $144 = $143&255;
         $$4163$be = $144;
        } else {
         $145 = (___shgetc($0)|0);
         $$4163$be = $145;
        }
        $146 = ((4001) + ($$4163$be)|0);
        $147 = HEAP8[$146>>0]|0;
        $148 = $147&255;
        $149 = ($148>>>0)<($$1165168>>>0);
        $150 = ($137>>>0)<(134217728);
        $151 = $150 & $149;
        if ($151) {
         $$1155192 = $137;$138 = $148;
        } else {
         break;
        }
       }
       $$4163$lcssa = $$4163$be;$155 = $147;$158 = 0;$160 = $137;
      } else {
       $$4163$lcssa = $$1160169;$155 = $133;$158 = 0;$160 = 0;
      }
      $152 = (_bitshift64Lshr(-1,-1,($131|0))|0);
      $153 = tempRet0;
      $154 = $155&255;
      $156 = ($154>>>0)>=($$1165168>>>0);
      $157 = ($158>>>0)>($153>>>0);
      $159 = ($160>>>0)>($152>>>0);
      $161 = ($158|0)==($153|0);
      $162 = $161 & $159;
      $163 = $157 | $162;
      $or$cond187 = $156 | $163;
      if ($or$cond187) {
       $$1165167 = $$1165168;$$8 = $$4163$lcssa;$293 = $160;$294 = $158;
       label = 72;
       break;
      } else {
       $164 = $160;$165 = $158;$169 = $155;
      }
      while(1) {
       $166 = (_bitshift64Shl(($164|0),($165|0),($131|0))|0);
       $167 = tempRet0;
       $168 = $169&255;
       $170 = $168 | $166;
       $171 = HEAP32[$6>>2]|0;
       $172 = HEAP32[$7>>2]|0;
       $173 = ($171>>>0)<($172>>>0);
       if ($173) {
        $174 = ((($171)) + 1|0);
        HEAP32[$6>>2] = $174;
        $175 = HEAP8[$171>>0]|0;
        $176 = $175&255;
        $$5$be = $176;
       } else {
        $177 = (___shgetc($0)|0);
        $$5$be = $177;
       }
       $178 = ((4001) + ($$5$be)|0);
       $179 = HEAP8[$178>>0]|0;
       $180 = $179&255;
       $181 = ($180>>>0)>=($$1165168>>>0);
       $182 = ($167>>>0)>($153>>>0);
       $183 = ($170>>>0)>($152>>>0);
       $184 = ($167|0)==($153|0);
       $185 = $184 & $183;
       $186 = $182 | $185;
       $or$cond = $181 | $186;
       if ($or$cond) {
        $$1165167 = $$1165168;$$8 = $$5$be;$293 = $170;$294 = $167;
        label = 72;
        break L63;
       } else {
        $164 = $170;$165 = $167;$169 = $179;
       }
      }
     }
     $122 = ((4001) + ($$1160169)|0);
     $123 = HEAP8[$122>>0]|0;
     $124 = $123&255;
     $125 = ($124>>>0)<($$1165168>>>0);
     if ($125) {
      $$2156210 = 0;$189 = $124;
      while(1) {
       $187 = Math_imul($$2156210, $$1165168)|0;
       $188 = (($189) + ($187))|0;
       $190 = HEAP32[$6>>2]|0;
       $191 = HEAP32[$7>>2]|0;
       $192 = ($190>>>0)<($191>>>0);
       if ($192) {
        $193 = ((($190)) + 1|0);
        HEAP32[$6>>2] = $193;
        $194 = HEAP8[$190>>0]|0;
        $195 = $194&255;
        $$6$be = $195;
       } else {
        $196 = (___shgetc($0)|0);
        $$6$be = $196;
       }
       $197 = ((4001) + ($$6$be)|0);
       $198 = HEAP8[$197>>0]|0;
       $199 = $198&255;
       $200 = ($199>>>0)<($$1165168>>>0);
       $201 = ($188>>>0)<(119304647);
       $202 = $201 & $200;
       if ($202) {
        $$2156210 = $188;$189 = $199;
       } else {
        break;
       }
      }
      $$6$lcssa = $$6$be;$204 = $198;$295 = $188;$296 = 0;
     } else {
      $$6$lcssa = $$1160169;$204 = $123;$295 = 0;$296 = 0;
     }
     $203 = $204&255;
     $205 = ($203>>>0)<($$1165168>>>0);
     if ($205) {
      $206 = (___udivdi3(-1,-1,($$1165168|0),0)|0);
      $207 = tempRet0;
      $$7198 = $$6$lcssa;$209 = $296;$211 = $295;$218 = $204;
      while(1) {
       $208 = ($209>>>0)>($207>>>0);
       $210 = ($211>>>0)>($206>>>0);
       $212 = ($209|0)==($207|0);
       $213 = $212 & $210;
       $214 = $208 | $213;
       if ($214) {
        $$1165167 = $$1165168;$$8 = $$7198;$293 = $211;$294 = $209;
        label = 72;
        break L63;
       }
       $215 = (___muldi3(($211|0),($209|0),($$1165168|0),0)|0);
       $216 = tempRet0;
       $217 = $218&255;
       $219 = $217 ^ -1;
       $220 = ($216>>>0)>(4294967295);
       $221 = ($215>>>0)>($219>>>0);
       $222 = ($216|0)==(-1);
       $223 = $222 & $221;
       $224 = $220 | $223;
       if ($224) {
        $$1165167 = $$1165168;$$8 = $$7198;$293 = $211;$294 = $209;
        label = 72;
        break L63;
       }
       $225 = (_i64Add(($217|0),0,($215|0),($216|0))|0);
       $226 = tempRet0;
       $227 = HEAP32[$6>>2]|0;
       $228 = HEAP32[$7>>2]|0;
       $229 = ($227>>>0)<($228>>>0);
       if ($229) {
        $230 = ((($227)) + 1|0);
        HEAP32[$6>>2] = $230;
        $231 = HEAP8[$227>>0]|0;
        $232 = $231&255;
        $$7$be = $232;
       } else {
        $233 = (___shgetc($0)|0);
        $$7$be = $233;
       }
       $234 = ((4001) + ($$7$be)|0);
       $235 = HEAP8[$234>>0]|0;
       $236 = $235&255;
       $237 = ($236>>>0)<($$1165168>>>0);
       if ($237) {
        $$7198 = $$7$be;$209 = $226;$211 = $225;$218 = $235;
       } else {
        $$1165167 = $$1165168;$$8 = $$7$be;$293 = $225;$294 = $226;
        label = 72;
        break;
       }
      }
     } else {
      $$1165167 = $$1165168;$$8 = $$6$lcssa;$293 = $295;$294 = $296;
      label = 72;
     }
    }
   } while(0);
   if ((label|0) == 72) {
    $238 = ((4001) + ($$8)|0);
    $239 = HEAP8[$238>>0]|0;
    $240 = $239&255;
    $241 = ($240>>>0)<($$1165167>>>0);
    if ($241) {
     while(1) {
      $242 = HEAP32[$6>>2]|0;
      $243 = HEAP32[$7>>2]|0;
      $244 = ($242>>>0)<($243>>>0);
      if ($244) {
       $245 = ((($242)) + 1|0);
       HEAP32[$6>>2] = $245;
       $246 = HEAP8[$242>>0]|0;
       $247 = $246&255;
       $$9$be = $247;
      } else {
       $248 = (___shgetc($0)|0);
       $$9$be = $248;
      }
      $249 = ((4001) + ($$9$be)|0);
      $250 = HEAP8[$249>>0]|0;
      $251 = $250&255;
      $252 = ($251>>>0)<($$1165167>>>0);
      if (!($252)) {
       break;
      }
     }
     $253 = (___errno_location()|0);
     HEAP32[$253>>2] = 34;
     $254 = $3 & 1;
     $255 = ($254|0)==(0);
     $256 = (0)==(0);
     $257 = $255 & $256;
     $$0157$ = $257 ? $$0157 : 0;
     $$1158 = $$0157$;$263 = $4;$265 = $3;
    } else {
     $$1158 = $$0157;$263 = $294;$265 = $293;
    }
   }
   $258 = HEAP32[$7>>2]|0;
   $259 = ($258|0)==(0|0);
   if (!($259)) {
    $260 = HEAP32[$6>>2]|0;
    $261 = ((($260)) + -1|0);
    HEAP32[$6>>2] = $261;
   }
   $262 = ($263>>>0)<($4>>>0);
   $264 = ($265>>>0)<($3>>>0);
   $266 = ($263|0)==($4|0);
   $267 = $266 & $264;
   $268 = $262 | $267;
   if (!($268)) {
    $269 = $3 & 1;
    $270 = ($269|0)!=(0);
    $271 = (0)!=(0);
    $272 = $270 | $271;
    $273 = ($$1158|0)!=(0);
    $or$cond12 = $272 | $273;
    if (!($or$cond12)) {
     $274 = (___errno_location()|0);
     HEAP32[$274>>2] = 34;
     $275 = (_i64Add(($3|0),($4|0),-1,-1)|0);
     $276 = tempRet0;
     $289 = $276;$290 = $275;
     break;
    }
    $277 = ($263>>>0)>($4>>>0);
    $278 = ($265>>>0)>($3>>>0);
    $279 = ($263|0)==($4|0);
    $280 = $279 & $278;
    $281 = $277 | $280;
    if ($281) {
     $282 = (___errno_location()|0);
     HEAP32[$282>>2] = 34;
     $289 = $4;$290 = $3;
     break;
    }
   }
   $283 = ($$1158|0)<(0);
   $284 = $283 << 31 >> 31;
   $285 = $265 ^ $$1158;
   $286 = $263 ^ $284;
   $287 = (_i64Subtract(($285|0),($286|0),($$1158|0),($284|0))|0);
   $288 = tempRet0;
   $289 = $288;$290 = $287;
  }
 } while(0);
 tempRet0 = ($289);
 return ($290|0);
}
function ___shgetc($0) {
 $0 = $0|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert28$phi$trans$insert = 0, $$pre = 0, $$pre$phi34Z2D = 0, $$pre29$pre = 0, $$pre35 = 0, $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 104|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  label = 3;
 } else {
  $4 = ((($0)) + 108|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)<($2|0);
  if ($6) {
   label = 3;
  } else {
   label = 4;
  }
 }
 if ((label|0) == 3) {
  $7 = (___uflow($0)|0);
  $8 = ($7|0)<(0);
  if ($8) {
   label = 4;
  } else {
   $10 = HEAP32[$1>>2]|0;
   $11 = ($10|0)==(0);
   $$phi$trans$insert = ((($0)) + 8|0);
   if ($11) {
    $$pre = HEAP32[$$phi$trans$insert>>2]|0;
    $$phi$trans$insert28$phi$trans$insert = ((($0)) + 4|0);
    $$pre29$pre = HEAP32[$$phi$trans$insert28$phi$trans$insert>>2]|0;
    $$pre35 = ((($0)) + 108|0);
    $$pre$phi34Z2D = $$pre35;$$sink = $$pre;$26 = $$pre;$29 = $$pre29$pre;
   } else {
    $12 = HEAP32[$$phi$trans$insert>>2]|0;
    $13 = ((($0)) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = $14;
    $16 = (($12) - ($15))|0;
    $17 = ((($0)) + 108|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (($10) - ($18))|0;
    $20 = ($16|0)<($19|0);
    $21 = $12;
    if ($20) {
     $$pre$phi34Z2D = $17;$$sink = $21;$26 = $21;$29 = $14;
    } else {
     $22 = (($19) + -1)|0;
     $23 = (($14) + ($22)|0);
     $$pre$phi34Z2D = $17;$$sink = $23;$26 = $21;$29 = $14;
    }
   }
   $24 = ((($0)) + 100|0);
   HEAP32[$24>>2] = $$sink;
   $25 = ($26|0)==(0|0);
   if (!($25)) {
    $27 = $26;
    $28 = $29;
    $30 = HEAP32[$$pre$phi34Z2D>>2]|0;
    $31 = (($27) + 1)|0;
    $32 = (($31) - ($28))|0;
    $33 = (($32) + ($30))|0;
    HEAP32[$$pre$phi34Z2D>>2] = $33;
   }
   $34 = ((($29)) + -1|0);
   $35 = HEAP8[$34>>0]|0;
   $36 = $35&255;
   $37 = ($36|0)==($7|0);
   if ($37) {
    $$0 = $7;
   } else {
    $38 = $7&255;
    HEAP8[$34>>0] = $38;
    $$0 = $7;
   }
  }
 }
 if ((label|0) == 4) {
  $9 = ((($0)) + 100|0);
  HEAP32[$9>>2] = 0;
  $$0 = -1;
 }
 return ($$0|0);
}
function _isspace($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(32);
 $2 = (($0) + -9)|0;
 $3 = ($2>>>0)<(5);
 $4 = $1 | $3;
 $5 = $4&1;
 return ($5|0);
}
function ___uflow($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = (___toread($0)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = ((($0)) + 32|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (FUNCTION_TABLE_iiii[$5 & 127]($0,$1,1)|0);
  $7 = ($6|0)==(1);
  if ($7) {
   $8 = HEAP8[$1>>0]|0;
   $9 = $8&255;
   $$0 = $9;
  } else {
   $$0 = -1;
  }
 } else {
  $$0 = -1;
 }
 STACKTOP = sp;return ($$0|0);
}
function ___toread($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8>>>0)>($10>>>0);
 if ($11) {
  $12 = ((($0)) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  (FUNCTION_TABLE_iiii[$13 & 127]($0,0,0)|0);
 }
 $14 = ((($0)) + 16|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$9>>2] = 0;
 HEAP32[$7>>2] = 0;
 $15 = HEAP32[$0>>2]|0;
 $16 = $15 & 4;
 $17 = ($16|0)==(0);
 if ($17) {
  $19 = ((($0)) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($0)) + 8|0);
  HEAP32[$24>>2] = $23;
  $25 = ((($0)) + 4|0);
  HEAP32[$25>>2] = $23;
  $26 = $15 << 27;
  $sext = $26 >> 31;
  $$0 = $sext;
 } else {
  $18 = $15 | 32;
  HEAP32[$0>>2] = $18;
  $$0 = -1;
 }
 return ($$0|0);
}
function _copysign($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $1;$4 = HEAP32[tempDoublePtr>>2]|0;
 $5 = HEAP32[tempDoublePtr+4>>2]|0;
 $6 = $3 & 2147483647;
 $7 = $5 & -2147483648;
 $8 = $7 | $6;
 HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $8;$9 = +HEAPF64[tempDoublePtr>>3];
 return (+$9);
}
function _strcmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$0>>0]|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = ($2<<24>>24)!=($3<<24>>24);
 $5 = ($2<<24>>24)==(0);
 $or$cond9 = $5 | $4;
 if ($or$cond9) {
  $$lcssa = $3;$$lcssa8 = $2;
 } else {
  $$011 = $1;$$0710 = $0;
  while(1) {
   $6 = ((($$0710)) + 1|0);
   $7 = ((($$011)) + 1|0);
   $8 = HEAP8[$6>>0]|0;
   $9 = HEAP8[$7>>0]|0;
   $10 = ($8<<24>>24)!=($9<<24>>24);
   $11 = ($8<<24>>24)==(0);
   $or$cond = $11 | $10;
   if ($or$cond) {
    $$lcssa = $9;$$lcssa8 = $8;
    break;
   } else {
    $$011 = $7;$$0710 = $6;
   }
  }
 }
 $12 = $$lcssa8&255;
 $13 = $$lcssa&255;
 $14 = (($12) - ($13))|0;
 return ($14|0);
}
function _memcmp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$01318 = 0, $$01417 = 0, $$019 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $14 = 0;
  } else {
   $$01318 = $0;$$01417 = $2;$$019 = $1;
   while(1) {
    $4 = HEAP8[$$01318>>0]|0;
    $5 = HEAP8[$$019>>0]|0;
    $6 = ($4<<24>>24)==($5<<24>>24);
    if (!($6)) {
     break;
    }
    $7 = (($$01417) + -1)|0;
    $8 = ((($$01318)) + 1|0);
    $9 = ((($$019)) + 1|0);
    $10 = ($7|0)==(0);
    if ($10) {
     $14 = 0;
     break L1;
    } else {
     $$01318 = $8;$$01417 = $7;$$019 = $9;
    }
   }
   $11 = $4&255;
   $12 = $5&255;
   $13 = (($11) - ($12))|0;
   $14 = $13;
  }
 } while(0);
 return ($14|0);
}
function _vsnprintf($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$$015 = 0, $$0 = 0, $$014 = 0, $$015 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $4 = sp + 124|0;
 $5 = sp;
 dest=$5; src=1488; stop=dest+124|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $6 = (($1) + -1)|0;
 $7 = ($6>>>0)>(2147483646);
 if ($7) {
  $8 = ($1|0)==(0);
  if ($8) {
   $$014 = $4;$$015 = 1;
   label = 4;
  } else {
   $9 = (___errno_location()|0);
   HEAP32[$9>>2] = 75;
   $$0 = -1;
  }
 } else {
  $$014 = $0;$$015 = $1;
  label = 4;
 }
 if ((label|0) == 4) {
  $10 = $$014;
  $11 = (-2 - ($10))|0;
  $12 = ($$015>>>0)>($11>>>0);
  $$$015 = $12 ? $11 : $$015;
  $13 = ((($5)) + 48|0);
  HEAP32[$13>>2] = $$$015;
  $14 = ((($5)) + 20|0);
  HEAP32[$14>>2] = $$014;
  $15 = ((($5)) + 44|0);
  HEAP32[$15>>2] = $$014;
  $16 = (($$014) + ($$$015)|0);
  $17 = ((($5)) + 16|0);
  HEAP32[$17>>2] = $16;
  $18 = ((($5)) + 28|0);
  HEAP32[$18>>2] = $16;
  $19 = (_vfprintf($5,$2,$3)|0);
  $20 = ($$$015|0)==(0);
  if ($20) {
   $$0 = $19;
  } else {
   $21 = HEAP32[$14>>2]|0;
   $22 = HEAP32[$17>>2]|0;
   $23 = ($21|0)==($22|0);
   $24 = $23 << 31 >> 31;
   $25 = (($21) + ($24)|0);
   HEAP8[$25>>0] = 0;
   $$0 = $19;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _vfprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $$1$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $3 = sp + 120|0;
 $4 = sp + 80|0;
 $5 = sp;
 $6 = sp + 136|0;
 dest=$4; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $vacopy_currentptr;
 $7 = (_printf_core(0,$1,$3,$5,$4)|0);
 $8 = ($7|0)<(0);
 if ($8) {
  $$0 = -1;
 } else {
  $9 = ((($0)) + 76|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)>(-1);
  if ($11) {
   $12 = (___lockfile($0)|0);
   $40 = $12;
  } else {
   $40 = 0;
  }
  $13 = HEAP32[$0>>2]|0;
  $14 = $13 & 32;
  $15 = ((($0)) + 74|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = ($16<<24>>24)<(1);
  if ($17) {
   $18 = $13 & -33;
   HEAP32[$0>>2] = $18;
  }
  $19 = ((($0)) + 48|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(0);
  if ($21) {
   $23 = ((($0)) + 44|0);
   $24 = HEAP32[$23>>2]|0;
   HEAP32[$23>>2] = $6;
   $25 = ((($0)) + 28|0);
   HEAP32[$25>>2] = $6;
   $26 = ((($0)) + 20|0);
   HEAP32[$26>>2] = $6;
   HEAP32[$19>>2] = 80;
   $27 = ((($6)) + 80|0);
   $28 = ((($0)) + 16|0);
   HEAP32[$28>>2] = $27;
   $29 = (_printf_core($0,$1,$3,$5,$4)|0);
   $30 = ($24|0)==(0|0);
   if ($30) {
    $$1 = $29;
   } else {
    $31 = ((($0)) + 36|0);
    $32 = HEAP32[$31>>2]|0;
    (FUNCTION_TABLE_iiii[$32 & 127]($0,0,0)|0);
    $33 = HEAP32[$26>>2]|0;
    $34 = ($33|0)==(0|0);
    $$ = $34 ? -1 : $29;
    HEAP32[$23>>2] = $24;
    HEAP32[$19>>2] = 0;
    HEAP32[$28>>2] = 0;
    HEAP32[$25>>2] = 0;
    HEAP32[$26>>2] = 0;
    $$1 = $$;
   }
  } else {
   $22 = (_printf_core($0,$1,$3,$5,$4)|0);
   $$1 = $22;
  }
  $35 = HEAP32[$0>>2]|0;
  $36 = $35 & 32;
  $37 = ($36|0)==(0);
  $$1$ = $37 ? $$1 : -1;
  $38 = $35 | $14;
  HEAP32[$0>>2] = $38;
  $39 = ($40|0)==(0);
  if (!($39)) {
   ___unlockfile($0);
  }
  $$0 = $$1$;
 }
 STACKTOP = sp;return ($$0|0);
}
function _printf_core($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$$ = 0, $$$0259 = 0, $$$0262 = 0, $$$0269 = 0, $$$4266 = 0, $$$5 = 0, $$0 = 0, $$0228 = 0, $$0228$ = 0, $$0229322 = 0, $$0232 = 0, $$0235 = 0, $$0237 = 0, $$0240$lcssa = 0, $$0240$lcssa357 = 0, $$0240321 = 0, $$0243 = 0, $$0247 = 0, $$0249$lcssa = 0;
 var $$0249306 = 0, $$0252 = 0, $$0253 = 0, $$0254 = 0, $$0254$$0254$ = 0, $$0259 = 0, $$0262$lcssa = 0, $$0262311 = 0, $$0269 = 0, $$0269$phi = 0, $$1 = 0, $$1230333 = 0, $$1233 = 0, $$1236 = 0, $$1238 = 0, $$1241332 = 0, $$1244320 = 0, $$1248 = 0, $$1250 = 0, $$1255 = 0;
 var $$1260 = 0, $$1263 = 0, $$1263$ = 0, $$1270 = 0, $$2 = 0, $$2234 = 0, $$2239 = 0, $$2242305 = 0, $$2245 = 0, $$2251 = 0, $$2256 = 0, $$2256$ = 0, $$2256$$$2256 = 0, $$2261 = 0, $$2271 = 0, $$284$ = 0, $$289 = 0, $$290 = 0, $$3257 = 0, $$3265 = 0;
 var $$3272 = 0, $$3303 = 0, $$377 = 0, $$4258355 = 0, $$4266 = 0, $$5 = 0, $$6268 = 0, $$lcssa295 = 0, $$pre = 0, $$pre346 = 0, $$pre347 = 0, $$pre347$pre = 0, $$pre349 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0;
 var $306 = 0.0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0;
 var $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $isdigit = 0, $isdigit275 = 0, $isdigit277 = 0, $isdigittmp = 0, $isdigittmp$ = 0, $isdigittmp274 = 0;
 var $isdigittmp276 = 0, $narrow = 0, $or$cond = 0, $or$cond281 = 0, $or$cond283 = 0, $or$cond286 = 0, $storemerge = 0, $storemerge273310 = 0, $storemerge278 = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $5 = sp + 16|0;
 $6 = sp;
 $7 = sp + 24|0;
 $8 = sp + 8|0;
 $9 = sp + 20|0;
 HEAP32[$5>>2] = $1;
 $10 = ($0|0)!=(0|0);
 $11 = ((($7)) + 40|0);
 $12 = $11;
 $13 = ((($7)) + 39|0);
 $14 = ((($8)) + 4|0);
 $$0243 = 0;$$0247 = 0;$$0269 = 0;$21 = $1;
 L1: while(1) {
  $15 = ($$0247|0)>(-1);
  do {
   if ($15) {
    $16 = (2147483647 - ($$0247))|0;
    $17 = ($$0243|0)>($16|0);
    if ($17) {
     $18 = (___errno_location()|0);
     HEAP32[$18>>2] = 75;
     $$1248 = -1;
     break;
    } else {
     $19 = (($$0243) + ($$0247))|0;
     $$1248 = $19;
     break;
    }
   } else {
    $$1248 = $$0247;
   }
  } while(0);
  $20 = HEAP8[$21>>0]|0;
  $22 = ($20<<24>>24)==(0);
  if ($22) {
   label = 87;
   break;
  } else {
   $23 = $20;$25 = $21;
  }
  L9: while(1) {
   switch ($23<<24>>24) {
   case 37:  {
    $$0249306 = $25;$27 = $25;
    label = 9;
    break L9;
    break;
   }
   case 0:  {
    $$0249$lcssa = $25;$39 = $25;
    break L9;
    break;
   }
   default: {
   }
   }
   $24 = ((($25)) + 1|0);
   HEAP32[$5>>2] = $24;
   $$pre = HEAP8[$24>>0]|0;
   $23 = $$pre;$25 = $24;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $26 = ((($27)) + 1|0);
     $28 = HEAP8[$26>>0]|0;
     $29 = ($28<<24>>24)==(37);
     if (!($29)) {
      $$0249$lcssa = $$0249306;$39 = $27;
      break L12;
     }
     $30 = ((($$0249306)) + 1|0);
     $31 = ((($27)) + 2|0);
     HEAP32[$5>>2] = $31;
     $32 = HEAP8[$31>>0]|0;
     $33 = ($32<<24>>24)==(37);
     if ($33) {
      $$0249306 = $30;$27 = $31;
      label = 9;
     } else {
      $$0249$lcssa = $30;$39 = $31;
      break;
     }
    }
   }
  } while(0);
  $34 = $$0249$lcssa;
  $35 = $21;
  $36 = (($34) - ($35))|0;
  if ($10) {
   _out($0,$21,$36);
  }
  $37 = ($36|0)==(0);
  if (!($37)) {
   $$0269$phi = $$0269;$$0243 = $36;$$0247 = $$1248;$21 = $39;$$0269 = $$0269$phi;
   continue;
  }
  $38 = ((($39)) + 1|0);
  $40 = HEAP8[$38>>0]|0;
  $41 = $40 << 24 >> 24;
  $isdigittmp = (($41) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $42 = ((($39)) + 2|0);
   $43 = HEAP8[$42>>0]|0;
   $44 = ($43<<24>>24)==(36);
   $45 = ((($39)) + 3|0);
   $$377 = $44 ? $45 : $38;
   $$$0269 = $44 ? 1 : $$0269;
   $isdigittmp$ = $44 ? $isdigittmp : -1;
   $$0253 = $isdigittmp$;$$1270 = $$$0269;$storemerge = $$377;
  } else {
   $$0253 = -1;$$1270 = $$0269;$storemerge = $38;
  }
  HEAP32[$5>>2] = $storemerge;
  $46 = HEAP8[$storemerge>>0]|0;
  $47 = $46 << 24 >> 24;
  $48 = (($47) + -32)|0;
  $49 = ($48>>>0)<(32);
  L24: do {
   if ($49) {
    $$0262311 = 0;$329 = $46;$51 = $48;$storemerge273310 = $storemerge;
    while(1) {
     $50 = 1 << $51;
     $52 = $50 & 75913;
     $53 = ($52|0)==(0);
     if ($53) {
      $$0262$lcssa = $$0262311;$$lcssa295 = $329;$62 = $storemerge273310;
      break L24;
     }
     $54 = $50 | $$0262311;
     $55 = ((($storemerge273310)) + 1|0);
     HEAP32[$5>>2] = $55;
     $56 = HEAP8[$55>>0]|0;
     $57 = $56 << 24 >> 24;
     $58 = (($57) + -32)|0;
     $59 = ($58>>>0)<(32);
     if ($59) {
      $$0262311 = $54;$329 = $56;$51 = $58;$storemerge273310 = $55;
     } else {
      $$0262$lcssa = $54;$$lcssa295 = $56;$62 = $55;
      break;
     }
    }
   } else {
    $$0262$lcssa = 0;$$lcssa295 = $46;$62 = $storemerge;
   }
  } while(0);
  $60 = ($$lcssa295<<24>>24)==(42);
  if ($60) {
   $61 = ((($62)) + 1|0);
   $63 = HEAP8[$61>>0]|0;
   $64 = $63 << 24 >> 24;
   $isdigittmp276 = (($64) + -48)|0;
   $isdigit277 = ($isdigittmp276>>>0)<(10);
   if ($isdigit277) {
    $65 = ((($62)) + 2|0);
    $66 = HEAP8[$65>>0]|0;
    $67 = ($66<<24>>24)==(36);
    if ($67) {
     $68 = (($4) + ($isdigittmp276<<2)|0);
     HEAP32[$68>>2] = 10;
     $69 = HEAP8[$61>>0]|0;
     $70 = $69 << 24 >> 24;
     $71 = (($70) + -48)|0;
     $72 = (($3) + ($71<<3)|0);
     $73 = $72;
     $74 = $73;
     $75 = HEAP32[$74>>2]|0;
     $76 = (($73) + 4)|0;
     $77 = $76;
     $78 = HEAP32[$77>>2]|0;
     $79 = ((($62)) + 3|0);
     $$0259 = $75;$$2271 = 1;$storemerge278 = $79;
    } else {
     label = 23;
    }
   } else {
    label = 23;
   }
   if ((label|0) == 23) {
    label = 0;
    $80 = ($$1270|0)==(0);
    if (!($80)) {
     $$0 = -1;
     break;
    }
    if ($10) {
     $arglist_current = HEAP32[$2>>2]|0;
     $81 = $arglist_current;
     $82 = ((0) + 4|0);
     $expanded4 = $82;
     $expanded = (($expanded4) - 1)|0;
     $83 = (($81) + ($expanded))|0;
     $84 = ((0) + 4|0);
     $expanded8 = $84;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $85 = $83 & $expanded6;
     $86 = $85;
     $87 = HEAP32[$86>>2]|0;
     $arglist_next = ((($86)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     $$0259 = $87;$$2271 = 0;$storemerge278 = $61;
    } else {
     $$0259 = 0;$$2271 = 0;$storemerge278 = $61;
    }
   }
   HEAP32[$5>>2] = $storemerge278;
   $88 = ($$0259|0)<(0);
   $89 = $$0262$lcssa | 8192;
   $90 = (0 - ($$0259))|0;
   $$$0262 = $88 ? $89 : $$0262$lcssa;
   $$$0259 = $88 ? $90 : $$0259;
   $$1260 = $$$0259;$$1263 = $$$0262;$$3272 = $$2271;$94 = $storemerge278;
  } else {
   $91 = (_getint($5)|0);
   $92 = ($91|0)<(0);
   if ($92) {
    $$0 = -1;
    break;
   }
   $$pre346 = HEAP32[$5>>2]|0;
   $$1260 = $91;$$1263 = $$0262$lcssa;$$3272 = $$1270;$94 = $$pre346;
  }
  $93 = HEAP8[$94>>0]|0;
  $95 = ($93<<24>>24)==(46);
  do {
   if ($95) {
    $96 = ((($94)) + 1|0);
    $97 = HEAP8[$96>>0]|0;
    $98 = ($97<<24>>24)==(42);
    if (!($98)) {
     $125 = ((($94)) + 1|0);
     HEAP32[$5>>2] = $125;
     $126 = (_getint($5)|0);
     $$pre347$pre = HEAP32[$5>>2]|0;
     $$0254 = $126;$$pre347 = $$pre347$pre;
     break;
    }
    $99 = ((($94)) + 2|0);
    $100 = HEAP8[$99>>0]|0;
    $101 = $100 << 24 >> 24;
    $isdigittmp274 = (($101) + -48)|0;
    $isdigit275 = ($isdigittmp274>>>0)<(10);
    if ($isdigit275) {
     $102 = ((($94)) + 3|0);
     $103 = HEAP8[$102>>0]|0;
     $104 = ($103<<24>>24)==(36);
     if ($104) {
      $105 = (($4) + ($isdigittmp274<<2)|0);
      HEAP32[$105>>2] = 10;
      $106 = HEAP8[$99>>0]|0;
      $107 = $106 << 24 >> 24;
      $108 = (($107) + -48)|0;
      $109 = (($3) + ($108<<3)|0);
      $110 = $109;
      $111 = $110;
      $112 = HEAP32[$111>>2]|0;
      $113 = (($110) + 4)|0;
      $114 = $113;
      $115 = HEAP32[$114>>2]|0;
      $116 = ((($94)) + 4|0);
      HEAP32[$5>>2] = $116;
      $$0254 = $112;$$pre347 = $116;
      break;
     }
    }
    $117 = ($$3272|0)==(0);
    if (!($117)) {
     $$0 = -1;
     break L1;
    }
    if ($10) {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $118 = $arglist_current2;
     $119 = ((0) + 4|0);
     $expanded11 = $119;
     $expanded10 = (($expanded11) - 1)|0;
     $120 = (($118) + ($expanded10))|0;
     $121 = ((0) + 4|0);
     $expanded15 = $121;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $122 = $120 & $expanded13;
     $123 = $122;
     $124 = HEAP32[$123>>2]|0;
     $arglist_next3 = ((($123)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $330 = $124;
    } else {
     $330 = 0;
    }
    HEAP32[$5>>2] = $99;
    $$0254 = $330;$$pre347 = $99;
   } else {
    $$0254 = -1;$$pre347 = $94;
   }
  } while(0);
  $$0252 = 0;$128 = $$pre347;
  while(1) {
   $127 = HEAP8[$128>>0]|0;
   $129 = $127 << 24 >> 24;
   $130 = (($129) + -65)|0;
   $131 = ($130>>>0)>(57);
   if ($131) {
    $$0 = -1;
    break L1;
   }
   $132 = ((($128)) + 1|0);
   HEAP32[$5>>2] = $132;
   $133 = HEAP8[$128>>0]|0;
   $134 = $133 << 24 >> 24;
   $135 = (($134) + -65)|0;
   $136 = ((4266 + (($$0252*58)|0)|0) + ($135)|0);
   $137 = HEAP8[$136>>0]|0;
   $138 = $137&255;
   $139 = (($138) + -1)|0;
   $140 = ($139>>>0)<(8);
   if ($140) {
    $$0252 = $138;$128 = $132;
   } else {
    break;
   }
  }
  $141 = ($137<<24>>24)==(0);
  if ($141) {
   $$0 = -1;
   break;
  }
  $142 = ($137<<24>>24)==(19);
  $143 = ($$0253|0)>(-1);
  do {
   if ($142) {
    if ($143) {
     $$0 = -1;
     break L1;
    } else {
     label = 49;
    }
   } else {
    if ($143) {
     $144 = (($4) + ($$0253<<2)|0);
     HEAP32[$144>>2] = $138;
     $145 = (($3) + ($$0253<<3)|0);
     $146 = $145;
     $147 = $146;
     $148 = HEAP32[$147>>2]|0;
     $149 = (($146) + 4)|0;
     $150 = $149;
     $151 = HEAP32[$150>>2]|0;
     $152 = $6;
     $153 = $152;
     HEAP32[$153>>2] = $148;
     $154 = (($152) + 4)|0;
     $155 = $154;
     HEAP32[$155>>2] = $151;
     label = 49;
     break;
    }
    if (!($10)) {
     $$0 = 0;
     break L1;
    }
    _pop_arg($6,$138,$2);
   }
  } while(0);
  if ((label|0) == 49) {
   label = 0;
   if (!($10)) {
    $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
    continue;
   }
  }
  $156 = HEAP8[$128>>0]|0;
  $157 = $156 << 24 >> 24;
  $158 = ($$0252|0)!=(0);
  $159 = $157 & 15;
  $160 = ($159|0)==(3);
  $or$cond281 = $158 & $160;
  $161 = $157 & -33;
  $$0235 = $or$cond281 ? $161 : $157;
  $162 = $$1263 & 8192;
  $163 = ($162|0)==(0);
  $164 = $$1263 & -65537;
  $$1263$ = $163 ? $$1263 : $164;
  L71: do {
   switch ($$0235|0) {
   case 110:  {
    $trunc = $$0252&255;
    switch ($trunc<<24>>24) {
    case 0:  {
     $171 = HEAP32[$6>>2]|0;
     HEAP32[$171>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
     break;
    }
    case 1:  {
     $172 = HEAP32[$6>>2]|0;
     HEAP32[$172>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
     break;
    }
    case 2:  {
     $173 = ($$1248|0)<(0);
     $174 = $173 << 31 >> 31;
     $175 = HEAP32[$6>>2]|0;
     $176 = $175;
     $177 = $176;
     HEAP32[$177>>2] = $$1248;
     $178 = (($176) + 4)|0;
     $179 = $178;
     HEAP32[$179>>2] = $174;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
     break;
    }
    case 3:  {
     $180 = $$1248&65535;
     $181 = HEAP32[$6>>2]|0;
     HEAP16[$181>>1] = $180;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
     break;
    }
    case 4:  {
     $182 = $$1248&255;
     $183 = HEAP32[$6>>2]|0;
     HEAP8[$183>>0] = $182;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
     break;
    }
    case 6:  {
     $184 = HEAP32[$6>>2]|0;
     HEAP32[$184>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
     break;
    }
    case 7:  {
     $185 = ($$1248|0)<(0);
     $186 = $185 << 31 >> 31;
     $187 = HEAP32[$6>>2]|0;
     $188 = $187;
     $189 = $188;
     HEAP32[$189>>2] = $$1248;
     $190 = (($188) + 4)|0;
     $191 = $190;
     HEAP32[$191>>2] = $186;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
     break;
    }
    default: {
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
    }
    }
    break;
   }
   case 112:  {
    $192 = ($$0254>>>0)>(8);
    $193 = $192 ? $$0254 : 8;
    $194 = $$1263$ | 8;
    $$1236 = 120;$$1255 = $193;$$3265 = $194;
    label = 61;
    break;
   }
   case 88: case 120:  {
    $$1236 = $$0235;$$1255 = $$0254;$$3265 = $$1263$;
    label = 61;
    break;
   }
   case 111:  {
    $210 = $6;
    $211 = $210;
    $212 = HEAP32[$211>>2]|0;
    $213 = (($210) + 4)|0;
    $214 = $213;
    $215 = HEAP32[$214>>2]|0;
    $216 = (_fmt_o($212,$215,$11)|0);
    $217 = $$1263$ & 8;
    $218 = ($217|0)==(0);
    $219 = $216;
    $220 = (($12) - ($219))|0;
    $221 = ($$0254|0)>($220|0);
    $222 = (($220) + 1)|0;
    $223 = $218 | $221;
    $$0254$$0254$ = $223 ? $$0254 : $222;
    $$0228 = $216;$$1233 = 0;$$1238 = 4730;$$2256 = $$0254$$0254$;$$4266 = $$1263$;$248 = $212;$250 = $215;
    label = 67;
    break;
   }
   case 105: case 100:  {
    $224 = $6;
    $225 = $224;
    $226 = HEAP32[$225>>2]|0;
    $227 = (($224) + 4)|0;
    $228 = $227;
    $229 = HEAP32[$228>>2]|0;
    $230 = ($229|0)<(0);
    if ($230) {
     $231 = (_i64Subtract(0,0,($226|0),($229|0))|0);
     $232 = tempRet0;
     $233 = $6;
     $234 = $233;
     HEAP32[$234>>2] = $231;
     $235 = (($233) + 4)|0;
     $236 = $235;
     HEAP32[$236>>2] = $232;
     $$0232 = 1;$$0237 = 4730;$242 = $231;$243 = $232;
     label = 66;
     break L71;
    } else {
     $237 = $$1263$ & 2048;
     $238 = ($237|0)==(0);
     $239 = $$1263$ & 1;
     $240 = ($239|0)==(0);
     $$ = $240 ? 4730 : (4732);
     $$$ = $238 ? $$ : (4731);
     $241 = $$1263$ & 2049;
     $narrow = ($241|0)!=(0);
     $$284$ = $narrow&1;
     $$0232 = $$284$;$$0237 = $$$;$242 = $226;$243 = $229;
     label = 66;
     break L71;
    }
    break;
   }
   case 117:  {
    $165 = $6;
    $166 = $165;
    $167 = HEAP32[$166>>2]|0;
    $168 = (($165) + 4)|0;
    $169 = $168;
    $170 = HEAP32[$169>>2]|0;
    $$0232 = 0;$$0237 = 4730;$242 = $167;$243 = $170;
    label = 66;
    break;
   }
   case 99:  {
    $259 = $6;
    $260 = $259;
    $261 = HEAP32[$260>>2]|0;
    $262 = (($259) + 4)|0;
    $263 = $262;
    $264 = HEAP32[$263>>2]|0;
    $265 = $261&255;
    HEAP8[$13>>0] = $265;
    $$2 = $13;$$2234 = 0;$$2239 = 4730;$$2251 = $11;$$5 = 1;$$6268 = $164;
    break;
   }
   case 109:  {
    $266 = (___errno_location()|0);
    $267 = HEAP32[$266>>2]|0;
    $268 = (_strerror($267)|0);
    $$1 = $268;
    label = 71;
    break;
   }
   case 115:  {
    $269 = HEAP32[$6>>2]|0;
    $270 = ($269|0)!=(0|0);
    $271 = $270 ? $269 : 4740;
    $$1 = $271;
    label = 71;
    break;
   }
   case 67:  {
    $278 = $6;
    $279 = $278;
    $280 = HEAP32[$279>>2]|0;
    $281 = (($278) + 4)|0;
    $282 = $281;
    $283 = HEAP32[$282>>2]|0;
    HEAP32[$8>>2] = $280;
    HEAP32[$14>>2] = 0;
    HEAP32[$6>>2] = $8;
    $$4258355 = -1;$331 = $8;
    label = 75;
    break;
   }
   case 83:  {
    $$pre349 = HEAP32[$6>>2]|0;
    $284 = ($$0254|0)==(0);
    if ($284) {
     _pad_674($0,32,$$1260,0,$$1263$);
     $$0240$lcssa357 = 0;
     label = 84;
    } else {
     $$4258355 = $$0254;$331 = $$pre349;
     label = 75;
    }
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    $306 = +HEAPF64[$6>>3];
    $307 = (_fmt_fp($0,$306,$$1260,$$0254,$$1263$,$$0235)|0);
    $$0243 = $307;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
    continue L1;
    break;
   }
   default: {
    $$2 = $21;$$2234 = 0;$$2239 = 4730;$$2251 = $11;$$5 = $$0254;$$6268 = $$1263$;
   }
   }
  } while(0);
  L95: do {
   if ((label|0) == 61) {
    label = 0;
    $195 = $6;
    $196 = $195;
    $197 = HEAP32[$196>>2]|0;
    $198 = (($195) + 4)|0;
    $199 = $198;
    $200 = HEAP32[$199>>2]|0;
    $201 = $$1236 & 32;
    $202 = (_fmt_x($197,$200,$11,$201)|0);
    $203 = ($197|0)==(0);
    $204 = ($200|0)==(0);
    $205 = $203 & $204;
    $206 = $$3265 & 8;
    $207 = ($206|0)==(0);
    $or$cond283 = $207 | $205;
    $208 = $$1236 >> 4;
    $209 = (4730 + ($208)|0);
    $$289 = $or$cond283 ? 4730 : $209;
    $$290 = $or$cond283 ? 0 : 2;
    $$0228 = $202;$$1233 = $$290;$$1238 = $$289;$$2256 = $$1255;$$4266 = $$3265;$248 = $197;$250 = $200;
    label = 67;
   }
   else if ((label|0) == 66) {
    label = 0;
    $244 = (_fmt_u($242,$243,$11)|0);
    $$0228 = $244;$$1233 = $$0232;$$1238 = $$0237;$$2256 = $$0254;$$4266 = $$1263$;$248 = $242;$250 = $243;
    label = 67;
   }
   else if ((label|0) == 71) {
    label = 0;
    $272 = (_memchr($$1,0,$$0254)|0);
    $273 = ($272|0)==(0|0);
    $274 = $272;
    $275 = $$1;
    $276 = (($274) - ($275))|0;
    $277 = (($$1) + ($$0254)|0);
    $$3257 = $273 ? $$0254 : $276;
    $$1250 = $273 ? $277 : $272;
    $$2 = $$1;$$2234 = 0;$$2239 = 4730;$$2251 = $$1250;$$5 = $$3257;$$6268 = $164;
   }
   else if ((label|0) == 75) {
    label = 0;
    $$0229322 = $331;$$0240321 = 0;$$1244320 = 0;
    while(1) {
     $285 = HEAP32[$$0229322>>2]|0;
     $286 = ($285|0)==(0);
     if ($286) {
      $$0240$lcssa = $$0240321;$$2245 = $$1244320;
      break;
     }
     $287 = (_wctomb($9,$285)|0);
     $288 = ($287|0)<(0);
     $289 = (($$4258355) - ($$0240321))|0;
     $290 = ($287>>>0)>($289>>>0);
     $or$cond286 = $288 | $290;
     if ($or$cond286) {
      $$0240$lcssa = $$0240321;$$2245 = $287;
      break;
     }
     $291 = ((($$0229322)) + 4|0);
     $292 = (($287) + ($$0240321))|0;
     $293 = ($$4258355>>>0)>($292>>>0);
     if ($293) {
      $$0229322 = $291;$$0240321 = $292;$$1244320 = $287;
     } else {
      $$0240$lcssa = $292;$$2245 = $287;
      break;
     }
    }
    $294 = ($$2245|0)<(0);
    if ($294) {
     $$0 = -1;
     break L1;
    }
    _pad_674($0,32,$$1260,$$0240$lcssa,$$1263$);
    $295 = ($$0240$lcssa|0)==(0);
    if ($295) {
     $$0240$lcssa357 = 0;
     label = 84;
    } else {
     $$1230333 = $331;$$1241332 = 0;
     while(1) {
      $296 = HEAP32[$$1230333>>2]|0;
      $297 = ($296|0)==(0);
      if ($297) {
       $$0240$lcssa357 = $$0240$lcssa;
       label = 84;
       break L95;
      }
      $298 = (_wctomb($9,$296)|0);
      $299 = (($298) + ($$1241332))|0;
      $300 = ($299|0)>($$0240$lcssa|0);
      if ($300) {
       $$0240$lcssa357 = $$0240$lcssa;
       label = 84;
       break L95;
      }
      $301 = ((($$1230333)) + 4|0);
      _out($0,$9,$298);
      $302 = ($299>>>0)<($$0240$lcssa>>>0);
      if ($302) {
       $$1230333 = $301;$$1241332 = $299;
      } else {
       $$0240$lcssa357 = $$0240$lcssa;
       label = 84;
       break;
      }
     }
    }
   }
  } while(0);
  if ((label|0) == 67) {
   label = 0;
   $245 = ($$2256|0)>(-1);
   $246 = $$4266 & -65537;
   $$$4266 = $245 ? $246 : $$4266;
   $247 = ($248|0)!=(0);
   $249 = ($250|0)!=(0);
   $251 = $247 | $249;
   $252 = ($$2256|0)!=(0);
   $or$cond = $252 | $251;
   $253 = $$0228;
   $254 = (($12) - ($253))|0;
   $255 = $251 ^ 1;
   $256 = $255&1;
   $257 = (($256) + ($254))|0;
   $258 = ($$2256|0)>($257|0);
   $$2256$ = $258 ? $$2256 : $257;
   $$2256$$$2256 = $or$cond ? $$2256$ : $$2256;
   $$0228$ = $or$cond ? $$0228 : $11;
   $$2 = $$0228$;$$2234 = $$1233;$$2239 = $$1238;$$2251 = $11;$$5 = $$2256$$$2256;$$6268 = $$$4266;
  }
  else if ((label|0) == 84) {
   label = 0;
   $303 = $$1263$ ^ 8192;
   _pad_674($0,32,$$1260,$$0240$lcssa357,$303);
   $304 = ($$1260|0)>($$0240$lcssa357|0);
   $305 = $304 ? $$1260 : $$0240$lcssa357;
   $$0243 = $305;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
   continue;
  }
  $308 = $$2251;
  $309 = $$2;
  $310 = (($308) - ($309))|0;
  $311 = ($$5|0)<($310|0);
  $$$5 = $311 ? $310 : $$5;
  $312 = (($$$5) + ($$2234))|0;
  $313 = ($$1260|0)<($312|0);
  $$2261 = $313 ? $312 : $$1260;
  _pad_674($0,32,$$2261,$312,$$6268);
  _out($0,$$2239,$$2234);
  $314 = $$6268 ^ 65536;
  _pad_674($0,48,$$2261,$312,$314);
  _pad_674($0,48,$$$5,$310,0);
  _out($0,$$2,$310);
  $315 = $$6268 ^ 8192;
  _pad_674($0,32,$$2261,$312,$315);
  $$0243 = $$2261;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
 }
 L114: do {
  if ((label|0) == 87) {
   $316 = ($0|0)==(0|0);
   if ($316) {
    $317 = ($$0269|0)==(0);
    if ($317) {
     $$0 = 0;
    } else {
     $$2242305 = 1;
     while(1) {
      $318 = (($4) + ($$2242305<<2)|0);
      $319 = HEAP32[$318>>2]|0;
      $320 = ($319|0)==(0);
      if ($320) {
       $$3303 = $$2242305;
       break;
      }
      $321 = (($3) + ($$2242305<<3)|0);
      _pop_arg($321,$319,$2);
      $322 = (($$2242305) + 1)|0;
      $323 = ($322|0)<(10);
      if ($323) {
       $$2242305 = $322;
      } else {
       $$0 = 1;
       break L114;
      }
     }
     while(1) {
      $326 = (($4) + ($$3303<<2)|0);
      $327 = HEAP32[$326>>2]|0;
      $328 = ($327|0)==(0);
      $325 = (($$3303) + 1)|0;
      if (!($328)) {
       $$0 = -1;
       break L114;
      }
      $324 = ($325|0)<(10);
      if ($324) {
       $$3303 = $325;
      } else {
       $$0 = 1;
       break;
      }
     }
    }
   } else {
    $$0 = $$1248;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___lockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function ___unlockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _out($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = $3 & 32;
 $5 = ($4|0)==(0);
 if ($5) {
  (___fwritex($1,$2,$0)|0);
 }
 return;
}
function _getint($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$06 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isdigit = 0, $isdigit5 = 0, $isdigittmp = 0, $isdigittmp4 = 0, $isdigittmp7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $isdigittmp4 = (($3) + -48)|0;
 $isdigit5 = ($isdigittmp4>>>0)<(10);
 if ($isdigit5) {
  $$06 = 0;$7 = $1;$isdigittmp7 = $isdigittmp4;
  while(1) {
   $4 = ($$06*10)|0;
   $5 = (($isdigittmp7) + ($4))|0;
   $6 = ((($7)) + 1|0);
   HEAP32[$0>>2] = $6;
   $8 = HEAP8[$6>>0]|0;
   $9 = $8 << 24 >> 24;
   $isdigittmp = (($9) + -48)|0;
   $isdigit = ($isdigittmp>>>0)<(10);
   if ($isdigit) {
    $$06 = $5;$7 = $6;$isdigittmp7 = $isdigittmp;
   } else {
    $$0$lcssa = $5;
    break;
   }
  }
 } else {
  $$0$lcssa = 0;
 }
 return ($$0$lcssa|0);
}
function _pop_arg($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$mask = 0, $$mask31 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0;
 var $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded28 = 0, $expanded30 = 0, $expanded31 = 0;
 var $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0, $expanded42 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded58 = 0, $expanded59 = 0;
 var $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0, $expanded70 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded86 = 0, $expanded87 = 0;
 var $expanded88 = 0, $expanded90 = 0, $expanded91 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(20);
 L1: do {
  if (!($3)) {
   do {
    switch ($1|0) {
    case 9:  {
     $arglist_current = HEAP32[$2>>2]|0;
     $4 = $arglist_current;
     $5 = ((0) + 4|0);
     $expanded28 = $5;
     $expanded = (($expanded28) - 1)|0;
     $6 = (($4) + ($expanded))|0;
     $7 = ((0) + 4|0);
     $expanded32 = $7;
     $expanded31 = (($expanded32) - 1)|0;
     $expanded30 = $expanded31 ^ -1;
     $8 = $6 & $expanded30;
     $9 = $8;
     $10 = HEAP32[$9>>2]|0;
     $arglist_next = ((($9)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     HEAP32[$0>>2] = $10;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $11 = $arglist_current2;
     $12 = ((0) + 4|0);
     $expanded35 = $12;
     $expanded34 = (($expanded35) - 1)|0;
     $13 = (($11) + ($expanded34))|0;
     $14 = ((0) + 4|0);
     $expanded39 = $14;
     $expanded38 = (($expanded39) - 1)|0;
     $expanded37 = $expanded38 ^ -1;
     $15 = $13 & $expanded37;
     $16 = $15;
     $17 = HEAP32[$16>>2]|0;
     $arglist_next3 = ((($16)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $18 = ($17|0)<(0);
     $19 = $18 << 31 >> 31;
     $20 = $0;
     $21 = $20;
     HEAP32[$21>>2] = $17;
     $22 = (($20) + 4)|0;
     $23 = $22;
     HEAP32[$23>>2] = $19;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$2>>2]|0;
     $24 = $arglist_current5;
     $25 = ((0) + 4|0);
     $expanded42 = $25;
     $expanded41 = (($expanded42) - 1)|0;
     $26 = (($24) + ($expanded41))|0;
     $27 = ((0) + 4|0);
     $expanded46 = $27;
     $expanded45 = (($expanded46) - 1)|0;
     $expanded44 = $expanded45 ^ -1;
     $28 = $26 & $expanded44;
     $29 = $28;
     $30 = HEAP32[$29>>2]|0;
     $arglist_next6 = ((($29)) + 4|0);
     HEAP32[$2>>2] = $arglist_next6;
     $31 = $0;
     $32 = $31;
     HEAP32[$32>>2] = $30;
     $33 = (($31) + 4)|0;
     $34 = $33;
     HEAP32[$34>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$2>>2]|0;
     $35 = $arglist_current8;
     $36 = ((0) + 8|0);
     $expanded49 = $36;
     $expanded48 = (($expanded49) - 1)|0;
     $37 = (($35) + ($expanded48))|0;
     $38 = ((0) + 8|0);
     $expanded53 = $38;
     $expanded52 = (($expanded53) - 1)|0;
     $expanded51 = $expanded52 ^ -1;
     $39 = $37 & $expanded51;
     $40 = $39;
     $41 = $40;
     $42 = $41;
     $43 = HEAP32[$42>>2]|0;
     $44 = (($41) + 4)|0;
     $45 = $44;
     $46 = HEAP32[$45>>2]|0;
     $arglist_next9 = ((($40)) + 8|0);
     HEAP32[$2>>2] = $arglist_next9;
     $47 = $0;
     $48 = $47;
     HEAP32[$48>>2] = $43;
     $49 = (($47) + 4)|0;
     $50 = $49;
     HEAP32[$50>>2] = $46;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$2>>2]|0;
     $51 = $arglist_current11;
     $52 = ((0) + 4|0);
     $expanded56 = $52;
     $expanded55 = (($expanded56) - 1)|0;
     $53 = (($51) + ($expanded55))|0;
     $54 = ((0) + 4|0);
     $expanded60 = $54;
     $expanded59 = (($expanded60) - 1)|0;
     $expanded58 = $expanded59 ^ -1;
     $55 = $53 & $expanded58;
     $56 = $55;
     $57 = HEAP32[$56>>2]|0;
     $arglist_next12 = ((($56)) + 4|0);
     HEAP32[$2>>2] = $arglist_next12;
     $58 = $57&65535;
     $59 = $58 << 16 >> 16;
     $60 = ($59|0)<(0);
     $61 = $60 << 31 >> 31;
     $62 = $0;
     $63 = $62;
     HEAP32[$63>>2] = $59;
     $64 = (($62) + 4)|0;
     $65 = $64;
     HEAP32[$65>>2] = $61;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$2>>2]|0;
     $66 = $arglist_current14;
     $67 = ((0) + 4|0);
     $expanded63 = $67;
     $expanded62 = (($expanded63) - 1)|0;
     $68 = (($66) + ($expanded62))|0;
     $69 = ((0) + 4|0);
     $expanded67 = $69;
     $expanded66 = (($expanded67) - 1)|0;
     $expanded65 = $expanded66 ^ -1;
     $70 = $68 & $expanded65;
     $71 = $70;
     $72 = HEAP32[$71>>2]|0;
     $arglist_next15 = ((($71)) + 4|0);
     HEAP32[$2>>2] = $arglist_next15;
     $$mask31 = $72 & 65535;
     $73 = $0;
     $74 = $73;
     HEAP32[$74>>2] = $$mask31;
     $75 = (($73) + 4)|0;
     $76 = $75;
     HEAP32[$76>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$2>>2]|0;
     $77 = $arglist_current17;
     $78 = ((0) + 4|0);
     $expanded70 = $78;
     $expanded69 = (($expanded70) - 1)|0;
     $79 = (($77) + ($expanded69))|0;
     $80 = ((0) + 4|0);
     $expanded74 = $80;
     $expanded73 = (($expanded74) - 1)|0;
     $expanded72 = $expanded73 ^ -1;
     $81 = $79 & $expanded72;
     $82 = $81;
     $83 = HEAP32[$82>>2]|0;
     $arglist_next18 = ((($82)) + 4|0);
     HEAP32[$2>>2] = $arglist_next18;
     $84 = $83&255;
     $85 = $84 << 24 >> 24;
     $86 = ($85|0)<(0);
     $87 = $86 << 31 >> 31;
     $88 = $0;
     $89 = $88;
     HEAP32[$89>>2] = $85;
     $90 = (($88) + 4)|0;
     $91 = $90;
     HEAP32[$91>>2] = $87;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$2>>2]|0;
     $92 = $arglist_current20;
     $93 = ((0) + 4|0);
     $expanded77 = $93;
     $expanded76 = (($expanded77) - 1)|0;
     $94 = (($92) + ($expanded76))|0;
     $95 = ((0) + 4|0);
     $expanded81 = $95;
     $expanded80 = (($expanded81) - 1)|0;
     $expanded79 = $expanded80 ^ -1;
     $96 = $94 & $expanded79;
     $97 = $96;
     $98 = HEAP32[$97>>2]|0;
     $arglist_next21 = ((($97)) + 4|0);
     HEAP32[$2>>2] = $arglist_next21;
     $$mask = $98 & 255;
     $99 = $0;
     $100 = $99;
     HEAP32[$100>>2] = $$mask;
     $101 = (($99) + 4)|0;
     $102 = $101;
     HEAP32[$102>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$2>>2]|0;
     $103 = $arglist_current23;
     $104 = ((0) + 8|0);
     $expanded84 = $104;
     $expanded83 = (($expanded84) - 1)|0;
     $105 = (($103) + ($expanded83))|0;
     $106 = ((0) + 8|0);
     $expanded88 = $106;
     $expanded87 = (($expanded88) - 1)|0;
     $expanded86 = $expanded87 ^ -1;
     $107 = $105 & $expanded86;
     $108 = $107;
     $109 = +HEAPF64[$108>>3];
     $arglist_next24 = ((($108)) + 8|0);
     HEAP32[$2>>2] = $arglist_next24;
     HEAPF64[$0>>3] = $109;
     break L1;
     break;
    }
    case 18:  {
     $arglist_current26 = HEAP32[$2>>2]|0;
     $110 = $arglist_current26;
     $111 = ((0) + 8|0);
     $expanded91 = $111;
     $expanded90 = (($expanded91) - 1)|0;
     $112 = (($110) + ($expanded90))|0;
     $113 = ((0) + 8|0);
     $expanded95 = $113;
     $expanded94 = (($expanded95) - 1)|0;
     $expanded93 = $expanded94 ^ -1;
     $114 = $112 & $expanded93;
     $115 = $114;
     $116 = +HEAPF64[$115>>3];
     $arglist_next27 = ((($115)) + 8|0);
     HEAP32[$2>>2] = $arglist_next27;
     HEAPF64[$0>>3] = $116;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_x($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$05$lcssa = 0, $$056 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $4 = ($0|0)==(0);
 $5 = ($1|0)==(0);
 $6 = $4 & $5;
 if ($6) {
  $$05$lcssa = $2;
 } else {
  $$056 = $2;$15 = $1;$8 = $0;
  while(1) {
   $7 = $8 & 15;
   $9 = (4778 + ($7)|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10&255;
   $12 = $11 | $3;
   $13 = $12&255;
   $14 = ((($$056)) + -1|0);
   HEAP8[$14>>0] = $13;
   $16 = (_bitshift64Lshr(($8|0),($15|0),4)|0);
   $17 = tempRet0;
   $18 = ($16|0)==(0);
   $19 = ($17|0)==(0);
   $20 = $18 & $19;
   if ($20) {
    $$05$lcssa = $14;
    break;
   } else {
    $$056 = $14;$15 = $17;$8 = $16;
   }
  }
 }
 return ($$05$lcssa|0);
}
function _fmt_o($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$06 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0);
 $4 = ($1|0)==(0);
 $5 = $3 & $4;
 if ($5) {
  $$0$lcssa = $2;
 } else {
  $$06 = $2;$11 = $1;$7 = $0;
  while(1) {
   $6 = $7&255;
   $8 = $6 & 7;
   $9 = $8 | 48;
   $10 = ((($$06)) + -1|0);
   HEAP8[$10>>0] = $9;
   $12 = (_bitshift64Lshr(($7|0),($11|0),3)|0);
   $13 = tempRet0;
   $14 = ($12|0)==(0);
   $15 = ($13|0)==(0);
   $16 = $14 & $15;
   if ($16) {
    $$0$lcssa = $10;
    break;
   } else {
    $$06 = $10;$11 = $13;$7 = $12;
   }
  }
 }
 return ($$0$lcssa|0);
}
function _fmt_u($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$010$lcssa$off0 = 0, $$012 = 0, $$09$lcssa = 0, $$0914 = 0, $$1$lcssa = 0, $$111 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(0);
 $4 = ($0>>>0)>(4294967295);
 $5 = ($1|0)==(0);
 $6 = $5 & $4;
 $7 = $3 | $6;
 if ($7) {
  $$0914 = $2;$8 = $0;$9 = $1;
  while(1) {
   $10 = (___uremdi3(($8|0),($9|0),10,0)|0);
   $11 = tempRet0;
   $12 = $10&255;
   $13 = $12 | 48;
   $14 = ((($$0914)) + -1|0);
   HEAP8[$14>>0] = $13;
   $15 = (___udivdi3(($8|0),($9|0),10,0)|0);
   $16 = tempRet0;
   $17 = ($9>>>0)>(9);
   $18 = ($8>>>0)>(4294967295);
   $19 = ($9|0)==(9);
   $20 = $19 & $18;
   $21 = $17 | $20;
   if ($21) {
    $$0914 = $14;$8 = $15;$9 = $16;
   } else {
    break;
   }
  }
  $$010$lcssa$off0 = $15;$$09$lcssa = $14;
 } else {
  $$010$lcssa$off0 = $0;$$09$lcssa = $2;
 }
 $22 = ($$010$lcssa$off0|0)==(0);
 if ($22) {
  $$1$lcssa = $$09$lcssa;
 } else {
  $$012 = $$010$lcssa$off0;$$111 = $$09$lcssa;
  while(1) {
   $23 = (($$012>>>0) % 10)&-1;
   $24 = $23 | 48;
   $25 = $24&255;
   $26 = ((($$111)) + -1|0);
   HEAP8[$26>>0] = $25;
   $27 = (($$012>>>0) / 10)&-1;
   $28 = ($$012>>>0)<(10);
   if ($28) {
    $$1$lcssa = $26;
    break;
   } else {
    $$012 = $27;$$111 = $26;
   }
  }
 }
 return ($$1$lcssa|0);
}
function _strerror($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___pthread_self_105()|0);
 $2 = ((($1)) + 188|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (___strerror_l($0,$3)|0);
 return ($4|0);
}
function _memchr($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$13745 = 0, $$140 = 0, $$2 = 0, $$23839 = 0, $$3 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond53 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1 & 255;
 $4 = $0;
 $5 = $4 & 3;
 $6 = ($5|0)!=(0);
 $7 = ($2|0)!=(0);
 $or$cond53 = $7 & $6;
 L1: do {
  if ($or$cond53) {
   $8 = $1&255;
   $$03555 = $0;$$03654 = $2;
   while(1) {
    $9 = HEAP8[$$03555>>0]|0;
    $10 = ($9<<24>>24)==($8<<24>>24);
    if ($10) {
     $$035$lcssa65 = $$03555;$$036$lcssa64 = $$03654;
     label = 6;
     break L1;
    }
    $11 = ((($$03555)) + 1|0);
    $12 = (($$03654) + -1)|0;
    $13 = $11;
    $14 = $13 & 3;
    $15 = ($14|0)!=(0);
    $16 = ($12|0)!=(0);
    $or$cond = $16 & $15;
    if ($or$cond) {
     $$03555 = $11;$$03654 = $12;
    } else {
     $$035$lcssa = $11;$$036$lcssa = $12;$$lcssa = $16;
     label = 5;
     break;
    }
   }
  } else {
   $$035$lcssa = $0;$$036$lcssa = $2;$$lcssa = $7;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$035$lcssa65 = $$035$lcssa;$$036$lcssa64 = $$036$lcssa;
   label = 6;
  } else {
   $$2 = $$035$lcssa;$$3 = 0;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $17 = HEAP8[$$035$lcssa65>>0]|0;
   $18 = $1&255;
   $19 = ($17<<24>>24)==($18<<24>>24);
   if ($19) {
    $$2 = $$035$lcssa65;$$3 = $$036$lcssa64;
   } else {
    $20 = Math_imul($3, 16843009)|0;
    $21 = ($$036$lcssa64>>>0)>(3);
    L11: do {
     if ($21) {
      $$046 = $$035$lcssa65;$$13745 = $$036$lcssa64;
      while(1) {
       $22 = HEAP32[$$046>>2]|0;
       $23 = $22 ^ $20;
       $24 = (($23) + -16843009)|0;
       $25 = $23 & -2139062144;
       $26 = $25 ^ -2139062144;
       $27 = $26 & $24;
       $28 = ($27|0)==(0);
       if (!($28)) {
        break;
       }
       $29 = ((($$046)) + 4|0);
       $30 = (($$13745) + -4)|0;
       $31 = ($30>>>0)>(3);
       if ($31) {
        $$046 = $29;$$13745 = $30;
       } else {
        $$0$lcssa = $29;$$137$lcssa = $30;
        label = 11;
        break L11;
       }
      }
      $$140 = $$046;$$23839 = $$13745;
     } else {
      $$0$lcssa = $$035$lcssa65;$$137$lcssa = $$036$lcssa64;
      label = 11;
     }
    } while(0);
    if ((label|0) == 11) {
     $32 = ($$137$lcssa|0)==(0);
     if ($32) {
      $$2 = $$0$lcssa;$$3 = 0;
      break;
     } else {
      $$140 = $$0$lcssa;$$23839 = $$137$lcssa;
     }
    }
    while(1) {
     $33 = HEAP8[$$140>>0]|0;
     $34 = ($33<<24>>24)==($18<<24>>24);
     if ($34) {
      $$2 = $$140;$$3 = $$23839;
      break L8;
     }
     $35 = ((($$140)) + 1|0);
     $36 = (($$23839) + -1)|0;
     $37 = ($36|0)==(0);
     if ($37) {
      $$2 = $35;$$3 = 0;
      break;
     } else {
      $$140 = $35;$$23839 = $36;
     }
    }
   }
  }
 } while(0);
 $38 = ($$3|0)!=(0);
 $39 = $38 ? $$2 : 0;
 return ($39|0);
}
function _pad_674($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$lcssa = 0, $$011 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $5 = sp;
 $6 = $4 & 73728;
 $7 = ($6|0)==(0);
 $8 = ($2|0)>($3|0);
 $or$cond = $8 & $7;
 if ($or$cond) {
  $9 = (($2) - ($3))|0;
  $10 = ($9>>>0)<(256);
  $11 = $10 ? $9 : 256;
  _memset(($5|0),($1|0),($11|0))|0;
  $12 = ($9>>>0)>(255);
  if ($12) {
   $13 = (($2) - ($3))|0;
   $$011 = $9;
   while(1) {
    _out($0,$5,256);
    $14 = (($$011) + -256)|0;
    $15 = ($14>>>0)>(255);
    if ($15) {
     $$011 = $14;
    } else {
     break;
    }
   }
   $16 = $13 & 255;
   $$0$lcssa = $16;
  } else {
   $$0$lcssa = $9;
  }
  _out($0,$5,$$0$lcssa);
 }
 STACKTOP = sp;return;
}
function _wctomb($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = (_wcrtomb($0,$1,0)|0);
  $$0 = $3;
 }
 return ($$0|0);
}
function _fmt_fp($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$ = 0, $$$ = 0, $$$$559 = 0.0, $$$3484 = 0, $$$3484691 = 0, $$$3484692 = 0, $$$3501 = 0, $$$4502 = 0, $$$542 = 0.0, $$$559 = 0.0, $$0 = 0, $$0463$lcssa = 0, $$0463584 = 0, $$0464594 = 0, $$0471 = 0.0, $$0479 = 0, $$0487642 = 0, $$0488 = 0, $$0488653 = 0, $$0488655 = 0;
 var $$0496$$9 = 0, $$0497654 = 0, $$0498 = 0, $$0509582 = 0.0, $$0510 = 0, $$0511 = 0, $$0514637 = 0, $$0520 = 0, $$0521 = 0, $$0521$ = 0, $$0523 = 0, $$0525 = 0, $$0527 = 0, $$0527629 = 0, $$0527631 = 0, $$0530636 = 0, $$1465 = 0, $$1467 = 0.0, $$1469 = 0.0, $$1472 = 0.0;
 var $$1480 = 0, $$1482$lcssa = 0, $$1482661 = 0, $$1489641 = 0, $$1499$lcssa = 0, $$1499660 = 0, $$1508583 = 0, $$1512$lcssa = 0, $$1512607 = 0, $$1515 = 0, $$1524 = 0, $$1526 = 0, $$1528614 = 0, $$1531$lcssa = 0, $$1531630 = 0, $$1598 = 0, $$2 = 0, $$2473 = 0.0, $$2476 = 0, $$2476$$547 = 0;
 var $$2476$$549 = 0, $$2483$ph = 0, $$2500 = 0, $$2513 = 0, $$2516618 = 0, $$2529 = 0, $$2532617 = 0, $$3 = 0.0, $$3477 = 0, $$3484$lcssa = 0, $$3484648 = 0, $$3501$lcssa = 0, $$3501647 = 0, $$3533613 = 0, $$4 = 0.0, $$4478$lcssa = 0, $$4478590 = 0, $$4492 = 0, $$4502 = 0, $$4518 = 0;
 var $$5$lcssa = 0, $$534$ = 0, $$539 = 0, $$539$ = 0, $$542 = 0.0, $$546 = 0, $$548 = 0, $$5486$lcssa = 0, $$5486623 = 0, $$5493597 = 0, $$5519$ph = 0, $$555 = 0, $$556 = 0, $$559 = 0.0, $$5602 = 0, $$6 = 0, $$6494589 = 0, $$7495601 = 0, $$7505 = 0, $$7505$ = 0;
 var $$7505$ph = 0, $$8 = 0, $$9$ph = 0, $$lcssa673 = 0, $$neg = 0, $$neg567 = 0, $$pn = 0, $$pn566 = 0, $$pr = 0, $$pr564 = 0, $$pre = 0, $$pre$phi690Z2D = 0, $$pre689 = 0, $$sink545$lcssa = 0, $$sink545622 = 0, $$sink562 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0.0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0.0, $229 = 0.0, $23 = 0;
 var $230 = 0, $231 = 0.0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
 var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0;
 var $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0.0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0;
 var $358 = 0, $359 = 0, $36 = 0.0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0;
 var $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0;
 var $narrow = 0, $not$ = 0, $notlhs = 0, $notrhs = 0, $or$cond = 0, $or$cond3$not = 0, $or$cond537 = 0, $or$cond541 = 0, $or$cond544 = 0, $or$cond554 = 0, $or$cond6 = 0, $scevgep684 = 0, $scevgep684685 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(560|0);
 $6 = sp + 8|0;
 $7 = sp;
 $8 = sp + 524|0;
 $9 = $8;
 $10 = sp + 512|0;
 HEAP32[$7>>2] = 0;
 $11 = ((($10)) + 12|0);
 (___DOUBLE_BITS_675($1)|0);
 $12 = tempRet0;
 $13 = ($12|0)<(0);
 if ($13) {
  $14 = -$1;
  $$0471 = $14;$$0520 = 1;$$0521 = 4747;
 } else {
  $15 = $4 & 2048;
  $16 = ($15|0)==(0);
  $17 = $4 & 1;
  $18 = ($17|0)==(0);
  $$ = $18 ? (4748) : (4753);
  $$$ = $16 ? $$ : (4750);
  $19 = $4 & 2049;
  $narrow = ($19|0)!=(0);
  $$534$ = $narrow&1;
  $$0471 = $1;$$0520 = $$534$;$$0521 = $$$;
 }
 (___DOUBLE_BITS_675($$0471)|0);
 $20 = tempRet0;
 $21 = $20 & 2146435072;
 $22 = ($21>>>0)<(2146435072);
 $23 = (0)<(0);
 $24 = ($21|0)==(2146435072);
 $25 = $24 & $23;
 $26 = $22 | $25;
 do {
  if ($26) {
   $35 = (+_frexpl($$0471,$7));
   $36 = $35 * 2.0;
   $37 = $36 != 0.0;
   if ($37) {
    $38 = HEAP32[$7>>2]|0;
    $39 = (($38) + -1)|0;
    HEAP32[$7>>2] = $39;
   }
   $40 = $5 | 32;
   $41 = ($40|0)==(97);
   if ($41) {
    $42 = $5 & 32;
    $43 = ($42|0)==(0);
    $44 = ((($$0521)) + 9|0);
    $$0521$ = $43 ? $$0521 : $44;
    $45 = $$0520 | 2;
    $46 = ($3>>>0)>(11);
    $47 = (12 - ($3))|0;
    $48 = ($47|0)==(0);
    $49 = $46 | $48;
    do {
     if ($49) {
      $$1472 = $36;
     } else {
      $$0509582 = 8.0;$$1508583 = $47;
      while(1) {
       $50 = (($$1508583) + -1)|0;
       $51 = $$0509582 * 16.0;
       $52 = ($50|0)==(0);
       if ($52) {
        break;
       } else {
        $$0509582 = $51;$$1508583 = $50;
       }
      }
      $53 = HEAP8[$$0521$>>0]|0;
      $54 = ($53<<24>>24)==(45);
      if ($54) {
       $55 = -$36;
       $56 = $55 - $51;
       $57 = $51 + $56;
       $58 = -$57;
       $$1472 = $58;
       break;
      } else {
       $59 = $36 + $51;
       $60 = $59 - $51;
       $$1472 = $60;
       break;
      }
     }
    } while(0);
    $61 = HEAP32[$7>>2]|0;
    $62 = ($61|0)<(0);
    $63 = (0 - ($61))|0;
    $64 = $62 ? $63 : $61;
    $65 = ($64|0)<(0);
    $66 = $65 << 31 >> 31;
    $67 = (_fmt_u($64,$66,$11)|0);
    $68 = ($67|0)==($11|0);
    if ($68) {
     $69 = ((($10)) + 11|0);
     HEAP8[$69>>0] = 48;
     $$0511 = $69;
    } else {
     $$0511 = $67;
    }
    $70 = $61 >> 31;
    $71 = $70 & 2;
    $72 = (($71) + 43)|0;
    $73 = $72&255;
    $74 = ((($$0511)) + -1|0);
    HEAP8[$74>>0] = $73;
    $75 = (($5) + 15)|0;
    $76 = $75&255;
    $77 = ((($$0511)) + -2|0);
    HEAP8[$77>>0] = $76;
    $notrhs = ($3|0)<(1);
    $78 = $4 & 8;
    $79 = ($78|0)==(0);
    $$0523 = $8;$$2473 = $$1472;
    while(1) {
     $80 = (~~(($$2473)));
     $81 = (4778 + ($80)|0);
     $82 = HEAP8[$81>>0]|0;
     $83 = $82&255;
     $84 = $83 | $42;
     $85 = $84&255;
     $86 = ((($$0523)) + 1|0);
     HEAP8[$$0523>>0] = $85;
     $87 = (+($80|0));
     $88 = $$2473 - $87;
     $89 = $88 * 16.0;
     $90 = $86;
     $91 = (($90) - ($9))|0;
     $92 = ($91|0)==(1);
     if ($92) {
      $notlhs = $89 == 0.0;
      $or$cond3$not = $notrhs & $notlhs;
      $or$cond = $79 & $or$cond3$not;
      if ($or$cond) {
       $$1524 = $86;
      } else {
       $93 = ((($$0523)) + 2|0);
       HEAP8[$86>>0] = 46;
       $$1524 = $93;
      }
     } else {
      $$1524 = $86;
     }
     $94 = $89 != 0.0;
     if ($94) {
      $$0523 = $$1524;$$2473 = $89;
     } else {
      break;
     }
    }
    $95 = ($3|0)!=(0);
    $96 = $77;
    $97 = $11;
    $98 = $$1524;
    $99 = (($98) - ($9))|0;
    $100 = (($97) - ($96))|0;
    $101 = (($99) + -2)|0;
    $102 = ($101|0)<($3|0);
    $or$cond537 = $95 & $102;
    $103 = (($3) + 2)|0;
    $$pn = $or$cond537 ? $103 : $99;
    $$0525 = (($100) + ($45))|0;
    $104 = (($$0525) + ($$pn))|0;
    _pad_674($0,32,$2,$104,$4);
    _out($0,$$0521$,$45);
    $105 = $4 ^ 65536;
    _pad_674($0,48,$2,$104,$105);
    _out($0,$8,$99);
    $106 = (($$pn) - ($99))|0;
    _pad_674($0,48,$106,0,0);
    _out($0,$77,$100);
    $107 = $4 ^ 8192;
    _pad_674($0,32,$2,$104,$107);
    $$sink562 = $104;
    break;
   }
   $108 = ($3|0)<(0);
   $$539 = $108 ? 6 : $3;
   if ($37) {
    $109 = $36 * 268435456.0;
    $110 = HEAP32[$7>>2]|0;
    $111 = (($110) + -28)|0;
    HEAP32[$7>>2] = $111;
    $$3 = $109;$$pr = $111;
   } else {
    $$pre = HEAP32[$7>>2]|0;
    $$3 = $36;$$pr = $$pre;
   }
   $112 = ($$pr|0)<(0);
   $113 = ((($6)) + 288|0);
   $$556 = $112 ? $6 : $113;
   $$0498 = $$556;$$4 = $$3;
   while(1) {
    $114 = (~~(($$4))>>>0);
    HEAP32[$$0498>>2] = $114;
    $115 = ((($$0498)) + 4|0);
    $116 = (+($114>>>0));
    $117 = $$4 - $116;
    $118 = $117 * 1.0E+9;
    $119 = $118 != 0.0;
    if ($119) {
     $$0498 = $115;$$4 = $118;
    } else {
     break;
    }
   }
   $120 = ($$pr|0)>(0);
   if ($120) {
    $$1482661 = $$556;$$1499660 = $115;$122 = $$pr;
    while(1) {
     $121 = ($122|0)<(29);
     $123 = $121 ? $122 : 29;
     $$0488653 = ((($$1499660)) + -4|0);
     $124 = ($$0488653>>>0)<($$1482661>>>0);
     if ($124) {
      $$2483$ph = $$1482661;
     } else {
      $$0488655 = $$0488653;$$0497654 = 0;
      while(1) {
       $125 = HEAP32[$$0488655>>2]|0;
       $126 = (_bitshift64Shl(($125|0),0,($123|0))|0);
       $127 = tempRet0;
       $128 = (_i64Add(($126|0),($127|0),($$0497654|0),0)|0);
       $129 = tempRet0;
       $130 = (___uremdi3(($128|0),($129|0),1000000000,0)|0);
       $131 = tempRet0;
       HEAP32[$$0488655>>2] = $130;
       $132 = (___udivdi3(($128|0),($129|0),1000000000,0)|0);
       $133 = tempRet0;
       $$0488 = ((($$0488655)) + -4|0);
       $134 = ($$0488>>>0)<($$1482661>>>0);
       if ($134) {
        break;
       } else {
        $$0488655 = $$0488;$$0497654 = $132;
       }
      }
      $135 = ($132|0)==(0);
      if ($135) {
       $$2483$ph = $$1482661;
      } else {
       $136 = ((($$1482661)) + -4|0);
       HEAP32[$136>>2] = $132;
       $$2483$ph = $136;
      }
     }
     $$2500 = $$1499660;
     while(1) {
      $137 = ($$2500>>>0)>($$2483$ph>>>0);
      if (!($137)) {
       break;
      }
      $138 = ((($$2500)) + -4|0);
      $139 = HEAP32[$138>>2]|0;
      $140 = ($139|0)==(0);
      if ($140) {
       $$2500 = $138;
      } else {
       break;
      }
     }
     $141 = HEAP32[$7>>2]|0;
     $142 = (($141) - ($123))|0;
     HEAP32[$7>>2] = $142;
     $143 = ($142|0)>(0);
     if ($143) {
      $$1482661 = $$2483$ph;$$1499660 = $$2500;$122 = $142;
     } else {
      $$1482$lcssa = $$2483$ph;$$1499$lcssa = $$2500;$$pr564 = $142;
      break;
     }
    }
   } else {
    $$1482$lcssa = $$556;$$1499$lcssa = $115;$$pr564 = $$pr;
   }
   $144 = ($$pr564|0)<(0);
   if ($144) {
    $145 = (($$539) + 25)|0;
    $146 = (($145|0) / 9)&-1;
    $147 = (($146) + 1)|0;
    $148 = ($40|0)==(102);
    $$3484648 = $$1482$lcssa;$$3501647 = $$1499$lcssa;$150 = $$pr564;
    while(1) {
     $149 = (0 - ($150))|0;
     $151 = ($149|0)<(9);
     $152 = $151 ? $149 : 9;
     $153 = ($$3484648>>>0)<($$3501647>>>0);
     if ($153) {
      $157 = 1 << $152;
      $158 = (($157) + -1)|0;
      $159 = 1000000000 >>> $152;
      $$0487642 = 0;$$1489641 = $$3484648;
      while(1) {
       $160 = HEAP32[$$1489641>>2]|0;
       $161 = $160 & $158;
       $162 = $160 >>> $152;
       $163 = (($162) + ($$0487642))|0;
       HEAP32[$$1489641>>2] = $163;
       $164 = Math_imul($161, $159)|0;
       $165 = ((($$1489641)) + 4|0);
       $166 = ($165>>>0)<($$3501647>>>0);
       if ($166) {
        $$0487642 = $164;$$1489641 = $165;
       } else {
        break;
       }
      }
      $167 = HEAP32[$$3484648>>2]|0;
      $168 = ($167|0)==(0);
      $169 = ((($$3484648)) + 4|0);
      $$$3484 = $168 ? $169 : $$3484648;
      $170 = ($164|0)==(0);
      if ($170) {
       $$$3484692 = $$$3484;$$4502 = $$3501647;
      } else {
       $171 = ((($$3501647)) + 4|0);
       HEAP32[$$3501647>>2] = $164;
       $$$3484692 = $$$3484;$$4502 = $171;
      }
     } else {
      $154 = HEAP32[$$3484648>>2]|0;
      $155 = ($154|0)==(0);
      $156 = ((($$3484648)) + 4|0);
      $$$3484691 = $155 ? $156 : $$3484648;
      $$$3484692 = $$$3484691;$$4502 = $$3501647;
     }
     $172 = $148 ? $$556 : $$$3484692;
     $173 = $$4502;
     $174 = $172;
     $175 = (($173) - ($174))|0;
     $176 = $175 >> 2;
     $177 = ($176|0)>($147|0);
     $178 = (($172) + ($147<<2)|0);
     $$$4502 = $177 ? $178 : $$4502;
     $179 = HEAP32[$7>>2]|0;
     $180 = (($179) + ($152))|0;
     HEAP32[$7>>2] = $180;
     $181 = ($180|0)<(0);
     if ($181) {
      $$3484648 = $$$3484692;$$3501647 = $$$4502;$150 = $180;
     } else {
      $$3484$lcssa = $$$3484692;$$3501$lcssa = $$$4502;
      break;
     }
    }
   } else {
    $$3484$lcssa = $$1482$lcssa;$$3501$lcssa = $$1499$lcssa;
   }
   $182 = ($$3484$lcssa>>>0)<($$3501$lcssa>>>0);
   $183 = $$556;
   if ($182) {
    $184 = $$3484$lcssa;
    $185 = (($183) - ($184))|0;
    $186 = $185 >> 2;
    $187 = ($186*9)|0;
    $188 = HEAP32[$$3484$lcssa>>2]|0;
    $189 = ($188>>>0)<(10);
    if ($189) {
     $$1515 = $187;
    } else {
     $$0514637 = $187;$$0530636 = 10;
     while(1) {
      $190 = ($$0530636*10)|0;
      $191 = (($$0514637) + 1)|0;
      $192 = ($188>>>0)<($190>>>0);
      if ($192) {
       $$1515 = $191;
       break;
      } else {
       $$0514637 = $191;$$0530636 = $190;
      }
     }
    }
   } else {
    $$1515 = 0;
   }
   $193 = ($40|0)!=(102);
   $194 = $193 ? $$1515 : 0;
   $195 = (($$539) - ($194))|0;
   $196 = ($40|0)==(103);
   $197 = ($$539|0)!=(0);
   $198 = $197 & $196;
   $$neg = $198 << 31 >> 31;
   $199 = (($195) + ($$neg))|0;
   $200 = $$3501$lcssa;
   $201 = (($200) - ($183))|0;
   $202 = $201 >> 2;
   $203 = ($202*9)|0;
   $204 = (($203) + -9)|0;
   $205 = ($199|0)<($204|0);
   if ($205) {
    $206 = ((($$556)) + 4|0);
    $207 = (($199) + 9216)|0;
    $208 = (($207|0) / 9)&-1;
    $209 = (($208) + -1024)|0;
    $210 = (($206) + ($209<<2)|0);
    $211 = (($207|0) % 9)&-1;
    $$0527629 = (($211) + 1)|0;
    $212 = ($$0527629|0)<(9);
    if ($212) {
     $$0527631 = $$0527629;$$1531630 = 10;
     while(1) {
      $213 = ($$1531630*10)|0;
      $$0527 = (($$0527631) + 1)|0;
      $exitcond = ($$0527|0)==(9);
      if ($exitcond) {
       $$1531$lcssa = $213;
       break;
      } else {
       $$0527631 = $$0527;$$1531630 = $213;
      }
     }
    } else {
     $$1531$lcssa = 10;
    }
    $214 = HEAP32[$210>>2]|0;
    $215 = (($214>>>0) % ($$1531$lcssa>>>0))&-1;
    $216 = ($215|0)==(0);
    $217 = ((($210)) + 4|0);
    $218 = ($217|0)==($$3501$lcssa|0);
    $or$cond541 = $218 & $216;
    if ($or$cond541) {
     $$4492 = $210;$$4518 = $$1515;$$8 = $$3484$lcssa;
    } else {
     $219 = (($214>>>0) / ($$1531$lcssa>>>0))&-1;
     $220 = $219 & 1;
     $221 = ($220|0)==(0);
     $$542 = $221 ? 9007199254740992.0 : 9007199254740994.0;
     $222 = (($$1531$lcssa|0) / 2)&-1;
     $223 = ($215>>>0)<($222>>>0);
     $224 = ($215|0)==($222|0);
     $or$cond544 = $218 & $224;
     $$559 = $or$cond544 ? 1.0 : 1.5;
     $$$559 = $223 ? 0.5 : $$559;
     $225 = ($$0520|0)==(0);
     if ($225) {
      $$1467 = $$$559;$$1469 = $$542;
     } else {
      $226 = HEAP8[$$0521>>0]|0;
      $227 = ($226<<24>>24)==(45);
      $228 = -$$542;
      $229 = -$$$559;
      $$$542 = $227 ? $228 : $$542;
      $$$$559 = $227 ? $229 : $$$559;
      $$1467 = $$$$559;$$1469 = $$$542;
     }
     $230 = (($214) - ($215))|0;
     HEAP32[$210>>2] = $230;
     $231 = $$1469 + $$1467;
     $232 = $231 != $$1469;
     if ($232) {
      $233 = (($230) + ($$1531$lcssa))|0;
      HEAP32[$210>>2] = $233;
      $234 = ($233>>>0)>(999999999);
      if ($234) {
       $$5486623 = $$3484$lcssa;$$sink545622 = $210;
       while(1) {
        $235 = ((($$sink545622)) + -4|0);
        HEAP32[$$sink545622>>2] = 0;
        $236 = ($235>>>0)<($$5486623>>>0);
        if ($236) {
         $237 = ((($$5486623)) + -4|0);
         HEAP32[$237>>2] = 0;
         $$6 = $237;
        } else {
         $$6 = $$5486623;
        }
        $238 = HEAP32[$235>>2]|0;
        $239 = (($238) + 1)|0;
        HEAP32[$235>>2] = $239;
        $240 = ($239>>>0)>(999999999);
        if ($240) {
         $$5486623 = $$6;$$sink545622 = $235;
        } else {
         $$5486$lcssa = $$6;$$sink545$lcssa = $235;
         break;
        }
       }
      } else {
       $$5486$lcssa = $$3484$lcssa;$$sink545$lcssa = $210;
      }
      $241 = $$5486$lcssa;
      $242 = (($183) - ($241))|0;
      $243 = $242 >> 2;
      $244 = ($243*9)|0;
      $245 = HEAP32[$$5486$lcssa>>2]|0;
      $246 = ($245>>>0)<(10);
      if ($246) {
       $$4492 = $$sink545$lcssa;$$4518 = $244;$$8 = $$5486$lcssa;
      } else {
       $$2516618 = $244;$$2532617 = 10;
       while(1) {
        $247 = ($$2532617*10)|0;
        $248 = (($$2516618) + 1)|0;
        $249 = ($245>>>0)<($247>>>0);
        if ($249) {
         $$4492 = $$sink545$lcssa;$$4518 = $248;$$8 = $$5486$lcssa;
         break;
        } else {
         $$2516618 = $248;$$2532617 = $247;
        }
       }
      }
     } else {
      $$4492 = $210;$$4518 = $$1515;$$8 = $$3484$lcssa;
     }
    }
    $250 = ((($$4492)) + 4|0);
    $251 = ($$3501$lcssa>>>0)>($250>>>0);
    $$$3501 = $251 ? $250 : $$3501$lcssa;
    $$5519$ph = $$4518;$$7505$ph = $$$3501;$$9$ph = $$8;
   } else {
    $$5519$ph = $$1515;$$7505$ph = $$3501$lcssa;$$9$ph = $$3484$lcssa;
   }
   $$7505 = $$7505$ph;
   while(1) {
    $252 = ($$7505>>>0)>($$9$ph>>>0);
    if (!($252)) {
     $$lcssa673 = 0;
     break;
    }
    $253 = ((($$7505)) + -4|0);
    $254 = HEAP32[$253>>2]|0;
    $255 = ($254|0)==(0);
    if ($255) {
     $$7505 = $253;
    } else {
     $$lcssa673 = 1;
     break;
    }
   }
   $256 = (0 - ($$5519$ph))|0;
   do {
    if ($196) {
     $not$ = $197 ^ 1;
     $257 = $not$&1;
     $$539$ = (($257) + ($$539))|0;
     $258 = ($$539$|0)>($$5519$ph|0);
     $259 = ($$5519$ph|0)>(-5);
     $or$cond6 = $258 & $259;
     if ($or$cond6) {
      $260 = (($5) + -1)|0;
      $$neg567 = (($$539$) + -1)|0;
      $261 = (($$neg567) - ($$5519$ph))|0;
      $$0479 = $260;$$2476 = $261;
     } else {
      $262 = (($5) + -2)|0;
      $263 = (($$539$) + -1)|0;
      $$0479 = $262;$$2476 = $263;
     }
     $264 = $4 & 8;
     $265 = ($264|0)==(0);
     if ($265) {
      if ($$lcssa673) {
       $266 = ((($$7505)) + -4|0);
       $267 = HEAP32[$266>>2]|0;
       $268 = ($267|0)==(0);
       if ($268) {
        $$2529 = 9;
       } else {
        $269 = (($267>>>0) % 10)&-1;
        $270 = ($269|0)==(0);
        if ($270) {
         $$1528614 = 0;$$3533613 = 10;
         while(1) {
          $271 = ($$3533613*10)|0;
          $272 = (($$1528614) + 1)|0;
          $273 = (($267>>>0) % ($271>>>0))&-1;
          $274 = ($273|0)==(0);
          if ($274) {
           $$1528614 = $272;$$3533613 = $271;
          } else {
           $$2529 = $272;
           break;
          }
         }
        } else {
         $$2529 = 0;
        }
       }
      } else {
       $$2529 = 9;
      }
      $275 = $$0479 | 32;
      $276 = ($275|0)==(102);
      $277 = $$7505;
      $278 = (($277) - ($183))|0;
      $279 = $278 >> 2;
      $280 = ($279*9)|0;
      $281 = (($280) + -9)|0;
      if ($276) {
       $282 = (($281) - ($$2529))|0;
       $283 = ($282|0)>(0);
       $$546 = $283 ? $282 : 0;
       $284 = ($$2476|0)<($$546|0);
       $$2476$$547 = $284 ? $$2476 : $$546;
       $$1480 = $$0479;$$3477 = $$2476$$547;$$pre$phi690Z2D = 0;
       break;
      } else {
       $285 = (($281) + ($$5519$ph))|0;
       $286 = (($285) - ($$2529))|0;
       $287 = ($286|0)>(0);
       $$548 = $287 ? $286 : 0;
       $288 = ($$2476|0)<($$548|0);
       $$2476$$549 = $288 ? $$2476 : $$548;
       $$1480 = $$0479;$$3477 = $$2476$$549;$$pre$phi690Z2D = 0;
       break;
      }
     } else {
      $$1480 = $$0479;$$3477 = $$2476;$$pre$phi690Z2D = $264;
     }
    } else {
     $$pre689 = $4 & 8;
     $$1480 = $5;$$3477 = $$539;$$pre$phi690Z2D = $$pre689;
    }
   } while(0);
   $289 = $$3477 | $$pre$phi690Z2D;
   $290 = ($289|0)!=(0);
   $291 = $290&1;
   $292 = $$1480 | 32;
   $293 = ($292|0)==(102);
   if ($293) {
    $294 = ($$5519$ph|0)>(0);
    $295 = $294 ? $$5519$ph : 0;
    $$2513 = 0;$$pn566 = $295;
   } else {
    $296 = ($$5519$ph|0)<(0);
    $297 = $296 ? $256 : $$5519$ph;
    $298 = ($297|0)<(0);
    $299 = $298 << 31 >> 31;
    $300 = (_fmt_u($297,$299,$11)|0);
    $301 = $11;
    $302 = $300;
    $303 = (($301) - ($302))|0;
    $304 = ($303|0)<(2);
    if ($304) {
     $$1512607 = $300;
     while(1) {
      $305 = ((($$1512607)) + -1|0);
      HEAP8[$305>>0] = 48;
      $306 = $305;
      $307 = (($301) - ($306))|0;
      $308 = ($307|0)<(2);
      if ($308) {
       $$1512607 = $305;
      } else {
       $$1512$lcssa = $305;
       break;
      }
     }
    } else {
     $$1512$lcssa = $300;
    }
    $309 = $$5519$ph >> 31;
    $310 = $309 & 2;
    $311 = (($310) + 43)|0;
    $312 = $311&255;
    $313 = ((($$1512$lcssa)) + -1|0);
    HEAP8[$313>>0] = $312;
    $314 = $$1480&255;
    $315 = ((($$1512$lcssa)) + -2|0);
    HEAP8[$315>>0] = $314;
    $316 = $315;
    $317 = (($301) - ($316))|0;
    $$2513 = $315;$$pn566 = $317;
   }
   $318 = (($$0520) + 1)|0;
   $319 = (($318) + ($$3477))|0;
   $$1526 = (($319) + ($291))|0;
   $320 = (($$1526) + ($$pn566))|0;
   _pad_674($0,32,$2,$320,$4);
   _out($0,$$0521,$$0520);
   $321 = $4 ^ 65536;
   _pad_674($0,48,$2,$320,$321);
   if ($293) {
    $322 = ($$9$ph>>>0)>($$556>>>0);
    $$0496$$9 = $322 ? $$556 : $$9$ph;
    $323 = ((($8)) + 9|0);
    $324 = $323;
    $325 = ((($8)) + 8|0);
    $$5493597 = $$0496$$9;
    while(1) {
     $326 = HEAP32[$$5493597>>2]|0;
     $327 = (_fmt_u($326,0,$323)|0);
     $328 = ($$5493597|0)==($$0496$$9|0);
     if ($328) {
      $334 = ($327|0)==($323|0);
      if ($334) {
       HEAP8[$325>>0] = 48;
       $$1465 = $325;
      } else {
       $$1465 = $327;
      }
     } else {
      $329 = ($327>>>0)>($8>>>0);
      if ($329) {
       $330 = $327;
       $331 = (($330) - ($9))|0;
       _memset(($8|0),48,($331|0))|0;
       $$0464594 = $327;
       while(1) {
        $332 = ((($$0464594)) + -1|0);
        $333 = ($332>>>0)>($8>>>0);
        if ($333) {
         $$0464594 = $332;
        } else {
         $$1465 = $332;
         break;
        }
       }
      } else {
       $$1465 = $327;
      }
     }
     $335 = $$1465;
     $336 = (($324) - ($335))|0;
     _out($0,$$1465,$336);
     $337 = ((($$5493597)) + 4|0);
     $338 = ($337>>>0)>($$556>>>0);
     if ($338) {
      break;
     } else {
      $$5493597 = $337;
     }
    }
    $339 = ($289|0)==(0);
    if (!($339)) {
     _out($0,7857,1);
    }
    $340 = ($337>>>0)<($$7505>>>0);
    $341 = ($$3477|0)>(0);
    $342 = $340 & $341;
    if ($342) {
     $$4478590 = $$3477;$$6494589 = $337;
     while(1) {
      $343 = HEAP32[$$6494589>>2]|0;
      $344 = (_fmt_u($343,0,$323)|0);
      $345 = ($344>>>0)>($8>>>0);
      if ($345) {
       $346 = $344;
       $347 = (($346) - ($9))|0;
       _memset(($8|0),48,($347|0))|0;
       $$0463584 = $344;
       while(1) {
        $348 = ((($$0463584)) + -1|0);
        $349 = ($348>>>0)>($8>>>0);
        if ($349) {
         $$0463584 = $348;
        } else {
         $$0463$lcssa = $348;
         break;
        }
       }
      } else {
       $$0463$lcssa = $344;
      }
      $350 = ($$4478590|0)<(9);
      $351 = $350 ? $$4478590 : 9;
      _out($0,$$0463$lcssa,$351);
      $352 = ((($$6494589)) + 4|0);
      $353 = (($$4478590) + -9)|0;
      $354 = ($352>>>0)<($$7505>>>0);
      $355 = ($$4478590|0)>(9);
      $356 = $354 & $355;
      if ($356) {
       $$4478590 = $353;$$6494589 = $352;
      } else {
       $$4478$lcssa = $353;
       break;
      }
     }
    } else {
     $$4478$lcssa = $$3477;
    }
    $357 = (($$4478$lcssa) + 9)|0;
    _pad_674($0,48,$357,9,0);
   } else {
    $358 = ((($$9$ph)) + 4|0);
    $$7505$ = $$lcssa673 ? $$7505 : $358;
    $359 = ($$3477|0)>(-1);
    if ($359) {
     $360 = ((($8)) + 9|0);
     $361 = ($$pre$phi690Z2D|0)==(0);
     $362 = $360;
     $363 = (0 - ($9))|0;
     $364 = ((($8)) + 8|0);
     $$5602 = $$3477;$$7495601 = $$9$ph;
     while(1) {
      $365 = HEAP32[$$7495601>>2]|0;
      $366 = (_fmt_u($365,0,$360)|0);
      $367 = ($366|0)==($360|0);
      if ($367) {
       HEAP8[$364>>0] = 48;
       $$0 = $364;
      } else {
       $$0 = $366;
      }
      $368 = ($$7495601|0)==($$9$ph|0);
      do {
       if ($368) {
        $372 = ((($$0)) + 1|0);
        _out($0,$$0,1);
        $373 = ($$5602|0)<(1);
        $or$cond554 = $361 & $373;
        if ($or$cond554) {
         $$2 = $372;
         break;
        }
        _out($0,7857,1);
        $$2 = $372;
       } else {
        $369 = ($$0>>>0)>($8>>>0);
        if (!($369)) {
         $$2 = $$0;
         break;
        }
        $scevgep684 = (($$0) + ($363)|0);
        $scevgep684685 = $scevgep684;
        _memset(($8|0),48,($scevgep684685|0))|0;
        $$1598 = $$0;
        while(1) {
         $370 = ((($$1598)) + -1|0);
         $371 = ($370>>>0)>($8>>>0);
         if ($371) {
          $$1598 = $370;
         } else {
          $$2 = $370;
          break;
         }
        }
       }
      } while(0);
      $374 = $$2;
      $375 = (($362) - ($374))|0;
      $376 = ($$5602|0)>($375|0);
      $377 = $376 ? $375 : $$5602;
      _out($0,$$2,$377);
      $378 = (($$5602) - ($375))|0;
      $379 = ((($$7495601)) + 4|0);
      $380 = ($379>>>0)<($$7505$>>>0);
      $381 = ($378|0)>(-1);
      $382 = $380 & $381;
      if ($382) {
       $$5602 = $378;$$7495601 = $379;
      } else {
       $$5$lcssa = $378;
       break;
      }
     }
    } else {
     $$5$lcssa = $$3477;
    }
    $383 = (($$5$lcssa) + 18)|0;
    _pad_674($0,48,$383,18,0);
    $384 = $11;
    $385 = $$2513;
    $386 = (($384) - ($385))|0;
    _out($0,$$2513,$386);
   }
   $387 = $4 ^ 8192;
   _pad_674($0,32,$2,$320,$387);
   $$sink562 = $320;
  } else {
   $27 = $5 & 32;
   $28 = ($27|0)!=(0);
   $29 = $28 ? 4766 : 4770;
   $30 = ($$0471 != $$0471) | (0.0 != 0.0);
   $31 = $28 ? 6695 : 4774;
   $$0510 = $30 ? $31 : $29;
   $32 = (($$0520) + 3)|0;
   $33 = $4 & -65537;
   _pad_674($0,32,$2,$32,$33);
   _out($0,$$0521,$$0520);
   _out($0,$$0510,3);
   $34 = $4 ^ 8192;
   _pad_674($0,32,$2,$32,$34);
   $$sink562 = $32;
  }
 } while(0);
 $388 = ($$sink562|0)<($2|0);
 $$555 = $388 ? $2 : $$sink562;
 STACKTOP = sp;return ($$555|0);
}
function ___DOUBLE_BITS_675($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 tempRet0 = ($2);
 return ($1|0);
}
function _frexpl($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_frexp($0,$1));
 return (+$2);
}
function _frexp($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$0 = 0.0, $$016 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $storemerge = 0, $trunc$clear = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $5 = tempRet0;
 $6 = $4&65535;
 $trunc$clear = $6 & 2047;
 switch ($trunc$clear<<16>>16) {
 case 0:  {
  $7 = $0 != 0.0;
  if ($7) {
   $8 = $0 * 1.8446744073709552E+19;
   $9 = (+_frexp($8,$1));
   $10 = HEAP32[$1>>2]|0;
   $11 = (($10) + -64)|0;
   $$016 = $9;$storemerge = $11;
  } else {
   $$016 = $0;$storemerge = 0;
  }
  HEAP32[$1>>2] = $storemerge;
  $$0 = $$016;
  break;
 }
 case 2047:  {
  $$0 = $0;
  break;
 }
 default: {
  $12 = $4 & 2047;
  $13 = (($12) + -1022)|0;
  HEAP32[$1>>2] = $13;
  $14 = $3 & -2146435073;
  $15 = $14 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $15;$16 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $16;
 }
 }
 return (+$$0);
}
function _wcrtomb($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0|0);
 do {
  if ($3) {
   $$0 = 1;
  } else {
   $4 = ($1>>>0)<(128);
   if ($4) {
    $5 = $1&255;
    HEAP8[$0>>0] = $5;
    $$0 = 1;
    break;
   }
   $6 = (___pthread_self_448()|0);
   $7 = ((($6)) + 188|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = HEAP32[$8>>2]|0;
   $not$ = ($9|0)==(0|0);
   if ($not$) {
    $10 = $1 & -128;
    $11 = ($10|0)==(57216);
    if ($11) {
     $13 = $1&255;
     HEAP8[$0>>0] = $13;
     $$0 = 1;
     break;
    } else {
     $12 = (___errno_location()|0);
     HEAP32[$12>>2] = 84;
     $$0 = -1;
     break;
    }
   }
   $14 = ($1>>>0)<(2048);
   if ($14) {
    $15 = $1 >>> 6;
    $16 = $15 | 192;
    $17 = $16&255;
    $18 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $17;
    $19 = $1 & 63;
    $20 = $19 | 128;
    $21 = $20&255;
    HEAP8[$18>>0] = $21;
    $$0 = 2;
    break;
   }
   $22 = ($1>>>0)<(55296);
   $23 = $1 & -8192;
   $24 = ($23|0)==(57344);
   $or$cond = $22 | $24;
   if ($or$cond) {
    $25 = $1 >>> 12;
    $26 = $25 | 224;
    $27 = $26&255;
    $28 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $27;
    $29 = $1 >>> 6;
    $30 = $29 & 63;
    $31 = $30 | 128;
    $32 = $31&255;
    $33 = ((($0)) + 2|0);
    HEAP8[$28>>0] = $32;
    $34 = $1 & 63;
    $35 = $34 | 128;
    $36 = $35&255;
    HEAP8[$33>>0] = $36;
    $$0 = 3;
    break;
   }
   $37 = (($1) + -65536)|0;
   $38 = ($37>>>0)<(1048576);
   if ($38) {
    $39 = $1 >>> 18;
    $40 = $39 | 240;
    $41 = $40&255;
    $42 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $41;
    $43 = $1 >>> 12;
    $44 = $43 & 63;
    $45 = $44 | 128;
    $46 = $45&255;
    $47 = ((($0)) + 2|0);
    HEAP8[$42>>0] = $46;
    $48 = $1 >>> 6;
    $49 = $48 & 63;
    $50 = $49 | 128;
    $51 = $50&255;
    $52 = ((($0)) + 3|0);
    HEAP8[$47>>0] = $51;
    $53 = $1 & 63;
    $54 = $53 | 128;
    $55 = $54&255;
    HEAP8[$52>>0] = $55;
    $$0 = 4;
    break;
   } else {
    $56 = (___errno_location()|0);
    HEAP32[$56>>2] = 84;
    $$0 = -1;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___pthread_self_448() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function ___pthread_self_105() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function ___strerror_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$012$lcssa = 0, $$01214 = 0, $$016 = 0, $$113 = 0, $$115 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $$016 = 0;
 while(1) {
  $3 = (4794 + ($$016)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = $4&255;
  $6 = ($5|0)==($0|0);
  if ($6) {
   label = 2;
   break;
  }
  $7 = (($$016) + 1)|0;
  $8 = ($7|0)==(87);
  if ($8) {
   $$01214 = 4882;$$115 = 87;
   label = 5;
   break;
  } else {
   $$016 = $7;
  }
 }
 if ((label|0) == 2) {
  $2 = ($$016|0)==(0);
  if ($2) {
   $$012$lcssa = 4882;
  } else {
   $$01214 = 4882;$$115 = $$016;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  while(1) {
   label = 0;
   $$113 = $$01214;
   while(1) {
    $9 = HEAP8[$$113>>0]|0;
    $10 = ($9<<24>>24)==(0);
    $11 = ((($$113)) + 1|0);
    if ($10) {
     break;
    } else {
     $$113 = $11;
    }
   }
   $12 = (($$115) + -1)|0;
   $13 = ($12|0)==(0);
   if ($13) {
    $$012$lcssa = $11;
    break;
   } else {
    $$01214 = $11;$$115 = $12;
    label = 5;
   }
  }
 }
 $14 = ((($1)) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (___lctrans($$012$lcssa,$15)|0);
 return ($16|0);
}
function ___lctrans($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___lctrans_impl($0,$1)|0);
 return ($2|0);
}
function ___lctrans_impl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = HEAP32[$1>>2]|0;
  $4 = ((($1)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (___mo_lookup($3,$5,$0)|0);
  $$0 = $6;
 }
 $7 = ($$0|0)!=(0|0);
 $8 = $7 ? $$0 : $0;
 return ($8|0);
}
function ___mo_lookup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$090 = 0, $$094 = 0, $$191 = 0, $$195 = 0, $$4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond102 = 0, $or$cond104 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 1794895138)|0;
 $5 = ((($0)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_swapc($6,$4)|0);
 $8 = ((($0)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_swapc($9,$4)|0);
 $11 = ((($0)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_swapc($12,$4)|0);
 $14 = $1 >>> 2;
 $15 = ($7>>>0)<($14>>>0);
 L1: do {
  if ($15) {
   $16 = $7 << 2;
   $17 = (($1) - ($16))|0;
   $18 = ($10>>>0)<($17>>>0);
   $19 = ($13>>>0)<($17>>>0);
   $or$cond = $18 & $19;
   if ($or$cond) {
    $20 = $13 | $10;
    $21 = $20 & 3;
    $22 = ($21|0)==(0);
    if ($22) {
     $23 = $10 >>> 2;
     $24 = $13 >>> 2;
     $$090 = 0;$$094 = $7;
     while(1) {
      $25 = $$094 >>> 1;
      $26 = (($$090) + ($25))|0;
      $27 = $26 << 1;
      $28 = (($27) + ($23))|0;
      $29 = (($0) + ($28<<2)|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (_swapc($30,$4)|0);
      $32 = (($28) + 1)|0;
      $33 = (($0) + ($32<<2)|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = (_swapc($34,$4)|0);
      $36 = ($35>>>0)<($1>>>0);
      $37 = (($1) - ($35))|0;
      $38 = ($31>>>0)<($37>>>0);
      $or$cond102 = $36 & $38;
      if (!($or$cond102)) {
       $$4 = 0;
       break L1;
      }
      $39 = (($35) + ($31))|0;
      $40 = (($0) + ($39)|0);
      $41 = HEAP8[$40>>0]|0;
      $42 = ($41<<24>>24)==(0);
      if (!($42)) {
       $$4 = 0;
       break L1;
      }
      $43 = (($0) + ($35)|0);
      $44 = (_strcmp($2,$43)|0);
      $45 = ($44|0)==(0);
      if ($45) {
       break;
      }
      $62 = ($$094|0)==(1);
      $63 = ($44|0)<(0);
      $64 = (($$094) - ($25))|0;
      $$195 = $63 ? $25 : $64;
      $$191 = $63 ? $$090 : $26;
      if ($62) {
       $$4 = 0;
       break L1;
      } else {
       $$090 = $$191;$$094 = $$195;
      }
     }
     $46 = (($27) + ($24))|0;
     $47 = (($0) + ($46<<2)|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = (_swapc($48,$4)|0);
     $50 = (($46) + 1)|0;
     $51 = (($0) + ($50<<2)|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = (_swapc($52,$4)|0);
     $54 = ($53>>>0)<($1>>>0);
     $55 = (($1) - ($53))|0;
     $56 = ($49>>>0)<($55>>>0);
     $or$cond104 = $54 & $56;
     if ($or$cond104) {
      $57 = (($0) + ($53)|0);
      $58 = (($53) + ($49))|0;
      $59 = (($0) + ($58)|0);
      $60 = HEAP8[$59>>0]|0;
      $61 = ($60<<24>>24)==(0);
      $$ = $61 ? $57 : 0;
      $$4 = $$;
     } else {
      $$4 = 0;
     }
    } else {
     $$4 = 0;
    }
   } else {
    $$4 = 0;
   }
  } else {
   $$4 = 0;
  }
 } while(0);
 return ($$4|0);
}
function _swapc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0);
 $3 = (_llvm_bswap_i32(($0|0))|0);
 $$ = $2 ? $0 : $3;
 return ($$|0);
}
function ___fwritex($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$038 = 0, $$042 = 0, $$1 = 0, $$139 = 0, $$141 = 0, $$143 = 0, $$pre = 0, $$pre47 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $7 = (___towrite($2)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$pre = HEAP32[$3>>2]|0;
   $12 = $$pre;
   label = 5;
  } else {
   $$1 = 0;
  }
 } else {
  $6 = $4;
  $12 = $6;
  label = 5;
 }
 L5: do {
  if ((label|0) == 5) {
   $9 = ((($2)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($12) - ($10))|0;
   $13 = ($11>>>0)<($1>>>0);
   $14 = $10;
   if ($13) {
    $15 = ((($2)) + 36|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (FUNCTION_TABLE_iiii[$16 & 127]($2,$0,$1)|0);
    $$1 = $17;
    break;
   }
   $18 = ((($2)) + 75|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = ($19<<24>>24)>(-1);
   L10: do {
    if ($20) {
     $$038 = $1;
     while(1) {
      $21 = ($$038|0)==(0);
      if ($21) {
       $$139 = 0;$$141 = $0;$$143 = $1;$31 = $14;
       break L10;
      }
      $22 = (($$038) + -1)|0;
      $23 = (($0) + ($22)|0);
      $24 = HEAP8[$23>>0]|0;
      $25 = ($24<<24>>24)==(10);
      if ($25) {
       break;
      } else {
       $$038 = $22;
      }
     }
     $26 = ((($2)) + 36|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = (FUNCTION_TABLE_iiii[$27 & 127]($2,$0,$$038)|0);
     $29 = ($28>>>0)<($$038>>>0);
     if ($29) {
      $$1 = $28;
      break L5;
     }
     $30 = (($0) + ($$038)|0);
     $$042 = (($1) - ($$038))|0;
     $$pre47 = HEAP32[$9>>2]|0;
     $$139 = $$038;$$141 = $30;$$143 = $$042;$31 = $$pre47;
    } else {
     $$139 = 0;$$141 = $0;$$143 = $1;$31 = $14;
    }
   } while(0);
   _memcpy(($31|0),($$141|0),($$143|0))|0;
   $32 = HEAP32[$9>>2]|0;
   $33 = (($32) + ($$143)|0);
   HEAP32[$9>>2] = $33;
   $34 = (($$139) + ($$143))|0;
   $$1 = $34;
  }
 } while(0);
 return ($$1|0);
}
function ___towrite($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = HEAP32[$0>>2]|0;
 $8 = $7 & 8;
 $9 = ($8|0)==(0);
 if ($9) {
  $11 = ((($0)) + 8|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($0)) + 4|0);
  HEAP32[$12>>2] = 0;
  $13 = ((($0)) + 44|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($0)) + 28|0);
  HEAP32[$15>>2] = $14;
  $16 = ((($0)) + 20|0);
  HEAP32[$16>>2] = $14;
  $17 = ((($0)) + 48|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($14) + ($18)|0);
  $20 = ((($0)) + 16|0);
  HEAP32[$20>>2] = $19;
  $$0 = 0;
 } else {
  $10 = $7 | 32;
  HEAP32[$0>>2] = $10;
  $$0 = -1;
 }
 return ($$0|0);
}
function _sn_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6;
 $8 = (($4) - ($7))|0;
 $9 = ($8>>>0)>($2>>>0);
 $$ = $9 ? $2 : $8;
 _memcpy(($6|0),($1|0),($$|0))|0;
 $10 = HEAP32[$5>>2]|0;
 $11 = (($10) + ($$)|0);
 HEAP32[$5>>2] = $11;
 return ($2|0);
}
function _isxdigit($0) {
 $0 = $0|0;
 var $$ = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $isdigit = 0, $isdigittmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isdigittmp = (($0) + -48)|0;
 $isdigit = ($isdigittmp>>>0)<(10);
 $1 = $0 | 32;
 $2 = (($1) + -97)|0;
 $3 = ($2>>>0)<(6);
 $$ = $isdigit | $3;
 $4 = $$&1;
 return ($4|0);
}
function ___floatscan($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0105$ph = 0, $$0106$ph = 0, $$0107$lcssa = 0, $$0107127 = 0, $$0113 = 0, $$0114 = 0.0, $$1$lcssa = 0, $$1108 = 0, $$1128 = 0, $$2 = 0, $$2109125 = 0, $$3110 = 0, $$3126 = 0, $$4 = 0, $$4111 = 0, $$5 = 0, $$6 = 0, $$in = 0, $$old8 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0.0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($1|0) {
 case 0:  {
  $$0105$ph = -149;$$0106$ph = 24;
  label = 4;
  break;
 }
 case 1:  {
  $$0105$ph = -1074;$$0106$ph = 53;
  label = 4;
  break;
 }
 case 2:  {
  $$0105$ph = -1074;$$0106$ph = 53;
  label = 4;
  break;
 }
 default: {
  $$0114 = 0.0;
 }
 }
 L4: do {
  if ((label|0) == 4) {
   $3 = ((($0)) + 4|0);
   $4 = ((($0)) + 100|0);
   while(1) {
    $5 = HEAP32[$3>>2]|0;
    $6 = HEAP32[$4>>2]|0;
    $7 = ($5>>>0)<($6>>>0);
    if ($7) {
     $8 = ((($5)) + 1|0);
     HEAP32[$3>>2] = $8;
     $9 = HEAP8[$5>>0]|0;
     $10 = $9&255;
     $12 = $10;
    } else {
     $11 = (___shgetc($0)|0);
     $12 = $11;
    }
    $13 = (_isspace($12)|0);
    $14 = ($13|0)==(0);
    if ($14) {
     break;
    }
   }
   L13: do {
    switch ($12|0) {
    case 43: case 45:  {
     $15 = ($12|0)==(45);
     $16 = $15&1;
     $17 = $16 << 1;
     $18 = (1 - ($17))|0;
     $19 = HEAP32[$3>>2]|0;
     $20 = HEAP32[$4>>2]|0;
     $21 = ($19>>>0)<($20>>>0);
     if ($21) {
      $22 = ((($19)) + 1|0);
      HEAP32[$3>>2] = $22;
      $23 = HEAP8[$19>>0]|0;
      $24 = $23&255;
      $$0 = $24;$$0113 = $18;
      break L13;
     } else {
      $25 = (___shgetc($0)|0);
      $$0 = $25;$$0113 = $18;
      break L13;
     }
     break;
    }
    default: {
     $$0 = $12;$$0113 = 1;
    }
    }
   } while(0);
   $$0107127 = 0;$$1128 = $$0;
   while(1) {
    $26 = $$1128 | 32;
    $27 = (6686 + ($$0107127)|0);
    $28 = HEAP8[$27>>0]|0;
    $29 = $28 << 24 >> 24;
    $30 = ($26|0)==($29|0);
    if (!($30)) {
     $$0107$lcssa = $$0107127;$$1$lcssa = $$1128;
     break;
    }
    $31 = ($$0107127>>>0)<(7);
    do {
     if ($31) {
      $32 = HEAP32[$3>>2]|0;
      $33 = HEAP32[$4>>2]|0;
      $34 = ($32>>>0)<($33>>>0);
      if ($34) {
       $35 = ((($32)) + 1|0);
       HEAP32[$3>>2] = $35;
       $36 = HEAP8[$32>>0]|0;
       $37 = $36&255;
       $$2 = $37;
       break;
      } else {
       $38 = (___shgetc($0)|0);
       $$2 = $38;
       break;
      }
     } else {
      $$2 = $$1128;
     }
    } while(0);
    $39 = (($$0107127) + 1)|0;
    $40 = ($39>>>0)<(8);
    if ($40) {
     $$0107127 = $39;$$1128 = $$2;
    } else {
     $$0107$lcssa = $39;$$1$lcssa = $$2;
     break;
    }
   }
   L29: do {
    switch ($$0107$lcssa|0) {
    case 8:  {
     break;
    }
    case 3:  {
     label = 23;
     break;
    }
    default: {
     $41 = ($$0107$lcssa>>>0)>(3);
     $42 = ($2|0)!=(0);
     $or$cond5 = $42 & $41;
     if ($or$cond5) {
      $43 = ($$0107$lcssa|0)==(8);
      if ($43) {
       break L29;
      } else {
       label = 23;
       break L29;
      }
     }
     $56 = ($$0107$lcssa|0)==(0);
     L34: do {
      if ($56) {
       $$2109125 = 0;$$3126 = $$1$lcssa;
       while(1) {
        $57 = $$3126 | 32;
        $58 = (6695 + ($$2109125)|0);
        $59 = HEAP8[$58>>0]|0;
        $60 = $59 << 24 >> 24;
        $61 = ($57|0)==($60|0);
        if (!($61)) {
         $$3110 = $$2109125;$$5 = $$3126;
         break L34;
        }
        $62 = ($$2109125>>>0)<(2);
        do {
         if ($62) {
          $63 = HEAP32[$3>>2]|0;
          $64 = HEAP32[$4>>2]|0;
          $65 = ($63>>>0)<($64>>>0);
          if ($65) {
           $66 = ((($63)) + 1|0);
           HEAP32[$3>>2] = $66;
           $67 = HEAP8[$63>>0]|0;
           $68 = $67&255;
           $$4 = $68;
           break;
          } else {
           $69 = (___shgetc($0)|0);
           $$4 = $69;
           break;
          }
         } else {
          $$4 = $$3126;
         }
        } while(0);
        $70 = (($$2109125) + 1)|0;
        $71 = ($70>>>0)<(3);
        if ($71) {
         $$2109125 = $70;$$3126 = $$4;
        } else {
         $$3110 = $70;$$5 = $$4;
         break;
        }
       }
      } else {
       $$3110 = $$0107$lcssa;$$5 = $$1$lcssa;
      }
     } while(0);
     switch ($$3110|0) {
     case 3:  {
      $72 = HEAP32[$3>>2]|0;
      $73 = HEAP32[$4>>2]|0;
      $74 = ($72>>>0)<($73>>>0);
      if ($74) {
       $75 = ((($72)) + 1|0);
       HEAP32[$3>>2] = $75;
       $76 = HEAP8[$72>>0]|0;
       $77 = $76&255;
       $80 = $77;
      } else {
       $78 = (___shgetc($0)|0);
       $80 = $78;
      }
      $79 = ($80|0)==(40);
      if ($79) {
       $$4111 = 1;
      } else {
       $81 = HEAP32[$4>>2]|0;
       $82 = ($81|0)==(0|0);
       if ($82) {
        $$0114 = nan;
        break L4;
       }
       $83 = HEAP32[$3>>2]|0;
       $84 = ((($83)) + -1|0);
       HEAP32[$3>>2] = $84;
       $$0114 = nan;
       break L4;
      }
      while(1) {
       $85 = HEAP32[$3>>2]|0;
       $86 = HEAP32[$4>>2]|0;
       $87 = ($85>>>0)<($86>>>0);
       if ($87) {
        $88 = ((($85)) + 1|0);
        HEAP32[$3>>2] = $88;
        $89 = HEAP8[$85>>0]|0;
        $90 = $89&255;
        $93 = $90;
       } else {
        $91 = (___shgetc($0)|0);
        $93 = $91;
       }
       $92 = (($93) + -48)|0;
       $94 = ($92>>>0)<(10);
       $95 = (($93) + -65)|0;
       $96 = ($95>>>0)<(26);
       $or$cond = $94 | $96;
       if (!($or$cond)) {
        $97 = (($93) + -97)|0;
        $98 = ($97>>>0)<(26);
        $99 = ($93|0)==(95);
        $or$cond7 = $99 | $98;
        if (!($or$cond7)) {
         break;
        }
       }
       $111 = (($$4111) + 1)|0;
       $$4111 = $111;
      }
      $100 = ($93|0)==(41);
      if ($100) {
       $$0114 = nan;
       break L4;
      }
      $101 = HEAP32[$4>>2]|0;
      $102 = ($101|0)==(0|0);
      if (!($102)) {
       $103 = HEAP32[$3>>2]|0;
       $104 = ((($103)) + -1|0);
       HEAP32[$3>>2] = $104;
      }
      if (!($42)) {
       $106 = (___errno_location()|0);
       HEAP32[$106>>2] = 22;
       ___shlim($0,0);
       $$0114 = 0.0;
       break L4;
      }
      $105 = ($$4111|0)==(0);
      if ($105) {
       $$0114 = nan;
       break L4;
      } else {
       $$in = $$4111;
      }
      while(1) {
       $107 = (($$in) + -1)|0;
       if (!($102)) {
        $108 = HEAP32[$3>>2]|0;
        $109 = ((($108)) + -1|0);
        HEAP32[$3>>2] = $109;
       }
       $110 = ($107|0)==(0);
       if ($110) {
        $$0114 = nan;
        break L4;
       } else {
        $$in = $107;
       }
      }
      break;
     }
     case 0:  {
      $117 = ($$5|0)==(48);
      if ($117) {
       $118 = HEAP32[$3>>2]|0;
       $119 = HEAP32[$4>>2]|0;
       $120 = ($118>>>0)<($119>>>0);
       if ($120) {
        $121 = ((($118)) + 1|0);
        HEAP32[$3>>2] = $121;
        $122 = HEAP8[$118>>0]|0;
        $123 = $122&255;
        $126 = $123;
       } else {
        $124 = (___shgetc($0)|0);
        $126 = $124;
       }
       $125 = $126 | 32;
       $127 = ($125|0)==(120);
       if ($127) {
        $128 = (+_hexfloat($0,$$0106$ph,$$0105$ph,$$0113,$2));
        $$0114 = $128;
        break L4;
       }
       $129 = HEAP32[$4>>2]|0;
       $130 = ($129|0)==(0|0);
       if ($130) {
        $$6 = 48;
       } else {
        $131 = HEAP32[$3>>2]|0;
        $132 = ((($131)) + -1|0);
        HEAP32[$3>>2] = $132;
        $$6 = 48;
       }
      } else {
       $$6 = $$5;
      }
      $133 = (+_decfloat($0,$$6,$$0106$ph,$$0105$ph,$$0113,$2));
      $$0114 = $133;
      break L4;
      break;
     }
     default: {
      $112 = HEAP32[$4>>2]|0;
      $113 = ($112|0)==(0|0);
      if (!($113)) {
       $114 = HEAP32[$3>>2]|0;
       $115 = ((($114)) + -1|0);
       HEAP32[$3>>2] = $115;
      }
      $116 = (___errno_location()|0);
      HEAP32[$116>>2] = 22;
      ___shlim($0,0);
      $$0114 = 0.0;
      break L4;
     }
     }
    }
    }
   } while(0);
   if ((label|0) == 23) {
    $44 = HEAP32[$4>>2]|0;
    $45 = ($44|0)==(0|0);
    if (!($45)) {
     $46 = HEAP32[$3>>2]|0;
     $47 = ((($46)) + -1|0);
     HEAP32[$3>>2] = $47;
    }
    $48 = ($2|0)!=(0);
    $49 = ($$0107$lcssa>>>0)>(3);
    $or$cond9 = $48 & $49;
    if ($or$cond9) {
     $$1108 = $$0107$lcssa;
     while(1) {
      if (!($45)) {
       $50 = HEAP32[$3>>2]|0;
       $51 = ((($50)) + -1|0);
       HEAP32[$3>>2] = $51;
      }
      $52 = (($$1108) + -1)|0;
      $$old8 = ($52>>>0)>(3);
      if ($$old8) {
       $$1108 = $52;
      } else {
       break;
      }
     }
    }
   }
   $53 = (+($$0113|0));
   $54 = $53 * inf;
   $55 = $54;
   $$0114 = $55;
  }
 } while(0);
 return (+$$0114);
}
function _hexfloat($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$0133 = 0, $$0142 = 0, $$0146 = 0, $$0148 = 0, $$0148$ = 0, $$0151 = 0.0, $$0152 = 0.0, $$0155 = 0.0, $$0155$ = 0.0, $$0159 = 0, $$0165 = 0.0, $$0166 = 0, $$0166169 = 0, $$0166170 = 0, $$1$ph = 0, $$1147 = 0, $$1149 = 0, $$1153 = 0.0, $$1156 = 0.0;
 var $$1160 = 0, $$2 = 0, $$2$lcssa = 0, $$2144 = 0, $$2150 = 0, $$2154 = 0.0, $$2157 = 0.0, $$2161 = 0, $$3145 = 0, $$3158$lcssa = 0.0, $$3158179 = 0.0, $$3162$lcssa = 0, $$3162183 = 0, $$4 = 0.0, $$4163$lcssa = 0, $$4163178 = 0, $$5 = 0.0, $$5164 = 0, $$6 = 0, $$pn = 0.0;
 var $$pre = 0.0, $$pre$phiZ2D = 0.0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0.0, $143 = 0.0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0.0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0.0, $197 = 0, $198 = 0.0, $199 = 0.0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0.0, $206 = 0.0;
 var $207 = 0.0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0, $212 = 0, $213 = 0.0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0.0;
 var $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0, $not$ = 0, $or$cond = 0, $or$cond168 = 0, $or$cond206 = 0, $or$cond4 = 0;
 var $or$cond6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 100|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($6>>>0)<($8>>>0);
 if ($9) {
  $10 = ((($6)) + 1|0);
  HEAP32[$5>>2] = $10;
  $11 = HEAP8[$6>>0]|0;
  $12 = $11&255;
  $$0 = $12;$$0142 = 0;
 } else {
  $13 = (___shgetc($0)|0);
  $$0 = $13;$$0142 = 0;
 }
 L4: while(1) {
  switch ($$0|0) {
  case 46:  {
   label = 8;
   break L4;
   break;
  }
  case 48:  {
   break;
  }
  default: {
   $$0146 = 0;$$0148 = 0;$$0152 = 1.0;$$0155 = 0.0;$$0159 = 0;$$2 = $$0;$$2144 = $$0142;$101 = 0;$53 = 0;$55 = 0;$99 = 0;
   break L4;
  }
  }
  $14 = HEAP32[$5>>2]|0;
  $15 = HEAP32[$7>>2]|0;
  $16 = ($14>>>0)<($15>>>0);
  if ($16) {
   $17 = ((($14)) + 1|0);
   HEAP32[$5>>2] = $17;
   $18 = HEAP8[$14>>0]|0;
   $19 = $18&255;
   $$0 = $19;$$0142 = 1;
   continue;
  } else {
   $20 = (___shgetc($0)|0);
   $$0 = $20;$$0142 = 1;
   continue;
  }
 }
 if ((label|0) == 8) {
  $21 = HEAP32[$5>>2]|0;
  $22 = HEAP32[$7>>2]|0;
  $23 = ($21>>>0)<($22>>>0);
  if ($23) {
   $24 = ((($21)) + 1|0);
   HEAP32[$5>>2] = $24;
   $25 = HEAP8[$21>>0]|0;
   $26 = $25&255;
   $$1$ph = $26;
  } else {
   $27 = (___shgetc($0)|0);
   $$1$ph = $27;
  }
  $28 = ($$1$ph|0)==(48);
  if ($28) {
   $36 = 0;$37 = 0;
   while(1) {
    $29 = HEAP32[$5>>2]|0;
    $30 = HEAP32[$7>>2]|0;
    $31 = ($29>>>0)<($30>>>0);
    if ($31) {
     $32 = ((($29)) + 1|0);
     HEAP32[$5>>2] = $32;
     $33 = HEAP8[$29>>0]|0;
     $34 = $33&255;
     $41 = $34;
    } else {
     $35 = (___shgetc($0)|0);
     $41 = $35;
    }
    $38 = (_i64Add(($36|0),($37|0),-1,-1)|0);
    $39 = tempRet0;
    $40 = ($41|0)==(48);
    if ($40) {
     $36 = $38;$37 = $39;
    } else {
     $$0146 = 1;$$0148 = 0;$$0152 = 1.0;$$0155 = 0.0;$$0159 = 0;$$2 = $41;$$2144 = 1;$101 = $39;$53 = 0;$55 = 0;$99 = $38;
     break;
    }
   }
  } else {
   $$0146 = 1;$$0148 = 0;$$0152 = 1.0;$$0155 = 0.0;$$0159 = 0;$$2 = $$1$ph;$$2144 = $$0142;$101 = 0;$53 = 0;$55 = 0;$99 = 0;
  }
 }
 while(1) {
  $42 = (($$2) + -48)|0;
  $43 = ($42>>>0)<(10);
  $44 = ($$2|0)==(46);
  if (!($43)) {
   $45 = $$2 | 32;
   $46 = (($45) + -97)|0;
   $47 = ($46>>>0)<(6);
   $or$cond6 = $44 | $47;
   if (!($or$cond6)) {
    $$2$lcssa = $$2;
    break;
   }
  }
  if ($44) {
   $48 = ($$0146|0)==(0);
   if ($48) {
    $$1147 = 1;$$2150 = $$0148;$$2154 = $$0152;$$2157 = $$0155;$$2161 = $$0159;$$3145 = $$2144;$214 = $55;$215 = $53;$216 = $55;$217 = $53;
   } else {
    $$2$lcssa = 46;
    break;
   }
  } else {
   $49 = ($$2|0)>(57);
   $50 = $$2 | 32;
   $51 = (($50) + -87)|0;
   $$0133 = $49 ? $51 : $42;
   $52 = ($53|0)<(0);
   $54 = ($55>>>0)<(8);
   $56 = ($53|0)==(0);
   $57 = $56 & $54;
   $58 = $52 | $57;
   do {
    if ($58) {
     $59 = $$0159 << 4;
     $60 = (($$0133) + ($59))|0;
     $$1149 = $$0148;$$1153 = $$0152;$$1156 = $$0155;$$1160 = $60;
    } else {
     $61 = ($53|0)<(0);
     $62 = ($55>>>0)<(14);
     $63 = ($53|0)==(0);
     $64 = $63 & $62;
     $65 = $61 | $64;
     if ($65) {
      $66 = (+($$0133|0));
      $67 = $$0152 * 0.0625;
      $68 = $67 * $66;
      $69 = $$0155 + $68;
      $$1149 = $$0148;$$1153 = $67;$$1156 = $69;$$1160 = $$0159;
      break;
     } else {
      $70 = ($$0133|0)==(0);
      $71 = ($$0148|0)!=(0);
      $or$cond = $71 | $70;
      $72 = $$0152 * 0.5;
      $73 = $$0155 + $72;
      $$0155$ = $or$cond ? $$0155 : $73;
      $$0148$ = $or$cond ? $$0148 : 1;
      $$1149 = $$0148$;$$1153 = $$0152;$$1156 = $$0155$;$$1160 = $$0159;
      break;
     }
    }
   } while(0);
   $74 = (_i64Add(($55|0),($53|0),1,0)|0);
   $75 = tempRet0;
   $$1147 = $$0146;$$2150 = $$1149;$$2154 = $$1153;$$2157 = $$1156;$$2161 = $$1160;$$3145 = 1;$214 = $99;$215 = $101;$216 = $74;$217 = $75;
  }
  $76 = HEAP32[$5>>2]|0;
  $77 = HEAP32[$7>>2]|0;
  $78 = ($76>>>0)<($77>>>0);
  if ($78) {
   $79 = ((($76)) + 1|0);
   HEAP32[$5>>2] = $79;
   $80 = HEAP8[$76>>0]|0;
   $81 = $80&255;
   $$0146 = $$1147;$$0148 = $$2150;$$0152 = $$2154;$$0155 = $$2157;$$0159 = $$2161;$$2 = $81;$$2144 = $$3145;$101 = $215;$53 = $217;$55 = $216;$99 = $214;
   continue;
  } else {
   $82 = (___shgetc($0)|0);
   $$0146 = $$1147;$$0148 = $$2150;$$0152 = $$2154;$$0155 = $$2157;$$0159 = $$2161;$$2 = $82;$$2144 = $$3145;$101 = $215;$53 = $217;$55 = $216;$99 = $214;
   continue;
  }
 }
 $83 = ($$2144|0)==(0);
 do {
  if ($83) {
   $84 = HEAP32[$7>>2]|0;
   $85 = ($84|0)!=(0|0);
   if ($85) {
    $86 = HEAP32[$5>>2]|0;
    $87 = ((($86)) + -1|0);
    HEAP32[$5>>2] = $87;
   }
   $88 = ($4|0)==(0);
   if ($88) {
    ___shlim($0,0);
   } else {
    if ($85) {
     $89 = HEAP32[$5>>2]|0;
     $90 = ((($89)) + -1|0);
     HEAP32[$5>>2] = $90;
    }
    $91 = ($$0146|0)==(0);
    $92 = ($84|0)==(0|0);
    $or$cond206 = $91 | $92;
    if (!($or$cond206)) {
     $93 = HEAP32[$5>>2]|0;
     $94 = ((($93)) + -1|0);
     HEAP32[$5>>2] = $94;
    }
   }
   $95 = (+($3|0));
   $96 = $95 * 0.0;
   $$0165 = $96;
  } else {
   $97 = ($$0146|0)==(0);
   $98 = $97 ? $55 : $99;
   $100 = $97 ? $53 : $101;
   $102 = ($53|0)<(0);
   $103 = ($55>>>0)<(8);
   $104 = ($53|0)==(0);
   $105 = $104 & $103;
   $106 = $102 | $105;
   if ($106) {
    $$3162183 = $$0159;$108 = $55;$109 = $53;
    while(1) {
     $107 = $$3162183 << 4;
     $110 = (_i64Add(($108|0),($109|0),1,0)|0);
     $111 = tempRet0;
     $112 = ($111|0)<(0);
     $113 = ($110>>>0)<(8);
     $114 = ($111|0)==(0);
     $115 = $114 & $113;
     $116 = $112 | $115;
     if ($116) {
      $$3162183 = $107;$108 = $110;$109 = $111;
     } else {
      $$3162$lcssa = $107;
      break;
     }
    }
   } else {
    $$3162$lcssa = $$0159;
   }
   $117 = $$2$lcssa | 32;
   $118 = ($117|0)==(112);
   if ($118) {
    $119 = (_scanexp($0,$4)|0);
    $120 = tempRet0;
    $121 = ($119|0)==(0);
    $122 = ($120|0)==(-2147483648);
    $123 = $121 & $122;
    if ($123) {
     $124 = ($4|0)==(0);
     if ($124) {
      ___shlim($0,0);
      $$0165 = 0.0;
      break;
     }
     $125 = HEAP32[$7>>2]|0;
     $126 = ($125|0)==(0|0);
     if ($126) {
      $137 = 0;$138 = 0;
     } else {
      $127 = HEAP32[$5>>2]|0;
      $128 = ((($127)) + -1|0);
      HEAP32[$5>>2] = $128;
      $137 = 0;$138 = 0;
     }
    } else {
     $137 = $119;$138 = $120;
    }
   } else {
    $129 = HEAP32[$7>>2]|0;
    $130 = ($129|0)==(0|0);
    if ($130) {
     $137 = 0;$138 = 0;
    } else {
     $131 = HEAP32[$5>>2]|0;
     $132 = ((($131)) + -1|0);
     HEAP32[$5>>2] = $132;
     $137 = 0;$138 = 0;
    }
   }
   $133 = (_bitshift64Shl(($98|0),($100|0),2)|0);
   $134 = tempRet0;
   $135 = (_i64Add(($133|0),($134|0),-32,-1)|0);
   $136 = tempRet0;
   $139 = (_i64Add(($135|0),($136|0),($137|0),($138|0))|0);
   $140 = tempRet0;
   $141 = ($$3162$lcssa|0)==(0);
   if ($141) {
    $142 = (+($3|0));
    $143 = $142 * 0.0;
    $$0165 = $143;
    break;
   }
   $144 = (0 - ($2))|0;
   $145 = ($144|0)<(0);
   $146 = $145 << 31 >> 31;
   $147 = ($140|0)>($146|0);
   $148 = ($139>>>0)>($144>>>0);
   $149 = ($140|0)==($146|0);
   $150 = $149 & $148;
   $151 = $147 | $150;
   if ($151) {
    $152 = (___errno_location()|0);
    HEAP32[$152>>2] = 34;
    $153 = (+($3|0));
    $154 = $153 * 1.7976931348623157E+308;
    $155 = $154 * 1.7976931348623157E+308;
    $$0165 = $155;
    break;
   }
   $156 = (($2) + -106)|0;
   $157 = ($156|0)<(0);
   $158 = $157 << 31 >> 31;
   $159 = ($140|0)<($158|0);
   $160 = ($139>>>0)<($156>>>0);
   $161 = ($140|0)==($158|0);
   $162 = $161 & $160;
   $163 = $159 | $162;
   if ($163) {
    $165 = (___errno_location()|0);
    HEAP32[$165>>2] = 34;
    $166 = (+($3|0));
    $167 = $166 * 2.2250738585072014E-308;
    $168 = $167 * 2.2250738585072014E-308;
    $$0165 = $168;
    break;
   }
   $164 = ($$3162$lcssa|0)>(-1);
   if ($164) {
    $$3158179 = $$0155;$$4163178 = $$3162$lcssa;$173 = $139;$174 = $140;
    while(1) {
     $169 = !($$3158179 >= 0.5);
     $170 = $$4163178 << 1;
     $171 = $$3158179 + -1.0;
     $not$ = $169 ^ 1;
     $172 = $not$&1;
     $$5164 = $170 | $172;
     $$pn = $169 ? $$3158179 : $171;
     $$4 = $$3158179 + $$pn;
     $175 = (_i64Add(($173|0),($174|0),-1,-1)|0);
     $176 = tempRet0;
     $177 = ($$5164|0)>(-1);
     if ($177) {
      $$3158179 = $$4;$$4163178 = $$5164;$173 = $175;$174 = $176;
     } else {
      $$3158$lcssa = $$4;$$4163$lcssa = $$5164;$184 = $175;$185 = $176;
      break;
     }
    }
   } else {
    $$3158$lcssa = $$0155;$$4163$lcssa = $$3162$lcssa;$184 = $139;$185 = $140;
   }
   $178 = ($1|0)<(0);
   $179 = $178 << 31 >> 31;
   $180 = ($2|0)<(0);
   $181 = $180 << 31 >> 31;
   $182 = (_i64Subtract(32,0,($2|0),($181|0))|0);
   $183 = tempRet0;
   $186 = (_i64Add(($182|0),($183|0),($184|0),($185|0))|0);
   $187 = tempRet0;
   $188 = ($179|0)>($187|0);
   $189 = ($1>>>0)>($186>>>0);
   $190 = ($179|0)==($187|0);
   $191 = $190 & $189;
   $192 = $188 | $191;
   if ($192) {
    $193 = ($186|0)>(0);
    if ($193) {
     $$0166 = $186;
     label = 59;
    } else {
     $$0166170 = 0;$197 = 84;
     label = 61;
    }
   } else {
    $$0166 = $1;
    label = 59;
   }
   if ((label|0) == 59) {
    $194 = ($$0166|0)<(53);
    $195 = (84 - ($$0166))|0;
    if ($194) {
     $$0166170 = $$0166;$197 = $195;
     label = 61;
    } else {
     $$pre = (+($3|0));
     $$0151 = 0.0;$$0166169 = $$0166;$$pre$phiZ2D = $$pre;
    }
   }
   if ((label|0) == 61) {
    $196 = (+($3|0));
    $198 = (+_scalbn(1.0,$197));
    $199 = (+_copysignl($198,$196));
    $$0151 = $199;$$0166169 = $$0166170;$$pre$phiZ2D = $196;
   }
   $200 = ($$0166169|0)<(32);
   $201 = $$3158$lcssa != 0.0;
   $or$cond4 = $201 & $200;
   $202 = $$4163$lcssa & 1;
   $203 = ($202|0)==(0);
   $or$cond168 = $203 & $or$cond4;
   $204 = $or$cond168&1;
   $$6 = (($204) + ($$4163$lcssa))|0;
   $$5 = $or$cond168 ? 0.0 : $$3158$lcssa;
   $205 = (+($$6>>>0));
   $206 = $$pre$phiZ2D * $205;
   $207 = $$0151 + $206;
   $208 = $$pre$phiZ2D * $$5;
   $209 = $208 + $207;
   $210 = $209 - $$0151;
   $211 = $210 != 0.0;
   if (!($211)) {
    $212 = (___errno_location()|0);
    HEAP32[$212>>2] = 34;
   }
   $213 = (+_scalbnl($210,$184));
   $$0165 = $213;
  }
 } while(0);
 return (+$$0165);
}
function _decfloat($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$ = 0, $$$0345 = 0, $$$0350 = 0, $$$0385 = 0, $$$0401 = 0, $$$5355 = 0, $$$5390 = 0, $$0329 = 0, $$0332490 = 0, $$0333 = 0, $$0334 = 0, $$0336486 = 0, $$0340496 = 0, $$0341$lcssa = 0, $$0341463 = 0, $$0341464 = 0, $$0341465 = 0, $$0341513 = 0, $$0345$lcssa = 0, $$0345467 = 0;
 var $$0345468 = 0, $$0345469 = 0, $$0345512 = 0, $$0350$lcssa554 = 0, $$0350494 = 0, $$0360 = 0.0, $$0361 = 0.0, $$0365484 = 0.0, $$0372 = 0, $$0380 = 0, $$0380$ph = 0, $$0385$lcssa553 = 0, $$0385493 = 0, $$0393 = 0, $$0396 = 0, $$0401$lcssa = 0, $$0401473 = 0, $$0401474 = 0, $$0401475 = 0, $$0401509 = 0;
 var $$1 = 0.0, $$10 = 0, $$1330$be = 0, $$1330$ph = 0, $$1335 = 0, $$1337 = 0, $$1362 = 0.0, $$1366 = 0.0, $$1373 = 0, $$1373$ph448 = 0, $$1381 = 0, $$1381$ph = 0, $$1381$ph558 = 0, $$1394$lcssa = 0, $$1394511 = 0, $$2 = 0, $$2343 = 0, $$2347 = 0, $$2352$ph449 = 0, $$2367 = 0.0;
 var $$2371$v = 0, $$2374 = 0, $$2387$ph447 = 0, $$2395 = 0, $$2398 = 0, $$2403 = 0, $$3$be = 0, $$3$lcssa = 0, $$3344503 = 0, $$3348 = 0, $$3364 = 0.0, $$3368 = 0.0, $$3375 = 0, $$3383 = 0, $$3399$lcssa = 0, $$3399510 = 0, $$3514 = 0, $$413 = 0, $$425 = 0, $$4349495 = 0;
 var $$4354 = 0, $$4354$ph = 0, $$4354$ph559 = 0, $$4376 = 0, $$4384 = 0, $$4389$ph = 0, $$4389$ph445 = 0, $$4400 = 0, $$4485 = 0, $$5 = 0, $$5$in = 0, $$5355488 = 0, $$5390487 = 0, $$6378$ph = 0, $$6489 = 0, $$9483 = 0, $$neg442 = 0, $$neg443 = 0, $$pre = 0, $$promoted = 0;
 var $$sink = 0, $$sink421$off0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0.0, $133 = 0.0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0, $166 = 0, $167 = 0, $168 = 0.0, $169 = 0.0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0.0, $304 = 0, $305 = 0, $306 = 0.0, $307 = 0.0, $308 = 0, $309 = 0.0, $31 = 0, $310 = 0.0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0.0, $318 = 0.0, $319 = 0, $32 = 0, $320 = 0.0, $321 = 0.0, $322 = 0.0, $323 = 0.0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0.0, $335 = 0.0, $336 = 0, $337 = 0.0, $338 = 0.0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0.0, $343 = 0.0, $344 = 0.0, $345 = 0.0, $346 = 0, $347 = 0, $348 = 0.0, $349 = 0, $35 = 0, $350 = 0.0, $351 = 0.0;
 var $352 = 0.0, $353 = 0, $354 = 0, $355 = 0, $356 = 0.0, $357 = 0, $358 = 0.0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0.0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $39 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $cond = 0, $exitcond = 0, $exitcond551 = 0, $narrow = 0, $not$ = 0, $or$cond = 0, $or$cond11 = 0, $or$cond14 = 0, $or$cond415 = 0, $or$cond417 = 0, $or$cond419 = 0, $or$cond420 = 0, $or$cond422 = 0, $or$cond422$not = 0, $or$cond423 = 0, $or$cond426 = 0, $or$cond5 = 0, $sum = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(512|0);
 $6 = sp;
 $sum = (($3) + ($2))|0;
 $7 = (0 - ($sum))|0;
 $8 = ((($0)) + 4|0);
 $9 = ((($0)) + 100|0);
 $$0329 = $1;$$0396 = 0;
 L1: while(1) {
  switch ($$0329|0) {
  case 46:  {
   label = 6;
   break L1;
   break;
  }
  case 48:  {
   break;
  }
  default: {
   $$0393 = 0;$$2 = $$0329;$$2398 = $$0396;$366 = 0;$367 = 0;
   break L1;
  }
  }
  $10 = HEAP32[$8>>2]|0;
  $11 = HEAP32[$9>>2]|0;
  $12 = ($10>>>0)<($11>>>0);
  if ($12) {
   $13 = ((($10)) + 1|0);
   HEAP32[$8>>2] = $13;
   $14 = HEAP8[$10>>0]|0;
   $15 = $14&255;
   $$0329 = $15;$$0396 = 1;
   continue;
  } else {
   $16 = (___shgetc($0)|0);
   $$0329 = $16;$$0396 = 1;
   continue;
  }
 }
 if ((label|0) == 6) {
  $17 = HEAP32[$8>>2]|0;
  $18 = HEAP32[$9>>2]|0;
  $19 = ($17>>>0)<($18>>>0);
  if ($19) {
   $20 = ((($17)) + 1|0);
   HEAP32[$8>>2] = $20;
   $21 = HEAP8[$17>>0]|0;
   $22 = $21&255;
   $$1330$ph = $22;
  } else {
   $23 = (___shgetc($0)|0);
   $$1330$ph = $23;
  }
  $24 = ($$1330$ph|0)==(48);
  if ($24) {
   $25 = 0;$26 = 0;
   while(1) {
    $27 = (_i64Add(($25|0),($26|0),-1,-1)|0);
    $28 = tempRet0;
    $29 = HEAP32[$8>>2]|0;
    $30 = HEAP32[$9>>2]|0;
    $31 = ($29>>>0)<($30>>>0);
    if ($31) {
     $32 = ((($29)) + 1|0);
     HEAP32[$8>>2] = $32;
     $33 = HEAP8[$29>>0]|0;
     $34 = $33&255;
     $$1330$be = $34;
    } else {
     $35 = (___shgetc($0)|0);
     $$1330$be = $35;
    }
    $36 = ($$1330$be|0)==(48);
    if ($36) {
     $25 = $27;$26 = $28;
    } else {
     $$0393 = 1;$$2 = $$1330$be;$$2398 = 1;$366 = $27;$367 = $28;
     break;
    }
   }
  } else {
   $$0393 = 1;$$2 = $$1330$ph;$$2398 = $$0396;$366 = 0;$367 = 0;
  }
 }
 HEAP32[$6>>2] = 0;
 $37 = (($$2) + -48)|0;
 $38 = ($37>>>0)<(10);
 $39 = ($$2|0)==(46);
 $40 = $39 | $38;
 L20: do {
  if ($40) {
   $41 = ((($6)) + 496|0);
   $$0341513 = 0;$$0345512 = 0;$$0401509 = 0;$$1394511 = $$0393;$$3399510 = $$2398;$$3514 = $$2;$368 = $39;$369 = $37;$370 = $366;$371 = $367;$44 = 0;$45 = 0;
   L22: while(1) {
    do {
     if ($368) {
      $cond = ($$1394511|0)==(0);
      if ($cond) {
       $$2343 = $$0341513;$$2347 = $$0345512;$$2395 = 1;$$2403 = $$0401509;$$4400 = $$3399510;$372 = $44;$373 = $45;$374 = $44;$375 = $45;
      } else {
       break L22;
      }
     } else {
      $43 = ($$0345512|0)<(125);
      $46 = (_i64Add(($44|0),($45|0),1,0)|0);
      $47 = tempRet0;
      $48 = ($$3514|0)!=(48);
      if (!($43)) {
       if (!($48)) {
        $$2343 = $$0341513;$$2347 = $$0345512;$$2395 = $$1394511;$$2403 = $$0401509;$$4400 = $$3399510;$372 = $370;$373 = $371;$374 = $46;$375 = $47;
        break;
       }
       $57 = HEAP32[$41>>2]|0;
       $58 = $57 | 1;
       HEAP32[$41>>2] = $58;
       $$2343 = $$0341513;$$2347 = $$0345512;$$2395 = $$1394511;$$2403 = $$0401509;$$4400 = $$3399510;$372 = $370;$373 = $371;$374 = $46;$375 = $47;
       break;
      }
      $$$0401 = $48 ? $46 : $$0401509;
      $49 = ($$0341513|0)==(0);
      $$pre = (($6) + ($$0345512<<2)|0);
      if ($49) {
       $$sink = $369;
      } else {
       $50 = HEAP32[$$pre>>2]|0;
       $51 = ($50*10)|0;
       $52 = (($$3514) + -48)|0;
       $53 = (($52) + ($51))|0;
       $$sink = $53;
      }
      HEAP32[$$pre>>2] = $$sink;
      $54 = (($$0341513) + 1)|0;
      $55 = ($54|0)==(9);
      $56 = $55&1;
      $$$0345 = (($56) + ($$0345512))|0;
      $$413 = $55 ? 0 : $54;
      $$2343 = $$413;$$2347 = $$$0345;$$2395 = $$1394511;$$2403 = $$$0401;$$4400 = 1;$372 = $370;$373 = $371;$374 = $46;$375 = $47;
     }
    } while(0);
    $59 = HEAP32[$8>>2]|0;
    $60 = HEAP32[$9>>2]|0;
    $61 = ($59>>>0)<($60>>>0);
    if ($61) {
     $62 = ((($59)) + 1|0);
     HEAP32[$8>>2] = $62;
     $63 = HEAP8[$59>>0]|0;
     $64 = $63&255;
     $$3$be = $64;
    } else {
     $65 = (___shgetc($0)|0);
     $$3$be = $65;
    }
    $66 = (($$3$be) + -48)|0;
    $67 = ($66>>>0)<(10);
    $68 = ($$3$be|0)==(46);
    $69 = $68 | $67;
    if ($69) {
     $$0341513 = $$2343;$$0345512 = $$2347;$$0401509 = $$2403;$$1394511 = $$2395;$$3399510 = $$4400;$$3514 = $$3$be;$368 = $68;$369 = $66;$370 = $372;$371 = $373;$44 = $374;$45 = $375;
    } else {
     $$0341$lcssa = $$2343;$$0345$lcssa = $$2347;$$0401$lcssa = $$2403;$$1394$lcssa = $$2395;$$3$lcssa = $$3$be;$$3399$lcssa = $$4400;$72 = $372;$73 = $374;$75 = $373;$76 = $375;
     label = 29;
     break L20;
    }
   }
   $42 = ($$3399510|0)!=(0);
   $$0341465 = $$0341513;$$0345469 = $$0345512;$$0401475 = $$0401509;$376 = $44;$377 = $45;$378 = $370;$379 = $371;$380 = $42;
   label = 37;
  } else {
   $$0341$lcssa = 0;$$0345$lcssa = 0;$$0401$lcssa = 0;$$1394$lcssa = $$0393;$$3$lcssa = $$2;$$3399$lcssa = $$2398;$72 = $366;$73 = 0;$75 = $367;$76 = 0;
   label = 29;
  }
 } while(0);
 do {
  if ((label|0) == 29) {
   $70 = ($$1394$lcssa|0)==(0);
   $71 = $70 ? $73 : $72;
   $74 = $70 ? $76 : $75;
   $77 = ($$3399$lcssa|0)!=(0);
   $78 = $$3$lcssa | 32;
   $79 = ($78|0)==(101);
   $or$cond415 = $77 & $79;
   if (!($or$cond415)) {
    $94 = ($$3$lcssa|0)>(-1);
    if ($94) {
     $$0341465 = $$0341$lcssa;$$0345469 = $$0345$lcssa;$$0401475 = $$0401$lcssa;$376 = $73;$377 = $76;$378 = $71;$379 = $74;$380 = $77;
     label = 37;
     break;
    } else {
     $$0341464 = $$0341$lcssa;$$0345468 = $$0345$lcssa;$$0401474 = $$0401$lcssa;$381 = $73;$382 = $76;$383 = $77;$384 = $71;$385 = $74;
     label = 39;
     break;
    }
   }
   $80 = (_scanexp($0,$5)|0);
   $81 = tempRet0;
   $82 = ($80|0)==(0);
   $83 = ($81|0)==(-2147483648);
   $84 = $82 & $83;
   if ($84) {
    $85 = ($5|0)==(0);
    if ($85) {
     ___shlim($0,0);
     $$1 = 0.0;
     break;
    }
    $86 = HEAP32[$9>>2]|0;
    $87 = ($86|0)==(0|0);
    if ($87) {
     $90 = 0;$91 = 0;
    } else {
     $88 = HEAP32[$8>>2]|0;
     $89 = ((($88)) + -1|0);
     HEAP32[$8>>2] = $89;
     $90 = 0;$91 = 0;
    }
   } else {
    $90 = $80;$91 = $81;
   }
   $92 = (_i64Add(($90|0),($91|0),($71|0),($74|0))|0);
   $93 = tempRet0;
   $$0341463 = $$0341$lcssa;$$0345467 = $$0345$lcssa;$$0401473 = $$0401$lcssa;$105 = $92;$106 = $73;$108 = $93;$109 = $76;
   label = 41;
  }
 } while(0);
 if ((label|0) == 37) {
  $95 = HEAP32[$9>>2]|0;
  $96 = ($95|0)==(0|0);
  if ($96) {
   $$0341464 = $$0341465;$$0345468 = $$0345469;$$0401474 = $$0401475;$381 = $376;$382 = $377;$383 = $380;$384 = $378;$385 = $379;
   label = 39;
  } else {
   $97 = HEAP32[$8>>2]|0;
   $98 = ((($97)) + -1|0);
   HEAP32[$8>>2] = $98;
   if ($380) {
    $$0341463 = $$0341465;$$0345467 = $$0345469;$$0401473 = $$0401475;$105 = $378;$106 = $376;$108 = $379;$109 = $377;
    label = 41;
   } else {
    label = 40;
   }
  }
 }
 if ((label|0) == 39) {
  if ($383) {
   $$0341463 = $$0341464;$$0345467 = $$0345468;$$0401473 = $$0401474;$105 = $384;$106 = $381;$108 = $385;$109 = $382;
   label = 41;
  } else {
   label = 40;
  }
 }
 do {
  if ((label|0) == 40) {
   $99 = (___errno_location()|0);
   HEAP32[$99>>2] = 22;
   ___shlim($0,0);
   $$1 = 0.0;
  }
  else if ((label|0) == 41) {
   $100 = HEAP32[$6>>2]|0;
   $101 = ($100|0)==(0);
   if ($101) {
    $102 = (+($4|0));
    $103 = $102 * 0.0;
    $$1 = $103;
    break;
   }
   $104 = ($105|0)==($106|0);
   $107 = ($108|0)==($109|0);
   $110 = $104 & $107;
   $111 = ($109|0)<(0);
   $112 = ($106>>>0)<(10);
   $113 = ($109|0)==(0);
   $114 = $113 & $112;
   $115 = $111 | $114;
   $or$cond = $115 & $110;
   if ($or$cond) {
    $116 = ($2|0)>(30);
    $117 = $100 >>> $2;
    $118 = ($117|0)==(0);
    $or$cond417 = $116 | $118;
    if ($or$cond417) {
     $119 = (+($4|0));
     $120 = (+($100>>>0));
     $121 = $119 * $120;
     $$1 = $121;
     break;
    }
   }
   $122 = (($3|0) / -2)&-1;
   $123 = ($122|0)<(0);
   $124 = $123 << 31 >> 31;
   $125 = ($108|0)>($124|0);
   $126 = ($105>>>0)>($122>>>0);
   $127 = ($108|0)==($124|0);
   $128 = $127 & $126;
   $129 = $125 | $128;
   if ($129) {
    $130 = (___errno_location()|0);
    HEAP32[$130>>2] = 34;
    $131 = (+($4|0));
    $132 = $131 * 1.7976931348623157E+308;
    $133 = $132 * 1.7976931348623157E+308;
    $$1 = $133;
    break;
   }
   $134 = (($3) + -106)|0;
   $135 = ($134|0)<(0);
   $136 = $135 << 31 >> 31;
   $137 = ($108|0)<($136|0);
   $138 = ($105>>>0)<($134>>>0);
   $139 = ($108|0)==($136|0);
   $140 = $139 & $138;
   $141 = $137 | $140;
   if ($141) {
    $142 = (___errno_location()|0);
    HEAP32[$142>>2] = 34;
    $143 = (+($4|0));
    $144 = $143 * 2.2250738585072014E-308;
    $145 = $144 * 2.2250738585072014E-308;
    $$1 = $145;
    break;
   }
   $146 = ($$0341463|0)==(0);
   if ($146) {
    $$3348 = $$0345467;
   } else {
    $147 = ($$0341463|0)<(9);
    if ($147) {
     $148 = (($6) + ($$0345467<<2)|0);
     $$promoted = HEAP32[$148>>2]|0;
     $$3344503 = $$0341463;$150 = $$promoted;
     while(1) {
      $149 = ($150*10)|0;
      $151 = (($$3344503) + 1)|0;
      $exitcond551 = ($151|0)==(9);
      if ($exitcond551) {
       break;
      } else {
       $$3344503 = $151;$150 = $149;
      }
     }
     HEAP32[$148>>2] = $149;
    }
    $152 = (($$0345467) + 1)|0;
    $$3348 = $152;
   }
   $153 = ($$0401473|0)<(9);
   if ($153) {
    $154 = ($$0401473|0)<=($105|0);
    $155 = ($105|0)<(18);
    $or$cond5 = $154 & $155;
    if ($or$cond5) {
     $156 = ($105|0)==(9);
     $157 = HEAP32[$6>>2]|0;
     if ($156) {
      $158 = (+($4|0));
      $159 = (+($157>>>0));
      $160 = $158 * $159;
      $$1 = $160;
      break;
     }
     $161 = ($105|0)<(9);
     if ($161) {
      $162 = (+($4|0));
      $163 = (+($157>>>0));
      $164 = $162 * $163;
      $165 = (8 - ($105))|0;
      $166 = (1612 + ($165<<2)|0);
      $167 = HEAP32[$166>>2]|0;
      $168 = (+($167|0));
      $169 = $164 / $168;
      $$1 = $169;
      break;
     }
     $$neg442 = Math_imul($105, -3)|0;
     $$neg443 = (($2) + 27)|0;
     $170 = (($$neg443) + ($$neg442))|0;
     $171 = ($170|0)>(30);
     $172 = $157 >>> $170;
     $173 = ($172|0)==(0);
     $or$cond419 = $171 | $173;
     if ($or$cond419) {
      $174 = (($105) + -10)|0;
      $175 = (1612 + ($174<<2)|0);
      $176 = (+($4|0));
      $177 = (+($157>>>0));
      $178 = $176 * $177;
      $179 = HEAP32[$175>>2]|0;
      $180 = (+($179|0));
      $181 = $178 * $180;
      $$1 = $181;
      break;
     }
    }
   }
   $182 = (($105|0) % 9)&-1;
   $183 = ($182|0)==(0);
   if ($183) {
    $$0380$ph = 0;$$1373$ph448 = $$3348;$$2352$ph449 = 0;$$2387$ph447 = $105;
   } else {
    $184 = ($105|0)>(-1);
    $185 = (($182) + 9)|0;
    $186 = $184 ? $182 : $185;
    $187 = (8 - ($186))|0;
    $188 = (1612 + ($187<<2)|0);
    $189 = HEAP32[$188>>2]|0;
    $190 = ($$3348|0)==(0);
    if ($190) {
     $$0350$lcssa554 = 0;$$0372 = 0;$$0385$lcssa553 = $105;
    } else {
     $191 = (1000000000 / ($189|0))&-1;
     $$0340496 = 0;$$0350494 = 0;$$0385493 = $105;$$4349495 = 0;
     while(1) {
      $192 = (($6) + ($$4349495<<2)|0);
      $193 = HEAP32[$192>>2]|0;
      $194 = (($193>>>0) % ($189>>>0))&-1;
      $195 = (($193>>>0) / ($189>>>0))&-1;
      $196 = (($195) + ($$0340496))|0;
      HEAP32[$192>>2] = $196;
      $197 = Math_imul($191, $194)|0;
      $198 = ($$4349495|0)==($$0350494|0);
      $199 = ($196|0)==(0);
      $or$cond420 = $198 & $199;
      $200 = (($$0350494) + 1)|0;
      $201 = $200 & 127;
      $202 = (($$0385493) + -9)|0;
      $$$0385 = $or$cond420 ? $202 : $$0385493;
      $$$0350 = $or$cond420 ? $201 : $$0350494;
      $203 = (($$4349495) + 1)|0;
      $204 = ($203|0)==($$3348|0);
      if ($204) {
       break;
      } else {
       $$0340496 = $197;$$0350494 = $$$0350;$$0385493 = $$$0385;$$4349495 = $203;
      }
     }
     $205 = ($197|0)==(0);
     if ($205) {
      $$0350$lcssa554 = $$$0350;$$0372 = $$3348;$$0385$lcssa553 = $$$0385;
     } else {
      $206 = (($6) + ($$3348<<2)|0);
      $207 = (($$3348) + 1)|0;
      HEAP32[$206>>2] = $197;
      $$0350$lcssa554 = $$$0350;$$0372 = $207;$$0385$lcssa553 = $$$0385;
     }
    }
    $208 = (9 - ($186))|0;
    $209 = (($208) + ($$0385$lcssa553))|0;
    $$0380$ph = 0;$$1373$ph448 = $$0372;$$2352$ph449 = $$0350$lcssa554;$$2387$ph447 = $209;
   }
   L101: while(1) {
    $210 = ($$2387$ph447|0)<(18);
    $211 = ($$2387$ph447|0)==(18);
    $212 = (($6) + ($$2352$ph449<<2)|0);
    $$0380 = $$0380$ph;$$1373 = $$1373$ph448;
    while(1) {
     if (!($210)) {
      if (!($211)) {
       $$1381$ph = $$0380;$$4354$ph = $$2352$ph449;$$4389$ph445 = $$2387$ph447;$$6378$ph = $$1373;
       break L101;
      }
      $213 = HEAP32[$212>>2]|0;
      $214 = ($213>>>0)<(9007199);
      if (!($214)) {
       $$1381$ph = $$0380;$$4354$ph = $$2352$ph449;$$4389$ph445 = 18;$$6378$ph = $$1373;
       break L101;
      }
     }
     $215 = (($$1373) + 127)|0;
     $$0334 = 0;$$2374 = $$1373;$$5$in = $215;
     while(1) {
      $$5 = $$5$in & 127;
      $216 = (($6) + ($$5<<2)|0);
      $217 = HEAP32[$216>>2]|0;
      $218 = (_bitshift64Shl(($217|0),0,29)|0);
      $219 = tempRet0;
      $220 = (_i64Add(($218|0),($219|0),($$0334|0),0)|0);
      $221 = tempRet0;
      $222 = ($221>>>0)>(0);
      $223 = ($220>>>0)>(1000000000);
      $224 = ($221|0)==(0);
      $225 = $224 & $223;
      $226 = $222 | $225;
      if ($226) {
       $227 = (___udivdi3(($220|0),($221|0),1000000000,0)|0);
       $228 = tempRet0;
       $229 = (___uremdi3(($220|0),($221|0),1000000000,0)|0);
       $230 = tempRet0;
       $$1335 = $227;$$sink421$off0 = $229;
      } else {
       $$1335 = 0;$$sink421$off0 = $220;
      }
      HEAP32[$216>>2] = $$sink421$off0;
      $231 = (($$2374) + 127)|0;
      $232 = $231 & 127;
      $233 = ($$5|0)!=($232|0);
      $234 = ($$5|0)==($$2352$ph449|0);
      $or$cond422 = $233 | $234;
      $or$cond422$not = $or$cond422 ^ 1;
      $235 = ($$sink421$off0|0)==(0);
      $or$cond423 = $235 & $or$cond422$not;
      $$3375 = $or$cond423 ? $$5 : $$2374;
      $236 = (($$5) + -1)|0;
      if ($234) {
       break;
      } else {
       $$0334 = $$1335;$$2374 = $$3375;$$5$in = $236;
      }
     }
     $237 = (($$0380) + -29)|0;
     $238 = ($$1335|0)==(0);
     if ($238) {
      $$0380 = $237;$$1373 = $$3375;
     } else {
      break;
     }
    }
    $239 = (($$2387$ph447) + 9)|0;
    $240 = (($$2352$ph449) + 127)|0;
    $241 = $240 & 127;
    $242 = ($241|0)==($$3375|0);
    $243 = (($$3375) + 127)|0;
    $244 = $243 & 127;
    $245 = (($$3375) + 126)|0;
    $246 = $245 & 127;
    $247 = (($6) + ($246<<2)|0);
    if ($242) {
     $248 = (($6) + ($244<<2)|0);
     $249 = HEAP32[$248>>2]|0;
     $250 = HEAP32[$247>>2]|0;
     $251 = $250 | $249;
     HEAP32[$247>>2] = $251;
     $$4376 = $244;
    } else {
     $$4376 = $$3375;
    }
    $252 = (($6) + ($241<<2)|0);
    HEAP32[$252>>2] = $$1335;
    $$0380$ph = $237;$$1373$ph448 = $$4376;$$2352$ph449 = $241;$$2387$ph447 = $239;
   }
   L119: while(1) {
    $289 = (($$6378$ph) + 1)|0;
    $287 = $289 & 127;
    $290 = (($$6378$ph) + 127)|0;
    $291 = $290 & 127;
    $292 = (($6) + ($291<<2)|0);
    $$1381$ph558 = $$1381$ph;$$4354$ph559 = $$4354$ph;$$4389$ph = $$4389$ph445;
    while(1) {
     $265 = ($$4389$ph|0)==(18);
     $293 = ($$4389$ph|0)>(27);
     $$425 = $293 ? 9 : 1;
     $$1381 = $$1381$ph558;$$4354 = $$4354$ph559;
     while(1) {
      $$0336486 = 0;
      while(1) {
       $253 = (($$0336486) + ($$4354))|0;
       $254 = $253 & 127;
       $255 = ($254|0)==($$6378$ph|0);
       if ($255) {
        $$1337 = 2;
        label = 88;
        break;
       }
       $256 = (($6) + ($254<<2)|0);
       $257 = HEAP32[$256>>2]|0;
       $258 = (1644 + ($$0336486<<2)|0);
       $259 = HEAP32[$258>>2]|0;
       $260 = ($257>>>0)<($259>>>0);
       if ($260) {
        $$1337 = 2;
        label = 88;
        break;
       }
       $261 = ($257>>>0)>($259>>>0);
       if ($261) {
        break;
       }
       $262 = (($$0336486) + 1)|0;
       $263 = ($262|0)<(2);
       if ($263) {
        $$0336486 = $262;
       } else {
        $$1337 = $262;
        label = 88;
        break;
       }
      }
      if ((label|0) == 88) {
       label = 0;
       $264 = ($$1337|0)==(2);
       $or$cond11 = $265 & $264;
       if ($or$cond11) {
        $$0365484 = 0.0;$$4485 = 0;$$9483 = $$6378$ph;
        break L119;
       }
      }
      $266 = (($$425) + ($$1381))|0;
      $267 = ($$4354|0)==($$6378$ph|0);
      if ($267) {
       $$1381 = $266;$$4354 = $$6378$ph;
      } else {
       break;
      }
     }
     $268 = 1 << $$425;
     $269 = (($268) + -1)|0;
     $270 = 1000000000 >>> $$425;
     $$0332490 = 0;$$5355488 = $$4354;$$5390487 = $$4389$ph;$$6489 = $$4354;
     while(1) {
      $271 = (($6) + ($$6489<<2)|0);
      $272 = HEAP32[$271>>2]|0;
      $273 = $272 & $269;
      $274 = $272 >>> $$425;
      $275 = (($274) + ($$0332490))|0;
      HEAP32[$271>>2] = $275;
      $276 = Math_imul($273, $270)|0;
      $277 = ($$6489|0)==($$5355488|0);
      $278 = ($275|0)==(0);
      $or$cond426 = $277 & $278;
      $279 = (($$5355488) + 1)|0;
      $280 = $279 & 127;
      $281 = (($$5390487) + -9)|0;
      $$$5390 = $or$cond426 ? $281 : $$5390487;
      $$$5355 = $or$cond426 ? $280 : $$5355488;
      $282 = (($$6489) + 1)|0;
      $283 = $282 & 127;
      $284 = ($283|0)==($$6378$ph|0);
      if ($284) {
       break;
      } else {
       $$0332490 = $276;$$5355488 = $$$5355;$$5390487 = $$$5390;$$6489 = $283;
      }
     }
     $285 = ($276|0)==(0);
     if ($285) {
      $$1381$ph558 = $266;$$4354$ph559 = $$$5355;$$4389$ph = $$$5390;
      continue;
     }
     $286 = ($287|0)==($$$5355|0);
     if (!($286)) {
      break;
     }
     $294 = HEAP32[$292>>2]|0;
     $295 = $294 | 1;
     HEAP32[$292>>2] = $295;
     $$1381$ph558 = $266;$$4354$ph559 = $$$5355;$$4389$ph = $$$5390;
    }
    $288 = (($6) + ($$6378$ph<<2)|0);
    HEAP32[$288>>2] = $276;
    $$1381$ph = $266;$$4354$ph = $$$5355;$$4389$ph445 = $$$5390;$$6378$ph = $287;
   }
   while(1) {
    $296 = (($$4485) + ($$4354))|0;
    $297 = $296 & 127;
    $298 = ($297|0)==($$9483|0);
    $299 = (($$9483) + 1)|0;
    $300 = $299 & 127;
    if ($298) {
     $301 = (($300) + -1)|0;
     $302 = (($6) + ($301<<2)|0);
     HEAP32[$302>>2] = 0;
     $$10 = $300;
    } else {
     $$10 = $$9483;
    }
    $303 = $$0365484 * 1.0E+9;
    $304 = (($6) + ($297<<2)|0);
    $305 = HEAP32[$304>>2]|0;
    $306 = (+($305>>>0));
    $307 = $303 + $306;
    $308 = (($$4485) + 1)|0;
    $exitcond = ($308|0)==(2);
    if ($exitcond) {
     break;
    } else {
     $$0365484 = $307;$$4485 = $308;$$9483 = $$10;
    }
   }
   $309 = (+($4|0));
   $310 = $309 * $307;
   $311 = (($$1381) + 53)|0;
   $312 = (($311) - ($3))|0;
   $313 = ($312|0)<($2|0);
   $314 = ($312|0)>(0);
   $$ = $314 ? $312 : 0;
   $$0333 = $313 ? $$ : $2;
   $315 = ($$0333|0)<(53);
   if ($315) {
    $316 = (105 - ($$0333))|0;
    $317 = (+_scalbn(1.0,$316));
    $318 = (+_copysignl($317,$310));
    $319 = (53 - ($$0333))|0;
    $320 = (+_scalbn(1.0,$319));
    $321 = (+_fmodl($310,$320));
    $322 = $310 - $321;
    $323 = $318 + $322;
    $$0360 = $318;$$0361 = $321;$$1366 = $323;
   } else {
    $$0360 = 0.0;$$0361 = 0.0;$$1366 = $310;
   }
   $324 = (($$4354) + 2)|0;
   $325 = $324 & 127;
   $326 = ($325|0)==($$10|0);
   if ($326) {
    $$3364 = $$0361;
   } else {
    $327 = (($6) + ($325<<2)|0);
    $328 = HEAP32[$327>>2]|0;
    $329 = ($328>>>0)<(500000000);
    do {
     if ($329) {
      $330 = ($328|0)==(0);
      if ($330) {
       $331 = (($$4354) + 3)|0;
       $332 = $331 & 127;
       $333 = ($332|0)==($$10|0);
       if ($333) {
        $$1362 = $$0361;
        break;
       }
      }
      $334 = $309 * 0.25;
      $335 = $334 + $$0361;
      $$1362 = $335;
     } else {
      $336 = ($328|0)==(500000000);
      if (!($336)) {
       $337 = $309 * 0.75;
       $338 = $337 + $$0361;
       $$1362 = $338;
       break;
      }
      $339 = (($$4354) + 3)|0;
      $340 = $339 & 127;
      $341 = ($340|0)==($$10|0);
      if ($341) {
       $342 = $309 * 0.5;
       $343 = $342 + $$0361;
       $$1362 = $343;
       break;
      } else {
       $344 = $309 * 0.75;
       $345 = $344 + $$0361;
       $$1362 = $345;
       break;
      }
     }
    } while(0);
    $346 = (53 - ($$0333))|0;
    $347 = ($346|0)>(1);
    if ($347) {
     $348 = (+_fmodl($$1362,1.0));
     $349 = $348 != 0.0;
     if ($349) {
      $$3364 = $$1362;
     } else {
      $350 = $$1362 + 1.0;
      $$3364 = $350;
     }
    } else {
     $$3364 = $$1362;
    }
   }
   $351 = $$1366 + $$3364;
   $352 = $351 - $$0360;
   $353 = $311 & 2147483647;
   $354 = (-2 - ($sum))|0;
   $355 = ($353|0)>($354|0);
   do {
    if ($355) {
     $356 = (+Math_abs((+$352)));
     $357 = !($356 >= 9007199254740992.0);
     $358 = $352 * 0.5;
     $not$ = $357 ^ 1;
     $359 = $not$&1;
     $$3383 = (($359) + ($$1381))|0;
     $$2367 = $357 ? $352 : $358;
     $360 = (($$3383) + 50)|0;
     $361 = ($360|0)>($7|0);
     if (!($361)) {
      $362 = ($$0333|0)!=($312|0);
      $narrow = $362 | $357;
      $$2371$v = $313 & $narrow;
      $363 = $$3364 != 0.0;
      $or$cond14 = $363 & $$2371$v;
      if (!($or$cond14)) {
       $$3368 = $$2367;$$4384 = $$3383;
       break;
      }
     }
     $364 = (___errno_location()|0);
     HEAP32[$364>>2] = 34;
     $$3368 = $$2367;$$4384 = $$3383;
    } else {
     $$3368 = $352;$$4384 = $$1381;
    }
   } while(0);
   $365 = (+_scalbnl($$3368,$$4384));
   $$1 = $365;
  }
 } while(0);
 STACKTOP = sp;return (+$$1);
}
function _scanexp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$04861 = 0, $$049 = 0, $$1$be = 0, $$160 = 0, $$2$be = 0, $$2$lcssa = 0, $$254 = 0, $$3$be = 0, $$lcssa = 0, $$pre = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 100|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3>>>0)<($5>>>0);
 if ($6) {
  $7 = ((($3)) + 1|0);
  HEAP32[$2>>2] = $7;
  $8 = HEAP8[$3>>0]|0;
  $9 = $8&255;
  $11 = $9;
 } else {
  $10 = (___shgetc($0)|0);
  $11 = $10;
 }
 switch ($11|0) {
 case 43: case 45:  {
  $12 = ($11|0)==(45);
  $13 = $12&1;
  $14 = HEAP32[$2>>2]|0;
  $15 = HEAP32[$4>>2]|0;
  $16 = ($14>>>0)<($15>>>0);
  if ($16) {
   $17 = ((($14)) + 1|0);
   HEAP32[$2>>2] = $17;
   $18 = HEAP8[$14>>0]|0;
   $19 = $18&255;
   $22 = $19;
  } else {
   $20 = (___shgetc($0)|0);
   $22 = $20;
  }
  $21 = (($22) + -48)|0;
  $23 = ($21>>>0)>(9);
  $24 = ($1|0)!=(0);
  $or$cond3 = $24 & $23;
  if ($or$cond3) {
   $25 = HEAP32[$4>>2]|0;
   $26 = ($25|0)==(0|0);
   if ($26) {
    $$0 = $13;$$049 = $22;
   } else {
    $27 = HEAP32[$2>>2]|0;
    $28 = ((($27)) + -1|0);
    HEAP32[$2>>2] = $28;
    $$0 = $13;$$049 = $22;
   }
  } else {
   $$0 = $13;$$049 = $22;
  }
  break;
 }
 default: {
  $$0 = 0;$$049 = $11;
 }
 }
 $29 = (($$049) + -48)|0;
 $30 = ($29>>>0)>(9);
 if ($30) {
  $31 = HEAP32[$4>>2]|0;
  $32 = ($31|0)==(0|0);
  if ($32) {
   $100 = -2147483648;$101 = 0;
  } else {
   $33 = HEAP32[$2>>2]|0;
   $34 = ((($33)) + -1|0);
   HEAP32[$2>>2] = $34;
   $100 = -2147483648;$101 = 0;
  }
 } else {
  $$04861 = 0;$$160 = $$049;
  while(1) {
   $35 = ($$04861*10)|0;
   $36 = (($$160) + -48)|0;
   $37 = (($36) + ($35))|0;
   $38 = HEAP32[$2>>2]|0;
   $39 = HEAP32[$4>>2]|0;
   $40 = ($38>>>0)<($39>>>0);
   if ($40) {
    $41 = ((($38)) + 1|0);
    HEAP32[$2>>2] = $41;
    $42 = HEAP8[$38>>0]|0;
    $43 = $42&255;
    $$1$be = $43;
   } else {
    $44 = (___shgetc($0)|0);
    $$1$be = $44;
   }
   $45 = (($$1$be) + -48)|0;
   $46 = ($45>>>0)<(10);
   $47 = ($37|0)<(214748364);
   $48 = $46 & $47;
   if ($48) {
    $$04861 = $37;$$160 = $$1$be;
   } else {
    break;
   }
  }
  $49 = ($37|0)<(0);
  $50 = $49 << 31 >> 31;
  $51 = (($$1$be) + -48)|0;
  $52 = ($51>>>0)<(10);
  if ($52) {
   $$254 = $$1$be;$56 = $37;$57 = $50;
   while(1) {
    $58 = (___muldi3(($56|0),($57|0),10,0)|0);
    $59 = tempRet0;
    $60 = ($$254|0)<(0);
    $61 = $60 << 31 >> 31;
    $62 = (_i64Add(($$254|0),($61|0),-48,-1)|0);
    $63 = tempRet0;
    $64 = (_i64Add(($62|0),($63|0),($58|0),($59|0))|0);
    $65 = tempRet0;
    $66 = HEAP32[$2>>2]|0;
    $67 = HEAP32[$4>>2]|0;
    $68 = ($66>>>0)<($67>>>0);
    if ($68) {
     $69 = ((($66)) + 1|0);
     HEAP32[$2>>2] = $69;
     $70 = HEAP8[$66>>0]|0;
     $71 = $70&255;
     $$2$be = $71;
    } else {
     $72 = (___shgetc($0)|0);
     $$2$be = $72;
    }
    $73 = (($$2$be) + -48)|0;
    $74 = ($73>>>0)<(10);
    $75 = ($65|0)<(21474836);
    $76 = ($64>>>0)<(2061584302);
    $77 = ($65|0)==(21474836);
    $78 = $77 & $76;
    $79 = $75 | $78;
    $80 = $74 & $79;
    if ($80) {
     $$254 = $$2$be;$56 = $64;$57 = $65;
    } else {
     $$2$lcssa = $$2$be;$94 = $64;$95 = $65;
     break;
    }
   }
  } else {
   $$2$lcssa = $$1$be;$94 = $37;$95 = $50;
  }
  $53 = (($$2$lcssa) + -48)|0;
  $54 = ($53>>>0)<(10);
  $55 = HEAP32[$4>>2]|0;
  if ($54) {
   $83 = $55;
   while(1) {
    $81 = HEAP32[$2>>2]|0;
    $82 = ($81>>>0)<($83>>>0);
    if ($82) {
     $84 = ((($81)) + 1|0);
     HEAP32[$2>>2] = $84;
     $85 = HEAP8[$81>>0]|0;
     $86 = $85&255;
     $$3$be = $86;$102 = $83;
    } else {
     $87 = (___shgetc($0)|0);
     $$pre = HEAP32[$4>>2]|0;
     $$3$be = $87;$102 = $$pre;
    }
    $88 = (($$3$be) + -48)|0;
    $89 = ($88>>>0)<(10);
    if ($89) {
     $83 = $102;
    } else {
     $$lcssa = $102;
     break;
    }
   }
  } else {
   $$lcssa = $55;
  }
  $90 = ($$lcssa|0)==(0|0);
  if (!($90)) {
   $91 = HEAP32[$2>>2]|0;
   $92 = ((($91)) + -1|0);
   HEAP32[$2>>2] = $92;
  }
  $93 = ($$0|0)!=(0);
  $96 = (_i64Subtract(0,0,($94|0),($95|0))|0);
  $97 = tempRet0;
  $98 = $93 ? $96 : $94;
  $99 = $93 ? $97 : $95;
  $100 = $99;$101 = $98;
 }
 tempRet0 = ($100);
 return ($101|0);
}
function _scalbn($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$ = 0, $$$ = 0, $$0 = 0.0, $$020 = 0, $$1 = 0, $$1$ = 0, $$21 = 0.0, $$22 = 0.0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0;
 var $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)>(1023);
 if ($2) {
  $3 = $0 * 8.9884656743115795E+307;
  $4 = (($1) + -1023)|0;
  $5 = ($4|0)>(1023);
  $6 = $3 * 8.9884656743115795E+307;
  $7 = (($1) + -2046)|0;
  $8 = ($7|0)<(1023);
  $$ = $8 ? $7 : 1023;
  $$$ = $5 ? $$ : $4;
  $$21 = $5 ? $6 : $3;
  $$0 = $$21;$$020 = $$$;
 } else {
  $9 = ($1|0)<(-1022);
  if ($9) {
   $10 = $0 * 2.2250738585072014E-308;
   $11 = (($1) + 1022)|0;
   $12 = ($11|0)<(-1022);
   $13 = $10 * 2.2250738585072014E-308;
   $14 = (($1) + 2044)|0;
   $15 = ($14|0)>(-1022);
   $$1 = $15 ? $14 : -1022;
   $$1$ = $12 ? $$1 : $11;
   $$22 = $12 ? $13 : $10;
   $$0 = $$22;$$020 = $$1$;
  } else {
   $$0 = $0;$$020 = $1;
  }
 }
 $16 = (($$020) + 1023)|0;
 $17 = (_bitshift64Shl(($16|0),0,52)|0);
 $18 = tempRet0;
 HEAP32[tempDoublePtr>>2] = $17;HEAP32[tempDoublePtr+4>>2] = $18;$19 = +HEAPF64[tempDoublePtr>>3];
 $20 = $$0 * $19;
 return (+$20);
}
function _copysignl($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_copysign($0,$1));
 return (+$2);
}
function _fmodl($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_fmod($0,$1));
 return (+$2);
}
function _scalbnl($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_scalbn($0,$1));
 return (+$2);
}
function _fmod($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $$ = 0.0, $$070 = 0.0, $$071$lcssa = 0, $$07194 = 0, $$073$lcssa = 0, $$073100 = 0, $$172$ph = 0, $$174 = 0, $$275$lcssa = 0, $$27586 = 0, $$376$lcssa = 0, $$37683 = 0, $$lcssa = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0.0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $1;$4 = HEAP32[tempDoublePtr>>2]|0;
 $5 = HEAP32[tempDoublePtr+4>>2]|0;
 $6 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $7 = tempRet0;
 $8 = $6 & 2047;
 $9 = (_bitshift64Lshr(($4|0),($5|0),52)|0);
 $10 = tempRet0;
 $11 = $9 & 2047;
 $12 = $3 & -2147483648;
 $13 = (_bitshift64Shl(($4|0),($5|0),1)|0);
 $14 = tempRet0;
 $15 = ($13|0)==(0);
 $16 = ($14|0)==(0);
 $17 = $15 & $16;
 L1: do {
  if ($17) {
   label = 3;
  } else {
   $18 = (___DOUBLE_BITS_272($1)|0);
   $19 = tempRet0;
   $20 = $19 & 2147483647;
   $21 = ($20>>>0)>(2146435072);
   $22 = ($18>>>0)>(0);
   $23 = ($20|0)==(2146435072);
   $24 = $23 & $22;
   $25 = $21 | $24;
   $26 = ($8|0)==(2047);
   $or$cond = $26 | $25;
   if ($or$cond) {
    label = 3;
   } else {
    $29 = (_bitshift64Shl(($2|0),($3|0),1)|0);
    $30 = tempRet0;
    $31 = ($30>>>0)>($14>>>0);
    $32 = ($29>>>0)>($13>>>0);
    $33 = ($30|0)==($14|0);
    $34 = $33 & $32;
    $35 = $31 | $34;
    if (!($35)) {
     $36 = ($29|0)==($13|0);
     $37 = ($30|0)==($14|0);
     $38 = $36 & $37;
     $39 = $0 * 0.0;
     $$ = $38 ? $39 : $0;
     return (+$$);
    }
    $40 = ($8|0)==(0);
    if ($40) {
     $41 = (_bitshift64Shl(($2|0),($3|0),12)|0);
     $42 = tempRet0;
     $43 = ($42|0)>(-1);
     $44 = ($41>>>0)>(4294967295);
     $45 = ($42|0)==(-1);
     $46 = $45 & $44;
     $47 = $43 | $46;
     if ($47) {
      $$073100 = 0;$49 = $41;$50 = $42;
      while(1) {
       $48 = (($$073100) + -1)|0;
       $51 = (_bitshift64Shl(($49|0),($50|0),1)|0);
       $52 = tempRet0;
       $53 = ($52|0)>(-1);
       $54 = ($51>>>0)>(4294967295);
       $55 = ($52|0)==(-1);
       $56 = $55 & $54;
       $57 = $53 | $56;
       if ($57) {
        $$073100 = $48;$49 = $51;$50 = $52;
       } else {
        $$073$lcssa = $48;
        break;
       }
      }
     } else {
      $$073$lcssa = 0;
     }
     $58 = (1 - ($$073$lcssa))|0;
     $59 = (_bitshift64Shl(($2|0),($3|0),($58|0))|0);
     $60 = tempRet0;
     $$174 = $$073$lcssa;$87 = $59;$88 = $60;
    } else {
     $61 = $3 & 1048575;
     $62 = $61 | 1048576;
     $$174 = $8;$87 = $2;$88 = $62;
    }
    $63 = ($11|0)==(0);
    if ($63) {
     $64 = (_bitshift64Shl(($4|0),($5|0),12)|0);
     $65 = tempRet0;
     $66 = ($65|0)>(-1);
     $67 = ($64>>>0)>(4294967295);
     $68 = ($65|0)==(-1);
     $69 = $68 & $67;
     $70 = $66 | $69;
     if ($70) {
      $$07194 = 0;$72 = $64;$73 = $65;
      while(1) {
       $71 = (($$07194) + -1)|0;
       $74 = (_bitshift64Shl(($72|0),($73|0),1)|0);
       $75 = tempRet0;
       $76 = ($75|0)>(-1);
       $77 = ($74>>>0)>(4294967295);
       $78 = ($75|0)==(-1);
       $79 = $78 & $77;
       $80 = $76 | $79;
       if ($80) {
        $$07194 = $71;$72 = $74;$73 = $75;
       } else {
        $$071$lcssa = $71;
        break;
       }
      }
     } else {
      $$071$lcssa = 0;
     }
     $81 = (1 - ($$071$lcssa))|0;
     $82 = (_bitshift64Shl(($4|0),($5|0),($81|0))|0);
     $83 = tempRet0;
     $$172$ph = $$071$lcssa;$89 = $82;$90 = $83;
    } else {
     $84 = $5 & 1048575;
     $85 = $84 | 1048576;
     $$172$ph = $11;$89 = $4;$90 = $85;
    }
    $86 = ($$174|0)>($$172$ph|0);
    $91 = (_i64Subtract(($87|0),($88|0),($89|0),($90|0))|0);
    $92 = tempRet0;
    $93 = ($92|0)>(-1);
    $94 = ($91>>>0)>(4294967295);
    $95 = ($92|0)==(-1);
    $96 = $95 & $94;
    $97 = $93 | $96;
    L23: do {
     if ($86) {
      $$27586 = $$174;$101 = $92;$156 = $97;$157 = $87;$158 = $88;$99 = $91;
      while(1) {
       if ($156) {
        $98 = ($99|0)==(0);
        $100 = ($101|0)==(0);
        $102 = $98 & $100;
        if ($102) {
         break;
        } else {
         $104 = $99;$105 = $101;
        }
       } else {
        $104 = $157;$105 = $158;
       }
       $106 = (_bitshift64Shl(($104|0),($105|0),1)|0);
       $107 = tempRet0;
       $108 = (($$27586) + -1)|0;
       $109 = ($108|0)>($$172$ph|0);
       $110 = (_i64Subtract(($106|0),($107|0),($89|0),($90|0))|0);
       $111 = tempRet0;
       $112 = ($111|0)>(-1);
       $113 = ($110>>>0)>(4294967295);
       $114 = ($111|0)==(-1);
       $115 = $114 & $113;
       $116 = $112 | $115;
       if ($109) {
        $$27586 = $108;$101 = $111;$156 = $116;$157 = $106;$158 = $107;$99 = $110;
       } else {
        $$275$lcssa = $108;$$lcssa = $116;$118 = $110;$120 = $111;$159 = $106;$160 = $107;
        break L23;
       }
      }
      $103 = $0 * 0.0;
      $$070 = $103;
      break L1;
     } else {
      $$275$lcssa = $$174;$$lcssa = $97;$118 = $91;$120 = $92;$159 = $87;$160 = $88;
     }
    } while(0);
    if ($$lcssa) {
     $117 = ($118|0)==(0);
     $119 = ($120|0)==(0);
     $121 = $117 & $119;
     if ($121) {
      $129 = $0 * 0.0;
      $$070 = $129;
      break;
     } else {
      $123 = $120;$125 = $118;
     }
    } else {
     $123 = $160;$125 = $159;
    }
    $122 = ($123>>>0)<(1048576);
    $124 = ($125>>>0)<(0);
    $126 = ($123|0)==(1048576);
    $127 = $126 & $124;
    $128 = $122 | $127;
    if ($128) {
     $$37683 = $$275$lcssa;$130 = $125;$131 = $123;
     while(1) {
      $132 = (_bitshift64Shl(($130|0),($131|0),1)|0);
      $133 = tempRet0;
      $134 = (($$37683) + -1)|0;
      $135 = ($133>>>0)<(1048576);
      $136 = ($132>>>0)<(0);
      $137 = ($133|0)==(1048576);
      $138 = $137 & $136;
      $139 = $135 | $138;
      if ($139) {
       $$37683 = $134;$130 = $132;$131 = $133;
      } else {
       $$376$lcssa = $134;$141 = $132;$142 = $133;
       break;
      }
     }
    } else {
     $$376$lcssa = $$275$lcssa;$141 = $125;$142 = $123;
    }
    $140 = ($$376$lcssa|0)>(0);
    if ($140) {
     $143 = (_i64Add(($141|0),($142|0),0,-1048576)|0);
     $144 = tempRet0;
     $145 = (_bitshift64Shl(($$376$lcssa|0),0,52)|0);
     $146 = tempRet0;
     $147 = $143 | $145;
     $148 = $144 | $146;
     $153 = $148;$155 = $147;
    } else {
     $149 = (1 - ($$376$lcssa))|0;
     $150 = (_bitshift64Lshr(($141|0),($142|0),($149|0))|0);
     $151 = tempRet0;
     $153 = $151;$155 = $150;
    }
    $152 = $153 | $12;
    HEAP32[tempDoublePtr>>2] = $155;HEAP32[tempDoublePtr+4>>2] = $152;$154 = +HEAPF64[tempDoublePtr>>3];
    $$070 = $154;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $27 = $0 * $1;
  $28 = $27 / $27;
  $$070 = $28;
 }
 return (+$$070);
}
function ___DOUBLE_BITS_272($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 tempRet0 = ($2);
 return ($1|0);
}
function _strlen($0) {
 $0 = $0|0;
 var $$0 = 0, $$015$lcssa = 0, $$01519 = 0, $$1$lcssa = 0, $$pn = 0, $$pre = 0, $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0;
 $2 = $1 & 3;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $$015$lcssa = $0;
   label = 4;
  } else {
   $$01519 = $0;$23 = $1;
   while(1) {
    $4 = HEAP8[$$01519>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $$sink = $23;
     break L1;
    }
    $6 = ((($$01519)) + 1|0);
    $7 = $6;
    $8 = $7 & 3;
    $9 = ($8|0)==(0);
    if ($9) {
     $$015$lcssa = $6;
     label = 4;
     break;
    } else {
     $$01519 = $6;$23 = $7;
    }
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $$0 = $$015$lcssa;
  while(1) {
   $10 = HEAP32[$$0>>2]|0;
   $11 = (($10) + -16843009)|0;
   $12 = $10 & -2139062144;
   $13 = $12 ^ -2139062144;
   $14 = $13 & $11;
   $15 = ($14|0)==(0);
   $16 = ((($$0)) + 4|0);
   if ($15) {
    $$0 = $16;
   } else {
    break;
   }
  }
  $17 = $10&255;
  $18 = ($17<<24>>24)==(0);
  if ($18) {
   $$1$lcssa = $$0;
  } else {
   $$pn = $$0;
   while(1) {
    $19 = ((($$pn)) + 1|0);
    $$pre = HEAP8[$19>>0]|0;
    $20 = ($$pre<<24>>24)==(0);
    if ($20) {
     $$1$lcssa = $19;
     break;
    } else {
     $$pn = $19;
    }
   }
  }
  $21 = $$1$lcssa;
  $$sink = $21;
 }
 $22 = (($$sink) - ($1))|0;
 return ($22|0);
}
function _strchr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___strchrnul($0,$1)|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $1&255;
 $5 = ($3<<24>>24)==($4<<24>>24);
 $6 = $5 ? $2 : 0;
 return ($6|0);
}
function ___strchrnul($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$029$lcssa = 0, $$02936 = 0, $$030$lcssa = 0, $$03039 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond33 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 & 255;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $8 = (_strlen($0)|0);
   $9 = (($0) + ($8)|0);
   $$0 = $9;
  } else {
   $4 = $0;
   $5 = $4 & 3;
   $6 = ($5|0)==(0);
   if ($6) {
    $$030$lcssa = $0;
   } else {
    $7 = $1&255;
    $$03039 = $0;
    while(1) {
     $10 = HEAP8[$$03039>>0]|0;
     $11 = ($10<<24>>24)==(0);
     $12 = ($10<<24>>24)==($7<<24>>24);
     $or$cond = $11 | $12;
     if ($or$cond) {
      $$0 = $$03039;
      break L1;
     }
     $13 = ((($$03039)) + 1|0);
     $14 = $13;
     $15 = $14 & 3;
     $16 = ($15|0)==(0);
     if ($16) {
      $$030$lcssa = $13;
      break;
     } else {
      $$03039 = $13;
     }
    }
   }
   $17 = Math_imul($2, 16843009)|0;
   $18 = HEAP32[$$030$lcssa>>2]|0;
   $19 = (($18) + -16843009)|0;
   $20 = $18 & -2139062144;
   $21 = $20 ^ -2139062144;
   $22 = $21 & $19;
   $23 = ($22|0)==(0);
   L10: do {
    if ($23) {
     $$02936 = $$030$lcssa;$25 = $18;
     while(1) {
      $24 = $25 ^ $17;
      $26 = (($24) + -16843009)|0;
      $27 = $24 & -2139062144;
      $28 = $27 ^ -2139062144;
      $29 = $28 & $26;
      $30 = ($29|0)==(0);
      if (!($30)) {
       $$029$lcssa = $$02936;
       break L10;
      }
      $31 = ((($$02936)) + 4|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = (($32) + -16843009)|0;
      $34 = $32 & -2139062144;
      $35 = $34 ^ -2139062144;
      $36 = $35 & $33;
      $37 = ($36|0)==(0);
      if ($37) {
       $$02936 = $31;$25 = $32;
      } else {
       $$029$lcssa = $31;
       break;
      }
     }
    } else {
     $$029$lcssa = $$030$lcssa;
    }
   } while(0);
   $38 = $1&255;
   $$1 = $$029$lcssa;
   while(1) {
    $39 = HEAP8[$$1>>0]|0;
    $40 = ($39<<24>>24)==(0);
    $41 = ($39<<24>>24)==($38<<24>>24);
    $or$cond33 = $40 | $41;
    $42 = ((($$1)) + 1|0);
    if ($or$cond33) {
     $$0 = $$1;
     break;
    } else {
     $$1 = $42;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function _mbrtowc($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$0 = 0, $$03952 = 0, $$04051 = 0, $$04350 = 0, $$1 = 0, $$141 = 0, $$144 = 0, $$2 = 0, $$47 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = ($3|0)==(0|0);
 $$ = $5 ? 12040 : $3;
 $6 = HEAP32[$$>>2]|0;
 $7 = ($1|0)==(0|0);
 L1: do {
  if ($7) {
   $8 = ($6|0)==(0);
   if ($8) {
    $$0 = 0;
   } else {
    label = 17;
   }
  } else {
   $9 = ($0|0)==(0|0);
   $$47 = $9 ? $4 : $0;
   $10 = ($2|0)==(0);
   if ($10) {
    $$0 = -2;
   } else {
    $11 = ($6|0)==(0);
    if ($11) {
     $12 = HEAP8[$1>>0]|0;
     $13 = ($12<<24>>24)>(-1);
     if ($13) {
      $14 = $12&255;
      HEAP32[$$47>>2] = $14;
      $15 = ($12<<24>>24)!=(0);
      $16 = $15&1;
      $$0 = $16;
      break;
     }
     $17 = (___pthread_self_439()|0);
     $18 = ((($17)) + 188|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = HEAP32[$19>>2]|0;
     $not$ = ($20|0)==(0|0);
     $21 = HEAP8[$1>>0]|0;
     if ($not$) {
      $22 = $21 << 24 >> 24;
      $23 = $22 & 57343;
      HEAP32[$$47>>2] = $23;
      $$0 = 1;
      break;
     }
     $24 = $21&255;
     $25 = (($24) + -194)|0;
     $26 = ($25>>>0)>(50);
     if ($26) {
      label = 17;
      break;
     }
     $27 = ((($1)) + 1|0);
     $28 = (784 + ($25<<2)|0);
     $29 = HEAP32[$28>>2]|0;
     $30 = (($2) + -1)|0;
     $31 = ($30|0)==(0);
     if ($31) {
      $$2 = $29;
     } else {
      $$03952 = $27;$$04051 = $29;$$04350 = $30;
      label = 11;
     }
    } else {
     $$03952 = $1;$$04051 = $6;$$04350 = $2;
     label = 11;
    }
    L14: do {
     if ((label|0) == 11) {
      $32 = HEAP8[$$03952>>0]|0;
      $33 = $32&255;
      $34 = $33 >>> 3;
      $35 = (($34) + -16)|0;
      $36 = $$04051 >> 26;
      $37 = (($34) + ($36))|0;
      $38 = $35 | $37;
      $39 = ($38>>>0)>(7);
      if ($39) {
       label = 17;
       break L1;
      } else {
       $$1 = $$03952;$$141 = $$04051;$$144 = $$04350;$43 = $32;
      }
      while(1) {
       $40 = $$141 << 6;
       $41 = ((($$1)) + 1|0);
       $42 = $43&255;
       $44 = (($42) + -128)|0;
       $45 = $44 | $40;
       $46 = (($$144) + -1)|0;
       $47 = ($45|0)<(0);
       if (!($47)) {
        break;
       }
       $49 = ($46|0)==(0);
       if ($49) {
        $$2 = $45;
        break L14;
       }
       $50 = HEAP8[$41>>0]|0;
       $51 = $50 & -64;
       $52 = ($51<<24>>24)==(-128);
       if ($52) {
        $$1 = $41;$$141 = $45;$$144 = $46;$43 = $50;
       } else {
        label = 17;
        break L1;
       }
      }
      HEAP32[$$>>2] = 0;
      HEAP32[$$47>>2] = $45;
      $48 = (($2) - ($46))|0;
      $$0 = $48;
      break L1;
     }
    } while(0);
    HEAP32[$$>>2] = $$2;
    $$0 = -2;
   }
  }
 } while(0);
 if ((label|0) == 17) {
  HEAP32[$$>>2] = 0;
  $53 = (___errno_location()|0);
  HEAP32[$53>>2] = 84;
  $$0 = -1;
 }
 STACKTOP = sp;return ($$0|0);
}
function ___pthread_self_439() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _snprintf($0,$1,$2,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $varargs = $varargs|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 HEAP32[$3>>2] = $varargs;
 $4 = (_vsnprintf($0,$1,$2,$3)|0);
 STACKTOP = sp;return ($4|0);
}
function ___overflow($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = $1&255;
 HEAP8[$2>>0] = $3;
 $4 = ((($0)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = (___towrite($0)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$pre = HEAP32[$4>>2]|0;
   $12 = $$pre;
   label = 4;
  } else {
   $$0 = -1;
  }
 } else {
  $12 = $5;
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $9 = ((($0)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10>>>0)<($12>>>0);
   if ($11) {
    $13 = $1 & 255;
    $14 = ((($0)) + 75|0);
    $15 = HEAP8[$14>>0]|0;
    $16 = $15 << 24 >> 24;
    $17 = ($13|0)==($16|0);
    if (!($17)) {
     $18 = ((($10)) + 1|0);
     HEAP32[$9>>2] = $18;
     HEAP8[$10>>0] = $3;
     $$0 = $13;
     break;
    }
   }
   $19 = ((($0)) + 36|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (FUNCTION_TABLE_iiii[$20 & 127]($0,$2,1)|0);
   $22 = ($21|0)==(1);
   if ($22) {
    $23 = HEAP8[$2>>0]|0;
    $24 = $23&255;
    $$0 = $24;
   } else {
    $$0 = -1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___strdup($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strlen($0)|0);
 $2 = (($1) + 1)|0;
 $3 = (_malloc($2)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 0;
 } else {
  _memcpy(($3|0),($0|0),($2|0))|0;
  $$0 = $3;
 }
 return ($$0|0);
}
function _fopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $memchr = (_memchr(6699,$3,4)|0);
 $4 = ($memchr|0)==(0|0);
 if ($4) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 22;
  $$0 = 0;
 } else {
  $6 = (___fmodeflags($1)|0);
  $7 = $0;
  $8 = $6 | 32768;
  HEAP32[$vararg_buffer>>2] = $7;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $8;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 438;
  $9 = (___syscall5(5,($vararg_buffer|0))|0);
  $10 = (___syscall_ret($9)|0);
  $11 = ($10|0)<(0);
  if ($11) {
   $$0 = 0;
  } else {
   $12 = $6 & 524288;
   $13 = ($12|0)==(0);
   if (!($13)) {
    HEAP32[$vararg_buffer3>>2] = $10;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = 2;
    $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
    HEAP32[$vararg_ptr7>>2] = 1;
    (___syscall221(221,($vararg_buffer3|0))|0);
   }
   $14 = (___fdopen($10,$1)|0);
   $15 = ($14|0)==(0|0);
   if ($15) {
    HEAP32[$vararg_buffer8>>2] = $10;
    (___syscall6(6,($vararg_buffer8|0))|0);
    $$0 = 0;
   } else {
    $$0 = $14;
   }
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___fmodeflags($0) {
 $0 = $0|0;
 var $$ = 0, $$$4 = 0, $$0 = 0, $$0$ = 0, $$2 = 0, $$2$ = 0, $$4 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strchr($0,43)|0);
 $2 = ($1|0)==(0|0);
 $3 = HEAP8[$0>>0]|0;
 $not$ = ($3<<24>>24)!=(114);
 $$ = $not$&1;
 $$0 = $2 ? $$ : 2;
 $4 = (_strchr($0,120)|0);
 $5 = ($4|0)==(0|0);
 $6 = $$0 | 128;
 $$0$ = $5 ? $$0 : $6;
 $7 = (_strchr($0,101)|0);
 $8 = ($7|0)==(0|0);
 $9 = $$0$ | 524288;
 $$2 = $8 ? $$0$ : $9;
 $10 = ($3<<24>>24)==(114);
 $11 = $$2 | 64;
 $$2$ = $10 ? $$2 : $11;
 $12 = ($3<<24>>24)==(119);
 $13 = $$2$ | 512;
 $$4 = $12 ? $13 : $$2$;
 $14 = ($3<<24>>24)==(97);
 $15 = $$4 | 1024;
 $$$4 = $14 ? $15 : $$4;
 return ($$$4|0);
}
function ___fdopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $$pre31 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = sp + 56|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = $3 << 24 >> 24;
 $memchr = (_memchr(6699,$4,4)|0);
 $5 = ($memchr|0)==(0|0);
 if ($5) {
  $6 = (___errno_location()|0);
  HEAP32[$6>>2] = 22;
  $$0 = 0;
 } else {
  $7 = (_malloc(1156)|0);
  $8 = ($7|0)==(0|0);
  if ($8) {
   $$0 = 0;
  } else {
   dest=$7; stop=dest+124|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   $9 = (_strchr($1,43)|0);
   $10 = ($9|0)==(0|0);
   if ($10) {
    $11 = ($3<<24>>24)==(114);
    $12 = $11 ? 8 : 4;
    HEAP32[$7>>2] = $12;
   }
   $13 = (_strchr($1,101)|0);
   $14 = ($13|0)==(0|0);
   if ($14) {
    $16 = $3;
   } else {
    HEAP32[$vararg_buffer>>2] = $0;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = 2;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = 1;
    (___syscall221(221,($vararg_buffer|0))|0);
    $$pre = HEAP8[$1>>0]|0;
    $16 = $$pre;
   }
   $15 = ($16<<24>>24)==(97);
   if ($15) {
    HEAP32[$vararg_buffer3>>2] = $0;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = 3;
    $17 = (___syscall221(221,($vararg_buffer3|0))|0);
    $18 = $17 & 1024;
    $19 = ($18|0)==(0);
    if ($19) {
     $20 = $17 | 1024;
     HEAP32[$vararg_buffer7>>2] = $0;
     $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
     HEAP32[$vararg_ptr10>>2] = 4;
     $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
     HEAP32[$vararg_ptr11>>2] = $20;
     (___syscall221(221,($vararg_buffer7|0))|0);
    }
    $21 = HEAP32[$7>>2]|0;
    $22 = $21 | 128;
    HEAP32[$7>>2] = $22;
    $29 = $22;
   } else {
    $$pre31 = HEAP32[$7>>2]|0;
    $29 = $$pre31;
   }
   $23 = ((($7)) + 60|0);
   HEAP32[$23>>2] = $0;
   $24 = ((($7)) + 132|0);
   $25 = ((($7)) + 44|0);
   HEAP32[$25>>2] = $24;
   $26 = ((($7)) + 48|0);
   HEAP32[$26>>2] = 1024;
   $27 = ((($7)) + 75|0);
   HEAP8[$27>>0] = -1;
   $28 = $29 & 8;
   $30 = ($28|0)==(0);
   if ($30) {
    $31 = $2;
    HEAP32[$vararg_buffer12>>2] = $0;
    $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
    HEAP32[$vararg_ptr15>>2] = 21523;
    $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
    HEAP32[$vararg_ptr16>>2] = $31;
    $32 = (___syscall54(54,($vararg_buffer12|0))|0);
    $33 = ($32|0)==(0);
    if ($33) {
     HEAP8[$27>>0] = 10;
    }
   }
   $34 = ((($7)) + 32|0);
   HEAP32[$34>>2] = 77;
   $35 = ((($7)) + 36|0);
   HEAP32[$35>>2] = 2;
   $36 = ((($7)) + 40|0);
   HEAP32[$36>>2] = 3;
   $37 = ((($7)) + 12|0);
   HEAP32[$37>>2] = 1;
   $38 = HEAP32[(11980)>>2]|0;
   $39 = ($38|0)==(0);
   if ($39) {
    $40 = ((($7)) + 76|0);
    HEAP32[$40>>2] = -1;
   }
   $41 = (___ofl_add($7)|0);
   $$0 = $7;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___ofl_add($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___ofl_lock()|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 56|0);
 HEAP32[$3>>2] = $2;
 $4 = HEAP32[$1>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $6 = ((($4)) + 52|0);
  HEAP32[$6>>2] = $0;
 }
 HEAP32[$1>>2] = $0;
 ___ofl_unlock();
 return ($0|0);
}
function ___ofl_lock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___lock((12044|0));
 return (12052|0);
}
function ___ofl_unlock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___unlock((12044|0));
 return;
}
function _fgets($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$06266 = 0, $$063 = 0, $$064 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0;
 var $sext$mask = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 76|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)>(-1);
 if ($5) {
  $6 = (___lockfile($2)|0);
  $17 = $6;
 } else {
  $17 = 0;
 }
 $7 = (($1) + -1)|0;
 $8 = ($1|0)<(2);
 $9 = ($7|0)!=(0);
 if ($8) {
  $10 = ((($2)) + 74|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11 << 24 >> 24;
  $13 = (($12) + 255)|0;
  $14 = $13 | $12;
  $15 = $14&255;
  HEAP8[$10>>0] = $15;
  $16 = ($17|0)==(0);
  if (!($16)) {
   ___unlockfile($2);
  }
  if ($9) {
   $$0 = 0;
  } else {
   HEAP8[$0>>0] = 0;
   $$0 = $0;
  }
 } else {
  L11: do {
   if ($9) {
    $18 = ((($2)) + 4|0);
    $19 = ((($2)) + 8|0);
    $$063 = $7;$$064 = $0;
    while(1) {
     $20 = HEAP32[$18>>2]|0;
     $21 = HEAP32[$19>>2]|0;
     $22 = $20;
     $23 = (($21) - ($22))|0;
     $24 = (_memchr($20,10,$23)|0);
     $25 = ($24|0)==(0|0);
     $26 = $24;
     $27 = (1 - ($22))|0;
     $28 = (($27) + ($26))|0;
     $29 = $25 ? $23 : $28;
     $30 = ($29>>>0)<($$063>>>0);
     $31 = $30 ? $29 : $$063;
     _memcpy(($$064|0),($20|0),($31|0))|0;
     $32 = HEAP32[$18>>2]|0;
     $33 = (($32) + ($31)|0);
     HEAP32[$18>>2] = $33;
     $34 = (($$064) + ($31)|0);
     $35 = (($$063) - ($31))|0;
     $36 = ($35|0)!=(0);
     $or$cond = $25 & $36;
     if (!($or$cond)) {
      $$1 = $34;
      label = 17;
      break L11;
     }
     $37 = HEAP32[$19>>2]|0;
     $38 = ($33>>>0)<($37>>>0);
     if ($38) {
      $39 = ((($33)) + 1|0);
      HEAP32[$18>>2] = $39;
      $40 = HEAP8[$33>>0]|0;
      $41 = $40&255;
      $50 = $41;
     } else {
      $42 = (___uflow($2)|0);
      $43 = ($42|0)<(0);
      if ($43) {
       break;
      } else {
       $50 = $42;
      }
     }
     $48 = (($35) + -1)|0;
     $49 = $50&255;
     $51 = ((($34)) + 1|0);
     HEAP8[$34>>0] = $49;
     $sext$mask = $50 & 255;
     $52 = ($sext$mask|0)!=(10);
     $53 = ($48|0)!=(0);
     $or$cond3 = $53 & $52;
     if ($or$cond3) {
      $$063 = $48;$$064 = $51;
     } else {
      $$1 = $51;
      label = 17;
      break L11;
     }
    }
    $44 = ($34|0)==($0|0);
    if ($44) {
     $$06266 = 0;
    } else {
     $45 = HEAP32[$2>>2]|0;
     $46 = $45 & 16;
     $47 = ($46|0)==(0);
     if ($47) {
      $$06266 = 0;
     } else {
      $$1 = $34;
      label = 17;
     }
    }
   } else {
    $$1 = $0;
    label = 17;
   }
  } while(0);
  if ((label|0) == 17) {
   $54 = ($0|0)==(0|0);
   if ($54) {
    $$06266 = 0;
   } else {
    HEAP8[$$1>>0] = 0;
    $$06266 = $0;
   }
  }
  $55 = ($17|0)==(0);
  if ($55) {
   $$0 = $$06266;
  } else {
   ___unlockfile($2);
   $$0 = $$06266;
  }
 }
 return ($$0|0);
}
function _fscanf($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $varargs;
 $3 = (_vfscanf($0,$1,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function _vfscanf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$$0266 = 0, $$$0268 = 0, $$$0305 = 0, $$$3 = 0, $$0266$lcssa = 0, $$0266417 = 0, $$0268 = 0, $$0272 = 0, $$0273429 = 0, $$0276$ph = 0, $$0278$ph = 0, $$0278$ph$phi = 0, $$0278$ph336 = 0, $$0283428 = 0, $$0286420 = 0, $$0288$ = 0, $$0288425 = 0, $$0292 = 0, $$0293 = 0;
 var $$0305423 = 0, $$10 = 0, $$11 = 0, $$1267 = 0, $$1271 = 0, $$1274 = 0, $$1277$ph = 0, $$1279 = 0, $$1284 = 0, $$1289 = 0, $$2 = 0, $$2275 = 0, $$2280 = 0, $$2280$ph = 0, $$2280$ph$phi = 0, $$2285 = 0, $$2290 = 0, $$2307$ph = 0, $$3$lcssa = 0, $$319 = 0;
 var $$320 = 0, $$321 = 0, $$322 = 0, $$327 = 0, $$328$le439 = 0, $$328$le441 = 0, $$3281 = 0, $$3291 = 0, $$3416 = 0, $$4282 = 0, $$4309 = 0, $$5 = 0, $$5299 = 0, $$5310 = 0, $$6 = 0, $$6311 = 0, $$7 = 0, $$7$ph = 0, $$7312 = 0, $$8 = 0;
 var $$8313 = 0, $$9 = 0, $$9314 = 0, $$9314$ph = 0, $$lcssa355 = 0, $$not = 0, $$old4 = 0, $$ph = 0, $$ph353 = 0, $$pre = 0, $$pre$phi516Z2D = 0, $$pre507 = 0, $$pre509 = 0, $$pre511 = 0, $$pre512 = 0, $$pre513 = 0, $$pre514 = 0, $$pre515 = 0, $$sink443 = 0, $$sroa$2$0$$sroa_idx13 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0.0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0.0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_next = 0, $expanded = 0, $expanded1 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $factor = 0, $factor331 = 0, $isdigit = 0;
 var $isdigit316 = 0, $isdigit316415 = 0, $isdigittmp = 0, $isdigittmp315 = 0, $isdigittmp315414 = 0, $narrow = 0, $narrow469 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond318 = 0, $or$cond5 = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(288|0);
 $3 = sp + 8|0;
 $4 = sp + 17|0;
 $5 = sp;
 $6 = sp + 16|0;
 $7 = ((($0)) + 76|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)>(-1);
 if ($9) {
  $10 = (___lockfile($0)|0);
  $306 = $10;
 } else {
  $306 = 0;
 }
 $11 = HEAP8[$1>>0]|0;
 $12 = ($11<<24>>24)==(0);
 L4: do {
  if ($12) {
   $$3291 = 0;
  } else {
   $13 = ((($0)) + 4|0);
   $14 = ((($0)) + 100|0);
   $15 = ((($0)) + 108|0);
   $16 = ((($0)) + 8|0);
   $17 = ((($4)) + 10|0);
   $18 = ((($4)) + 33|0);
   $$sroa$2$0$$sroa_idx13 = ((($3)) + 4|0);
   $19 = ((($4)) + 46|0);
   $20 = ((($4)) + 94|0);
   $21 = ((($4)) + 1|0);
   $22 = ((($4)) + 1|0);
   $$0273429 = $1;$$0283428 = 0;$$0288425 = 0;$$0305423 = 0;$102 = 0;$24 = $11;
   L6: while(1) {
    $23 = $24&255;
    $25 = (_isspace($23)|0);
    $26 = ($25|0)==(0);
    L8: do {
     if ($26) {
      $53 = ($24<<24>>24)==(37);
      L10: do {
       if ($53) {
        $54 = ((($$0273429)) + 1|0);
        $55 = HEAP8[$54>>0]|0;
        L12: do {
         switch ($55<<24>>24) {
         case 37:  {
          break L10;
          break;
         }
         case 42:  {
          $76 = ((($$0273429)) + 2|0);
          $$0293 = 0;$$2275 = $76;
          break;
         }
         default: {
          $77 = $55&255;
          $isdigittmp = (($77) + -48)|0;
          $isdigit = ($isdigittmp>>>0)<(10);
          if ($isdigit) {
           $78 = ((($$0273429)) + 2|0);
           $79 = HEAP8[$78>>0]|0;
           $80 = ($79<<24>>24)==(36);
           if ($80) {
            $81 = (_arg_n($2,$isdigittmp)|0);
            $82 = ((($$0273429)) + 3|0);
            $$0293 = $81;$$2275 = $82;
            break L12;
           }
          }
          $arglist_current = HEAP32[$2>>2]|0;
          $83 = $arglist_current;
          $84 = ((0) + 4|0);
          $expanded1 = $84;
          $expanded = (($expanded1) - 1)|0;
          $85 = (($83) + ($expanded))|0;
          $86 = ((0) + 4|0);
          $expanded5 = $86;
          $expanded4 = (($expanded5) - 1)|0;
          $expanded3 = $expanded4 ^ -1;
          $87 = $85 & $expanded3;
          $88 = $87;
          $89 = HEAP32[$88>>2]|0;
          $arglist_next = ((($88)) + 4|0);
          HEAP32[$2>>2] = $arglist_next;
          $$0293 = $89;$$2275 = $54;
         }
         }
        } while(0);
        $90 = HEAP8[$$2275>>0]|0;
        $91 = $90&255;
        $isdigittmp315414 = (($91) + -48)|0;
        $isdigit316415 = ($isdigittmp315414>>>0)<(10);
        if ($isdigit316415) {
         $$0266417 = 0;$$3416 = $$2275;$95 = $91;
         while(1) {
          $92 = ($$0266417*10)|0;
          $93 = (($92) + -48)|0;
          $94 = (($93) + ($95))|0;
          $96 = ((($$3416)) + 1|0);
          $97 = HEAP8[$96>>0]|0;
          $98 = $97&255;
          $isdigittmp315 = (($98) + -48)|0;
          $isdigit316 = ($isdigittmp315>>>0)<(10);
          if ($isdigit316) {
           $$0266417 = $94;$$3416 = $96;$95 = $98;
          } else {
           $$0266$lcssa = $94;$$3$lcssa = $96;$$lcssa355 = $97;
           break;
          }
         }
        } else {
         $$0266$lcssa = 0;$$3$lcssa = $$2275;$$lcssa355 = $90;
        }
        $99 = ($$lcssa355<<24>>24)==(109);
        $100 = ($$0293|0)!=(0|0);
        $101 = ((($$3$lcssa)) + 1|0);
        $$$0305 = $99 ? 0 : $$0305423;
        $$327 = $99 ? 0 : $102;
        $$$3 = $99 ? $101 : $$3$lcssa;
        $narrow = $100 & $99;
        $103 = ((($$$3)) + 1|0);
        $104 = HEAP8[$$$3>>0]|0;
        switch ($104<<24>>24) {
        case 104:  {
         $105 = HEAP8[$103>>0]|0;
         $106 = ($105<<24>>24)==(104);
         $107 = ((($$$3)) + 2|0);
         $$319 = $106 ? $107 : $103;
         $$320 = $106 ? -2 : -1;
         $$0268 = $$320;$$5 = $$319;
         break;
        }
        case 108:  {
         $108 = HEAP8[$103>>0]|0;
         $109 = ($108<<24>>24)==(108);
         $110 = ((($$$3)) + 2|0);
         $$321 = $109 ? $110 : $103;
         $$322 = $109 ? 3 : 1;
         $$0268 = $$322;$$5 = $$321;
         break;
        }
        case 106:  {
         $$0268 = 3;$$5 = $103;
         break;
        }
        case 116: case 122:  {
         $$0268 = 1;$$5 = $103;
         break;
        }
        case 76:  {
         $$0268 = 2;$$5 = $103;
         break;
        }
        case 110: case 112: case 67: case 83: case 91: case 99: case 115: case 88: case 71: case 70: case 69: case 65: case 103: case 102: case 101: case 97: case 120: case 117: case 111: case 105: case 100:  {
         $$0268 = 0;$$5 = $$$3;
         break;
        }
        default: {
         $$7312 = $$$0305;$309 = $$327;$narrow469 = $narrow;
         label = 137;
         break L6;
        }
        }
        $111 = HEAP8[$$5>>0]|0;
        $112 = $111&255;
        $113 = $112 & 47;
        $114 = ($113|0)==(3);
        $115 = $112 | 32;
        $$ = $114 ? $115 : $112;
        $$$0268 = $114 ? 1 : $$0268;
        $trunc = $$&255;
        switch ($trunc<<24>>24) {
        case 99:  {
         $116 = ($$0266$lcssa|0)>(1);
         $$$0266 = $116 ? $$0266$lcssa : 1;
         $$1267 = $$$0266;$$1284 = $$0283428;
         break;
        }
        case 91:  {
         $$1267 = $$0266$lcssa;$$1284 = $$0283428;
         break;
        }
        case 110:  {
         $117 = ($$0283428|0)<(0);
         $118 = $117 << 31 >> 31;
         _store_int($$0293,$$$0268,$$0283428,$118);
         $$11 = $$5;$$1289 = $$0288425;$$2285 = $$0283428;$$6311 = $$$0305;$307 = $$327;
         break L8;
         break;
        }
        default: {
         ___shlim($0,0);
         while(1) {
          $119 = HEAP32[$13>>2]|0;
          $120 = HEAP32[$14>>2]|0;
          $121 = ($119>>>0)<($120>>>0);
          if ($121) {
           $122 = ((($119)) + 1|0);
           HEAP32[$13>>2] = $122;
           $123 = HEAP8[$119>>0]|0;
           $124 = $123&255;
           $126 = $124;
          } else {
           $125 = (___shgetc($0)|0);
           $126 = $125;
          }
          $127 = (_isspace($126)|0);
          $128 = ($127|0)==(0);
          if ($128) {
           break;
          }
         }
         $129 = HEAP32[$14>>2]|0;
         $130 = ($129|0)==(0|0);
         if ($130) {
          $$pre507 = HEAP32[$13>>2]|0;
          $138 = $$pre507;
         } else {
          $131 = HEAP32[$13>>2]|0;
          $132 = ((($131)) + -1|0);
          HEAP32[$13>>2] = $132;
          $133 = $132;
          $138 = $133;
         }
         $134 = HEAP32[$15>>2]|0;
         $135 = HEAP32[$16>>2]|0;
         $136 = (($134) + ($$0283428))|0;
         $137 = (($136) + ($138))|0;
         $139 = (($137) - ($135))|0;
         $$1267 = $$0266$lcssa;$$1284 = $139;
        }
        }
        ___shlim($0,$$1267);
        $140 = HEAP32[$13>>2]|0;
        $141 = HEAP32[$14>>2]|0;
        $142 = ($140>>>0)<($141>>>0);
        if ($142) {
         $143 = ((($140)) + 1|0);
         HEAP32[$13>>2] = $143;
         $147 = $141;
        } else {
         $144 = (___shgetc($0)|0);
         $145 = ($144|0)<(0);
         if ($145) {
          $$7312 = $$$0305;$309 = $$327;$narrow469 = $narrow;
          label = 137;
          break L6;
         }
         $$pre509 = HEAP32[$14>>2]|0;
         $147 = $$pre509;
        }
        $146 = ($147|0)==(0|0);
        if (!($146)) {
         $148 = HEAP32[$13>>2]|0;
         $149 = ((($148)) + -1|0);
         HEAP32[$13>>2] = $149;
        }
        L55: do {
         switch ($trunc<<24>>24) {
         case 91: case 99: case 115:  {
          $150 = ($$|0)==(99);
          $151 = $$ | 16;
          $152 = ($151|0)==(115);
          L57: do {
           if ($152) {
            $153 = ($$|0)==(115);
            _memset(($21|0),-1,256)|0;
            HEAP8[$4>>0] = 0;
            if ($153) {
             HEAP8[$18>>0] = 0;
             ;HEAP8[$17>>0]=0|0;HEAP8[$17+1>>0]=0|0;HEAP8[$17+2>>0]=0|0;HEAP8[$17+3>>0]=0|0;HEAP8[$17+4>>0]=0|0;
             $$9 = $$5;
            } else {
             $$9 = $$5;
            }
           } else {
            $154 = ((($$5)) + 1|0);
            $155 = HEAP8[$154>>0]|0;
            $156 = ($155<<24>>24)==(94);
            $157 = ((($$5)) + 2|0);
            $$0292 = $156&1;
            $$6 = $156 ? $157 : $154;
            $158 = $156&1;
            _memset(($22|0),($158|0),256)|0;
            HEAP8[$4>>0] = 0;
            $159 = HEAP8[$$6>>0]|0;
            switch ($159<<24>>24) {
            case 45:  {
             $$sink443 = $19;
             label = 64;
             break;
            }
            case 93:  {
             $$sink443 = $20;
             label = 64;
             break;
            }
            default: {
             $$pre514 = $$0292 ^ 1;
             $$pre515 = $$pre514&255;
             $$7$ph = $$6;$$pre$phi516Z2D = $$pre515;
            }
            }
            if ((label|0) == 64) {
             label = 0;
             $160 = ((($$6)) + 1|0);
             $161 = $$0292 ^ 1;
             $162 = $161&255;
             HEAP8[$$sink443>>0] = $162;
             $$7$ph = $160;$$pre$phi516Z2D = $162;
            }
            $$7 = $$7$ph;
            while(1) {
             $163 = HEAP8[$$7>>0]|0;
             L69: do {
              switch ($163<<24>>24) {
              case 0:  {
               $$7312 = $$$0305;$309 = $$327;$narrow469 = $narrow;
               label = 137;
               break L6;
               break;
              }
              case 93:  {
               $$9 = $$7;
               break L57;
               break;
              }
              case 45:  {
               $164 = ((($$7)) + 1|0);
               $165 = HEAP8[$164>>0]|0;
               switch ($165<<24>>24) {
               case 93: case 0:  {
                $$8 = $$7;$176 = 45;
                break L69;
                break;
               }
               default: {
               }
               }
               $166 = ((($$7)) + -1|0);
               $167 = HEAP8[$166>>0]|0;
               $168 = ($167&255)<($165&255);
               if ($168) {
                $169 = $167&255;
                $$0286420 = $169;
                while(1) {
                 $170 = (($$0286420) + 1)|0;
                 $171 = (($4) + ($170)|0);
                 HEAP8[$171>>0] = $$pre$phi516Z2D;
                 $172 = HEAP8[$164>>0]|0;
                 $173 = $172&255;
                 $174 = ($170|0)<($173|0);
                 if ($174) {
                  $$0286420 = $170;
                 } else {
                  $$8 = $164;$176 = $172;
                  break;
                 }
                }
               } else {
                $$8 = $164;$176 = $165;
               }
               break;
              }
              default: {
               $$8 = $$7;$176 = $163;
              }
              }
             } while(0);
             $175 = $176&255;
             $177 = (($175) + 1)|0;
             $178 = (($4) + ($177)|0);
             HEAP8[$178>>0] = $$pre$phi516Z2D;
             $179 = ((($$8)) + 1|0);
             $$7 = $179;
            }
           }
          } while(0);
          $180 = (($$1267) + 1)|0;
          $181 = $150 ? $180 : 31;
          $182 = ($$$0268|0)==(1);
          L77: do {
           if ($182) {
            if ($narrow) {
             $183 = $181 << 2;
             $184 = (_malloc($183)|0);
             $185 = ($184|0)==(0|0);
             if ($185) {
              $$7312 = 0;$309 = 0;$narrow469 = 1;
              label = 137;
              break L6;
             } else {
              $311 = $184;
             }
            } else {
             $311 = $$0293;
            }
            HEAP32[$3>>2] = 0;
            HEAP32[$$sroa$2$0$$sroa_idx13>>2] = 0;
            $$0276$ph = $181;$$0278$ph = 0;$$ph = $311;
            L82: while(1) {
             $186 = ($$ph|0)==(0|0);
             $$0278$ph336 = $$0278$ph;
             while(1) {
              L86: while(1) {
               $187 = HEAP32[$13>>2]|0;
               $188 = HEAP32[$14>>2]|0;
               $189 = ($187>>>0)<($188>>>0);
               if ($189) {
                $190 = ((($187)) + 1|0);
                HEAP32[$13>>2] = $190;
                $191 = HEAP8[$187>>0]|0;
                $192 = $191&255;
                $195 = $192;
               } else {
                $193 = (___shgetc($0)|0);
                $195 = $193;
               }
               $194 = (($195) + 1)|0;
               $196 = (($4) + ($194)|0);
               $197 = HEAP8[$196>>0]|0;
               $198 = ($197<<24>>24)==(0);
               if ($198) {
                break L82;
               }
               $199 = $195&255;
               HEAP8[$6>>0] = $199;
               $200 = (_mbrtowc($5,$6,1,$3)|0);
               switch ($200|0) {
               case -1:  {
                $$7312 = 0;$309 = $$ph;$narrow469 = $narrow;
                label = 137;
                break L6;
                break;
               }
               case -2:  {
                break;
               }
               default: {
                break L86;
               }
               }
              }
              if ($186) {
               $$1279 = $$0278$ph336;
              } else {
               $201 = (($$ph) + ($$0278$ph336<<2)|0);
               $202 = (($$0278$ph336) + 1)|0;
               $203 = HEAP32[$5>>2]|0;
               HEAP32[$201>>2] = $203;
               $$1279 = $202;
              }
              $204 = ($$1279|0)==($$0276$ph|0);
              $or$cond = $narrow & $204;
              if ($or$cond) {
               break;
              } else {
               $$0278$ph336 = $$1279;
              }
             }
             $factor331 = $$0276$ph << 1;
             $205 = $factor331 | 1;
             $206 = $205 << 2;
             $207 = (_realloc($$ph,$206)|0);
             $208 = ($207|0)==(0|0);
             if ($208) {
              $$7312 = 0;$309 = $$ph;$narrow469 = 1;
              label = 137;
              break L6;
             } else {
              $$0278$ph$phi = $$0276$ph;$$0276$ph = $205;$$ph = $207;$$0278$ph = $$0278$ph$phi;
             }
            }
            $209 = (_mbsinit($3)|0);
            $210 = ($209|0)==(0);
            if ($210) {
             $$7312 = 0;$309 = $$ph;$narrow469 = $narrow;
             label = 137;
             break L6;
            } else {
             $$4282 = $$0278$ph336;$$4309 = 0;$$5299 = $$ph;$312 = $$ph;
            }
           } else {
            if ($narrow) {
             $211 = (_malloc($181)|0);
             $212 = ($211|0)==(0|0);
             if ($212) {
              $$7312 = 0;$309 = 0;$narrow469 = 1;
              label = 137;
              break L6;
             } else {
              $$1277$ph = $181;$$2280$ph = 0;$$2307$ph = $211;
             }
             while(1) {
              $$2280 = $$2280$ph;
              while(1) {
               $213 = HEAP32[$13>>2]|0;
               $214 = HEAP32[$14>>2]|0;
               $215 = ($213>>>0)<($214>>>0);
               if ($215) {
                $216 = ((($213)) + 1|0);
                HEAP32[$13>>2] = $216;
                $217 = HEAP8[$213>>0]|0;
                $218 = $217&255;
                $221 = $218;
               } else {
                $219 = (___shgetc($0)|0);
                $221 = $219;
               }
               $220 = (($221) + 1)|0;
               $222 = (($4) + ($220)|0);
               $223 = HEAP8[$222>>0]|0;
               $224 = ($223<<24>>24)==(0);
               if ($224) {
                $$4282 = $$2280;$$4309 = $$2307$ph;$$5299 = 0;$312 = 0;
                break L77;
               }
               $225 = $221&255;
               $226 = (($$2280) + 1)|0;
               $227 = (($$2307$ph) + ($$2280)|0);
               HEAP8[$227>>0] = $225;
               $228 = ($226|0)==($$1277$ph|0);
               if ($228) {
                break;
               } else {
                $$2280 = $226;
               }
              }
              $factor = $$1277$ph << 1;
              $229 = $factor | 1;
              $230 = (_realloc($$2307$ph,$229)|0);
              $231 = ($230|0)==(0|0);
              if ($231) {
               $$7312 = $$2307$ph;$309 = 0;$narrow469 = 1;
               label = 137;
               break L6;
              } else {
               $$2280$ph$phi = $$1277$ph;$$1277$ph = $229;$$2307$ph = $230;$$2280$ph = $$2280$ph$phi;
              }
             }
            }
            $232 = ($$0293|0)==(0|0);
            if ($232) {
             $250 = $147;
             while(1) {
              $248 = HEAP32[$13>>2]|0;
              $249 = ($248>>>0)<($250>>>0);
              if ($249) {
               $251 = ((($248)) + 1|0);
               HEAP32[$13>>2] = $251;
               $252 = HEAP8[$248>>0]|0;
               $253 = $252&255;
               $256 = $253;
              } else {
               $254 = (___shgetc($0)|0);
               $256 = $254;
              }
              $255 = (($256) + 1)|0;
              $257 = (($4) + ($255)|0);
              $258 = HEAP8[$257>>0]|0;
              $259 = ($258<<24>>24)==(0);
              if ($259) {
               $$4282 = 0;$$4309 = 0;$$5299 = 0;$312 = 0;
               break L77;
              }
              $$pre512 = HEAP32[$14>>2]|0;
              $250 = $$pre512;
             }
            } else {
             $$3281 = 0;$235 = $147;
             while(1) {
              $233 = HEAP32[$13>>2]|0;
              $234 = ($233>>>0)<($235>>>0);
              if ($234) {
               $236 = ((($233)) + 1|0);
               HEAP32[$13>>2] = $236;
               $237 = HEAP8[$233>>0]|0;
               $238 = $237&255;
               $241 = $238;
              } else {
               $239 = (___shgetc($0)|0);
               $241 = $239;
              }
              $240 = (($241) + 1)|0;
              $242 = (($4) + ($240)|0);
              $243 = HEAP8[$242>>0]|0;
              $244 = ($243<<24>>24)==(0);
              if ($244) {
               $$4282 = $$3281;$$4309 = $$0293;$$5299 = 0;$312 = 0;
               break L77;
              }
              $245 = $241&255;
              $246 = (($$3281) + 1)|0;
              $247 = (($$0293) + ($$3281)|0);
              HEAP8[$247>>0] = $245;
              $$pre511 = HEAP32[$14>>2]|0;
              $$3281 = $246;$235 = $$pre511;
             }
            }
           }
          } while(0);
          $260 = HEAP32[$14>>2]|0;
          $261 = ($260|0)==(0|0);
          if ($261) {
           $$pre513 = HEAP32[$13>>2]|0;
           $268 = $$pre513;
          } else {
           $262 = HEAP32[$13>>2]|0;
           $263 = ((($262)) + -1|0);
           HEAP32[$13>>2] = $263;
           $264 = $263;
           $268 = $264;
          }
          $265 = HEAP32[$15>>2]|0;
          $266 = HEAP32[$16>>2]|0;
          $267 = (($268) - ($266))|0;
          $269 = (($267) + ($265))|0;
          $270 = ($269|0)==(0);
          if ($270) {
           $$9314$ph = $$4309;$$ph353 = $312;
           label = 139;
           break L6;
          }
          $$not = $150 ^ 1;
          $271 = ($269|0)==($$1267|0);
          $or$cond318 = $271 | $$not;
          if (!($or$cond318)) {
           $$9314$ph = $$4309;$$ph353 = $312;
           label = 139;
           break L6;
          }
          do {
           if ($narrow) {
            if ($182) {
             HEAP32[$$0293>>2] = $$5299;
             break;
            } else {
             HEAP32[$$0293>>2] = $$4309;
             break;
            }
           }
          } while(0);
          if ($150) {
           $$10 = $$9;$$5310 = $$4309;$310 = $312;
          } else {
           $272 = ($$5299|0)==(0|0);
           if (!($272)) {
            $273 = (($$5299) + ($$4282<<2)|0);
            HEAP32[$273>>2] = 0;
           }
           $274 = ($$4309|0)==(0|0);
           if ($274) {
            $$10 = $$9;$$5310 = 0;$310 = $312;
            break L55;
           }
           $275 = (($$4309) + ($$4282)|0);
           HEAP8[$275>>0] = 0;
           $$10 = $$9;$$5310 = $$4309;$310 = $312;
          }
          break;
         }
         case 120: case 88: case 112:  {
          $$0272 = 16;
          label = 125;
          break;
         }
         case 111:  {
          $$0272 = 8;
          label = 125;
          break;
         }
         case 117: case 100:  {
          $$0272 = 10;
          label = 125;
          break;
         }
         case 105:  {
          $$0272 = 0;
          label = 125;
          break;
         }
         case 71: case 103: case 70: case 102: case 69: case 101: case 65: case 97:  {
          $285 = (+___floatscan($0,$$$0268,0));
          $286 = HEAP32[$15>>2]|0;
          $287 = HEAP32[$13>>2]|0;
          $288 = HEAP32[$16>>2]|0;
          $289 = (($288) - ($287))|0;
          $290 = ($286|0)==($289|0);
          if ($290) {
           $$9314$ph = $$$0305;$$ph353 = $$327;
           label = 139;
           break L6;
          }
          $291 = ($$0293|0)==(0|0);
          if ($291) {
           $$10 = $$5;$$5310 = $$$0305;$310 = $$327;
          } else {
           switch ($$$0268|0) {
           case 0:  {
            $292 = $285;
            HEAPF32[$$0293>>2] = $292;
            $$10 = $$5;$$5310 = $$$0305;$310 = $$327;
            break L55;
            break;
           }
           case 1:  {
            HEAPF64[$$0293>>3] = $285;
            $$10 = $$5;$$5310 = $$$0305;$310 = $$327;
            break L55;
            break;
           }
           case 2:  {
            HEAPF64[$$0293>>3] = $285;
            $$10 = $$5;$$5310 = $$$0305;$310 = $$327;
            break L55;
            break;
           }
           default: {
            $$10 = $$5;$$5310 = $$$0305;$310 = $$327;
            break L55;
           }
           }
          }
          break;
         }
         default: {
          $$10 = $$5;$$5310 = $$$0305;$310 = $$327;
         }
         }
        } while(0);
        do {
         if ((label|0) == 125) {
          label = 0;
          $276 = (___intscan($0,$$0272,0,-1,-1)|0);
          $277 = tempRet0;
          $278 = HEAP32[$15>>2]|0;
          $279 = HEAP32[$13>>2]|0;
          $280 = HEAP32[$16>>2]|0;
          $281 = (($280) - ($279))|0;
          $282 = ($278|0)==($281|0);
          if ($282) {
           $$9314$ph = $$$0305;$$ph353 = $$327;
           label = 139;
           break L6;
          }
          $283 = ($$|0)==(112);
          $or$cond3 = $100 & $283;
          if ($or$cond3) {
           $284 = $276;
           HEAP32[$$0293>>2] = $284;
           $$10 = $$5;$$5310 = $$$0305;$310 = $$327;
           break;
          } else {
           _store_int($$0293,$$$0268,$276,$277);
           $$10 = $$5;$$5310 = $$$0305;$310 = $$327;
           break;
          }
         }
        } while(0);
        $293 = HEAP32[$15>>2]|0;
        $294 = HEAP32[$13>>2]|0;
        $295 = HEAP32[$16>>2]|0;
        $296 = (($293) + ($$1284))|0;
        $297 = (($296) + ($294))|0;
        $298 = (($297) - ($295))|0;
        $299 = $100&1;
        $$0288$ = (($299) + ($$0288425))|0;
        $$11 = $$10;$$1289 = $$0288$;$$2285 = $298;$$6311 = $$5310;$307 = $310;
        break L8;
       }
      } while(0);
      $56 = $53&1;
      $57 = (($$0273429) + ($56)|0);
      ___shlim($0,0);
      $58 = HEAP32[$13>>2]|0;
      $59 = HEAP32[$14>>2]|0;
      $60 = ($58>>>0)<($59>>>0);
      if ($60) {
       $61 = ((($58)) + 1|0);
       HEAP32[$13>>2] = $61;
       $62 = HEAP8[$58>>0]|0;
       $63 = $62&255;
       $68 = $63;
      } else {
       $64 = (___shgetc($0)|0);
       $68 = $64;
      }
      $65 = HEAP8[$57>>0]|0;
      $66 = $65&255;
      $67 = ($68|0)==($66|0);
      if (!($67)) {
       label = 22;
       break L6;
      }
      $75 = (($$0283428) + 1)|0;
      $$11 = $57;$$1289 = $$0288425;$$2285 = $75;$$6311 = $$0305423;$307 = $102;
     } else {
      $$1274 = $$0273429;
      while(1) {
       $27 = ((($$1274)) + 1|0);
       $28 = HEAP8[$27>>0]|0;
       $29 = $28&255;
       $30 = (_isspace($29)|0);
       $31 = ($30|0)==(0);
       if ($31) {
        break;
       } else {
        $$1274 = $27;
       }
      }
      ___shlim($0,0);
      while(1) {
       $32 = HEAP32[$13>>2]|0;
       $33 = HEAP32[$14>>2]|0;
       $34 = ($32>>>0)<($33>>>0);
       if ($34) {
        $35 = ((($32)) + 1|0);
        HEAP32[$13>>2] = $35;
        $36 = HEAP8[$32>>0]|0;
        $37 = $36&255;
        $39 = $37;
       } else {
        $38 = (___shgetc($0)|0);
        $39 = $38;
       }
       $40 = (_isspace($39)|0);
       $41 = ($40|0)==(0);
       if ($41) {
        break;
       }
      }
      $42 = HEAP32[$14>>2]|0;
      $43 = ($42|0)==(0|0);
      if ($43) {
       $$pre = HEAP32[$13>>2]|0;
       $51 = $$pre;
      } else {
       $44 = HEAP32[$13>>2]|0;
       $45 = ((($44)) + -1|0);
       HEAP32[$13>>2] = $45;
       $46 = $45;
       $51 = $46;
      }
      $47 = HEAP32[$15>>2]|0;
      $48 = HEAP32[$16>>2]|0;
      $49 = (($47) + ($$0283428))|0;
      $50 = (($49) + ($51))|0;
      $52 = (($50) - ($48))|0;
      $$11 = $$1274;$$1289 = $$0288425;$$2285 = $52;$$6311 = $$0305423;$307 = $102;
     }
    } while(0);
    $300 = ((($$11)) + 1|0);
    $301 = HEAP8[$300>>0]|0;
    $302 = ($301<<24>>24)==(0);
    if ($302) {
     $$3291 = $$1289;
     break L4;
    } else {
     $$0273429 = $300;$$0283428 = $$2285;$$0288425 = $$1289;$$0305423 = $$6311;$102 = $307;$24 = $301;
    }
   }
   if ((label|0) == 22) {
    $69 = HEAP32[$14>>2]|0;
    $70 = ($69|0)==(0|0);
    if (!($70)) {
     $71 = HEAP32[$13>>2]|0;
     $72 = ((($71)) + -1|0);
     HEAP32[$13>>2] = $72;
    }
    $73 = ($68|0)>(-1);
    $74 = ($$0288425|0)!=(0);
    $or$cond5 = $74 | $73;
    if ($or$cond5) {
     $$3291 = $$0288425;
     break;
    } else {
     $$1271 = 0;$$8313 = $$0305423;$308 = $102;
     label = 138;
    }
   }
   else if ((label|0) == 137) {
    $$328$le441 = $narrow469&1;
    $$old4 = ($$0288425|0)==(0);
    if ($$old4) {
     $$1271 = $$328$le441;$$8313 = $$7312;$308 = $309;
     label = 138;
    } else {
     $$2 = $$328$le441;$$2290 = $$0288425;$$9314 = $$7312;$304 = $309;
    }
   }
   else if ((label|0) == 139) {
    $$328$le439 = $narrow&1;
    $$2 = $$328$le439;$$2290 = $$0288425;$$9314 = $$9314$ph;$304 = $$ph353;
   }
   if ((label|0) == 138) {
    $$2 = $$1271;$$2290 = -1;$$9314 = $$8313;$304 = $308;
   }
   $303 = ($$2|0)==(0);
   if ($303) {
    $$3291 = $$2290;
   } else {
    _free($$9314);
    _free($304);
    $$3291 = $$2290;
   }
  }
 } while(0);
 $305 = ($306|0)==(0);
 if (!($305)) {
  ___unlockfile($0);
 }
 STACKTOP = sp;return ($$3291|0);
}
function _arg_n($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arglist_current = 0, $arglist_next = 0, $expanded = 0, $expanded1 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $vacopy_currentptr = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $vacopy_currentptr = HEAP32[$0>>2]|0;
 HEAP32[$2>>2] = $vacopy_currentptr;
 $$0 = $1;
 while(1) {
  $3 = ($$0>>>0)>(1);
  $arglist_current = HEAP32[$2>>2]|0;
  $4 = $arglist_current;
  $5 = ((0) + 4|0);
  $expanded1 = $5;
  $expanded = (($expanded1) - 1)|0;
  $6 = (($4) + ($expanded))|0;
  $7 = ((0) + 4|0);
  $expanded5 = $7;
  $expanded4 = (($expanded5) - 1)|0;
  $expanded3 = $expanded4 ^ -1;
  $8 = $6 & $expanded3;
  $9 = $8;
  $10 = HEAP32[$9>>2]|0;
  $arglist_next = ((($9)) + 4|0);
  HEAP32[$2>>2] = $arglist_next;
  $11 = (($$0) + -1)|0;
  if ($3) {
   $$0 = $11;
  } else {
   break;
  }
 }
 STACKTOP = sp;return ($10|0);
}
function _store_int($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($0|0)==(0|0);
 L1: do {
  if (!($4)) {
   switch ($1|0) {
   case -2:  {
    $5 = $2&255;
    HEAP8[$0>>0] = $5;
    break L1;
    break;
   }
   case -1:  {
    $6 = $2&65535;
    HEAP16[$0>>1] = $6;
    break L1;
    break;
   }
   case 0:  {
    HEAP32[$0>>2] = $2;
    break L1;
    break;
   }
   case 1:  {
    HEAP32[$0>>2] = $2;
    break L1;
    break;
   }
   case 3:  {
    $7 = $0;
    $8 = $7;
    HEAP32[$8>>2] = $2;
    $9 = (($7) + 4)|0;
    $10 = $9;
    HEAP32[$10>>2] = $3;
    break L1;
    break;
   }
   default: {
    break L1;
   }
   }
  }
 } while(0);
 return;
}
function _mbsinit($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $5 = 1;
 } else {
  $2 = HEAP32[$0>>2]|0;
  $3 = ($2|0)==(0);
  $5 = $3;
 }
 $4 = $5&1;
 return ($4|0);
}
function _fprintf($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $varargs;
 $3 = (_vfprintf($0,$1,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function _srand($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -1)|0;
 $2 = 9448;
 $3 = $2;
 HEAP32[$3>>2] = $1;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 return;
}
function _rand() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = 9448;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (___muldi3(($2|0),($5|0),1284865837,1481765933)|0);
 $7 = tempRet0;
 $8 = (_i64Add(($6|0),($7|0),1,0)|0);
 $9 = tempRet0;
 $10 = 9448;
 $11 = $10;
 HEAP32[$11>>2] = $8;
 $12 = (($10) + 4)|0;
 $13 = $12;
 HEAP32[$13>>2] = $9;
 $14 = (_bitshift64Lshr(($8|0),($9|0),33)|0);
 $15 = tempRet0;
 return ($14|0);
}
function _fputc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<(0);
 $5 = $0&255;
 $6 = $0 & 255;
 if ($4) {
  label = 3;
 } else {
  $7 = (___lockfile($1)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   label = 3;
  } else {
   $20 = ((($1)) + 75|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = $21 << 24 >> 24;
   $23 = ($6|0)==($22|0);
   if ($23) {
    label = 10;
   } else {
    $24 = ((($1)) + 20|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ((($1)) + 16|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ($25>>>0)<($27>>>0);
    if ($28) {
     $29 = ((($25)) + 1|0);
     HEAP32[$24>>2] = $29;
     HEAP8[$25>>0] = $5;
     $31 = $6;
    } else {
     label = 10;
    }
   }
   if ((label|0) == 10) {
    $30 = (___overflow($1,$0)|0);
    $31 = $30;
   }
   ___unlockfile($1);
   $$0 = $31;
  }
 }
 do {
  if ((label|0) == 3) {
   $9 = ((($1)) + 75|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10 << 24 >> 24;
   $12 = ($6|0)==($11|0);
   if (!($12)) {
    $13 = ((($1)) + 20|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($1)) + 16|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($14>>>0)<($16>>>0);
    if ($17) {
     $18 = ((($14)) + 1|0);
     HEAP32[$13>>2] = $18;
     HEAP8[$14>>0] = $5;
     $$0 = $6;
     break;
    }
   }
   $19 = (___overflow($1,$0)|0);
   $$0 = $19;
  }
 } while(0);
 return ($$0|0);
}
function _printf($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $varargs;
 $2 = HEAP32[340]|0;
 $3 = (_vfprintf($2,$0,$1)|0);
 STACKTOP = sp;return ($3|0);
}
function _malloc($0) {
 $0 = $0|0;
 var $$$0192$i = 0, $$$0193$i = 0, $$$4236$i = 0, $$$4351$i = 0, $$$i = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i18$i = 0, $$01$i$i = 0, $$0189$i = 0, $$0192$lcssa$i = 0, $$01928$i = 0, $$0193$lcssa$i = 0, $$01937$i = 0, $$0197 = 0, $$0199 = 0, $$0206$i$i = 0, $$0207$i$i = 0, $$0211$i$i = 0;
 var $$0212$i$i = 0, $$024371$i = 0, $$0287$i$i = 0, $$0288$i$i = 0, $$0289$i$i = 0, $$0295$i$i = 0, $$0296$i$i = 0, $$0342$i = 0, $$0344$i = 0, $$0345$i = 0, $$0347$i = 0, $$0353$i = 0, $$0358$i = 0, $$0359$$i = 0, $$0359$i = 0, $$0361$i = 0, $$0362$i = 0, $$0368$i = 0, $$1196$i = 0, $$1198$i = 0;
 var $$124470$i = 0, $$1291$i$i = 0, $$1293$i$i = 0, $$1343$i = 0, $$1348$i = 0, $$1363$i = 0, $$1370$i = 0, $$1374$i = 0, $$2234253237$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2355$i = 0, $$3$i = 0, $$3$i$i = 0, $$3$i201 = 0, $$3350$i = 0, $$3372$i = 0, $$4$lcssa$i = 0, $$4$ph$i = 0, $$415$i = 0;
 var $$4236$i = 0, $$4351$lcssa$i = 0, $$435114$i = 0, $$4357$$4$i = 0, $$4357$ph$i = 0, $$435713$i = 0, $$723948$i = 0, $$749$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i19$i = 0, $$pre$i210 = 0, $$pre$i212 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i20$iZ2D = 0, $$pre$phi$i211Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi11$i$iZ2D = 0, $$pre$phiZ2D = 0;
 var $$pre10$i$i = 0, $$sink1$i = 0, $$sink1$i$i = 0, $$sink16$i = 0, $$sink2$i = 0, $$sink2$i204 = 0, $$sink3$i = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0;
 var $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0;
 var $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0;
 var $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0;
 var $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0;
 var $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0;
 var $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0;
 var $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0;
 var $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0;
 var $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0;
 var $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0;
 var $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0;
 var $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0;
 var $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0;
 var $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0;
 var $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0;
 var $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0;
 var $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0;
 var $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0;
 var $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0;
 var $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0;
 var $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0;
 var $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0;
 var $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0;
 var $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0;
 var $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0;
 var $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0;
 var $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0;
 var $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0;
 var $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0;
 var $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0;
 var $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0;
 var $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0;
 var $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0;
 var $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0;
 var $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0;
 var $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0;
 var $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0;
 var $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0;
 var $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i208 = 0, $exitcond$i$i = 0, $not$$i = 0, $not$$i$i = 0, $not$$i17$i = 0, $not$$i209 = 0, $not$$i216 = 0, $not$1$i = 0, $not$1$i203 = 0, $not$5$i = 0, $not$7$i$i = 0, $not$8$i = 0, $not$9$i = 0;
 var $or$cond$i = 0, $or$cond$i214 = 0, $or$cond1$i = 0, $or$cond10$i = 0, $or$cond11$i = 0, $or$cond11$not$i = 0, $or$cond12$i = 0, $or$cond2$i = 0, $or$cond2$i215 = 0, $or$cond5$i = 0, $or$cond50$i = 0, $or$cond51$i = 0, $or$cond7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ($0>>>0)<(245);
 do {
  if ($2) {
   $3 = ($0>>>0)<(11);
   $4 = (($0) + 11)|0;
   $5 = $4 & -8;
   $6 = $3 ? 16 : $5;
   $7 = $6 >>> 3;
   $8 = HEAP32[3014]|0;
   $9 = $8 >>> $7;
   $10 = $9 & 3;
   $11 = ($10|0)==(0);
   if (!($11)) {
    $12 = $9 & 1;
    $13 = $12 ^ 1;
    $14 = (($13) + ($7))|0;
    $15 = $14 << 1;
    $16 = (12096 + ($15<<2)|0);
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($18)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($16|0)==($20|0);
    do {
     if ($21) {
      $22 = 1 << $14;
      $23 = $22 ^ -1;
      $24 = $8 & $23;
      HEAP32[3014] = $24;
     } else {
      $25 = HEAP32[(12072)>>2]|0;
      $26 = ($20>>>0)<($25>>>0);
      if ($26) {
       _abort();
       // unreachable;
      }
      $27 = ((($20)) + 12|0);
      $28 = HEAP32[$27>>2]|0;
      $29 = ($28|0)==($18|0);
      if ($29) {
       HEAP32[$27>>2] = $16;
       HEAP32[$17>>2] = $20;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $30 = $14 << 3;
    $31 = $30 | 3;
    $32 = ((($18)) + 4|0);
    HEAP32[$32>>2] = $31;
    $33 = (($18) + ($30)|0);
    $34 = ((($33)) + 4|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = $35 | 1;
    HEAP32[$34>>2] = $36;
    $$0 = $19;
    STACKTOP = sp;return ($$0|0);
   }
   $37 = HEAP32[(12064)>>2]|0;
   $38 = ($6>>>0)>($37>>>0);
   if ($38) {
    $39 = ($9|0)==(0);
    if (!($39)) {
     $40 = $9 << $7;
     $41 = 2 << $7;
     $42 = (0 - ($41))|0;
     $43 = $41 | $42;
     $44 = $40 & $43;
     $45 = (0 - ($44))|0;
     $46 = $44 & $45;
     $47 = (($46) + -1)|0;
     $48 = $47 >>> 12;
     $49 = $48 & 16;
     $50 = $47 >>> $49;
     $51 = $50 >>> 5;
     $52 = $51 & 8;
     $53 = $52 | $49;
     $54 = $50 >>> $52;
     $55 = $54 >>> 2;
     $56 = $55 & 4;
     $57 = $53 | $56;
     $58 = $54 >>> $56;
     $59 = $58 >>> 1;
     $60 = $59 & 2;
     $61 = $57 | $60;
     $62 = $58 >>> $60;
     $63 = $62 >>> 1;
     $64 = $63 & 1;
     $65 = $61 | $64;
     $66 = $62 >>> $64;
     $67 = (($65) + ($66))|0;
     $68 = $67 << 1;
     $69 = (12096 + ($68<<2)|0);
     $70 = ((($69)) + 8|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = ((($71)) + 8|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = ($69|0)==($73|0);
     do {
      if ($74) {
       $75 = 1 << $67;
       $76 = $75 ^ -1;
       $77 = $8 & $76;
       HEAP32[3014] = $77;
       $98 = $77;
      } else {
       $78 = HEAP32[(12072)>>2]|0;
       $79 = ($73>>>0)<($78>>>0);
       if ($79) {
        _abort();
        // unreachable;
       }
       $80 = ((($73)) + 12|0);
       $81 = HEAP32[$80>>2]|0;
       $82 = ($81|0)==($71|0);
       if ($82) {
        HEAP32[$80>>2] = $69;
        HEAP32[$70>>2] = $73;
        $98 = $8;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $83 = $67 << 3;
     $84 = (($83) - ($6))|0;
     $85 = $6 | 3;
     $86 = ((($71)) + 4|0);
     HEAP32[$86>>2] = $85;
     $87 = (($71) + ($6)|0);
     $88 = $84 | 1;
     $89 = ((($87)) + 4|0);
     HEAP32[$89>>2] = $88;
     $90 = (($87) + ($84)|0);
     HEAP32[$90>>2] = $84;
     $91 = ($37|0)==(0);
     if (!($91)) {
      $92 = HEAP32[(12076)>>2]|0;
      $93 = $37 >>> 3;
      $94 = $93 << 1;
      $95 = (12096 + ($94<<2)|0);
      $96 = 1 << $93;
      $97 = $98 & $96;
      $99 = ($97|0)==(0);
      if ($99) {
       $100 = $98 | $96;
       HEAP32[3014] = $100;
       $$pre = ((($95)) + 8|0);
       $$0199 = $95;$$pre$phiZ2D = $$pre;
      } else {
       $101 = ((($95)) + 8|0);
       $102 = HEAP32[$101>>2]|0;
       $103 = HEAP32[(12072)>>2]|0;
       $104 = ($102>>>0)<($103>>>0);
       if ($104) {
        _abort();
        // unreachable;
       } else {
        $$0199 = $102;$$pre$phiZ2D = $101;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $92;
      $105 = ((($$0199)) + 12|0);
      HEAP32[$105>>2] = $92;
      $106 = ((($92)) + 8|0);
      HEAP32[$106>>2] = $$0199;
      $107 = ((($92)) + 12|0);
      HEAP32[$107>>2] = $95;
     }
     HEAP32[(12064)>>2] = $84;
     HEAP32[(12076)>>2] = $87;
     $$0 = $72;
     STACKTOP = sp;return ($$0|0);
    }
    $108 = HEAP32[(12060)>>2]|0;
    $109 = ($108|0)==(0);
    if ($109) {
     $$0197 = $6;
    } else {
     $110 = (0 - ($108))|0;
     $111 = $108 & $110;
     $112 = (($111) + -1)|0;
     $113 = $112 >>> 12;
     $114 = $113 & 16;
     $115 = $112 >>> $114;
     $116 = $115 >>> 5;
     $117 = $116 & 8;
     $118 = $117 | $114;
     $119 = $115 >>> $117;
     $120 = $119 >>> 2;
     $121 = $120 & 4;
     $122 = $118 | $121;
     $123 = $119 >>> $121;
     $124 = $123 >>> 1;
     $125 = $124 & 2;
     $126 = $122 | $125;
     $127 = $123 >>> $125;
     $128 = $127 >>> 1;
     $129 = $128 & 1;
     $130 = $126 | $129;
     $131 = $127 >>> $129;
     $132 = (($130) + ($131))|0;
     $133 = (12360 + ($132<<2)|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = ((($134)) + 4|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = $136 & -8;
     $138 = (($137) - ($6))|0;
     $139 = ((($134)) + 16|0);
     $140 = HEAP32[$139>>2]|0;
     $not$5$i = ($140|0)==(0|0);
     $$sink16$i = $not$5$i&1;
     $141 = (((($134)) + 16|0) + ($$sink16$i<<2)|0);
     $142 = HEAP32[$141>>2]|0;
     $143 = ($142|0)==(0|0);
     if ($143) {
      $$0192$lcssa$i = $134;$$0193$lcssa$i = $138;
     } else {
      $$01928$i = $134;$$01937$i = $138;$145 = $142;
      while(1) {
       $144 = ((($145)) + 4|0);
       $146 = HEAP32[$144>>2]|0;
       $147 = $146 & -8;
       $148 = (($147) - ($6))|0;
       $149 = ($148>>>0)<($$01937$i>>>0);
       $$$0193$i = $149 ? $148 : $$01937$i;
       $$$0192$i = $149 ? $145 : $$01928$i;
       $150 = ((($145)) + 16|0);
       $151 = HEAP32[$150>>2]|0;
       $not$$i = ($151|0)==(0|0);
       $$sink1$i = $not$$i&1;
       $152 = (((($145)) + 16|0) + ($$sink1$i<<2)|0);
       $153 = HEAP32[$152>>2]|0;
       $154 = ($153|0)==(0|0);
       if ($154) {
        $$0192$lcssa$i = $$$0192$i;$$0193$lcssa$i = $$$0193$i;
        break;
       } else {
        $$01928$i = $$$0192$i;$$01937$i = $$$0193$i;$145 = $153;
       }
      }
     }
     $155 = HEAP32[(12072)>>2]|0;
     $156 = ($$0192$lcssa$i>>>0)<($155>>>0);
     if ($156) {
      _abort();
      // unreachable;
     }
     $157 = (($$0192$lcssa$i) + ($6)|0);
     $158 = ($$0192$lcssa$i>>>0)<($157>>>0);
     if (!($158)) {
      _abort();
      // unreachable;
     }
     $159 = ((($$0192$lcssa$i)) + 24|0);
     $160 = HEAP32[$159>>2]|0;
     $161 = ((($$0192$lcssa$i)) + 12|0);
     $162 = HEAP32[$161>>2]|0;
     $163 = ($162|0)==($$0192$lcssa$i|0);
     do {
      if ($163) {
       $173 = ((($$0192$lcssa$i)) + 20|0);
       $174 = HEAP32[$173>>2]|0;
       $175 = ($174|0)==(0|0);
       if ($175) {
        $176 = ((($$0192$lcssa$i)) + 16|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = ($177|0)==(0|0);
        if ($178) {
         $$3$i = 0;
         break;
        } else {
         $$1196$i = $177;$$1198$i = $176;
        }
       } else {
        $$1196$i = $174;$$1198$i = $173;
       }
       while(1) {
        $179 = ((($$1196$i)) + 20|0);
        $180 = HEAP32[$179>>2]|0;
        $181 = ($180|0)==(0|0);
        if (!($181)) {
         $$1196$i = $180;$$1198$i = $179;
         continue;
        }
        $182 = ((($$1196$i)) + 16|0);
        $183 = HEAP32[$182>>2]|0;
        $184 = ($183|0)==(0|0);
        if ($184) {
         break;
        } else {
         $$1196$i = $183;$$1198$i = $182;
        }
       }
       $185 = ($$1198$i>>>0)<($155>>>0);
       if ($185) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$$1198$i>>2] = 0;
        $$3$i = $$1196$i;
        break;
       }
      } else {
       $164 = ((($$0192$lcssa$i)) + 8|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = ($165>>>0)<($155>>>0);
       if ($166) {
        _abort();
        // unreachable;
       }
       $167 = ((($165)) + 12|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($168|0)==($$0192$lcssa$i|0);
       if (!($169)) {
        _abort();
        // unreachable;
       }
       $170 = ((($162)) + 8|0);
       $171 = HEAP32[$170>>2]|0;
       $172 = ($171|0)==($$0192$lcssa$i|0);
       if ($172) {
        HEAP32[$167>>2] = $162;
        HEAP32[$170>>2] = $165;
        $$3$i = $162;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $186 = ($160|0)==(0|0);
     L73: do {
      if (!($186)) {
       $187 = ((($$0192$lcssa$i)) + 28|0);
       $188 = HEAP32[$187>>2]|0;
       $189 = (12360 + ($188<<2)|0);
       $190 = HEAP32[$189>>2]|0;
       $191 = ($$0192$lcssa$i|0)==($190|0);
       do {
        if ($191) {
         HEAP32[$189>>2] = $$3$i;
         $cond$i = ($$3$i|0)==(0|0);
         if ($cond$i) {
          $192 = 1 << $188;
          $193 = $192 ^ -1;
          $194 = $108 & $193;
          HEAP32[(12060)>>2] = $194;
          break L73;
         }
        } else {
         $195 = HEAP32[(12072)>>2]|0;
         $196 = ($160>>>0)<($195>>>0);
         if ($196) {
          _abort();
          // unreachable;
         } else {
          $197 = ((($160)) + 16|0);
          $198 = HEAP32[$197>>2]|0;
          $not$1$i = ($198|0)!=($$0192$lcssa$i|0);
          $$sink2$i = $not$1$i&1;
          $199 = (((($160)) + 16|0) + ($$sink2$i<<2)|0);
          HEAP32[$199>>2] = $$3$i;
          $200 = ($$3$i|0)==(0|0);
          if ($200) {
           break L73;
          } else {
           break;
          }
         }
        }
       } while(0);
       $201 = HEAP32[(12072)>>2]|0;
       $202 = ($$3$i>>>0)<($201>>>0);
       if ($202) {
        _abort();
        // unreachable;
       }
       $203 = ((($$3$i)) + 24|0);
       HEAP32[$203>>2] = $160;
       $204 = ((($$0192$lcssa$i)) + 16|0);
       $205 = HEAP32[$204>>2]|0;
       $206 = ($205|0)==(0|0);
       do {
        if (!($206)) {
         $207 = ($205>>>0)<($201>>>0);
         if ($207) {
          _abort();
          // unreachable;
         } else {
          $208 = ((($$3$i)) + 16|0);
          HEAP32[$208>>2] = $205;
          $209 = ((($205)) + 24|0);
          HEAP32[$209>>2] = $$3$i;
          break;
         }
        }
       } while(0);
       $210 = ((($$0192$lcssa$i)) + 20|0);
       $211 = HEAP32[$210>>2]|0;
       $212 = ($211|0)==(0|0);
       if (!($212)) {
        $213 = HEAP32[(12072)>>2]|0;
        $214 = ($211>>>0)<($213>>>0);
        if ($214) {
         _abort();
         // unreachable;
        } else {
         $215 = ((($$3$i)) + 20|0);
         HEAP32[$215>>2] = $211;
         $216 = ((($211)) + 24|0);
         HEAP32[$216>>2] = $$3$i;
         break;
        }
       }
      }
     } while(0);
     $217 = ($$0193$lcssa$i>>>0)<(16);
     if ($217) {
      $218 = (($$0193$lcssa$i) + ($6))|0;
      $219 = $218 | 3;
      $220 = ((($$0192$lcssa$i)) + 4|0);
      HEAP32[$220>>2] = $219;
      $221 = (($$0192$lcssa$i) + ($218)|0);
      $222 = ((($221)) + 4|0);
      $223 = HEAP32[$222>>2]|0;
      $224 = $223 | 1;
      HEAP32[$222>>2] = $224;
     } else {
      $225 = $6 | 3;
      $226 = ((($$0192$lcssa$i)) + 4|0);
      HEAP32[$226>>2] = $225;
      $227 = $$0193$lcssa$i | 1;
      $228 = ((($157)) + 4|0);
      HEAP32[$228>>2] = $227;
      $229 = (($157) + ($$0193$lcssa$i)|0);
      HEAP32[$229>>2] = $$0193$lcssa$i;
      $230 = ($37|0)==(0);
      if (!($230)) {
       $231 = HEAP32[(12076)>>2]|0;
       $232 = $37 >>> 3;
       $233 = $232 << 1;
       $234 = (12096 + ($233<<2)|0);
       $235 = 1 << $232;
       $236 = $8 & $235;
       $237 = ($236|0)==(0);
       if ($237) {
        $238 = $8 | $235;
        HEAP32[3014] = $238;
        $$pre$i = ((($234)) + 8|0);
        $$0189$i = $234;$$pre$phi$iZ2D = $$pre$i;
       } else {
        $239 = ((($234)) + 8|0);
        $240 = HEAP32[$239>>2]|0;
        $241 = HEAP32[(12072)>>2]|0;
        $242 = ($240>>>0)<($241>>>0);
        if ($242) {
         _abort();
         // unreachable;
        } else {
         $$0189$i = $240;$$pre$phi$iZ2D = $239;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $231;
       $243 = ((($$0189$i)) + 12|0);
       HEAP32[$243>>2] = $231;
       $244 = ((($231)) + 8|0);
       HEAP32[$244>>2] = $$0189$i;
       $245 = ((($231)) + 12|0);
       HEAP32[$245>>2] = $234;
      }
      HEAP32[(12064)>>2] = $$0193$lcssa$i;
      HEAP32[(12076)>>2] = $157;
     }
     $246 = ((($$0192$lcssa$i)) + 8|0);
     $$0 = $246;
     STACKTOP = sp;return ($$0|0);
    }
   } else {
    $$0197 = $6;
   }
  } else {
   $247 = ($0>>>0)>(4294967231);
   if ($247) {
    $$0197 = -1;
   } else {
    $248 = (($0) + 11)|0;
    $249 = $248 & -8;
    $250 = HEAP32[(12060)>>2]|0;
    $251 = ($250|0)==(0);
    if ($251) {
     $$0197 = $249;
    } else {
     $252 = (0 - ($249))|0;
     $253 = $248 >>> 8;
     $254 = ($253|0)==(0);
     if ($254) {
      $$0358$i = 0;
     } else {
      $255 = ($249>>>0)>(16777215);
      if ($255) {
       $$0358$i = 31;
      } else {
       $256 = (($253) + 1048320)|0;
       $257 = $256 >>> 16;
       $258 = $257 & 8;
       $259 = $253 << $258;
       $260 = (($259) + 520192)|0;
       $261 = $260 >>> 16;
       $262 = $261 & 4;
       $263 = $262 | $258;
       $264 = $259 << $262;
       $265 = (($264) + 245760)|0;
       $266 = $265 >>> 16;
       $267 = $266 & 2;
       $268 = $263 | $267;
       $269 = (14 - ($268))|0;
       $270 = $264 << $267;
       $271 = $270 >>> 15;
       $272 = (($269) + ($271))|0;
       $273 = $272 << 1;
       $274 = (($272) + 7)|0;
       $275 = $249 >>> $274;
       $276 = $275 & 1;
       $277 = $276 | $273;
       $$0358$i = $277;
      }
     }
     $278 = (12360 + ($$0358$i<<2)|0);
     $279 = HEAP32[$278>>2]|0;
     $280 = ($279|0)==(0|0);
     L117: do {
      if ($280) {
       $$2355$i = 0;$$3$i201 = 0;$$3350$i = $252;
       label = 81;
      } else {
       $281 = ($$0358$i|0)==(31);
       $282 = $$0358$i >>> 1;
       $283 = (25 - ($282))|0;
       $284 = $281 ? 0 : $283;
       $285 = $249 << $284;
       $$0342$i = 0;$$0347$i = $252;$$0353$i = $279;$$0359$i = $285;$$0362$i = 0;
       while(1) {
        $286 = ((($$0353$i)) + 4|0);
        $287 = HEAP32[$286>>2]|0;
        $288 = $287 & -8;
        $289 = (($288) - ($249))|0;
        $290 = ($289>>>0)<($$0347$i>>>0);
        if ($290) {
         $291 = ($289|0)==(0);
         if ($291) {
          $$415$i = $$0353$i;$$435114$i = 0;$$435713$i = $$0353$i;
          label = 85;
          break L117;
         } else {
          $$1343$i = $$0353$i;$$1348$i = $289;
         }
        } else {
         $$1343$i = $$0342$i;$$1348$i = $$0347$i;
        }
        $292 = ((($$0353$i)) + 20|0);
        $293 = HEAP32[$292>>2]|0;
        $294 = $$0359$i >>> 31;
        $295 = (((($$0353$i)) + 16|0) + ($294<<2)|0);
        $296 = HEAP32[$295>>2]|0;
        $297 = ($293|0)==(0|0);
        $298 = ($293|0)==($296|0);
        $or$cond2$i = $297 | $298;
        $$1363$i = $or$cond2$i ? $$0362$i : $293;
        $299 = ($296|0)==(0|0);
        $not$8$i = $299 ^ 1;
        $300 = $not$8$i&1;
        $$0359$$i = $$0359$i << $300;
        if ($299) {
         $$2355$i = $$1363$i;$$3$i201 = $$1343$i;$$3350$i = $$1348$i;
         label = 81;
         break;
        } else {
         $$0342$i = $$1343$i;$$0347$i = $$1348$i;$$0353$i = $296;$$0359$i = $$0359$$i;$$0362$i = $$1363$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 81) {
      $301 = ($$2355$i|0)==(0|0);
      $302 = ($$3$i201|0)==(0|0);
      $or$cond$i = $301 & $302;
      if ($or$cond$i) {
       $303 = 2 << $$0358$i;
       $304 = (0 - ($303))|0;
       $305 = $303 | $304;
       $306 = $250 & $305;
       $307 = ($306|0)==(0);
       if ($307) {
        $$0197 = $249;
        break;
       }
       $308 = (0 - ($306))|0;
       $309 = $306 & $308;
       $310 = (($309) + -1)|0;
       $311 = $310 >>> 12;
       $312 = $311 & 16;
       $313 = $310 >>> $312;
       $314 = $313 >>> 5;
       $315 = $314 & 8;
       $316 = $315 | $312;
       $317 = $313 >>> $315;
       $318 = $317 >>> 2;
       $319 = $318 & 4;
       $320 = $316 | $319;
       $321 = $317 >>> $319;
       $322 = $321 >>> 1;
       $323 = $322 & 2;
       $324 = $320 | $323;
       $325 = $321 >>> $323;
       $326 = $325 >>> 1;
       $327 = $326 & 1;
       $328 = $324 | $327;
       $329 = $325 >>> $327;
       $330 = (($328) + ($329))|0;
       $331 = (12360 + ($330<<2)|0);
       $332 = HEAP32[$331>>2]|0;
       $$4$ph$i = 0;$$4357$ph$i = $332;
      } else {
       $$4$ph$i = $$3$i201;$$4357$ph$i = $$2355$i;
      }
      $333 = ($$4357$ph$i|0)==(0|0);
      if ($333) {
       $$4$lcssa$i = $$4$ph$i;$$4351$lcssa$i = $$3350$i;
      } else {
       $$415$i = $$4$ph$i;$$435114$i = $$3350$i;$$435713$i = $$4357$ph$i;
       label = 85;
      }
     }
     if ((label|0) == 85) {
      while(1) {
       label = 0;
       $334 = ((($$435713$i)) + 4|0);
       $335 = HEAP32[$334>>2]|0;
       $336 = $335 & -8;
       $337 = (($336) - ($249))|0;
       $338 = ($337>>>0)<($$435114$i>>>0);
       $$$4351$i = $338 ? $337 : $$435114$i;
       $$4357$$4$i = $338 ? $$435713$i : $$415$i;
       $339 = ((($$435713$i)) + 16|0);
       $340 = HEAP32[$339>>2]|0;
       $not$1$i203 = ($340|0)==(0|0);
       $$sink2$i204 = $not$1$i203&1;
       $341 = (((($$435713$i)) + 16|0) + ($$sink2$i204<<2)|0);
       $342 = HEAP32[$341>>2]|0;
       $343 = ($342|0)==(0|0);
       if ($343) {
        $$4$lcssa$i = $$4357$$4$i;$$4351$lcssa$i = $$$4351$i;
        break;
       } else {
        $$415$i = $$4357$$4$i;$$435114$i = $$$4351$i;$$435713$i = $342;
        label = 85;
       }
      }
     }
     $344 = ($$4$lcssa$i|0)==(0|0);
     if ($344) {
      $$0197 = $249;
     } else {
      $345 = HEAP32[(12064)>>2]|0;
      $346 = (($345) - ($249))|0;
      $347 = ($$4351$lcssa$i>>>0)<($346>>>0);
      if ($347) {
       $348 = HEAP32[(12072)>>2]|0;
       $349 = ($$4$lcssa$i>>>0)<($348>>>0);
       if ($349) {
        _abort();
        // unreachable;
       }
       $350 = (($$4$lcssa$i) + ($249)|0);
       $351 = ($$4$lcssa$i>>>0)<($350>>>0);
       if (!($351)) {
        _abort();
        // unreachable;
       }
       $352 = ((($$4$lcssa$i)) + 24|0);
       $353 = HEAP32[$352>>2]|0;
       $354 = ((($$4$lcssa$i)) + 12|0);
       $355 = HEAP32[$354>>2]|0;
       $356 = ($355|0)==($$4$lcssa$i|0);
       do {
        if ($356) {
         $366 = ((($$4$lcssa$i)) + 20|0);
         $367 = HEAP32[$366>>2]|0;
         $368 = ($367|0)==(0|0);
         if ($368) {
          $369 = ((($$4$lcssa$i)) + 16|0);
          $370 = HEAP32[$369>>2]|0;
          $371 = ($370|0)==(0|0);
          if ($371) {
           $$3372$i = 0;
           break;
          } else {
           $$1370$i = $370;$$1374$i = $369;
          }
         } else {
          $$1370$i = $367;$$1374$i = $366;
         }
         while(1) {
          $372 = ((($$1370$i)) + 20|0);
          $373 = HEAP32[$372>>2]|0;
          $374 = ($373|0)==(0|0);
          if (!($374)) {
           $$1370$i = $373;$$1374$i = $372;
           continue;
          }
          $375 = ((($$1370$i)) + 16|0);
          $376 = HEAP32[$375>>2]|0;
          $377 = ($376|0)==(0|0);
          if ($377) {
           break;
          } else {
           $$1370$i = $376;$$1374$i = $375;
          }
         }
         $378 = ($$1374$i>>>0)<($348>>>0);
         if ($378) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$$1374$i>>2] = 0;
          $$3372$i = $$1370$i;
          break;
         }
        } else {
         $357 = ((($$4$lcssa$i)) + 8|0);
         $358 = HEAP32[$357>>2]|0;
         $359 = ($358>>>0)<($348>>>0);
         if ($359) {
          _abort();
          // unreachable;
         }
         $360 = ((($358)) + 12|0);
         $361 = HEAP32[$360>>2]|0;
         $362 = ($361|0)==($$4$lcssa$i|0);
         if (!($362)) {
          _abort();
          // unreachable;
         }
         $363 = ((($355)) + 8|0);
         $364 = HEAP32[$363>>2]|0;
         $365 = ($364|0)==($$4$lcssa$i|0);
         if ($365) {
          HEAP32[$360>>2] = $355;
          HEAP32[$363>>2] = $358;
          $$3372$i = $355;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $379 = ($353|0)==(0|0);
       L164: do {
        if ($379) {
         $470 = $250;
        } else {
         $380 = ((($$4$lcssa$i)) + 28|0);
         $381 = HEAP32[$380>>2]|0;
         $382 = (12360 + ($381<<2)|0);
         $383 = HEAP32[$382>>2]|0;
         $384 = ($$4$lcssa$i|0)==($383|0);
         do {
          if ($384) {
           HEAP32[$382>>2] = $$3372$i;
           $cond$i208 = ($$3372$i|0)==(0|0);
           if ($cond$i208) {
            $385 = 1 << $381;
            $386 = $385 ^ -1;
            $387 = $250 & $386;
            HEAP32[(12060)>>2] = $387;
            $470 = $387;
            break L164;
           }
          } else {
           $388 = HEAP32[(12072)>>2]|0;
           $389 = ($353>>>0)<($388>>>0);
           if ($389) {
            _abort();
            // unreachable;
           } else {
            $390 = ((($353)) + 16|0);
            $391 = HEAP32[$390>>2]|0;
            $not$$i209 = ($391|0)!=($$4$lcssa$i|0);
            $$sink3$i = $not$$i209&1;
            $392 = (((($353)) + 16|0) + ($$sink3$i<<2)|0);
            HEAP32[$392>>2] = $$3372$i;
            $393 = ($$3372$i|0)==(0|0);
            if ($393) {
             $470 = $250;
             break L164;
            } else {
             break;
            }
           }
          }
         } while(0);
         $394 = HEAP32[(12072)>>2]|0;
         $395 = ($$3372$i>>>0)<($394>>>0);
         if ($395) {
          _abort();
          // unreachable;
         }
         $396 = ((($$3372$i)) + 24|0);
         HEAP32[$396>>2] = $353;
         $397 = ((($$4$lcssa$i)) + 16|0);
         $398 = HEAP32[$397>>2]|0;
         $399 = ($398|0)==(0|0);
         do {
          if (!($399)) {
           $400 = ($398>>>0)<($394>>>0);
           if ($400) {
            _abort();
            // unreachable;
           } else {
            $401 = ((($$3372$i)) + 16|0);
            HEAP32[$401>>2] = $398;
            $402 = ((($398)) + 24|0);
            HEAP32[$402>>2] = $$3372$i;
            break;
           }
          }
         } while(0);
         $403 = ((($$4$lcssa$i)) + 20|0);
         $404 = HEAP32[$403>>2]|0;
         $405 = ($404|0)==(0|0);
         if ($405) {
          $470 = $250;
         } else {
          $406 = HEAP32[(12072)>>2]|0;
          $407 = ($404>>>0)<($406>>>0);
          if ($407) {
           _abort();
           // unreachable;
          } else {
           $408 = ((($$3372$i)) + 20|0);
           HEAP32[$408>>2] = $404;
           $409 = ((($404)) + 24|0);
           HEAP32[$409>>2] = $$3372$i;
           $470 = $250;
           break;
          }
         }
        }
       } while(0);
       $410 = ($$4351$lcssa$i>>>0)<(16);
       do {
        if ($410) {
         $411 = (($$4351$lcssa$i) + ($249))|0;
         $412 = $411 | 3;
         $413 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$413>>2] = $412;
         $414 = (($$4$lcssa$i) + ($411)|0);
         $415 = ((($414)) + 4|0);
         $416 = HEAP32[$415>>2]|0;
         $417 = $416 | 1;
         HEAP32[$415>>2] = $417;
        } else {
         $418 = $249 | 3;
         $419 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$419>>2] = $418;
         $420 = $$4351$lcssa$i | 1;
         $421 = ((($350)) + 4|0);
         HEAP32[$421>>2] = $420;
         $422 = (($350) + ($$4351$lcssa$i)|0);
         HEAP32[$422>>2] = $$4351$lcssa$i;
         $423 = $$4351$lcssa$i >>> 3;
         $424 = ($$4351$lcssa$i>>>0)<(256);
         if ($424) {
          $425 = $423 << 1;
          $426 = (12096 + ($425<<2)|0);
          $427 = HEAP32[3014]|0;
          $428 = 1 << $423;
          $429 = $427 & $428;
          $430 = ($429|0)==(0);
          if ($430) {
           $431 = $427 | $428;
           HEAP32[3014] = $431;
           $$pre$i210 = ((($426)) + 8|0);
           $$0368$i = $426;$$pre$phi$i211Z2D = $$pre$i210;
          } else {
           $432 = ((($426)) + 8|0);
           $433 = HEAP32[$432>>2]|0;
           $434 = HEAP32[(12072)>>2]|0;
           $435 = ($433>>>0)<($434>>>0);
           if ($435) {
            _abort();
            // unreachable;
           } else {
            $$0368$i = $433;$$pre$phi$i211Z2D = $432;
           }
          }
          HEAP32[$$pre$phi$i211Z2D>>2] = $350;
          $436 = ((($$0368$i)) + 12|0);
          HEAP32[$436>>2] = $350;
          $437 = ((($350)) + 8|0);
          HEAP32[$437>>2] = $$0368$i;
          $438 = ((($350)) + 12|0);
          HEAP32[$438>>2] = $426;
          break;
         }
         $439 = $$4351$lcssa$i >>> 8;
         $440 = ($439|0)==(0);
         if ($440) {
          $$0361$i = 0;
         } else {
          $441 = ($$4351$lcssa$i>>>0)>(16777215);
          if ($441) {
           $$0361$i = 31;
          } else {
           $442 = (($439) + 1048320)|0;
           $443 = $442 >>> 16;
           $444 = $443 & 8;
           $445 = $439 << $444;
           $446 = (($445) + 520192)|0;
           $447 = $446 >>> 16;
           $448 = $447 & 4;
           $449 = $448 | $444;
           $450 = $445 << $448;
           $451 = (($450) + 245760)|0;
           $452 = $451 >>> 16;
           $453 = $452 & 2;
           $454 = $449 | $453;
           $455 = (14 - ($454))|0;
           $456 = $450 << $453;
           $457 = $456 >>> 15;
           $458 = (($455) + ($457))|0;
           $459 = $458 << 1;
           $460 = (($458) + 7)|0;
           $461 = $$4351$lcssa$i >>> $460;
           $462 = $461 & 1;
           $463 = $462 | $459;
           $$0361$i = $463;
          }
         }
         $464 = (12360 + ($$0361$i<<2)|0);
         $465 = ((($350)) + 28|0);
         HEAP32[$465>>2] = $$0361$i;
         $466 = ((($350)) + 16|0);
         $467 = ((($466)) + 4|0);
         HEAP32[$467>>2] = 0;
         HEAP32[$466>>2] = 0;
         $468 = 1 << $$0361$i;
         $469 = $470 & $468;
         $471 = ($469|0)==(0);
         if ($471) {
          $472 = $470 | $468;
          HEAP32[(12060)>>2] = $472;
          HEAP32[$464>>2] = $350;
          $473 = ((($350)) + 24|0);
          HEAP32[$473>>2] = $464;
          $474 = ((($350)) + 12|0);
          HEAP32[$474>>2] = $350;
          $475 = ((($350)) + 8|0);
          HEAP32[$475>>2] = $350;
          break;
         }
         $476 = HEAP32[$464>>2]|0;
         $477 = ($$0361$i|0)==(31);
         $478 = $$0361$i >>> 1;
         $479 = (25 - ($478))|0;
         $480 = $477 ? 0 : $479;
         $481 = $$4351$lcssa$i << $480;
         $$0344$i = $481;$$0345$i = $476;
         while(1) {
          $482 = ((($$0345$i)) + 4|0);
          $483 = HEAP32[$482>>2]|0;
          $484 = $483 & -8;
          $485 = ($484|0)==($$4351$lcssa$i|0);
          if ($485) {
           label = 139;
           break;
          }
          $486 = $$0344$i >>> 31;
          $487 = (((($$0345$i)) + 16|0) + ($486<<2)|0);
          $488 = $$0344$i << 1;
          $489 = HEAP32[$487>>2]|0;
          $490 = ($489|0)==(0|0);
          if ($490) {
           label = 136;
           break;
          } else {
           $$0344$i = $488;$$0345$i = $489;
          }
         }
         if ((label|0) == 136) {
          $491 = HEAP32[(12072)>>2]|0;
          $492 = ($487>>>0)<($491>>>0);
          if ($492) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$487>>2] = $350;
           $493 = ((($350)) + 24|0);
           HEAP32[$493>>2] = $$0345$i;
           $494 = ((($350)) + 12|0);
           HEAP32[$494>>2] = $350;
           $495 = ((($350)) + 8|0);
           HEAP32[$495>>2] = $350;
           break;
          }
         }
         else if ((label|0) == 139) {
          $496 = ((($$0345$i)) + 8|0);
          $497 = HEAP32[$496>>2]|0;
          $498 = HEAP32[(12072)>>2]|0;
          $499 = ($497>>>0)>=($498>>>0);
          $not$9$i = ($$0345$i>>>0)>=($498>>>0);
          $500 = $499 & $not$9$i;
          if ($500) {
           $501 = ((($497)) + 12|0);
           HEAP32[$501>>2] = $350;
           HEAP32[$496>>2] = $350;
           $502 = ((($350)) + 8|0);
           HEAP32[$502>>2] = $497;
           $503 = ((($350)) + 12|0);
           HEAP32[$503>>2] = $$0345$i;
           $504 = ((($350)) + 24|0);
           HEAP32[$504>>2] = 0;
           break;
          } else {
           _abort();
           // unreachable;
          }
         }
        }
       } while(0);
       $505 = ((($$4$lcssa$i)) + 8|0);
       $$0 = $505;
       STACKTOP = sp;return ($$0|0);
      } else {
       $$0197 = $249;
      }
     }
    }
   }
  }
 } while(0);
 $506 = HEAP32[(12064)>>2]|0;
 $507 = ($506>>>0)<($$0197>>>0);
 if (!($507)) {
  $508 = (($506) - ($$0197))|0;
  $509 = HEAP32[(12076)>>2]|0;
  $510 = ($508>>>0)>(15);
  if ($510) {
   $511 = (($509) + ($$0197)|0);
   HEAP32[(12076)>>2] = $511;
   HEAP32[(12064)>>2] = $508;
   $512 = $508 | 1;
   $513 = ((($511)) + 4|0);
   HEAP32[$513>>2] = $512;
   $514 = (($511) + ($508)|0);
   HEAP32[$514>>2] = $508;
   $515 = $$0197 | 3;
   $516 = ((($509)) + 4|0);
   HEAP32[$516>>2] = $515;
  } else {
   HEAP32[(12064)>>2] = 0;
   HEAP32[(12076)>>2] = 0;
   $517 = $506 | 3;
   $518 = ((($509)) + 4|0);
   HEAP32[$518>>2] = $517;
   $519 = (($509) + ($506)|0);
   $520 = ((($519)) + 4|0);
   $521 = HEAP32[$520>>2]|0;
   $522 = $521 | 1;
   HEAP32[$520>>2] = $522;
  }
  $523 = ((($509)) + 8|0);
  $$0 = $523;
  STACKTOP = sp;return ($$0|0);
 }
 $524 = HEAP32[(12068)>>2]|0;
 $525 = ($524>>>0)>($$0197>>>0);
 if ($525) {
  $526 = (($524) - ($$0197))|0;
  HEAP32[(12068)>>2] = $526;
  $527 = HEAP32[(12080)>>2]|0;
  $528 = (($527) + ($$0197)|0);
  HEAP32[(12080)>>2] = $528;
  $529 = $526 | 1;
  $530 = ((($528)) + 4|0);
  HEAP32[$530>>2] = $529;
  $531 = $$0197 | 3;
  $532 = ((($527)) + 4|0);
  HEAP32[$532>>2] = $531;
  $533 = ((($527)) + 8|0);
  $$0 = $533;
  STACKTOP = sp;return ($$0|0);
 }
 $534 = HEAP32[3132]|0;
 $535 = ($534|0)==(0);
 if ($535) {
  HEAP32[(12536)>>2] = 4096;
  HEAP32[(12532)>>2] = 4096;
  HEAP32[(12540)>>2] = -1;
  HEAP32[(12544)>>2] = -1;
  HEAP32[(12548)>>2] = 0;
  HEAP32[(12500)>>2] = 0;
  $536 = $1;
  $537 = $536 & -16;
  $538 = $537 ^ 1431655768;
  HEAP32[$1>>2] = $538;
  HEAP32[3132] = $538;
  $542 = 4096;
 } else {
  $$pre$i212 = HEAP32[(12536)>>2]|0;
  $542 = $$pre$i212;
 }
 $539 = (($$0197) + 48)|0;
 $540 = (($$0197) + 47)|0;
 $541 = (($542) + ($540))|0;
 $543 = (0 - ($542))|0;
 $544 = $541 & $543;
 $545 = ($544>>>0)>($$0197>>>0);
 if (!($545)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $546 = HEAP32[(12496)>>2]|0;
 $547 = ($546|0)==(0);
 if (!($547)) {
  $548 = HEAP32[(12488)>>2]|0;
  $549 = (($548) + ($544))|0;
  $550 = ($549>>>0)<=($548>>>0);
  $551 = ($549>>>0)>($546>>>0);
  $or$cond1$i = $550 | $551;
  if ($or$cond1$i) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $552 = HEAP32[(12500)>>2]|0;
 $553 = $552 & 4;
 $554 = ($553|0)==(0);
 L244: do {
  if ($554) {
   $555 = HEAP32[(12080)>>2]|0;
   $556 = ($555|0)==(0|0);
   L246: do {
    if ($556) {
     label = 163;
    } else {
     $$0$i$i = (12504);
     while(1) {
      $557 = HEAP32[$$0$i$i>>2]|0;
      $558 = ($557>>>0)>($555>>>0);
      if (!($558)) {
       $559 = ((($$0$i$i)) + 4|0);
       $560 = HEAP32[$559>>2]|0;
       $561 = (($557) + ($560)|0);
       $562 = ($561>>>0)>($555>>>0);
       if ($562) {
        break;
       }
      }
      $563 = ((($$0$i$i)) + 8|0);
      $564 = HEAP32[$563>>2]|0;
      $565 = ($564|0)==(0|0);
      if ($565) {
       label = 163;
       break L246;
      } else {
       $$0$i$i = $564;
      }
     }
     $588 = (($541) - ($524))|0;
     $589 = $588 & $543;
     $590 = ($589>>>0)<(2147483647);
     if ($590) {
      $591 = (_sbrk(($589|0))|0);
      $592 = HEAP32[$$0$i$i>>2]|0;
      $593 = HEAP32[$559>>2]|0;
      $594 = (($592) + ($593)|0);
      $595 = ($591|0)==($594|0);
      if ($595) {
       $596 = ($591|0)==((-1)|0);
       if ($596) {
        $$2234253237$i = $589;
       } else {
        $$723948$i = $589;$$749$i = $591;
        label = 180;
        break L244;
       }
      } else {
       $$2247$ph$i = $591;$$2253$ph$i = $589;
       label = 171;
      }
     } else {
      $$2234253237$i = 0;
     }
    }
   } while(0);
   do {
    if ((label|0) == 163) {
     $566 = (_sbrk(0)|0);
     $567 = ($566|0)==((-1)|0);
     if ($567) {
      $$2234253237$i = 0;
     } else {
      $568 = $566;
      $569 = HEAP32[(12532)>>2]|0;
      $570 = (($569) + -1)|0;
      $571 = $570 & $568;
      $572 = ($571|0)==(0);
      $573 = (($570) + ($568))|0;
      $574 = (0 - ($569))|0;
      $575 = $573 & $574;
      $576 = (($575) - ($568))|0;
      $577 = $572 ? 0 : $576;
      $$$i = (($577) + ($544))|0;
      $578 = HEAP32[(12488)>>2]|0;
      $579 = (($$$i) + ($578))|0;
      $580 = ($$$i>>>0)>($$0197>>>0);
      $581 = ($$$i>>>0)<(2147483647);
      $or$cond$i214 = $580 & $581;
      if ($or$cond$i214) {
       $582 = HEAP32[(12496)>>2]|0;
       $583 = ($582|0)==(0);
       if (!($583)) {
        $584 = ($579>>>0)<=($578>>>0);
        $585 = ($579>>>0)>($582>>>0);
        $or$cond2$i215 = $584 | $585;
        if ($or$cond2$i215) {
         $$2234253237$i = 0;
         break;
        }
       }
       $586 = (_sbrk(($$$i|0))|0);
       $587 = ($586|0)==($566|0);
       if ($587) {
        $$723948$i = $$$i;$$749$i = $566;
        label = 180;
        break L244;
       } else {
        $$2247$ph$i = $586;$$2253$ph$i = $$$i;
        label = 171;
       }
      } else {
       $$2234253237$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 171) {
     $597 = (0 - ($$2253$ph$i))|0;
     $598 = ($$2247$ph$i|0)!=((-1)|0);
     $599 = ($$2253$ph$i>>>0)<(2147483647);
     $or$cond7$i = $599 & $598;
     $600 = ($539>>>0)>($$2253$ph$i>>>0);
     $or$cond10$i = $600 & $or$cond7$i;
     if (!($or$cond10$i)) {
      $610 = ($$2247$ph$i|0)==((-1)|0);
      if ($610) {
       $$2234253237$i = 0;
       break;
      } else {
       $$723948$i = $$2253$ph$i;$$749$i = $$2247$ph$i;
       label = 180;
       break L244;
      }
     }
     $601 = HEAP32[(12536)>>2]|0;
     $602 = (($540) - ($$2253$ph$i))|0;
     $603 = (($602) + ($601))|0;
     $604 = (0 - ($601))|0;
     $605 = $603 & $604;
     $606 = ($605>>>0)<(2147483647);
     if (!($606)) {
      $$723948$i = $$2253$ph$i;$$749$i = $$2247$ph$i;
      label = 180;
      break L244;
     }
     $607 = (_sbrk(($605|0))|0);
     $608 = ($607|0)==((-1)|0);
     if ($608) {
      (_sbrk(($597|0))|0);
      $$2234253237$i = 0;
      break;
     } else {
      $609 = (($605) + ($$2253$ph$i))|0;
      $$723948$i = $609;$$749$i = $$2247$ph$i;
      label = 180;
      break L244;
     }
    }
   } while(0);
   $611 = HEAP32[(12500)>>2]|0;
   $612 = $611 | 4;
   HEAP32[(12500)>>2] = $612;
   $$4236$i = $$2234253237$i;
   label = 178;
  } else {
   $$4236$i = 0;
   label = 178;
  }
 } while(0);
 if ((label|0) == 178) {
  $613 = ($544>>>0)<(2147483647);
  if ($613) {
   $614 = (_sbrk(($544|0))|0);
   $615 = (_sbrk(0)|0);
   $616 = ($614|0)!=((-1)|0);
   $617 = ($615|0)!=((-1)|0);
   $or$cond5$i = $616 & $617;
   $618 = ($614>>>0)<($615>>>0);
   $or$cond11$i = $618 & $or$cond5$i;
   $619 = $615;
   $620 = $614;
   $621 = (($619) - ($620))|0;
   $622 = (($$0197) + 40)|0;
   $623 = ($621>>>0)>($622>>>0);
   $$$4236$i = $623 ? $621 : $$4236$i;
   $or$cond11$not$i = $or$cond11$i ^ 1;
   $624 = ($614|0)==((-1)|0);
   $not$$i216 = $623 ^ 1;
   $625 = $624 | $not$$i216;
   $or$cond50$i = $625 | $or$cond11$not$i;
   if (!($or$cond50$i)) {
    $$723948$i = $$$4236$i;$$749$i = $614;
    label = 180;
   }
  }
 }
 if ((label|0) == 180) {
  $626 = HEAP32[(12488)>>2]|0;
  $627 = (($626) + ($$723948$i))|0;
  HEAP32[(12488)>>2] = $627;
  $628 = HEAP32[(12492)>>2]|0;
  $629 = ($627>>>0)>($628>>>0);
  if ($629) {
   HEAP32[(12492)>>2] = $627;
  }
  $630 = HEAP32[(12080)>>2]|0;
  $631 = ($630|0)==(0|0);
  do {
   if ($631) {
    $632 = HEAP32[(12072)>>2]|0;
    $633 = ($632|0)==(0|0);
    $634 = ($$749$i>>>0)<($632>>>0);
    $or$cond12$i = $633 | $634;
    if ($or$cond12$i) {
     HEAP32[(12072)>>2] = $$749$i;
    }
    HEAP32[(12504)>>2] = $$749$i;
    HEAP32[(12508)>>2] = $$723948$i;
    HEAP32[(12516)>>2] = 0;
    $635 = HEAP32[3132]|0;
    HEAP32[(12092)>>2] = $635;
    HEAP32[(12088)>>2] = -1;
    $$01$i$i = 0;
    while(1) {
     $636 = $$01$i$i << 1;
     $637 = (12096 + ($636<<2)|0);
     $638 = ((($637)) + 12|0);
     HEAP32[$638>>2] = $637;
     $639 = ((($637)) + 8|0);
     HEAP32[$639>>2] = $637;
     $640 = (($$01$i$i) + 1)|0;
     $exitcond$i$i = ($640|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $$01$i$i = $640;
     }
    }
    $641 = (($$723948$i) + -40)|0;
    $642 = ((($$749$i)) + 8|0);
    $643 = $642;
    $644 = $643 & 7;
    $645 = ($644|0)==(0);
    $646 = (0 - ($643))|0;
    $647 = $646 & 7;
    $648 = $645 ? 0 : $647;
    $649 = (($$749$i) + ($648)|0);
    $650 = (($641) - ($648))|0;
    HEAP32[(12080)>>2] = $649;
    HEAP32[(12068)>>2] = $650;
    $651 = $650 | 1;
    $652 = ((($649)) + 4|0);
    HEAP32[$652>>2] = $651;
    $653 = (($649) + ($650)|0);
    $654 = ((($653)) + 4|0);
    HEAP32[$654>>2] = 40;
    $655 = HEAP32[(12544)>>2]|0;
    HEAP32[(12084)>>2] = $655;
   } else {
    $$024371$i = (12504);
    while(1) {
     $656 = HEAP32[$$024371$i>>2]|0;
     $657 = ((($$024371$i)) + 4|0);
     $658 = HEAP32[$657>>2]|0;
     $659 = (($656) + ($658)|0);
     $660 = ($$749$i|0)==($659|0);
     if ($660) {
      label = 190;
      break;
     }
     $661 = ((($$024371$i)) + 8|0);
     $662 = HEAP32[$661>>2]|0;
     $663 = ($662|0)==(0|0);
     if ($663) {
      break;
     } else {
      $$024371$i = $662;
     }
    }
    if ((label|0) == 190) {
     $664 = ((($$024371$i)) + 12|0);
     $665 = HEAP32[$664>>2]|0;
     $666 = $665 & 8;
     $667 = ($666|0)==(0);
     if ($667) {
      $668 = ($630>>>0)>=($656>>>0);
      $669 = ($630>>>0)<($$749$i>>>0);
      $or$cond51$i = $669 & $668;
      if ($or$cond51$i) {
       $670 = (($658) + ($$723948$i))|0;
       HEAP32[$657>>2] = $670;
       $671 = HEAP32[(12068)>>2]|0;
       $672 = ((($630)) + 8|0);
       $673 = $672;
       $674 = $673 & 7;
       $675 = ($674|0)==(0);
       $676 = (0 - ($673))|0;
       $677 = $676 & 7;
       $678 = $675 ? 0 : $677;
       $679 = (($630) + ($678)|0);
       $680 = (($$723948$i) - ($678))|0;
       $681 = (($671) + ($680))|0;
       HEAP32[(12080)>>2] = $679;
       HEAP32[(12068)>>2] = $681;
       $682 = $681 | 1;
       $683 = ((($679)) + 4|0);
       HEAP32[$683>>2] = $682;
       $684 = (($679) + ($681)|0);
       $685 = ((($684)) + 4|0);
       HEAP32[$685>>2] = 40;
       $686 = HEAP32[(12544)>>2]|0;
       HEAP32[(12084)>>2] = $686;
       break;
      }
     }
    }
    $687 = HEAP32[(12072)>>2]|0;
    $688 = ($$749$i>>>0)<($687>>>0);
    if ($688) {
     HEAP32[(12072)>>2] = $$749$i;
     $752 = $$749$i;
    } else {
     $752 = $687;
    }
    $689 = (($$749$i) + ($$723948$i)|0);
    $$124470$i = (12504);
    while(1) {
     $690 = HEAP32[$$124470$i>>2]|0;
     $691 = ($690|0)==($689|0);
     if ($691) {
      label = 198;
      break;
     }
     $692 = ((($$124470$i)) + 8|0);
     $693 = HEAP32[$692>>2]|0;
     $694 = ($693|0)==(0|0);
     if ($694) {
      break;
     } else {
      $$124470$i = $693;
     }
    }
    if ((label|0) == 198) {
     $695 = ((($$124470$i)) + 12|0);
     $696 = HEAP32[$695>>2]|0;
     $697 = $696 & 8;
     $698 = ($697|0)==(0);
     if ($698) {
      HEAP32[$$124470$i>>2] = $$749$i;
      $699 = ((($$124470$i)) + 4|0);
      $700 = HEAP32[$699>>2]|0;
      $701 = (($700) + ($$723948$i))|0;
      HEAP32[$699>>2] = $701;
      $702 = ((($$749$i)) + 8|0);
      $703 = $702;
      $704 = $703 & 7;
      $705 = ($704|0)==(0);
      $706 = (0 - ($703))|0;
      $707 = $706 & 7;
      $708 = $705 ? 0 : $707;
      $709 = (($$749$i) + ($708)|0);
      $710 = ((($689)) + 8|0);
      $711 = $710;
      $712 = $711 & 7;
      $713 = ($712|0)==(0);
      $714 = (0 - ($711))|0;
      $715 = $714 & 7;
      $716 = $713 ? 0 : $715;
      $717 = (($689) + ($716)|0);
      $718 = $717;
      $719 = $709;
      $720 = (($718) - ($719))|0;
      $721 = (($709) + ($$0197)|0);
      $722 = (($720) - ($$0197))|0;
      $723 = $$0197 | 3;
      $724 = ((($709)) + 4|0);
      HEAP32[$724>>2] = $723;
      $725 = ($717|0)==($630|0);
      do {
       if ($725) {
        $726 = HEAP32[(12068)>>2]|0;
        $727 = (($726) + ($722))|0;
        HEAP32[(12068)>>2] = $727;
        HEAP32[(12080)>>2] = $721;
        $728 = $727 | 1;
        $729 = ((($721)) + 4|0);
        HEAP32[$729>>2] = $728;
       } else {
        $730 = HEAP32[(12076)>>2]|0;
        $731 = ($717|0)==($730|0);
        if ($731) {
         $732 = HEAP32[(12064)>>2]|0;
         $733 = (($732) + ($722))|0;
         HEAP32[(12064)>>2] = $733;
         HEAP32[(12076)>>2] = $721;
         $734 = $733 | 1;
         $735 = ((($721)) + 4|0);
         HEAP32[$735>>2] = $734;
         $736 = (($721) + ($733)|0);
         HEAP32[$736>>2] = $733;
         break;
        }
        $737 = ((($717)) + 4|0);
        $738 = HEAP32[$737>>2]|0;
        $739 = $738 & 3;
        $740 = ($739|0)==(1);
        if ($740) {
         $741 = $738 & -8;
         $742 = $738 >>> 3;
         $743 = ($738>>>0)<(256);
         L314: do {
          if ($743) {
           $744 = ((($717)) + 8|0);
           $745 = HEAP32[$744>>2]|0;
           $746 = ((($717)) + 12|0);
           $747 = HEAP32[$746>>2]|0;
           $748 = $742 << 1;
           $749 = (12096 + ($748<<2)|0);
           $750 = ($745|0)==($749|0);
           do {
            if (!($750)) {
             $751 = ($745>>>0)<($752>>>0);
             if ($751) {
              _abort();
              // unreachable;
             }
             $753 = ((($745)) + 12|0);
             $754 = HEAP32[$753>>2]|0;
             $755 = ($754|0)==($717|0);
             if ($755) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $756 = ($747|0)==($745|0);
           if ($756) {
            $757 = 1 << $742;
            $758 = $757 ^ -1;
            $759 = HEAP32[3014]|0;
            $760 = $759 & $758;
            HEAP32[3014] = $760;
            break;
           }
           $761 = ($747|0)==($749|0);
           do {
            if ($761) {
             $$pre10$i$i = ((($747)) + 8|0);
             $$pre$phi11$i$iZ2D = $$pre10$i$i;
            } else {
             $762 = ($747>>>0)<($752>>>0);
             if ($762) {
              _abort();
              // unreachable;
             }
             $763 = ((($747)) + 8|0);
             $764 = HEAP32[$763>>2]|0;
             $765 = ($764|0)==($717|0);
             if ($765) {
              $$pre$phi11$i$iZ2D = $763;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $766 = ((($745)) + 12|0);
           HEAP32[$766>>2] = $747;
           HEAP32[$$pre$phi11$i$iZ2D>>2] = $745;
          } else {
           $767 = ((($717)) + 24|0);
           $768 = HEAP32[$767>>2]|0;
           $769 = ((($717)) + 12|0);
           $770 = HEAP32[$769>>2]|0;
           $771 = ($770|0)==($717|0);
           do {
            if ($771) {
             $781 = ((($717)) + 16|0);
             $782 = ((($781)) + 4|0);
             $783 = HEAP32[$782>>2]|0;
             $784 = ($783|0)==(0|0);
             if ($784) {
              $785 = HEAP32[$781>>2]|0;
              $786 = ($785|0)==(0|0);
              if ($786) {
               $$3$i$i = 0;
               break;
              } else {
               $$1291$i$i = $785;$$1293$i$i = $781;
              }
             } else {
              $$1291$i$i = $783;$$1293$i$i = $782;
             }
             while(1) {
              $787 = ((($$1291$i$i)) + 20|0);
              $788 = HEAP32[$787>>2]|0;
              $789 = ($788|0)==(0|0);
              if (!($789)) {
               $$1291$i$i = $788;$$1293$i$i = $787;
               continue;
              }
              $790 = ((($$1291$i$i)) + 16|0);
              $791 = HEAP32[$790>>2]|0;
              $792 = ($791|0)==(0|0);
              if ($792) {
               break;
              } else {
               $$1291$i$i = $791;$$1293$i$i = $790;
              }
             }
             $793 = ($$1293$i$i>>>0)<($752>>>0);
             if ($793) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$$1293$i$i>>2] = 0;
              $$3$i$i = $$1291$i$i;
              break;
             }
            } else {
             $772 = ((($717)) + 8|0);
             $773 = HEAP32[$772>>2]|0;
             $774 = ($773>>>0)<($752>>>0);
             if ($774) {
              _abort();
              // unreachable;
             }
             $775 = ((($773)) + 12|0);
             $776 = HEAP32[$775>>2]|0;
             $777 = ($776|0)==($717|0);
             if (!($777)) {
              _abort();
              // unreachable;
             }
             $778 = ((($770)) + 8|0);
             $779 = HEAP32[$778>>2]|0;
             $780 = ($779|0)==($717|0);
             if ($780) {
              HEAP32[$775>>2] = $770;
              HEAP32[$778>>2] = $773;
              $$3$i$i = $770;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $794 = ($768|0)==(0|0);
           if ($794) {
            break;
           }
           $795 = ((($717)) + 28|0);
           $796 = HEAP32[$795>>2]|0;
           $797 = (12360 + ($796<<2)|0);
           $798 = HEAP32[$797>>2]|0;
           $799 = ($717|0)==($798|0);
           do {
            if ($799) {
             HEAP32[$797>>2] = $$3$i$i;
             $cond$i$i = ($$3$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $800 = 1 << $796;
             $801 = $800 ^ -1;
             $802 = HEAP32[(12060)>>2]|0;
             $803 = $802 & $801;
             HEAP32[(12060)>>2] = $803;
             break L314;
            } else {
             $804 = HEAP32[(12072)>>2]|0;
             $805 = ($768>>>0)<($804>>>0);
             if ($805) {
              _abort();
              // unreachable;
             } else {
              $806 = ((($768)) + 16|0);
              $807 = HEAP32[$806>>2]|0;
              $not$$i17$i = ($807|0)!=($717|0);
              $$sink1$i$i = $not$$i17$i&1;
              $808 = (((($768)) + 16|0) + ($$sink1$i$i<<2)|0);
              HEAP32[$808>>2] = $$3$i$i;
              $809 = ($$3$i$i|0)==(0|0);
              if ($809) {
               break L314;
              } else {
               break;
              }
             }
            }
           } while(0);
           $810 = HEAP32[(12072)>>2]|0;
           $811 = ($$3$i$i>>>0)<($810>>>0);
           if ($811) {
            _abort();
            // unreachable;
           }
           $812 = ((($$3$i$i)) + 24|0);
           HEAP32[$812>>2] = $768;
           $813 = ((($717)) + 16|0);
           $814 = HEAP32[$813>>2]|0;
           $815 = ($814|0)==(0|0);
           do {
            if (!($815)) {
             $816 = ($814>>>0)<($810>>>0);
             if ($816) {
              _abort();
              // unreachable;
             } else {
              $817 = ((($$3$i$i)) + 16|0);
              HEAP32[$817>>2] = $814;
              $818 = ((($814)) + 24|0);
              HEAP32[$818>>2] = $$3$i$i;
              break;
             }
            }
           } while(0);
           $819 = ((($813)) + 4|0);
           $820 = HEAP32[$819>>2]|0;
           $821 = ($820|0)==(0|0);
           if ($821) {
            break;
           }
           $822 = HEAP32[(12072)>>2]|0;
           $823 = ($820>>>0)<($822>>>0);
           if ($823) {
            _abort();
            // unreachable;
           } else {
            $824 = ((($$3$i$i)) + 20|0);
            HEAP32[$824>>2] = $820;
            $825 = ((($820)) + 24|0);
            HEAP32[$825>>2] = $$3$i$i;
            break;
           }
          }
         } while(0);
         $826 = (($717) + ($741)|0);
         $827 = (($741) + ($722))|0;
         $$0$i18$i = $826;$$0287$i$i = $827;
        } else {
         $$0$i18$i = $717;$$0287$i$i = $722;
        }
        $828 = ((($$0$i18$i)) + 4|0);
        $829 = HEAP32[$828>>2]|0;
        $830 = $829 & -2;
        HEAP32[$828>>2] = $830;
        $831 = $$0287$i$i | 1;
        $832 = ((($721)) + 4|0);
        HEAP32[$832>>2] = $831;
        $833 = (($721) + ($$0287$i$i)|0);
        HEAP32[$833>>2] = $$0287$i$i;
        $834 = $$0287$i$i >>> 3;
        $835 = ($$0287$i$i>>>0)<(256);
        if ($835) {
         $836 = $834 << 1;
         $837 = (12096 + ($836<<2)|0);
         $838 = HEAP32[3014]|0;
         $839 = 1 << $834;
         $840 = $838 & $839;
         $841 = ($840|0)==(0);
         do {
          if ($841) {
           $842 = $838 | $839;
           HEAP32[3014] = $842;
           $$pre$i19$i = ((($837)) + 8|0);
           $$0295$i$i = $837;$$pre$phi$i20$iZ2D = $$pre$i19$i;
          } else {
           $843 = ((($837)) + 8|0);
           $844 = HEAP32[$843>>2]|0;
           $845 = HEAP32[(12072)>>2]|0;
           $846 = ($844>>>0)<($845>>>0);
           if (!($846)) {
            $$0295$i$i = $844;$$pre$phi$i20$iZ2D = $843;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i20$iZ2D>>2] = $721;
         $847 = ((($$0295$i$i)) + 12|0);
         HEAP32[$847>>2] = $721;
         $848 = ((($721)) + 8|0);
         HEAP32[$848>>2] = $$0295$i$i;
         $849 = ((($721)) + 12|0);
         HEAP32[$849>>2] = $837;
         break;
        }
        $850 = $$0287$i$i >>> 8;
        $851 = ($850|0)==(0);
        do {
         if ($851) {
          $$0296$i$i = 0;
         } else {
          $852 = ($$0287$i$i>>>0)>(16777215);
          if ($852) {
           $$0296$i$i = 31;
           break;
          }
          $853 = (($850) + 1048320)|0;
          $854 = $853 >>> 16;
          $855 = $854 & 8;
          $856 = $850 << $855;
          $857 = (($856) + 520192)|0;
          $858 = $857 >>> 16;
          $859 = $858 & 4;
          $860 = $859 | $855;
          $861 = $856 << $859;
          $862 = (($861) + 245760)|0;
          $863 = $862 >>> 16;
          $864 = $863 & 2;
          $865 = $860 | $864;
          $866 = (14 - ($865))|0;
          $867 = $861 << $864;
          $868 = $867 >>> 15;
          $869 = (($866) + ($868))|0;
          $870 = $869 << 1;
          $871 = (($869) + 7)|0;
          $872 = $$0287$i$i >>> $871;
          $873 = $872 & 1;
          $874 = $873 | $870;
          $$0296$i$i = $874;
         }
        } while(0);
        $875 = (12360 + ($$0296$i$i<<2)|0);
        $876 = ((($721)) + 28|0);
        HEAP32[$876>>2] = $$0296$i$i;
        $877 = ((($721)) + 16|0);
        $878 = ((($877)) + 4|0);
        HEAP32[$878>>2] = 0;
        HEAP32[$877>>2] = 0;
        $879 = HEAP32[(12060)>>2]|0;
        $880 = 1 << $$0296$i$i;
        $881 = $879 & $880;
        $882 = ($881|0)==(0);
        if ($882) {
         $883 = $879 | $880;
         HEAP32[(12060)>>2] = $883;
         HEAP32[$875>>2] = $721;
         $884 = ((($721)) + 24|0);
         HEAP32[$884>>2] = $875;
         $885 = ((($721)) + 12|0);
         HEAP32[$885>>2] = $721;
         $886 = ((($721)) + 8|0);
         HEAP32[$886>>2] = $721;
         break;
        }
        $887 = HEAP32[$875>>2]|0;
        $888 = ($$0296$i$i|0)==(31);
        $889 = $$0296$i$i >>> 1;
        $890 = (25 - ($889))|0;
        $891 = $888 ? 0 : $890;
        $892 = $$0287$i$i << $891;
        $$0288$i$i = $892;$$0289$i$i = $887;
        while(1) {
         $893 = ((($$0289$i$i)) + 4|0);
         $894 = HEAP32[$893>>2]|0;
         $895 = $894 & -8;
         $896 = ($895|0)==($$0287$i$i|0);
         if ($896) {
          label = 265;
          break;
         }
         $897 = $$0288$i$i >>> 31;
         $898 = (((($$0289$i$i)) + 16|0) + ($897<<2)|0);
         $899 = $$0288$i$i << 1;
         $900 = HEAP32[$898>>2]|0;
         $901 = ($900|0)==(0|0);
         if ($901) {
          label = 262;
          break;
         } else {
          $$0288$i$i = $899;$$0289$i$i = $900;
         }
        }
        if ((label|0) == 262) {
         $902 = HEAP32[(12072)>>2]|0;
         $903 = ($898>>>0)<($902>>>0);
         if ($903) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$898>>2] = $721;
          $904 = ((($721)) + 24|0);
          HEAP32[$904>>2] = $$0289$i$i;
          $905 = ((($721)) + 12|0);
          HEAP32[$905>>2] = $721;
          $906 = ((($721)) + 8|0);
          HEAP32[$906>>2] = $721;
          break;
         }
        }
        else if ((label|0) == 265) {
         $907 = ((($$0289$i$i)) + 8|0);
         $908 = HEAP32[$907>>2]|0;
         $909 = HEAP32[(12072)>>2]|0;
         $910 = ($908>>>0)>=($909>>>0);
         $not$7$i$i = ($$0289$i$i>>>0)>=($909>>>0);
         $911 = $910 & $not$7$i$i;
         if ($911) {
          $912 = ((($908)) + 12|0);
          HEAP32[$912>>2] = $721;
          HEAP32[$907>>2] = $721;
          $913 = ((($721)) + 8|0);
          HEAP32[$913>>2] = $908;
          $914 = ((($721)) + 12|0);
          HEAP32[$914>>2] = $$0289$i$i;
          $915 = ((($721)) + 24|0);
          HEAP32[$915>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       }
      } while(0);
      $1047 = ((($709)) + 8|0);
      $$0 = $1047;
      STACKTOP = sp;return ($$0|0);
     }
    }
    $$0$i$i$i = (12504);
    while(1) {
     $916 = HEAP32[$$0$i$i$i>>2]|0;
     $917 = ($916>>>0)>($630>>>0);
     if (!($917)) {
      $918 = ((($$0$i$i$i)) + 4|0);
      $919 = HEAP32[$918>>2]|0;
      $920 = (($916) + ($919)|0);
      $921 = ($920>>>0)>($630>>>0);
      if ($921) {
       break;
      }
     }
     $922 = ((($$0$i$i$i)) + 8|0);
     $923 = HEAP32[$922>>2]|0;
     $$0$i$i$i = $923;
    }
    $924 = ((($920)) + -47|0);
    $925 = ((($924)) + 8|0);
    $926 = $925;
    $927 = $926 & 7;
    $928 = ($927|0)==(0);
    $929 = (0 - ($926))|0;
    $930 = $929 & 7;
    $931 = $928 ? 0 : $930;
    $932 = (($924) + ($931)|0);
    $933 = ((($630)) + 16|0);
    $934 = ($932>>>0)<($933>>>0);
    $935 = $934 ? $630 : $932;
    $936 = ((($935)) + 8|0);
    $937 = ((($935)) + 24|0);
    $938 = (($$723948$i) + -40)|0;
    $939 = ((($$749$i)) + 8|0);
    $940 = $939;
    $941 = $940 & 7;
    $942 = ($941|0)==(0);
    $943 = (0 - ($940))|0;
    $944 = $943 & 7;
    $945 = $942 ? 0 : $944;
    $946 = (($$749$i) + ($945)|0);
    $947 = (($938) - ($945))|0;
    HEAP32[(12080)>>2] = $946;
    HEAP32[(12068)>>2] = $947;
    $948 = $947 | 1;
    $949 = ((($946)) + 4|0);
    HEAP32[$949>>2] = $948;
    $950 = (($946) + ($947)|0);
    $951 = ((($950)) + 4|0);
    HEAP32[$951>>2] = 40;
    $952 = HEAP32[(12544)>>2]|0;
    HEAP32[(12084)>>2] = $952;
    $953 = ((($935)) + 4|0);
    HEAP32[$953>>2] = 27;
    ;HEAP32[$936>>2]=HEAP32[(12504)>>2]|0;HEAP32[$936+4>>2]=HEAP32[(12504)+4>>2]|0;HEAP32[$936+8>>2]=HEAP32[(12504)+8>>2]|0;HEAP32[$936+12>>2]=HEAP32[(12504)+12>>2]|0;
    HEAP32[(12504)>>2] = $$749$i;
    HEAP32[(12508)>>2] = $$723948$i;
    HEAP32[(12516)>>2] = 0;
    HEAP32[(12512)>>2] = $936;
    $955 = $937;
    while(1) {
     $954 = ((($955)) + 4|0);
     HEAP32[$954>>2] = 7;
     $956 = ((($955)) + 8|0);
     $957 = ($956>>>0)<($920>>>0);
     if ($957) {
      $955 = $954;
     } else {
      break;
     }
    }
    $958 = ($935|0)==($630|0);
    if (!($958)) {
     $959 = $935;
     $960 = $630;
     $961 = (($959) - ($960))|0;
     $962 = HEAP32[$953>>2]|0;
     $963 = $962 & -2;
     HEAP32[$953>>2] = $963;
     $964 = $961 | 1;
     $965 = ((($630)) + 4|0);
     HEAP32[$965>>2] = $964;
     HEAP32[$935>>2] = $961;
     $966 = $961 >>> 3;
     $967 = ($961>>>0)<(256);
     if ($967) {
      $968 = $966 << 1;
      $969 = (12096 + ($968<<2)|0);
      $970 = HEAP32[3014]|0;
      $971 = 1 << $966;
      $972 = $970 & $971;
      $973 = ($972|0)==(0);
      if ($973) {
       $974 = $970 | $971;
       HEAP32[3014] = $974;
       $$pre$i$i = ((($969)) + 8|0);
       $$0211$i$i = $969;$$pre$phi$i$iZ2D = $$pre$i$i;
      } else {
       $975 = ((($969)) + 8|0);
       $976 = HEAP32[$975>>2]|0;
       $977 = HEAP32[(12072)>>2]|0;
       $978 = ($976>>>0)<($977>>>0);
       if ($978) {
        _abort();
        // unreachable;
       } else {
        $$0211$i$i = $976;$$pre$phi$i$iZ2D = $975;
       }
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $630;
      $979 = ((($$0211$i$i)) + 12|0);
      HEAP32[$979>>2] = $630;
      $980 = ((($630)) + 8|0);
      HEAP32[$980>>2] = $$0211$i$i;
      $981 = ((($630)) + 12|0);
      HEAP32[$981>>2] = $969;
      break;
     }
     $982 = $961 >>> 8;
     $983 = ($982|0)==(0);
     if ($983) {
      $$0212$i$i = 0;
     } else {
      $984 = ($961>>>0)>(16777215);
      if ($984) {
       $$0212$i$i = 31;
      } else {
       $985 = (($982) + 1048320)|0;
       $986 = $985 >>> 16;
       $987 = $986 & 8;
       $988 = $982 << $987;
       $989 = (($988) + 520192)|0;
       $990 = $989 >>> 16;
       $991 = $990 & 4;
       $992 = $991 | $987;
       $993 = $988 << $991;
       $994 = (($993) + 245760)|0;
       $995 = $994 >>> 16;
       $996 = $995 & 2;
       $997 = $992 | $996;
       $998 = (14 - ($997))|0;
       $999 = $993 << $996;
       $1000 = $999 >>> 15;
       $1001 = (($998) + ($1000))|0;
       $1002 = $1001 << 1;
       $1003 = (($1001) + 7)|0;
       $1004 = $961 >>> $1003;
       $1005 = $1004 & 1;
       $1006 = $1005 | $1002;
       $$0212$i$i = $1006;
      }
     }
     $1007 = (12360 + ($$0212$i$i<<2)|0);
     $1008 = ((($630)) + 28|0);
     HEAP32[$1008>>2] = $$0212$i$i;
     $1009 = ((($630)) + 20|0);
     HEAP32[$1009>>2] = 0;
     HEAP32[$933>>2] = 0;
     $1010 = HEAP32[(12060)>>2]|0;
     $1011 = 1 << $$0212$i$i;
     $1012 = $1010 & $1011;
     $1013 = ($1012|0)==(0);
     if ($1013) {
      $1014 = $1010 | $1011;
      HEAP32[(12060)>>2] = $1014;
      HEAP32[$1007>>2] = $630;
      $1015 = ((($630)) + 24|0);
      HEAP32[$1015>>2] = $1007;
      $1016 = ((($630)) + 12|0);
      HEAP32[$1016>>2] = $630;
      $1017 = ((($630)) + 8|0);
      HEAP32[$1017>>2] = $630;
      break;
     }
     $1018 = HEAP32[$1007>>2]|0;
     $1019 = ($$0212$i$i|0)==(31);
     $1020 = $$0212$i$i >>> 1;
     $1021 = (25 - ($1020))|0;
     $1022 = $1019 ? 0 : $1021;
     $1023 = $961 << $1022;
     $$0206$i$i = $1023;$$0207$i$i = $1018;
     while(1) {
      $1024 = ((($$0207$i$i)) + 4|0);
      $1025 = HEAP32[$1024>>2]|0;
      $1026 = $1025 & -8;
      $1027 = ($1026|0)==($961|0);
      if ($1027) {
       label = 292;
       break;
      }
      $1028 = $$0206$i$i >>> 31;
      $1029 = (((($$0207$i$i)) + 16|0) + ($1028<<2)|0);
      $1030 = $$0206$i$i << 1;
      $1031 = HEAP32[$1029>>2]|0;
      $1032 = ($1031|0)==(0|0);
      if ($1032) {
       label = 289;
       break;
      } else {
       $$0206$i$i = $1030;$$0207$i$i = $1031;
      }
     }
     if ((label|0) == 289) {
      $1033 = HEAP32[(12072)>>2]|0;
      $1034 = ($1029>>>0)<($1033>>>0);
      if ($1034) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$1029>>2] = $630;
       $1035 = ((($630)) + 24|0);
       HEAP32[$1035>>2] = $$0207$i$i;
       $1036 = ((($630)) + 12|0);
       HEAP32[$1036>>2] = $630;
       $1037 = ((($630)) + 8|0);
       HEAP32[$1037>>2] = $630;
       break;
      }
     }
     else if ((label|0) == 292) {
      $1038 = ((($$0207$i$i)) + 8|0);
      $1039 = HEAP32[$1038>>2]|0;
      $1040 = HEAP32[(12072)>>2]|0;
      $1041 = ($1039>>>0)>=($1040>>>0);
      $not$$i$i = ($$0207$i$i>>>0)>=($1040>>>0);
      $1042 = $1041 & $not$$i$i;
      if ($1042) {
       $1043 = ((($1039)) + 12|0);
       HEAP32[$1043>>2] = $630;
       HEAP32[$1038>>2] = $630;
       $1044 = ((($630)) + 8|0);
       HEAP32[$1044>>2] = $1039;
       $1045 = ((($630)) + 12|0);
       HEAP32[$1045>>2] = $$0207$i$i;
       $1046 = ((($630)) + 24|0);
       HEAP32[$1046>>2] = 0;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    }
   }
  } while(0);
  $1048 = HEAP32[(12068)>>2]|0;
  $1049 = ($1048>>>0)>($$0197>>>0);
  if ($1049) {
   $1050 = (($1048) - ($$0197))|0;
   HEAP32[(12068)>>2] = $1050;
   $1051 = HEAP32[(12080)>>2]|0;
   $1052 = (($1051) + ($$0197)|0);
   HEAP32[(12080)>>2] = $1052;
   $1053 = $1050 | 1;
   $1054 = ((($1052)) + 4|0);
   HEAP32[$1054>>2] = $1053;
   $1055 = $$0197 | 3;
   $1056 = ((($1051)) + 4|0);
   HEAP32[$1056>>2] = $1055;
   $1057 = ((($1051)) + 8|0);
   $$0 = $1057;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $1058 = (___errno_location()|0);
 HEAP32[$1058>>2] = 12;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _free($0) {
 $0 = $0|0;
 var $$0212$i = 0, $$0212$in$i = 0, $$0383 = 0, $$0384 = 0, $$0396 = 0, $$0403 = 0, $$1 = 0, $$1382 = 0, $$1387 = 0, $$1390 = 0, $$1398 = 0, $$1402 = 0, $$2 = 0, $$3 = 0, $$3400 = 0, $$pre = 0, $$pre$phi443Z2D = 0, $$pre$phi445Z2D = 0, $$pre$phiZ2D = 0, $$pre442 = 0;
 var $$pre444 = 0, $$sink3 = 0, $$sink5 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $cond421 = 0, $cond422 = 0, $not$ = 0, $not$405 = 0, $not$437 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + -8|0);
 $3 = HEAP32[(12072)>>2]|0;
 $4 = ($2>>>0)<($3>>>0);
 if ($4) {
  _abort();
  // unreachable;
 }
 $5 = ((($0)) + -4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 3;
 $8 = ($7|0)==(1);
 if ($8) {
  _abort();
  // unreachable;
 }
 $9 = $6 & -8;
 $10 = (($2) + ($9)|0);
 $11 = $6 & 1;
 $12 = ($11|0)==(0);
 L10: do {
  if ($12) {
   $13 = HEAP32[$2>>2]|0;
   $14 = ($7|0)==(0);
   if ($14) {
    return;
   }
   $15 = (0 - ($13))|0;
   $16 = (($2) + ($15)|0);
   $17 = (($13) + ($9))|0;
   $18 = ($16>>>0)<($3>>>0);
   if ($18) {
    _abort();
    // unreachable;
   }
   $19 = HEAP32[(12076)>>2]|0;
   $20 = ($16|0)==($19|0);
   if ($20) {
    $104 = ((($10)) + 4|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = $105 & 3;
    $107 = ($106|0)==(3);
    if (!($107)) {
     $$1 = $16;$$1382 = $17;$113 = $16;
     break;
    }
    $108 = (($16) + ($17)|0);
    $109 = ((($16)) + 4|0);
    $110 = $17 | 1;
    $111 = $105 & -2;
    HEAP32[(12064)>>2] = $17;
    HEAP32[$104>>2] = $111;
    HEAP32[$109>>2] = $110;
    HEAP32[$108>>2] = $17;
    return;
   }
   $21 = $13 >>> 3;
   $22 = ($13>>>0)<(256);
   if ($22) {
    $23 = ((($16)) + 8|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ((($16)) + 12|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = $21 << 1;
    $28 = (12096 + ($27<<2)|0);
    $29 = ($24|0)==($28|0);
    if (!($29)) {
     $30 = ($24>>>0)<($3>>>0);
     if ($30) {
      _abort();
      // unreachable;
     }
     $31 = ((($24)) + 12|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = ($32|0)==($16|0);
     if (!($33)) {
      _abort();
      // unreachable;
     }
    }
    $34 = ($26|0)==($24|0);
    if ($34) {
     $35 = 1 << $21;
     $36 = $35 ^ -1;
     $37 = HEAP32[3014]|0;
     $38 = $37 & $36;
     HEAP32[3014] = $38;
     $$1 = $16;$$1382 = $17;$113 = $16;
     break;
    }
    $39 = ($26|0)==($28|0);
    if ($39) {
     $$pre444 = ((($26)) + 8|0);
     $$pre$phi445Z2D = $$pre444;
    } else {
     $40 = ($26>>>0)<($3>>>0);
     if ($40) {
      _abort();
      // unreachable;
     }
     $41 = ((($26)) + 8|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = ($42|0)==($16|0);
     if ($43) {
      $$pre$phi445Z2D = $41;
     } else {
      _abort();
      // unreachable;
     }
    }
    $44 = ((($24)) + 12|0);
    HEAP32[$44>>2] = $26;
    HEAP32[$$pre$phi445Z2D>>2] = $24;
    $$1 = $16;$$1382 = $17;$113 = $16;
    break;
   }
   $45 = ((($16)) + 24|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ((($16)) + 12|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ($48|0)==($16|0);
   do {
    if ($49) {
     $59 = ((($16)) + 16|0);
     $60 = ((($59)) + 4|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = ($61|0)==(0|0);
     if ($62) {
      $63 = HEAP32[$59>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       $$3 = 0;
       break;
      } else {
       $$1387 = $63;$$1390 = $59;
      }
     } else {
      $$1387 = $61;$$1390 = $60;
     }
     while(1) {
      $65 = ((($$1387)) + 20|0);
      $66 = HEAP32[$65>>2]|0;
      $67 = ($66|0)==(0|0);
      if (!($67)) {
       $$1387 = $66;$$1390 = $65;
       continue;
      }
      $68 = ((($$1387)) + 16|0);
      $69 = HEAP32[$68>>2]|0;
      $70 = ($69|0)==(0|0);
      if ($70) {
       break;
      } else {
       $$1387 = $69;$$1390 = $68;
      }
     }
     $71 = ($$1390>>>0)<($3>>>0);
     if ($71) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$1390>>2] = 0;
      $$3 = $$1387;
      break;
     }
    } else {
     $50 = ((($16)) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51>>>0)<($3>>>0);
     if ($52) {
      _abort();
      // unreachable;
     }
     $53 = ((($51)) + 12|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==($16|0);
     if (!($55)) {
      _abort();
      // unreachable;
     }
     $56 = ((($48)) + 8|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = ($57|0)==($16|0);
     if ($58) {
      HEAP32[$53>>2] = $48;
      HEAP32[$56>>2] = $51;
      $$3 = $48;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $72 = ($46|0)==(0|0);
   if ($72) {
    $$1 = $16;$$1382 = $17;$113 = $16;
   } else {
    $73 = ((($16)) + 28|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = (12360 + ($74<<2)|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = ($16|0)==($76|0);
    do {
     if ($77) {
      HEAP32[$75>>2] = $$3;
      $cond421 = ($$3|0)==(0|0);
      if ($cond421) {
       $78 = 1 << $74;
       $79 = $78 ^ -1;
       $80 = HEAP32[(12060)>>2]|0;
       $81 = $80 & $79;
       HEAP32[(12060)>>2] = $81;
       $$1 = $16;$$1382 = $17;$113 = $16;
       break L10;
      }
     } else {
      $82 = HEAP32[(12072)>>2]|0;
      $83 = ($46>>>0)<($82>>>0);
      if ($83) {
       _abort();
       // unreachable;
      } else {
       $84 = ((($46)) + 16|0);
       $85 = HEAP32[$84>>2]|0;
       $not$405 = ($85|0)!=($16|0);
       $$sink3 = $not$405&1;
       $86 = (((($46)) + 16|0) + ($$sink3<<2)|0);
       HEAP32[$86>>2] = $$3;
       $87 = ($$3|0)==(0|0);
       if ($87) {
        $$1 = $16;$$1382 = $17;$113 = $16;
        break L10;
       } else {
        break;
       }
      }
     }
    } while(0);
    $88 = HEAP32[(12072)>>2]|0;
    $89 = ($$3>>>0)<($88>>>0);
    if ($89) {
     _abort();
     // unreachable;
    }
    $90 = ((($$3)) + 24|0);
    HEAP32[$90>>2] = $46;
    $91 = ((($16)) + 16|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ($92|0)==(0|0);
    do {
     if (!($93)) {
      $94 = ($92>>>0)<($88>>>0);
      if ($94) {
       _abort();
       // unreachable;
      } else {
       $95 = ((($$3)) + 16|0);
       HEAP32[$95>>2] = $92;
       $96 = ((($92)) + 24|0);
       HEAP32[$96>>2] = $$3;
       break;
      }
     }
    } while(0);
    $97 = ((($91)) + 4|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = ($98|0)==(0|0);
    if ($99) {
     $$1 = $16;$$1382 = $17;$113 = $16;
    } else {
     $100 = HEAP32[(12072)>>2]|0;
     $101 = ($98>>>0)<($100>>>0);
     if ($101) {
      _abort();
      // unreachable;
     } else {
      $102 = ((($$3)) + 20|0);
      HEAP32[$102>>2] = $98;
      $103 = ((($98)) + 24|0);
      HEAP32[$103>>2] = $$3;
      $$1 = $16;$$1382 = $17;$113 = $16;
      break;
     }
    }
   }
  } else {
   $$1 = $2;$$1382 = $9;$113 = $2;
  }
 } while(0);
 $112 = ($113>>>0)<($10>>>0);
 if (!($112)) {
  _abort();
  // unreachable;
 }
 $114 = ((($10)) + 4|0);
 $115 = HEAP32[$114>>2]|0;
 $116 = $115 & 1;
 $117 = ($116|0)==(0);
 if ($117) {
  _abort();
  // unreachable;
 }
 $118 = $115 & 2;
 $119 = ($118|0)==(0);
 if ($119) {
  $120 = HEAP32[(12080)>>2]|0;
  $121 = ($10|0)==($120|0);
  $122 = HEAP32[(12076)>>2]|0;
  if ($121) {
   $123 = HEAP32[(12068)>>2]|0;
   $124 = (($123) + ($$1382))|0;
   HEAP32[(12068)>>2] = $124;
   HEAP32[(12080)>>2] = $$1;
   $125 = $124 | 1;
   $126 = ((($$1)) + 4|0);
   HEAP32[$126>>2] = $125;
   $127 = ($$1|0)==($122|0);
   if (!($127)) {
    return;
   }
   HEAP32[(12076)>>2] = 0;
   HEAP32[(12064)>>2] = 0;
   return;
  }
  $128 = ($10|0)==($122|0);
  if ($128) {
   $129 = HEAP32[(12064)>>2]|0;
   $130 = (($129) + ($$1382))|0;
   HEAP32[(12064)>>2] = $130;
   HEAP32[(12076)>>2] = $113;
   $131 = $130 | 1;
   $132 = ((($$1)) + 4|0);
   HEAP32[$132>>2] = $131;
   $133 = (($113) + ($130)|0);
   HEAP32[$133>>2] = $130;
   return;
  }
  $134 = $115 & -8;
  $135 = (($134) + ($$1382))|0;
  $136 = $115 >>> 3;
  $137 = ($115>>>0)<(256);
  L108: do {
   if ($137) {
    $138 = ((($10)) + 8|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = ((($10)) + 12|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = $136 << 1;
    $143 = (12096 + ($142<<2)|0);
    $144 = ($139|0)==($143|0);
    if (!($144)) {
     $145 = HEAP32[(12072)>>2]|0;
     $146 = ($139>>>0)<($145>>>0);
     if ($146) {
      _abort();
      // unreachable;
     }
     $147 = ((($139)) + 12|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = ($148|0)==($10|0);
     if (!($149)) {
      _abort();
      // unreachable;
     }
    }
    $150 = ($141|0)==($139|0);
    if ($150) {
     $151 = 1 << $136;
     $152 = $151 ^ -1;
     $153 = HEAP32[3014]|0;
     $154 = $153 & $152;
     HEAP32[3014] = $154;
     break;
    }
    $155 = ($141|0)==($143|0);
    if ($155) {
     $$pre442 = ((($141)) + 8|0);
     $$pre$phi443Z2D = $$pre442;
    } else {
     $156 = HEAP32[(12072)>>2]|0;
     $157 = ($141>>>0)<($156>>>0);
     if ($157) {
      _abort();
      // unreachable;
     }
     $158 = ((($141)) + 8|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = ($159|0)==($10|0);
     if ($160) {
      $$pre$phi443Z2D = $158;
     } else {
      _abort();
      // unreachable;
     }
    }
    $161 = ((($139)) + 12|0);
    HEAP32[$161>>2] = $141;
    HEAP32[$$pre$phi443Z2D>>2] = $139;
   } else {
    $162 = ((($10)) + 24|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = ((($10)) + 12|0);
    $165 = HEAP32[$164>>2]|0;
    $166 = ($165|0)==($10|0);
    do {
     if ($166) {
      $177 = ((($10)) + 16|0);
      $178 = ((($177)) + 4|0);
      $179 = HEAP32[$178>>2]|0;
      $180 = ($179|0)==(0|0);
      if ($180) {
       $181 = HEAP32[$177>>2]|0;
       $182 = ($181|0)==(0|0);
       if ($182) {
        $$3400 = 0;
        break;
       } else {
        $$1398 = $181;$$1402 = $177;
       }
      } else {
       $$1398 = $179;$$1402 = $178;
      }
      while(1) {
       $183 = ((($$1398)) + 20|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($184|0)==(0|0);
       if (!($185)) {
        $$1398 = $184;$$1402 = $183;
        continue;
       }
       $186 = ((($$1398)) + 16|0);
       $187 = HEAP32[$186>>2]|0;
       $188 = ($187|0)==(0|0);
       if ($188) {
        break;
       } else {
        $$1398 = $187;$$1402 = $186;
       }
      }
      $189 = HEAP32[(12072)>>2]|0;
      $190 = ($$1402>>>0)<($189>>>0);
      if ($190) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$$1402>>2] = 0;
       $$3400 = $$1398;
       break;
      }
     } else {
      $167 = ((($10)) + 8|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = HEAP32[(12072)>>2]|0;
      $170 = ($168>>>0)<($169>>>0);
      if ($170) {
       _abort();
       // unreachable;
      }
      $171 = ((($168)) + 12|0);
      $172 = HEAP32[$171>>2]|0;
      $173 = ($172|0)==($10|0);
      if (!($173)) {
       _abort();
       // unreachable;
      }
      $174 = ((($165)) + 8|0);
      $175 = HEAP32[$174>>2]|0;
      $176 = ($175|0)==($10|0);
      if ($176) {
       HEAP32[$171>>2] = $165;
       HEAP32[$174>>2] = $168;
       $$3400 = $165;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $191 = ($163|0)==(0|0);
    if (!($191)) {
     $192 = ((($10)) + 28|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = (12360 + ($193<<2)|0);
     $195 = HEAP32[$194>>2]|0;
     $196 = ($10|0)==($195|0);
     do {
      if ($196) {
       HEAP32[$194>>2] = $$3400;
       $cond422 = ($$3400|0)==(0|0);
       if ($cond422) {
        $197 = 1 << $193;
        $198 = $197 ^ -1;
        $199 = HEAP32[(12060)>>2]|0;
        $200 = $199 & $198;
        HEAP32[(12060)>>2] = $200;
        break L108;
       }
      } else {
       $201 = HEAP32[(12072)>>2]|0;
       $202 = ($163>>>0)<($201>>>0);
       if ($202) {
        _abort();
        // unreachable;
       } else {
        $203 = ((($163)) + 16|0);
        $204 = HEAP32[$203>>2]|0;
        $not$ = ($204|0)!=($10|0);
        $$sink5 = $not$&1;
        $205 = (((($163)) + 16|0) + ($$sink5<<2)|0);
        HEAP32[$205>>2] = $$3400;
        $206 = ($$3400|0)==(0|0);
        if ($206) {
         break L108;
        } else {
         break;
        }
       }
      }
     } while(0);
     $207 = HEAP32[(12072)>>2]|0;
     $208 = ($$3400>>>0)<($207>>>0);
     if ($208) {
      _abort();
      // unreachable;
     }
     $209 = ((($$3400)) + 24|0);
     HEAP32[$209>>2] = $163;
     $210 = ((($10)) + 16|0);
     $211 = HEAP32[$210>>2]|0;
     $212 = ($211|0)==(0|0);
     do {
      if (!($212)) {
       $213 = ($211>>>0)<($207>>>0);
       if ($213) {
        _abort();
        // unreachable;
       } else {
        $214 = ((($$3400)) + 16|0);
        HEAP32[$214>>2] = $211;
        $215 = ((($211)) + 24|0);
        HEAP32[$215>>2] = $$3400;
        break;
       }
      }
     } while(0);
     $216 = ((($210)) + 4|0);
     $217 = HEAP32[$216>>2]|0;
     $218 = ($217|0)==(0|0);
     if (!($218)) {
      $219 = HEAP32[(12072)>>2]|0;
      $220 = ($217>>>0)<($219>>>0);
      if ($220) {
       _abort();
       // unreachable;
      } else {
       $221 = ((($$3400)) + 20|0);
       HEAP32[$221>>2] = $217;
       $222 = ((($217)) + 24|0);
       HEAP32[$222>>2] = $$3400;
       break;
      }
     }
    }
   }
  } while(0);
  $223 = $135 | 1;
  $224 = ((($$1)) + 4|0);
  HEAP32[$224>>2] = $223;
  $225 = (($113) + ($135)|0);
  HEAP32[$225>>2] = $135;
  $226 = HEAP32[(12076)>>2]|0;
  $227 = ($$1|0)==($226|0);
  if ($227) {
   HEAP32[(12064)>>2] = $135;
   return;
  } else {
   $$2 = $135;
  }
 } else {
  $228 = $115 & -2;
  HEAP32[$114>>2] = $228;
  $229 = $$1382 | 1;
  $230 = ((($$1)) + 4|0);
  HEAP32[$230>>2] = $229;
  $231 = (($113) + ($$1382)|0);
  HEAP32[$231>>2] = $$1382;
  $$2 = $$1382;
 }
 $232 = $$2 >>> 3;
 $233 = ($$2>>>0)<(256);
 if ($233) {
  $234 = $232 << 1;
  $235 = (12096 + ($234<<2)|0);
  $236 = HEAP32[3014]|0;
  $237 = 1 << $232;
  $238 = $236 & $237;
  $239 = ($238|0)==(0);
  if ($239) {
   $240 = $236 | $237;
   HEAP32[3014] = $240;
   $$pre = ((($235)) + 8|0);
   $$0403 = $235;$$pre$phiZ2D = $$pre;
  } else {
   $241 = ((($235)) + 8|0);
   $242 = HEAP32[$241>>2]|0;
   $243 = HEAP32[(12072)>>2]|0;
   $244 = ($242>>>0)<($243>>>0);
   if ($244) {
    _abort();
    // unreachable;
   } else {
    $$0403 = $242;$$pre$phiZ2D = $241;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $245 = ((($$0403)) + 12|0);
  HEAP32[$245>>2] = $$1;
  $246 = ((($$1)) + 8|0);
  HEAP32[$246>>2] = $$0403;
  $247 = ((($$1)) + 12|0);
  HEAP32[$247>>2] = $235;
  return;
 }
 $248 = $$2 >>> 8;
 $249 = ($248|0)==(0);
 if ($249) {
  $$0396 = 0;
 } else {
  $250 = ($$2>>>0)>(16777215);
  if ($250) {
   $$0396 = 31;
  } else {
   $251 = (($248) + 1048320)|0;
   $252 = $251 >>> 16;
   $253 = $252 & 8;
   $254 = $248 << $253;
   $255 = (($254) + 520192)|0;
   $256 = $255 >>> 16;
   $257 = $256 & 4;
   $258 = $257 | $253;
   $259 = $254 << $257;
   $260 = (($259) + 245760)|0;
   $261 = $260 >>> 16;
   $262 = $261 & 2;
   $263 = $258 | $262;
   $264 = (14 - ($263))|0;
   $265 = $259 << $262;
   $266 = $265 >>> 15;
   $267 = (($264) + ($266))|0;
   $268 = $267 << 1;
   $269 = (($267) + 7)|0;
   $270 = $$2 >>> $269;
   $271 = $270 & 1;
   $272 = $271 | $268;
   $$0396 = $272;
  }
 }
 $273 = (12360 + ($$0396<<2)|0);
 $274 = ((($$1)) + 28|0);
 HEAP32[$274>>2] = $$0396;
 $275 = ((($$1)) + 16|0);
 $276 = ((($$1)) + 20|0);
 HEAP32[$276>>2] = 0;
 HEAP32[$275>>2] = 0;
 $277 = HEAP32[(12060)>>2]|0;
 $278 = 1 << $$0396;
 $279 = $277 & $278;
 $280 = ($279|0)==(0);
 do {
  if ($280) {
   $281 = $277 | $278;
   HEAP32[(12060)>>2] = $281;
   HEAP32[$273>>2] = $$1;
   $282 = ((($$1)) + 24|0);
   HEAP32[$282>>2] = $273;
   $283 = ((($$1)) + 12|0);
   HEAP32[$283>>2] = $$1;
   $284 = ((($$1)) + 8|0);
   HEAP32[$284>>2] = $$1;
  } else {
   $285 = HEAP32[$273>>2]|0;
   $286 = ($$0396|0)==(31);
   $287 = $$0396 >>> 1;
   $288 = (25 - ($287))|0;
   $289 = $286 ? 0 : $288;
   $290 = $$2 << $289;
   $$0383 = $290;$$0384 = $285;
   while(1) {
    $291 = ((($$0384)) + 4|0);
    $292 = HEAP32[$291>>2]|0;
    $293 = $292 & -8;
    $294 = ($293|0)==($$2|0);
    if ($294) {
     label = 124;
     break;
    }
    $295 = $$0383 >>> 31;
    $296 = (((($$0384)) + 16|0) + ($295<<2)|0);
    $297 = $$0383 << 1;
    $298 = HEAP32[$296>>2]|0;
    $299 = ($298|0)==(0|0);
    if ($299) {
     label = 121;
     break;
    } else {
     $$0383 = $297;$$0384 = $298;
    }
   }
   if ((label|0) == 121) {
    $300 = HEAP32[(12072)>>2]|0;
    $301 = ($296>>>0)<($300>>>0);
    if ($301) {
     _abort();
     // unreachable;
    } else {
     HEAP32[$296>>2] = $$1;
     $302 = ((($$1)) + 24|0);
     HEAP32[$302>>2] = $$0384;
     $303 = ((($$1)) + 12|0);
     HEAP32[$303>>2] = $$1;
     $304 = ((($$1)) + 8|0);
     HEAP32[$304>>2] = $$1;
     break;
    }
   }
   else if ((label|0) == 124) {
    $305 = ((($$0384)) + 8|0);
    $306 = HEAP32[$305>>2]|0;
    $307 = HEAP32[(12072)>>2]|0;
    $308 = ($306>>>0)>=($307>>>0);
    $not$437 = ($$0384>>>0)>=($307>>>0);
    $309 = $308 & $not$437;
    if ($309) {
     $310 = ((($306)) + 12|0);
     HEAP32[$310>>2] = $$1;
     HEAP32[$305>>2] = $$1;
     $311 = ((($$1)) + 8|0);
     HEAP32[$311>>2] = $306;
     $312 = ((($$1)) + 12|0);
     HEAP32[$312>>2] = $$0384;
     $313 = ((($$1)) + 24|0);
     HEAP32[$313>>2] = 0;
     break;
    } else {
     _abort();
     // unreachable;
    }
   }
  }
 } while(0);
 $314 = HEAP32[(12088)>>2]|0;
 $315 = (($314) + -1)|0;
 HEAP32[(12088)>>2] = $315;
 $316 = ($315|0)==(0);
 if ($316) {
  $$0212$in$i = (12512);
 } else {
  return;
 }
 while(1) {
  $$0212$i = HEAP32[$$0212$in$i>>2]|0;
  $317 = ($$0212$i|0)==(0|0);
  $318 = ((($$0212$i)) + 8|0);
  if ($317) {
   break;
  } else {
   $$0212$in$i = $318;
  }
 }
 HEAP32[(12088)>>2] = -1;
 return;
}
function _realloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $3 = (_malloc($1)|0);
  $$1 = $3;
  return ($$1|0);
 }
 $4 = ($1>>>0)>(4294967231);
 if ($4) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 12;
  $$1 = 0;
  return ($$1|0);
 }
 $6 = ($1>>>0)<(11);
 $7 = (($1) + 11)|0;
 $8 = $7 & -8;
 $9 = $6 ? 16 : $8;
 $10 = ((($0)) + -8|0);
 $11 = (_try_realloc_chunk($10,$9)|0);
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  $13 = ((($11)) + 8|0);
  $$1 = $13;
  return ($$1|0);
 }
 $14 = (_malloc($1)|0);
 $15 = ($14|0)==(0|0);
 if ($15) {
  $$1 = 0;
  return ($$1|0);
 }
 $16 = ((($0)) + -4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 & -8;
 $19 = $17 & 3;
 $20 = ($19|0)==(0);
 $21 = $20 ? 8 : 4;
 $22 = (($18) - ($21))|0;
 $23 = ($22>>>0)<($1>>>0);
 $24 = $23 ? $22 : $1;
 _memcpy(($14|0),($0|0),($24|0))|0;
 _free($0);
 $$1 = $14;
 return ($$1|0);
}
function _try_realloc_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1272 = 0, $$1275 = 0, $$2 = 0, $$3 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $cond = 0, $not$ = 0, $notlhs = 0, $notrhs = 0, $or$cond$not = 0, $or$cond3 = 0, $storemerge = 0, $storemerge1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & -8;
 $5 = (($0) + ($4)|0);
 $6 = HEAP32[(12072)>>2]|0;
 $7 = $3 & 3;
 $notlhs = ($0>>>0)>=($6>>>0);
 $notrhs = ($7|0)!=(1);
 $or$cond$not = $notrhs & $notlhs;
 $8 = ($0>>>0)<($5>>>0);
 $or$cond3 = $or$cond$not & $8;
 if (!($or$cond3)) {
  _abort();
  // unreachable;
 }
 $9 = ((($5)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 1;
 $12 = ($11|0)==(0);
 if ($12) {
  _abort();
  // unreachable;
 }
 $13 = ($7|0)==(0);
 if ($13) {
  $14 = ($1>>>0)<(256);
  if ($14) {
   $$2 = 0;
   return ($$2|0);
  }
  $15 = (($1) + 4)|0;
  $16 = ($4>>>0)<($15>>>0);
  if (!($16)) {
   $17 = (($4) - ($1))|0;
   $18 = HEAP32[(12536)>>2]|0;
   $19 = $18 << 1;
   $20 = ($17>>>0)>($19>>>0);
   if (!($20)) {
    $$2 = $0;
    return ($$2|0);
   }
  }
  $$2 = 0;
  return ($$2|0);
 }
 $21 = ($4>>>0)<($1>>>0);
 if (!($21)) {
  $22 = (($4) - ($1))|0;
  $23 = ($22>>>0)>(15);
  if (!($23)) {
   $$2 = $0;
   return ($$2|0);
  }
  $24 = (($0) + ($1)|0);
  $25 = $3 & 1;
  $26 = $25 | $1;
  $27 = $26 | 2;
  HEAP32[$2>>2] = $27;
  $28 = ((($24)) + 4|0);
  $29 = $22 | 3;
  HEAP32[$28>>2] = $29;
  $30 = (($24) + ($22)|0);
  $31 = ((($30)) + 4|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $32 | 1;
  HEAP32[$31>>2] = $33;
  _dispose_chunk($24,$22);
  $$2 = $0;
  return ($$2|0);
 }
 $34 = HEAP32[(12080)>>2]|0;
 $35 = ($5|0)==($34|0);
 if ($35) {
  $36 = HEAP32[(12068)>>2]|0;
  $37 = (($36) + ($4))|0;
  $38 = ($37>>>0)>($1>>>0);
  $39 = (($37) - ($1))|0;
  $40 = (($0) + ($1)|0);
  if (!($38)) {
   $$2 = 0;
   return ($$2|0);
  }
  $41 = $39 | 1;
  $42 = ((($40)) + 4|0);
  $43 = $3 & 1;
  $44 = $43 | $1;
  $45 = $44 | 2;
  HEAP32[$2>>2] = $45;
  HEAP32[$42>>2] = $41;
  HEAP32[(12080)>>2] = $40;
  HEAP32[(12068)>>2] = $39;
  $$2 = $0;
  return ($$2|0);
 }
 $46 = HEAP32[(12076)>>2]|0;
 $47 = ($5|0)==($46|0);
 if ($47) {
  $48 = HEAP32[(12064)>>2]|0;
  $49 = (($48) + ($4))|0;
  $50 = ($49>>>0)<($1>>>0);
  if ($50) {
   $$2 = 0;
   return ($$2|0);
  }
  $51 = (($49) - ($1))|0;
  $52 = ($51>>>0)>(15);
  $53 = $3 & 1;
  if ($52) {
   $54 = (($0) + ($1)|0);
   $55 = (($54) + ($51)|0);
   $56 = $53 | $1;
   $57 = $56 | 2;
   HEAP32[$2>>2] = $57;
   $58 = ((($54)) + 4|0);
   $59 = $51 | 1;
   HEAP32[$58>>2] = $59;
   HEAP32[$55>>2] = $51;
   $60 = ((($55)) + 4|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $61 & -2;
   HEAP32[$60>>2] = $62;
   $storemerge = $54;$storemerge1 = $51;
  } else {
   $63 = $53 | $49;
   $64 = $63 | 2;
   HEAP32[$2>>2] = $64;
   $65 = (($0) + ($49)|0);
   $66 = ((($65)) + 4|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = $67 | 1;
   HEAP32[$66>>2] = $68;
   $storemerge = 0;$storemerge1 = 0;
  }
  HEAP32[(12064)>>2] = $storemerge1;
  HEAP32[(12076)>>2] = $storemerge;
  $$2 = $0;
  return ($$2|0);
 }
 $69 = $10 & 2;
 $70 = ($69|0)==(0);
 if (!($70)) {
  $$2 = 0;
  return ($$2|0);
 }
 $71 = $10 & -8;
 $72 = (($71) + ($4))|0;
 $73 = ($72>>>0)<($1>>>0);
 if ($73) {
  $$2 = 0;
  return ($$2|0);
 }
 $74 = (($72) - ($1))|0;
 $75 = $10 >>> 3;
 $76 = ($10>>>0)<(256);
 L49: do {
  if ($76) {
   $77 = ((($5)) + 8|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = ((($5)) + 12|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = $75 << 1;
   $82 = (12096 + ($81<<2)|0);
   $83 = ($78|0)==($82|0);
   if (!($83)) {
    $84 = ($78>>>0)<($6>>>0);
    if ($84) {
     _abort();
     // unreachable;
    }
    $85 = ((($78)) + 12|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = ($86|0)==($5|0);
    if (!($87)) {
     _abort();
     // unreachable;
    }
   }
   $88 = ($80|0)==($78|0);
   if ($88) {
    $89 = 1 << $75;
    $90 = $89 ^ -1;
    $91 = HEAP32[3014]|0;
    $92 = $91 & $90;
    HEAP32[3014] = $92;
    break;
   }
   $93 = ($80|0)==($82|0);
   if ($93) {
    $$pre = ((($80)) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $94 = ($80>>>0)<($6>>>0);
    if ($94) {
     _abort();
     // unreachable;
    }
    $95 = ((($80)) + 8|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = ($96|0)==($5|0);
    if ($97) {
     $$pre$phiZ2D = $95;
    } else {
     _abort();
     // unreachable;
    }
   }
   $98 = ((($78)) + 12|0);
   HEAP32[$98>>2] = $80;
   HEAP32[$$pre$phiZ2D>>2] = $78;
  } else {
   $99 = ((($5)) + 24|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = ((($5)) + 12|0);
   $102 = HEAP32[$101>>2]|0;
   $103 = ($102|0)==($5|0);
   do {
    if ($103) {
     $113 = ((($5)) + 16|0);
     $114 = ((($113)) + 4|0);
     $115 = HEAP32[$114>>2]|0;
     $116 = ($115|0)==(0|0);
     if ($116) {
      $117 = HEAP32[$113>>2]|0;
      $118 = ($117|0)==(0|0);
      if ($118) {
       $$3 = 0;
       break;
      } else {
       $$1272 = $117;$$1275 = $113;
      }
     } else {
      $$1272 = $115;$$1275 = $114;
     }
     while(1) {
      $119 = ((($$1272)) + 20|0);
      $120 = HEAP32[$119>>2]|0;
      $121 = ($120|0)==(0|0);
      if (!($121)) {
       $$1272 = $120;$$1275 = $119;
       continue;
      }
      $122 = ((($$1272)) + 16|0);
      $123 = HEAP32[$122>>2]|0;
      $124 = ($123|0)==(0|0);
      if ($124) {
       break;
      } else {
       $$1272 = $123;$$1275 = $122;
      }
     }
     $125 = ($$1275>>>0)<($6>>>0);
     if ($125) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$1275>>2] = 0;
      $$3 = $$1272;
      break;
     }
    } else {
     $104 = ((($5)) + 8|0);
     $105 = HEAP32[$104>>2]|0;
     $106 = ($105>>>0)<($6>>>0);
     if ($106) {
      _abort();
      // unreachable;
     }
     $107 = ((($105)) + 12|0);
     $108 = HEAP32[$107>>2]|0;
     $109 = ($108|0)==($5|0);
     if (!($109)) {
      _abort();
      // unreachable;
     }
     $110 = ((($102)) + 8|0);
     $111 = HEAP32[$110>>2]|0;
     $112 = ($111|0)==($5|0);
     if ($112) {
      HEAP32[$107>>2] = $102;
      HEAP32[$110>>2] = $105;
      $$3 = $102;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $126 = ($100|0)==(0|0);
   if (!($126)) {
    $127 = ((($5)) + 28|0);
    $128 = HEAP32[$127>>2]|0;
    $129 = (12360 + ($128<<2)|0);
    $130 = HEAP32[$129>>2]|0;
    $131 = ($5|0)==($130|0);
    do {
     if ($131) {
      HEAP32[$129>>2] = $$3;
      $cond = ($$3|0)==(0|0);
      if ($cond) {
       $132 = 1 << $128;
       $133 = $132 ^ -1;
       $134 = HEAP32[(12060)>>2]|0;
       $135 = $134 & $133;
       HEAP32[(12060)>>2] = $135;
       break L49;
      }
     } else {
      $136 = HEAP32[(12072)>>2]|0;
      $137 = ($100>>>0)<($136>>>0);
      if ($137) {
       _abort();
       // unreachable;
      } else {
       $138 = ((($100)) + 16|0);
       $139 = HEAP32[$138>>2]|0;
       $not$ = ($139|0)!=($5|0);
       $$sink1 = $not$&1;
       $140 = (((($100)) + 16|0) + ($$sink1<<2)|0);
       HEAP32[$140>>2] = $$3;
       $141 = ($$3|0)==(0|0);
       if ($141) {
        break L49;
       } else {
        break;
       }
      }
     }
    } while(0);
    $142 = HEAP32[(12072)>>2]|0;
    $143 = ($$3>>>0)<($142>>>0);
    if ($143) {
     _abort();
     // unreachable;
    }
    $144 = ((($$3)) + 24|0);
    HEAP32[$144>>2] = $100;
    $145 = ((($5)) + 16|0);
    $146 = HEAP32[$145>>2]|0;
    $147 = ($146|0)==(0|0);
    do {
     if (!($147)) {
      $148 = ($146>>>0)<($142>>>0);
      if ($148) {
       _abort();
       // unreachable;
      } else {
       $149 = ((($$3)) + 16|0);
       HEAP32[$149>>2] = $146;
       $150 = ((($146)) + 24|0);
       HEAP32[$150>>2] = $$3;
       break;
      }
     }
    } while(0);
    $151 = ((($145)) + 4|0);
    $152 = HEAP32[$151>>2]|0;
    $153 = ($152|0)==(0|0);
    if (!($153)) {
     $154 = HEAP32[(12072)>>2]|0;
     $155 = ($152>>>0)<($154>>>0);
     if ($155) {
      _abort();
      // unreachable;
     } else {
      $156 = ((($$3)) + 20|0);
      HEAP32[$156>>2] = $152;
      $157 = ((($152)) + 24|0);
      HEAP32[$157>>2] = $$3;
      break;
     }
    }
   }
  }
 } while(0);
 $158 = ($74>>>0)<(16);
 $159 = $3 & 1;
 if ($158) {
  $160 = $72 | $159;
  $161 = $160 | 2;
  HEAP32[$2>>2] = $161;
  $162 = (($0) + ($72)|0);
  $163 = ((($162)) + 4|0);
  $164 = HEAP32[$163>>2]|0;
  $165 = $164 | 1;
  HEAP32[$163>>2] = $165;
  $$2 = $0;
  return ($$2|0);
 } else {
  $166 = (($0) + ($1)|0);
  $167 = $159 | $1;
  $168 = $167 | 2;
  HEAP32[$2>>2] = $168;
  $169 = ((($166)) + 4|0);
  $170 = $74 | 3;
  HEAP32[$169>>2] = $170;
  $171 = (($166) + ($74)|0);
  $172 = ((($171)) + 4|0);
  $173 = HEAP32[$172>>2]|0;
  $174 = $173 | 1;
  HEAP32[$172>>2] = $174;
  _dispose_chunk($166,$74);
  $$2 = $0;
  return ($$2|0);
 }
 return (0)|0;
}
function _dispose_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0419 = 0, $$0420 = 0, $$0431 = 0, $$0438 = 0, $$1 = 0, $$1418 = 0, $$1426 = 0, $$1429 = 0, $$1433 = 0, $$1437 = 0, $$2 = 0, $$3 = 0, $$3435 = 0, $$pre = 0, $$pre$phi24Z2D = 0, $$pre$phi26Z2D = 0, $$pre$phiZ2D = 0, $$pre23 = 0, $$pre25 = 0, $$sink2 = 0;
 var $$sink4 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $cond = 0, $cond17 = 0, $not$ = 0, $not$1 = 0, $not$19 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($0) + ($1)|0);
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)==(0);
 L1: do {
  if ($6) {
   $7 = HEAP32[$0>>2]|0;
   $8 = $4 & 3;
   $9 = ($8|0)==(0);
   if ($9) {
    return;
   }
   $10 = (0 - ($7))|0;
   $11 = (($0) + ($10)|0);
   $12 = (($7) + ($1))|0;
   $13 = HEAP32[(12072)>>2]|0;
   $14 = ($11>>>0)<($13>>>0);
   if ($14) {
    _abort();
    // unreachable;
   }
   $15 = HEAP32[(12076)>>2]|0;
   $16 = ($11|0)==($15|0);
   if ($16) {
    $100 = ((($2)) + 4|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = $101 & 3;
    $103 = ($102|0)==(3);
    if (!($103)) {
     $$1 = $11;$$1418 = $12;
     break;
    }
    $104 = (($11) + ($12)|0);
    $105 = ((($11)) + 4|0);
    $106 = $12 | 1;
    $107 = $101 & -2;
    HEAP32[(12064)>>2] = $12;
    HEAP32[$100>>2] = $107;
    HEAP32[$105>>2] = $106;
    HEAP32[$104>>2] = $12;
    return;
   }
   $17 = $7 >>> 3;
   $18 = ($7>>>0)<(256);
   if ($18) {
    $19 = ((($11)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ((($11)) + 12|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = $17 << 1;
    $24 = (12096 + ($23<<2)|0);
    $25 = ($20|0)==($24|0);
    if (!($25)) {
     $26 = ($20>>>0)<($13>>>0);
     if ($26) {
      _abort();
      // unreachable;
     }
     $27 = ((($20)) + 12|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = ($28|0)==($11|0);
     if (!($29)) {
      _abort();
      // unreachable;
     }
    }
    $30 = ($22|0)==($20|0);
    if ($30) {
     $31 = 1 << $17;
     $32 = $31 ^ -1;
     $33 = HEAP32[3014]|0;
     $34 = $33 & $32;
     HEAP32[3014] = $34;
     $$1 = $11;$$1418 = $12;
     break;
    }
    $35 = ($22|0)==($24|0);
    if ($35) {
     $$pre25 = ((($22)) + 8|0);
     $$pre$phi26Z2D = $$pre25;
    } else {
     $36 = ($22>>>0)<($13>>>0);
     if ($36) {
      _abort();
      // unreachable;
     }
     $37 = ((($22)) + 8|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = ($38|0)==($11|0);
     if ($39) {
      $$pre$phi26Z2D = $37;
     } else {
      _abort();
      // unreachable;
     }
    }
    $40 = ((($20)) + 12|0);
    HEAP32[$40>>2] = $22;
    HEAP32[$$pre$phi26Z2D>>2] = $20;
    $$1 = $11;$$1418 = $12;
    break;
   }
   $41 = ((($11)) + 24|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ((($11)) + 12|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ($44|0)==($11|0);
   do {
    if ($45) {
     $55 = ((($11)) + 16|0);
     $56 = ((($55)) + 4|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = ($57|0)==(0|0);
     if ($58) {
      $59 = HEAP32[$55>>2]|0;
      $60 = ($59|0)==(0|0);
      if ($60) {
       $$3 = 0;
       break;
      } else {
       $$1426 = $59;$$1429 = $55;
      }
     } else {
      $$1426 = $57;$$1429 = $56;
     }
     while(1) {
      $61 = ((($$1426)) + 20|0);
      $62 = HEAP32[$61>>2]|0;
      $63 = ($62|0)==(0|0);
      if (!($63)) {
       $$1426 = $62;$$1429 = $61;
       continue;
      }
      $64 = ((($$1426)) + 16|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = ($65|0)==(0|0);
      if ($66) {
       break;
      } else {
       $$1426 = $65;$$1429 = $64;
      }
     }
     $67 = ($$1429>>>0)<($13>>>0);
     if ($67) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$1429>>2] = 0;
      $$3 = $$1426;
      break;
     }
    } else {
     $46 = ((($11)) + 8|0);
     $47 = HEAP32[$46>>2]|0;
     $48 = ($47>>>0)<($13>>>0);
     if ($48) {
      _abort();
      // unreachable;
     }
     $49 = ((($47)) + 12|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = ($50|0)==($11|0);
     if (!($51)) {
      _abort();
      // unreachable;
     }
     $52 = ((($44)) + 8|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ($53|0)==($11|0);
     if ($54) {
      HEAP32[$49>>2] = $44;
      HEAP32[$52>>2] = $47;
      $$3 = $44;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $68 = ($42|0)==(0|0);
   if ($68) {
    $$1 = $11;$$1418 = $12;
   } else {
    $69 = ((($11)) + 28|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = (12360 + ($70<<2)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ($11|0)==($72|0);
    do {
     if ($73) {
      HEAP32[$71>>2] = $$3;
      $cond = ($$3|0)==(0|0);
      if ($cond) {
       $74 = 1 << $70;
       $75 = $74 ^ -1;
       $76 = HEAP32[(12060)>>2]|0;
       $77 = $76 & $75;
       HEAP32[(12060)>>2] = $77;
       $$1 = $11;$$1418 = $12;
       break L1;
      }
     } else {
      $78 = HEAP32[(12072)>>2]|0;
      $79 = ($42>>>0)<($78>>>0);
      if ($79) {
       _abort();
       // unreachable;
      } else {
       $80 = ((($42)) + 16|0);
       $81 = HEAP32[$80>>2]|0;
       $not$1 = ($81|0)!=($11|0);
       $$sink2 = $not$1&1;
       $82 = (((($42)) + 16|0) + ($$sink2<<2)|0);
       HEAP32[$82>>2] = $$3;
       $83 = ($$3|0)==(0|0);
       if ($83) {
        $$1 = $11;$$1418 = $12;
        break L1;
       } else {
        break;
       }
      }
     }
    } while(0);
    $84 = HEAP32[(12072)>>2]|0;
    $85 = ($$3>>>0)<($84>>>0);
    if ($85) {
     _abort();
     // unreachable;
    }
    $86 = ((($$3)) + 24|0);
    HEAP32[$86>>2] = $42;
    $87 = ((($11)) + 16|0);
    $88 = HEAP32[$87>>2]|0;
    $89 = ($88|0)==(0|0);
    do {
     if (!($89)) {
      $90 = ($88>>>0)<($84>>>0);
      if ($90) {
       _abort();
       // unreachable;
      } else {
       $91 = ((($$3)) + 16|0);
       HEAP32[$91>>2] = $88;
       $92 = ((($88)) + 24|0);
       HEAP32[$92>>2] = $$3;
       break;
      }
     }
    } while(0);
    $93 = ((($87)) + 4|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = ($94|0)==(0|0);
    if ($95) {
     $$1 = $11;$$1418 = $12;
    } else {
     $96 = HEAP32[(12072)>>2]|0;
     $97 = ($94>>>0)<($96>>>0);
     if ($97) {
      _abort();
      // unreachable;
     } else {
      $98 = ((($$3)) + 20|0);
      HEAP32[$98>>2] = $94;
      $99 = ((($94)) + 24|0);
      HEAP32[$99>>2] = $$3;
      $$1 = $11;$$1418 = $12;
      break;
     }
    }
   }
  } else {
   $$1 = $0;$$1418 = $1;
  }
 } while(0);
 $108 = HEAP32[(12072)>>2]|0;
 $109 = ($2>>>0)<($108>>>0);
 if ($109) {
  _abort();
  // unreachable;
 }
 $110 = ((($2)) + 4|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = $111 & 2;
 $113 = ($112|0)==(0);
 if ($113) {
  $114 = HEAP32[(12080)>>2]|0;
  $115 = ($2|0)==($114|0);
  $116 = HEAP32[(12076)>>2]|0;
  if ($115) {
   $117 = HEAP32[(12068)>>2]|0;
   $118 = (($117) + ($$1418))|0;
   HEAP32[(12068)>>2] = $118;
   HEAP32[(12080)>>2] = $$1;
   $119 = $118 | 1;
   $120 = ((($$1)) + 4|0);
   HEAP32[$120>>2] = $119;
   $121 = ($$1|0)==($116|0);
   if (!($121)) {
    return;
   }
   HEAP32[(12076)>>2] = 0;
   HEAP32[(12064)>>2] = 0;
   return;
  }
  $122 = ($2|0)==($116|0);
  if ($122) {
   $123 = HEAP32[(12064)>>2]|0;
   $124 = (($123) + ($$1418))|0;
   HEAP32[(12064)>>2] = $124;
   HEAP32[(12076)>>2] = $$1;
   $125 = $124 | 1;
   $126 = ((($$1)) + 4|0);
   HEAP32[$126>>2] = $125;
   $127 = (($$1) + ($124)|0);
   HEAP32[$127>>2] = $124;
   return;
  }
  $128 = $111 & -8;
  $129 = (($128) + ($$1418))|0;
  $130 = $111 >>> 3;
  $131 = ($111>>>0)<(256);
  L96: do {
   if ($131) {
    $132 = ((($2)) + 8|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = ((($2)) + 12|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = $130 << 1;
    $137 = (12096 + ($136<<2)|0);
    $138 = ($133|0)==($137|0);
    if (!($138)) {
     $139 = ($133>>>0)<($108>>>0);
     if ($139) {
      _abort();
      // unreachable;
     }
     $140 = ((($133)) + 12|0);
     $141 = HEAP32[$140>>2]|0;
     $142 = ($141|0)==($2|0);
     if (!($142)) {
      _abort();
      // unreachable;
     }
    }
    $143 = ($135|0)==($133|0);
    if ($143) {
     $144 = 1 << $130;
     $145 = $144 ^ -1;
     $146 = HEAP32[3014]|0;
     $147 = $146 & $145;
     HEAP32[3014] = $147;
     break;
    }
    $148 = ($135|0)==($137|0);
    if ($148) {
     $$pre23 = ((($135)) + 8|0);
     $$pre$phi24Z2D = $$pre23;
    } else {
     $149 = ($135>>>0)<($108>>>0);
     if ($149) {
      _abort();
      // unreachable;
     }
     $150 = ((($135)) + 8|0);
     $151 = HEAP32[$150>>2]|0;
     $152 = ($151|0)==($2|0);
     if ($152) {
      $$pre$phi24Z2D = $150;
     } else {
      _abort();
      // unreachable;
     }
    }
    $153 = ((($133)) + 12|0);
    HEAP32[$153>>2] = $135;
    HEAP32[$$pre$phi24Z2D>>2] = $133;
   } else {
    $154 = ((($2)) + 24|0);
    $155 = HEAP32[$154>>2]|0;
    $156 = ((($2)) + 12|0);
    $157 = HEAP32[$156>>2]|0;
    $158 = ($157|0)==($2|0);
    do {
     if ($158) {
      $168 = ((($2)) + 16|0);
      $169 = ((($168)) + 4|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==(0|0);
      if ($171) {
       $172 = HEAP32[$168>>2]|0;
       $173 = ($172|0)==(0|0);
       if ($173) {
        $$3435 = 0;
        break;
       } else {
        $$1433 = $172;$$1437 = $168;
       }
      } else {
       $$1433 = $170;$$1437 = $169;
      }
      while(1) {
       $174 = ((($$1433)) + 20|0);
       $175 = HEAP32[$174>>2]|0;
       $176 = ($175|0)==(0|0);
       if (!($176)) {
        $$1433 = $175;$$1437 = $174;
        continue;
       }
       $177 = ((($$1433)) + 16|0);
       $178 = HEAP32[$177>>2]|0;
       $179 = ($178|0)==(0|0);
       if ($179) {
        break;
       } else {
        $$1433 = $178;$$1437 = $177;
       }
      }
      $180 = ($$1437>>>0)<($108>>>0);
      if ($180) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$$1437>>2] = 0;
       $$3435 = $$1433;
       break;
      }
     } else {
      $159 = ((($2)) + 8|0);
      $160 = HEAP32[$159>>2]|0;
      $161 = ($160>>>0)<($108>>>0);
      if ($161) {
       _abort();
       // unreachable;
      }
      $162 = ((($160)) + 12|0);
      $163 = HEAP32[$162>>2]|0;
      $164 = ($163|0)==($2|0);
      if (!($164)) {
       _abort();
       // unreachable;
      }
      $165 = ((($157)) + 8|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = ($166|0)==($2|0);
      if ($167) {
       HEAP32[$162>>2] = $157;
       HEAP32[$165>>2] = $160;
       $$3435 = $157;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $181 = ($155|0)==(0|0);
    if (!($181)) {
     $182 = ((($2)) + 28|0);
     $183 = HEAP32[$182>>2]|0;
     $184 = (12360 + ($183<<2)|0);
     $185 = HEAP32[$184>>2]|0;
     $186 = ($2|0)==($185|0);
     do {
      if ($186) {
       HEAP32[$184>>2] = $$3435;
       $cond17 = ($$3435|0)==(0|0);
       if ($cond17) {
        $187 = 1 << $183;
        $188 = $187 ^ -1;
        $189 = HEAP32[(12060)>>2]|0;
        $190 = $189 & $188;
        HEAP32[(12060)>>2] = $190;
        break L96;
       }
      } else {
       $191 = HEAP32[(12072)>>2]|0;
       $192 = ($155>>>0)<($191>>>0);
       if ($192) {
        _abort();
        // unreachable;
       } else {
        $193 = ((($155)) + 16|0);
        $194 = HEAP32[$193>>2]|0;
        $not$ = ($194|0)!=($2|0);
        $$sink4 = $not$&1;
        $195 = (((($155)) + 16|0) + ($$sink4<<2)|0);
        HEAP32[$195>>2] = $$3435;
        $196 = ($$3435|0)==(0|0);
        if ($196) {
         break L96;
        } else {
         break;
        }
       }
      }
     } while(0);
     $197 = HEAP32[(12072)>>2]|0;
     $198 = ($$3435>>>0)<($197>>>0);
     if ($198) {
      _abort();
      // unreachable;
     }
     $199 = ((($$3435)) + 24|0);
     HEAP32[$199>>2] = $155;
     $200 = ((($2)) + 16|0);
     $201 = HEAP32[$200>>2]|0;
     $202 = ($201|0)==(0|0);
     do {
      if (!($202)) {
       $203 = ($201>>>0)<($197>>>0);
       if ($203) {
        _abort();
        // unreachable;
       } else {
        $204 = ((($$3435)) + 16|0);
        HEAP32[$204>>2] = $201;
        $205 = ((($201)) + 24|0);
        HEAP32[$205>>2] = $$3435;
        break;
       }
      }
     } while(0);
     $206 = ((($200)) + 4|0);
     $207 = HEAP32[$206>>2]|0;
     $208 = ($207|0)==(0|0);
     if (!($208)) {
      $209 = HEAP32[(12072)>>2]|0;
      $210 = ($207>>>0)<($209>>>0);
      if ($210) {
       _abort();
       // unreachable;
      } else {
       $211 = ((($$3435)) + 20|0);
       HEAP32[$211>>2] = $207;
       $212 = ((($207)) + 24|0);
       HEAP32[$212>>2] = $$3435;
       break;
      }
     }
    }
   }
  } while(0);
  $213 = $129 | 1;
  $214 = ((($$1)) + 4|0);
  HEAP32[$214>>2] = $213;
  $215 = (($$1) + ($129)|0);
  HEAP32[$215>>2] = $129;
  $216 = HEAP32[(12076)>>2]|0;
  $217 = ($$1|0)==($216|0);
  if ($217) {
   HEAP32[(12064)>>2] = $129;
   return;
  } else {
   $$2 = $129;
  }
 } else {
  $218 = $111 & -2;
  HEAP32[$110>>2] = $218;
  $219 = $$1418 | 1;
  $220 = ((($$1)) + 4|0);
  HEAP32[$220>>2] = $219;
  $221 = (($$1) + ($$1418)|0);
  HEAP32[$221>>2] = $$1418;
  $$2 = $$1418;
 }
 $222 = $$2 >>> 3;
 $223 = ($$2>>>0)<(256);
 if ($223) {
  $224 = $222 << 1;
  $225 = (12096 + ($224<<2)|0);
  $226 = HEAP32[3014]|0;
  $227 = 1 << $222;
  $228 = $226 & $227;
  $229 = ($228|0)==(0);
  if ($229) {
   $230 = $226 | $227;
   HEAP32[3014] = $230;
   $$pre = ((($225)) + 8|0);
   $$0438 = $225;$$pre$phiZ2D = $$pre;
  } else {
   $231 = ((($225)) + 8|0);
   $232 = HEAP32[$231>>2]|0;
   $233 = HEAP32[(12072)>>2]|0;
   $234 = ($232>>>0)<($233>>>0);
   if ($234) {
    _abort();
    // unreachable;
   } else {
    $$0438 = $232;$$pre$phiZ2D = $231;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $235 = ((($$0438)) + 12|0);
  HEAP32[$235>>2] = $$1;
  $236 = ((($$1)) + 8|0);
  HEAP32[$236>>2] = $$0438;
  $237 = ((($$1)) + 12|0);
  HEAP32[$237>>2] = $225;
  return;
 }
 $238 = $$2 >>> 8;
 $239 = ($238|0)==(0);
 if ($239) {
  $$0431 = 0;
 } else {
  $240 = ($$2>>>0)>(16777215);
  if ($240) {
   $$0431 = 31;
  } else {
   $241 = (($238) + 1048320)|0;
   $242 = $241 >>> 16;
   $243 = $242 & 8;
   $244 = $238 << $243;
   $245 = (($244) + 520192)|0;
   $246 = $245 >>> 16;
   $247 = $246 & 4;
   $248 = $247 | $243;
   $249 = $244 << $247;
   $250 = (($249) + 245760)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 2;
   $253 = $248 | $252;
   $254 = (14 - ($253))|0;
   $255 = $249 << $252;
   $256 = $255 >>> 15;
   $257 = (($254) + ($256))|0;
   $258 = $257 << 1;
   $259 = (($257) + 7)|0;
   $260 = $$2 >>> $259;
   $261 = $260 & 1;
   $262 = $261 | $258;
   $$0431 = $262;
  }
 }
 $263 = (12360 + ($$0431<<2)|0);
 $264 = ((($$1)) + 28|0);
 HEAP32[$264>>2] = $$0431;
 $265 = ((($$1)) + 16|0);
 $266 = ((($$1)) + 20|0);
 HEAP32[$266>>2] = 0;
 HEAP32[$265>>2] = 0;
 $267 = HEAP32[(12060)>>2]|0;
 $268 = 1 << $$0431;
 $269 = $267 & $268;
 $270 = ($269|0)==(0);
 if ($270) {
  $271 = $267 | $268;
  HEAP32[(12060)>>2] = $271;
  HEAP32[$263>>2] = $$1;
  $272 = ((($$1)) + 24|0);
  HEAP32[$272>>2] = $263;
  $273 = ((($$1)) + 12|0);
  HEAP32[$273>>2] = $$1;
  $274 = ((($$1)) + 8|0);
  HEAP32[$274>>2] = $$1;
  return;
 }
 $275 = HEAP32[$263>>2]|0;
 $276 = ($$0431|0)==(31);
 $277 = $$0431 >>> 1;
 $278 = (25 - ($277))|0;
 $279 = $276 ? 0 : $278;
 $280 = $$2 << $279;
 $$0419 = $280;$$0420 = $275;
 while(1) {
  $281 = ((($$0420)) + 4|0);
  $282 = HEAP32[$281>>2]|0;
  $283 = $282 & -8;
  $284 = ($283|0)==($$2|0);
  if ($284) {
   label = 121;
   break;
  }
  $285 = $$0419 >>> 31;
  $286 = (((($$0420)) + 16|0) + ($285<<2)|0);
  $287 = $$0419 << 1;
  $288 = HEAP32[$286>>2]|0;
  $289 = ($288|0)==(0|0);
  if ($289) {
   label = 118;
   break;
  } else {
   $$0419 = $287;$$0420 = $288;
  }
 }
 if ((label|0) == 118) {
  $290 = HEAP32[(12072)>>2]|0;
  $291 = ($286>>>0)<($290>>>0);
  if ($291) {
   _abort();
   // unreachable;
  }
  HEAP32[$286>>2] = $$1;
  $292 = ((($$1)) + 24|0);
  HEAP32[$292>>2] = $$0420;
  $293 = ((($$1)) + 12|0);
  HEAP32[$293>>2] = $$1;
  $294 = ((($$1)) + 8|0);
  HEAP32[$294>>2] = $$1;
  return;
 }
 else if ((label|0) == 121) {
  $295 = ((($$0420)) + 8|0);
  $296 = HEAP32[$295>>2]|0;
  $297 = HEAP32[(12072)>>2]|0;
  $298 = ($296>>>0)>=($297>>>0);
  $not$19 = ($$0420>>>0)>=($297>>>0);
  $299 = $298 & $not$19;
  if (!($299)) {
   _abort();
   // unreachable;
  }
  $300 = ((($296)) + 12|0);
  HEAP32[$300>>2] = $$1;
  HEAP32[$295>>2] = $$1;
  $301 = ((($$1)) + 8|0);
  HEAP32[$301>>2] = $296;
  $302 = ((($$1)) + 12|0);
  HEAP32[$302>>2] = $$0420;
  $303 = ((($$1)) + 24|0);
  HEAP32[$303>>2] = 0;
  return;
 }
}
function __ZNSt3__211char_traitsIcE4copyEPcPKcj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if (!($3)) {
  _memcpy(($0|0),($1|0),($2|0))|0;
 }
 return ($0|0);
}
function __ZNSt3__211char_traitsIcE6assignERcRKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$1>>0]|0;
 HEAP8[$0>>0] = $2;
 return;
}
function __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___cxa_allocate_exception(8)|0);
 __THREW__ = 0;
 invoke_vii(78,($1|0),(6703|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch_2()|0;
  $5 = tempRet0;
  ___cxa_free_exception(($1|0));
  ___resumeException($4|0);
  // unreachable;
 } else {
  HEAP32[$1>>2] = (1784);
  ___cxa_throw(($1|0),(424|0),(22|0));
  // unreachable;
 }
}
function __ZNKSt3__220__vector_base_commonILb1EE20__throw_out_of_rangeEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___cxa_allocate_exception(8)|0);
 __THREW__ = 0;
 invoke_vii(78,($1|0),(6703|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch_2()|0;
  $5 = tempRet0;
  ___cxa_free_exception(($1|0));
  ___resumeException($4|0);
  // unreachable;
 } else {
  HEAP32[$1>>2] = (1804);
  ___cxa_throw(($1|0),(440|0),(22|0));
  // unreachable;
 }
}
function __ZNSt3__211char_traitsIcE7compareEPKcS3_j($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if ($3) {
  $5 = 0;
 } else {
  $4 = (_memcmp($0,$1,$2)|0);
  $5 = $4;
 }
 return ($5|0);
}
function __Znwj($0) {
 $0 = $0|0;
 var $$ = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0);
 $$ = $1 ? 1 : $0;
 while(1) {
  $2 = (_malloc($$)|0);
  $3 = ($2|0)==(0|0);
  if (!($3)) {
   label = 6;
   break;
  }
  $4 = (__ZSt15get_new_handlerv()|0);
  $5 = ($4|0)==(0|0);
  if ($5) {
   label = 5;
   break;
  }
  FUNCTION_TABLE_v[$4 & 127]();
 }
 if ((label|0) == 5) {
  $6 = (___cxa_allocate_exception(4)|0);
  __ZNSt9bad_allocC2Ev($6);
  ___cxa_throw(($6|0),(392|0),(19|0));
  // unreachable;
 }
 else if ((label|0) == 6) {
  return ($2|0);
 }
 return (0)|0;
}
function __ZdlPv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($0);
 return;
}
function __ZNSt3__218__libcpp_refstringC2EPKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_strlen($1)|0);
 $3 = (($2) + 13)|0;
 $4 = (__Znwj($3)|0);
 HEAP32[$4>>2] = $2;
 $5 = ((($4)) + 4|0);
 HEAP32[$5>>2] = $2;
 $6 = ((($4)) + 8|0);
 HEAP32[$6>>2] = 0;
 $7 = (__ZNSt3__218__libcpp_refstring13data_from_repEPNS0_9_Rep_baseE($4)|0);
 $8 = (($2) + 1)|0;
 _memcpy(($7|0),($1|0),($8|0))|0;
 HEAP32[$0>>2] = $7;
 return;
}
function __ZNSt3__218__libcpp_refstring13data_from_repEPNS0_9_Rep_baseE($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 12|0);
 return ($1|0);
}
function __ZNSt11logic_errorC2EPKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (1764);
 $2 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vii(79,($2|0),($1|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch_2()|0;
  $6 = tempRet0;
  ___resumeException($5|0);
  // unreachable;
 } else {
  return;
 }
}
function __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___cxa_allocate_exception(8)|0);
 __THREW__ = 0;
 invoke_vii(78,($1|0),(8471|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch_2()|0;
  $5 = tempRet0;
  ___cxa_free_exception(($1|0));
  ___resumeException($4|0);
  // unreachable;
 } else {
  HEAP32[$1>>2] = (1784);
  ___cxa_throw(($1|0),(424|0),(22|0));
  // unreachable;
 }
}
function __ZNKSt3__221__basic_string_commonILb1EE20__throw_out_of_rangeEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___cxa_allocate_exception(8)|0);
 __THREW__ = 0;
 invoke_vii(78,($1|0),(8471|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch_2()|0;
  $5 = tempRet0;
  ___cxa_free_exception(($1|0));
  ___resumeException($4|0);
  // unreachable;
 } else {
  HEAP32[$1>>2] = (1804);
  ___cxa_throw(($1|0),(440|0),(22|0));
  // unreachable;
 }
}
function __ZNSt3__211char_traitsIcE4moveEPcPKcj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if (!($3)) {
  _memmove(($0|0),($1|0),($2|0))|0;
 }
 return ($0|0);
}
function __ZL25default_terminate_handlerv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $0 = sp + 36|0;
 $1 = (___cxa_get_globals_fast()|0);
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = HEAP32[$1>>2]|0;
  $4 = ($3|0)==(0|0);
  if (!($4)) {
   $5 = ((($3)) + 80|0);
   $6 = ((($3)) + 48|0);
   $7 = $6;
   $8 = $7;
   $9 = HEAP32[$8>>2]|0;
   $10 = (($7) + 4)|0;
   $11 = $10;
   $12 = HEAP32[$11>>2]|0;
   $13 = $9 & -256;
   $14 = ($13|0)==(1126902528);
   $15 = ($12|0)==(1129074247);
   $16 = $14 & $15;
   if (!($16)) {
    HEAP32[$vararg_buffer7>>2] = 6846;
    _abort_message(6796,$vararg_buffer7);
    // unreachable;
   }
   $17 = ($9|0)==(1126902529);
   $18 = ($12|0)==(1129074247);
   $19 = $17 & $18;
   if ($19) {
    $20 = ((($3)) + 44|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = $21;
   } else {
    $22 = $5;
   }
   HEAP32[$0>>2] = $22;
   $23 = HEAP32[$3>>2]|0;
   $24 = ((($23)) + 4|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = HEAP32[82]|0;
   $27 = ((($26)) + 16|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = (FUNCTION_TABLE_iiii[$28 & 127](328,$23,$0)|0);
   if ($29) {
    $30 = HEAP32[$0>>2]|0;
    $31 = HEAP32[$30>>2]|0;
    $32 = ((($31)) + 8|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (FUNCTION_TABLE_ii[$33 & 127]($30)|0);
    HEAP32[$vararg_buffer>>2] = 6846;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $25;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = $34;
    _abort_message(6710,$vararg_buffer);
    // unreachable;
   } else {
    HEAP32[$vararg_buffer3>>2] = 6846;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $25;
    _abort_message(6755,$vararg_buffer3);
    // unreachable;
   }
  }
 }
 _abort_message(6834,$vararg_buffer10);
 // unreachable;
}
function ___cxa_get_globals_fast() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = (_pthread_once((12552|0),(80|0))|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = HEAP32[3139]|0;
  $3 = (_pthread_getspecific(($2|0))|0);
  STACKTOP = sp;return ($3|0);
 } else {
  _abort_message(6985,$vararg_buffer);
  // unreachable;
 }
 return (0)|0;
}
function _abort_message($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $varargs;
 $2 = HEAP32[247]|0;
 (_vfprintf($2,$0,$1)|0);
 (_fputc(10,$2)|0);
 _abort();
 // unreachable;
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = sp;
 $4 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$1,0)|0);
 if ($4) {
  $$2 = 1;
 } else {
  $5 = ($1|0)==(0|0);
  if ($5) {
   $$2 = 0;
  } else {
   $6 = (___dynamic_cast($1,352,336,0)|0);
   $7 = ($6|0)==(0|0);
   if ($7) {
    $$2 = 0;
   } else {
    $8 = ((($3)) + 4|0);
    dest=$8; stop=dest+52|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
    HEAP32[$3>>2] = $6;
    $9 = ((($3)) + 8|0);
    HEAP32[$9>>2] = $0;
    $10 = ((($3)) + 12|0);
    HEAP32[$10>>2] = -1;
    $11 = ((($3)) + 48|0);
    HEAP32[$11>>2] = 1;
    $12 = HEAP32[$6>>2]|0;
    $13 = ((($12)) + 28|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = HEAP32[$2>>2]|0;
    FUNCTION_TABLE_viiii[$14 & 127]($6,$3,$15,1);
    $16 = ((($3)) + 24|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ($17|0)==(1);
    if ($18) {
     $19 = ((($3)) + 16|0);
     $20 = HEAP32[$19>>2]|0;
     HEAP32[$2>>2] = $20;
     $$0 = 1;
    } else {
     $$0 = 0;
    }
    $$2 = $$0;
   }
  }
 }
 STACKTOP = sp;return ($$2|0);
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($1)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$7,$5)|0);
 if ($8) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$1,$2,$3,$4);
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$6,$4)|0);
 do {
  if ($7) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0,$1,$2,$3);
  } else {
   $8 = HEAP32[$1>>2]|0;
   $9 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$8,$4)|0);
   if ($9) {
    $10 = ((($1)) + 16|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($11|0)==($2|0);
    $13 = ((($1)) + 32|0);
    if (!($12)) {
     $14 = ((($1)) + 20|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)==($2|0);
     if (!($16)) {
      HEAP32[$13>>2] = $3;
      HEAP32[$14>>2] = $2;
      $18 = ((($1)) + 40|0);
      $19 = HEAP32[$18>>2]|0;
      $20 = (($19) + 1)|0;
      HEAP32[$18>>2] = $20;
      $21 = ((($1)) + 36|0);
      $22 = HEAP32[$21>>2]|0;
      $23 = ($22|0)==(1);
      if ($23) {
       $24 = ((($1)) + 24|0);
       $25 = HEAP32[$24>>2]|0;
       $26 = ($25|0)==(2);
       if ($26) {
        $27 = ((($1)) + 54|0);
        HEAP8[$27>>0] = 1;
       }
      }
      $28 = ((($1)) + 44|0);
      HEAP32[$28>>2] = 4;
      break;
     }
    }
    $17 = ($3|0)==(1);
    if ($17) {
     HEAP32[$13>>2] = 1;
    }
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$5,0)|0);
 if ($6) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$1,$2,$3);
 }
 return;
}
function __ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==($1|0);
 return ($3|0);
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 $7 = ((($1)) + 36|0);
 $8 = ((($1)) + 24|0);
 do {
  if ($6) {
   HEAP32[$4>>2] = $2;
   HEAP32[$8>>2] = $3;
   HEAP32[$7>>2] = 1;
  } else {
   $9 = ($5|0)==($2|0);
   if (!($9)) {
    $12 = HEAP32[$7>>2]|0;
    $13 = (($12) + 1)|0;
    HEAP32[$7>>2] = $13;
    HEAP32[$8>>2] = 2;
    $14 = ((($1)) + 54|0);
    HEAP8[$14>>0] = 1;
    break;
   }
   $10 = HEAP32[$8>>2]|0;
   $11 = ($10|0)==(2);
   if ($11) {
    HEAP32[$8>>2] = $3;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==($2|0);
 if ($6) {
  $7 = ((($1)) + 28|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(1);
  if (!($9)) {
   HEAP32[$7>>2] = $3;
  }
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond22 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($1)) + 53|0);
 HEAP8[$5>>0] = 1;
 $6 = ((($1)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==($3|0);
 do {
  if ($8) {
   $9 = ((($1)) + 52|0);
   HEAP8[$9>>0] = 1;
   $10 = ((($1)) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(0|0);
   $13 = ((($1)) + 54|0);
   $14 = ((($1)) + 48|0);
   $15 = ((($1)) + 24|0);
   $16 = ((($1)) + 36|0);
   if ($12) {
    HEAP32[$10>>2] = $2;
    HEAP32[$15>>2] = $4;
    HEAP32[$16>>2] = 1;
    $17 = HEAP32[$14>>2]|0;
    $18 = ($17|0)==(1);
    $19 = ($4|0)==(1);
    $or$cond = $18 & $19;
    if (!($or$cond)) {
     break;
    }
    HEAP8[$13>>0] = 1;
    break;
   }
   $20 = ($11|0)==($2|0);
   if (!($20)) {
    $27 = HEAP32[$16>>2]|0;
    $28 = (($27) + 1)|0;
    HEAP32[$16>>2] = $28;
    HEAP8[$13>>0] = 1;
    break;
   }
   $21 = HEAP32[$15>>2]|0;
   $22 = ($21|0)==(2);
   if ($22) {
    HEAP32[$15>>2] = $4;
    $26 = $4;
   } else {
    $26 = $21;
   }
   $23 = HEAP32[$14>>2]|0;
   $24 = ($23|0)==(1);
   $25 = ($26|0)==(1);
   $or$cond22 = $24 & $25;
   if ($or$cond22) {
    HEAP8[$13>>0] = 1;
   }
  }
 } while(0);
 return;
}
function ___dynamic_cast($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$0 = 0, $$33 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond28 = 0, $or$cond30 = 0, $or$cond32 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $4 = sp;
 $5 = HEAP32[$0>>2]|0;
 $6 = ((($5)) + -8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($0) + ($7)|0);
 $9 = ((($5)) + -4|0);
 $10 = HEAP32[$9>>2]|0;
 HEAP32[$4>>2] = $2;
 $11 = ((($4)) + 4|0);
 HEAP32[$11>>2] = $0;
 $12 = ((($4)) + 8|0);
 HEAP32[$12>>2] = $1;
 $13 = ((($4)) + 12|0);
 HEAP32[$13>>2] = $3;
 $14 = ((($4)) + 16|0);
 $15 = ((($4)) + 20|0);
 $16 = ((($4)) + 24|0);
 $17 = ((($4)) + 28|0);
 $18 = ((($4)) + 32|0);
 $19 = ((($4)) + 40|0);
 dest=$14; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));HEAP16[$14+36>>1]=0|0;HEAP8[$14+38>>0]=0|0;
 $20 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($10,$2,0)|0);
 L1: do {
  if ($20) {
   $21 = ((($4)) + 48|0);
   HEAP32[$21>>2] = 1;
   $22 = HEAP32[$10>>2]|0;
   $23 = ((($22)) + 20|0);
   $24 = HEAP32[$23>>2]|0;
   FUNCTION_TABLE_viiiiii[$24 & 63]($10,$4,$8,$8,1,0);
   $25 = HEAP32[$16>>2]|0;
   $26 = ($25|0)==(1);
   $$ = $26 ? $8 : 0;
   $$0 = $$;
  } else {
   $27 = ((($4)) + 36|0);
   $28 = HEAP32[$10>>2]|0;
   $29 = ((($28)) + 24|0);
   $30 = HEAP32[$29>>2]|0;
   FUNCTION_TABLE_viiiii[$30 & 63]($10,$4,$8,1,0);
   $31 = HEAP32[$27>>2]|0;
   switch ($31|0) {
   case 0:  {
    $32 = HEAP32[$19>>2]|0;
    $33 = ($32|0)==(1);
    $34 = HEAP32[$17>>2]|0;
    $35 = ($34|0)==(1);
    $or$cond = $33 & $35;
    $36 = HEAP32[$18>>2]|0;
    $37 = ($36|0)==(1);
    $or$cond28 = $or$cond & $37;
    $38 = HEAP32[$15>>2]|0;
    $$33 = $or$cond28 ? $38 : 0;
    $$0 = $$33;
    break L1;
    break;
   }
   case 1:  {
    break;
   }
   default: {
    $$0 = 0;
    break L1;
   }
   }
   $39 = HEAP32[$16>>2]|0;
   $40 = ($39|0)==(1);
   if (!($40)) {
    $41 = HEAP32[$19>>2]|0;
    $42 = ($41|0)==(0);
    $43 = HEAP32[$17>>2]|0;
    $44 = ($43|0)==(1);
    $or$cond30 = $42 & $44;
    $45 = HEAP32[$18>>2]|0;
    $46 = ($45|0)==(1);
    $or$cond32 = $or$cond30 & $46;
    if (!($or$cond32)) {
     $$0 = 0;
     break;
    }
   }
   $47 = HEAP32[$14>>2]|0;
   $$0 = $47;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($1)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$7,$5)|0);
 if ($8) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$1,$2,$3,$4);
 } else {
  $9 = ((($0)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($11)) + 20|0);
  $13 = HEAP32[$12>>2]|0;
  FUNCTION_TABLE_viiiiii[$13 & 63]($10,$1,$2,$3,$4,$5);
 }
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$037$off038 = 0, $$037$off039 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$6,$4)|0);
 do {
  if ($7) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0,$1,$2,$3);
  } else {
   $8 = HEAP32[$1>>2]|0;
   $9 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$8,$4)|0);
   $10 = ((($0)) + 8|0);
   if (!($9)) {
    $41 = HEAP32[$10>>2]|0;
    $42 = HEAP32[$41>>2]|0;
    $43 = ((($42)) + 24|0);
    $44 = HEAP32[$43>>2]|0;
    FUNCTION_TABLE_viiiii[$44 & 63]($41,$1,$2,$3,$4);
    break;
   }
   $11 = ((($1)) + 16|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==($2|0);
   $14 = ((($1)) + 32|0);
   if (!($13)) {
    $15 = ((($1)) + 20|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($16|0)==($2|0);
    if (!($17)) {
     HEAP32[$14>>2] = $3;
     $19 = ((($1)) + 44|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($20|0)==(4);
     if ($21) {
      break;
     }
     $22 = ((($1)) + 52|0);
     HEAP8[$22>>0] = 0;
     $23 = ((($1)) + 53|0);
     HEAP8[$23>>0] = 0;
     $24 = HEAP32[$10>>2]|0;
     $25 = HEAP32[$24>>2]|0;
     $26 = ((($25)) + 20|0);
     $27 = HEAP32[$26>>2]|0;
     FUNCTION_TABLE_viiiiii[$27 & 63]($24,$1,$2,$2,1,$4);
     $28 = HEAP8[$23>>0]|0;
     $29 = ($28<<24>>24)==(0);
     if ($29) {
      $$037$off038 = 4;
      label = 11;
     } else {
      $30 = HEAP8[$22>>0]|0;
      $not$ = ($30<<24>>24)==(0);
      if ($not$) {
       $$037$off038 = 3;
       label = 11;
      } else {
       $$037$off039 = 3;
      }
     }
     if ((label|0) == 11) {
      HEAP32[$15>>2] = $2;
      $31 = ((($1)) + 40|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = (($32) + 1)|0;
      HEAP32[$31>>2] = $33;
      $34 = ((($1)) + 36|0);
      $35 = HEAP32[$34>>2]|0;
      $36 = ($35|0)==(1);
      if ($36) {
       $37 = ((($1)) + 24|0);
       $38 = HEAP32[$37>>2]|0;
       $39 = ($38|0)==(2);
       if ($39) {
        $40 = ((($1)) + 54|0);
        HEAP8[$40>>0] = 1;
        $$037$off039 = $$037$off038;
       } else {
        $$037$off039 = $$037$off038;
       }
      } else {
       $$037$off039 = $$037$off038;
      }
     }
     HEAP32[$19>>2] = $$037$off039;
     break;
    }
   }
   $18 = ($3|0)==(1);
   if ($18) {
    HEAP32[$14>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$5,0)|0);
 if ($6) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$1,$2,$3);
 } else {
  $7 = ((($0)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($9)) + 28|0);
  $11 = HEAP32[$10>>2]|0;
  FUNCTION_TABLE_viiii[$11 & 127]($8,$1,$2,$3);
 }
 return;
}
function __ZNSt9type_infoD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = (_pthread_key_create((12556|0),(81|0))|0);
 $1 = ($0|0)==(0);
 if ($1) {
  STACKTOP = sp;return;
 } else {
  _abort_message(7034,$vararg_buffer);
  // unreachable;
 }
}
function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 _free($0);
 $1 = HEAP32[3139]|0;
 $2 = (_pthread_setspecific(($1|0),(0|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return;
 } else {
  _abort_message(7084,$vararg_buffer);
  // unreachable;
 }
}
function __ZSt9terminatev() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (invoke_i(82)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $20 = ___cxa_find_matching_catch_3(0|0)|0;
  $21 = tempRet0;
  ___clang_call_terminate($20);
  // unreachable;
 }
 $3 = ($0|0)==(0|0);
 if (!($3)) {
  $4 = HEAP32[$0>>2]|0;
  $5 = ($4|0)==(0|0);
  if (!($5)) {
   $6 = ((($4)) + 48|0);
   $7 = $6;
   $8 = $7;
   $9 = HEAP32[$8>>2]|0;
   $10 = (($7) + 4)|0;
   $11 = $10;
   $12 = HEAP32[$11>>2]|0;
   $13 = $9 & -256;
   $14 = ($13|0)==(1126902528);
   $15 = ($12|0)==(1129074247);
   $16 = $14 & $15;
   if ($16) {
    $17 = ((($4)) + 12|0);
    $18 = HEAP32[$17>>2]|0;
    __ZSt11__terminatePFvvE($18);
    // unreachable;
   }
  }
 }
 $19 = (__ZSt13get_terminatev()|0);
 __ZSt11__terminatePFvvE($19);
 // unreachable;
}
function __ZSt11__terminatePFvvE($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 __THREW__ = 0;
 invoke_v($0|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if (!($2)) {
  __THREW__ = 0;
  invoke_vii(83,(7137|0),($vararg_buffer|0));
  $3 = __THREW__; __THREW__ = 0;
 }
 $4 = ___cxa_find_matching_catch_3(0|0)|0;
 $5 = tempRet0;
 (___cxa_begin_catch(($4|0))|0);
 __THREW__ = 0;
 invoke_vii(83,(7177|0),($vararg_buffer1|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = ___cxa_find_matching_catch_3(0|0)|0;
 $8 = tempRet0;
 __THREW__ = 0;
 invoke_v(84);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $11 = ___cxa_find_matching_catch_3(0|0)|0;
  $12 = tempRet0;
  ___clang_call_terminate($11);
  // unreachable;
 } else {
  ___clang_call_terminate($7);
  // unreachable;
 }
}
function __ZSt13get_terminatev() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[413]|0;HEAP32[413] = (($0+0)|0);
 $1 = $0;
 return ($1|0);
}
function __ZNSt9bad_allocD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt9bad_allocD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt9bad_allocD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt9bad_alloc4whatEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (7227|0);
}
function __ZNSt9exceptionD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt11logic_errorD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (1764);
 $1 = ((($0)) + 4|0);
 __ZN12_GLOBAL__N_114__libcpp_nmstrD2Ev($1);
 return;
}
function __ZNSt11logic_errorD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt11logic_errorD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt11logic_error4whatEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = (__ZNK12_GLOBAL__N_114__libcpp_nmstr5c_strEv($1)|0);
 return ($2|0);
}
function __ZNK12_GLOBAL__N_114__libcpp_nmstr5c_strEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZN12_GLOBAL__N_114__libcpp_nmstrD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNK12_GLOBAL__N_114__libcpp_nmstr5countEv($0)|0);
 $2 = HEAP32[$1>>2]|0;HEAP32[$1>>2] = (($2+-1)|0);
 $3 = (($2) + -1)|0;
 $4 = ($3|0)<(0);
 if ($4) {
  $5 = HEAP32[$0>>2]|0;
  $6 = ((($5)) + -12|0);
  __ZdlPv($6);
 }
 return;
}
function __ZNK12_GLOBAL__N_114__libcpp_nmstr5countEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + -4|0);
 return ($2|0);
}
function __ZNSt12length_errorD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt11logic_errorD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt12out_of_rangeD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt11logic_errorD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZN10__cxxabiv123__fundamental_type_infoD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$1,0)|0);
 return ($3|0);
}
function __ZN10__cxxabiv119__pointer_type_infoD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNK10__cxxabiv119__pointer_type_info9can_catchEPKNS_16__shim_type_infoERPv($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = sp;
 $4 = HEAP32[$2>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$2>>2] = $5;
 $6 = (__ZNK10__cxxabiv117__pbase_type_info9can_catchEPKNS_16__shim_type_infoERPv($0,$1,0)|0);
 if ($6) {
  $$4 = 1;
 } else {
  $7 = ($1|0)==(0|0);
  if ($7) {
   $$4 = 0;
  } else {
   $8 = (___dynamic_cast($1,352,472,0)|0);
   $9 = ($8|0)==(0|0);
   if ($9) {
    $$4 = 0;
   } else {
    $10 = ((($8)) + 8|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ((($0)) + 8|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = $13 ^ -1;
    $15 = $11 & $14;
    $16 = ($15|0)==(0);
    if ($16) {
     $17 = ((($0)) + 12|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ((($8)) + 12|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($18,$20,0)|0);
     if ($21) {
      $$4 = 1;
     } else {
      $22 = HEAP32[$17>>2]|0;
      $23 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($22,504,0)|0);
      if ($23) {
       $$4 = 1;
      } else {
       $24 = HEAP32[$17>>2]|0;
       $25 = ($24|0)==(0|0);
       if ($25) {
        $$4 = 0;
       } else {
        $26 = (___dynamic_cast($24,352,336,0)|0);
        $27 = ($26|0)==(0|0);
        if ($27) {
         $$4 = 0;
        } else {
         $28 = HEAP32[$19>>2]|0;
         $29 = ($28|0)==(0|0);
         if ($29) {
          $$4 = 0;
         } else {
          $30 = (___dynamic_cast($28,352,336,0)|0);
          $31 = ($30|0)==(0|0);
          if ($31) {
           $$4 = 0;
          } else {
           $32 = ((($3)) + 4|0);
           dest=$32; stop=dest+52|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
           HEAP32[$3>>2] = $30;
           $33 = ((($3)) + 8|0);
           HEAP32[$33>>2] = $26;
           $34 = ((($3)) + 12|0);
           HEAP32[$34>>2] = -1;
           $35 = ((($3)) + 48|0);
           HEAP32[$35>>2] = 1;
           $36 = HEAP32[$30>>2]|0;
           $37 = ((($36)) + 28|0);
           $38 = HEAP32[$37>>2]|0;
           $39 = HEAP32[$2>>2]|0;
           FUNCTION_TABLE_viiii[$38 & 127]($30,$3,$39,1);
           $40 = ((($3)) + 24|0);
           $41 = HEAP32[$40>>2]|0;
           $42 = ($41|0)==(1);
           if ($42) {
            $43 = ((($3)) + 16|0);
            $44 = HEAP32[$43>>2]|0;
            HEAP32[$2>>2] = $44;
            $$0 = 1;
           } else {
            $$0 = 0;
           }
           $$4 = $$0;
          }
         }
        }
       }
      }
     }
    } else {
     $$4 = 0;
    }
   }
  }
 }
 STACKTOP = sp;return ($$4|0);
}
function __ZNK10__cxxabiv117__pbase_type_info9can_catchEPKNS_16__shim_type_infoERPv($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$1,0)|0);
 if ($3) {
  $$0 = 1;
 } else {
  $4 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($1,512,0)|0);
  $$0 = $4;
 }
 return ($$0|0);
}
function __ZN10__cxxabiv116__enum_type_infoD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNK10__cxxabiv116__enum_type_info9can_catchEPKNS_16__shim_type_infoERPv($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$1,0)|0);
 return ($3|0);
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($1)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$7,$5)|0);
 if ($8) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$1,$2,$3,$4);
 } else {
  $9 = ((($1)) + 52|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = ((($1)) + 53|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = ((($0)) + 16|0);
  $14 = ((($0)) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (((($0)) + 16|0) + ($15<<3)|0);
  HEAP8[$9>>0] = 0;
  HEAP8[$11>>0] = 0;
  __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($13,$1,$2,$3,$4,$5);
  $17 = ($15|0)>(1);
  L4: do {
   if ($17) {
    $18 = ((($0)) + 24|0);
    $19 = ((($1)) + 24|0);
    $20 = ((($1)) + 54|0);
    $21 = ((($0)) + 8|0);
    $$0 = $18;
    while(1) {
     $22 = HEAP8[$20>>0]|0;
     $23 = ($22<<24>>24)==(0);
     if (!($23)) {
      break L4;
     }
     $24 = HEAP8[$9>>0]|0;
     $25 = ($24<<24>>24)==(0);
     if ($25) {
      $31 = HEAP8[$11>>0]|0;
      $32 = ($31<<24>>24)==(0);
      if (!($32)) {
       $33 = HEAP32[$21>>2]|0;
       $34 = $33 & 1;
       $35 = ($34|0)==(0);
       if ($35) {
        break L4;
       }
      }
     } else {
      $26 = HEAP32[$19>>2]|0;
      $27 = ($26|0)==(1);
      if ($27) {
       break L4;
      }
      $28 = HEAP32[$21>>2]|0;
      $29 = $28 & 2;
      $30 = ($29|0)==(0);
      if ($30) {
       break L4;
      }
     }
     HEAP8[$9>>0] = 0;
     HEAP8[$11>>0] = 0;
     __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($$0,$1,$2,$3,$4,$5);
     $36 = ((($$0)) + 8|0);
     $37 = ($36>>>0)<($16>>>0);
     if ($37) {
      $$0 = $36;
     } else {
      break;
     }
    }
   }
  } while(0);
  HEAP8[$9>>0] = $10;
  HEAP8[$11>>0] = $12;
 }
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$081$off0 = 0, $$084 = 0, $$085$off0 = 0, $$1 = 0, $$182$off0 = 0, $$186$off0 = 0, $$2 = 0, $$283$off0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$6,$4)|0);
 L1: do {
  if ($7) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0,$1,$2,$3);
  } else {
   $8 = HEAP32[$1>>2]|0;
   $9 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$8,$4)|0);
   $10 = ((($0)) + 12|0);
   $11 = ((($1)) + 24|0);
   $12 = ((($1)) + 36|0);
   $13 = ((($1)) + 54|0);
   $14 = ((($0)) + 8|0);
   $15 = ((($0)) + 16|0);
   if (!($9)) {
    $55 = HEAP32[$10>>2]|0;
    $56 = (((($0)) + 16|0) + ($55<<3)|0);
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($15,$1,$2,$3,$4);
    $57 = ((($0)) + 24|0);
    $58 = ($55|0)>(1);
    if (!($58)) {
     break;
    }
    $59 = HEAP32[$14>>2]|0;
    $60 = $59 & 2;
    $61 = ($60|0)==(0);
    if ($61) {
     $62 = HEAP32[$12>>2]|0;
     $63 = ($62|0)==(1);
     if ($63) {
      $$0 = $57;
     } else {
      $68 = $59 & 1;
      $69 = ($68|0)==(0);
      if ($69) {
       $$2 = $57;
       while(1) {
        $78 = HEAP8[$13>>0]|0;
        $79 = ($78<<24>>24)==(0);
        if (!($79)) {
         break L1;
        }
        $80 = HEAP32[$12>>2]|0;
        $81 = ($80|0)==(1);
        if ($81) {
         break L1;
        }
        __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$2,$1,$2,$3,$4);
        $82 = ((($$2)) + 8|0);
        $83 = ($82>>>0)<($56>>>0);
        if ($83) {
         $$2 = $82;
        } else {
         break L1;
        }
       }
      } else {
       $$1 = $57;
      }
      while(1) {
       $70 = HEAP8[$13>>0]|0;
       $71 = ($70<<24>>24)==(0);
       if (!($71)) {
        break L1;
       }
       $72 = HEAP32[$12>>2]|0;
       $73 = ($72|0)==(1);
       if ($73) {
        $74 = HEAP32[$11>>2]|0;
        $75 = ($74|0)==(1);
        if ($75) {
         break L1;
        }
       }
       __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$1,$1,$2,$3,$4);
       $76 = ((($$1)) + 8|0);
       $77 = ($76>>>0)<($56>>>0);
       if ($77) {
        $$1 = $76;
       } else {
        break L1;
       }
      }
     }
    } else {
     $$0 = $57;
    }
    while(1) {
     $64 = HEAP8[$13>>0]|0;
     $65 = ($64<<24>>24)==(0);
     if (!($65)) {
      break L1;
     }
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$0,$1,$2,$3,$4);
     $66 = ((($$0)) + 8|0);
     $67 = ($66>>>0)<($56>>>0);
     if ($67) {
      $$0 = $66;
     } else {
      break L1;
     }
    }
   }
   $16 = ((($1)) + 16|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)==($2|0);
   $19 = ((($1)) + 32|0);
   if (!($18)) {
    $20 = ((($1)) + 20|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ($21|0)==($2|0);
    if (!($22)) {
     HEAP32[$19>>2] = $3;
     $24 = ((($1)) + 44|0);
     $25 = HEAP32[$24>>2]|0;
     $26 = ($25|0)==(4);
     if ($26) {
      break;
     }
     $27 = HEAP32[$10>>2]|0;
     $28 = (((($0)) + 16|0) + ($27<<3)|0);
     $29 = ((($1)) + 52|0);
     $30 = ((($1)) + 53|0);
     $$081$off0 = 0;$$084 = $15;$$085$off0 = 0;
     L29: while(1) {
      $31 = ($$084>>>0)<($28>>>0);
      if (!($31)) {
       $$283$off0 = $$081$off0;
       label = 18;
       break;
      }
      HEAP8[$29>>0] = 0;
      HEAP8[$30>>0] = 0;
      __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($$084,$1,$2,$2,1,$4);
      $32 = HEAP8[$13>>0]|0;
      $33 = ($32<<24>>24)==(0);
      if (!($33)) {
       $$283$off0 = $$081$off0;
       label = 18;
       break;
      }
      $34 = HEAP8[$30>>0]|0;
      $35 = ($34<<24>>24)==(0);
      do {
       if ($35) {
        $$182$off0 = $$081$off0;$$186$off0 = $$085$off0;
       } else {
        $36 = HEAP8[$29>>0]|0;
        $37 = ($36<<24>>24)==(0);
        if ($37) {
         $43 = HEAP32[$14>>2]|0;
         $44 = $43 & 1;
         $45 = ($44|0)==(0);
         if ($45) {
          $$283$off0 = 1;
          label = 18;
          break L29;
         } else {
          $$182$off0 = 1;$$186$off0 = $$085$off0;
          break;
         }
        }
        $38 = HEAP32[$11>>2]|0;
        $39 = ($38|0)==(1);
        if ($39) {
         label = 23;
         break L29;
        }
        $40 = HEAP32[$14>>2]|0;
        $41 = $40 & 2;
        $42 = ($41|0)==(0);
        if ($42) {
         label = 23;
         break L29;
        } else {
         $$182$off0 = 1;$$186$off0 = 1;
        }
       }
      } while(0);
      $46 = ((($$084)) + 8|0);
      $$081$off0 = $$182$off0;$$084 = $46;$$085$off0 = $$186$off0;
     }
     do {
      if ((label|0) == 18) {
       if (!($$085$off0)) {
        HEAP32[$20>>2] = $2;
        $47 = ((($1)) + 40|0);
        $48 = HEAP32[$47>>2]|0;
        $49 = (($48) + 1)|0;
        HEAP32[$47>>2] = $49;
        $50 = HEAP32[$12>>2]|0;
        $51 = ($50|0)==(1);
        if ($51) {
         $52 = HEAP32[$11>>2]|0;
         $53 = ($52|0)==(2);
         if ($53) {
          HEAP8[$13>>0] = 1;
          if ($$283$off0) {
           label = 23;
           break;
          } else {
           $54 = 4;
           break;
          }
         }
        }
       }
       if ($$283$off0) {
        label = 23;
       } else {
        $54 = 4;
       }
      }
     } while(0);
     if ((label|0) == 23) {
      $54 = 3;
     }
     HEAP32[$24>>2] = $54;
     break;
    }
   }
   $23 = ($3|0)==(1);
   if ($23) {
    HEAP32[$19>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$5,0)|0);
 L1: do {
  if ($6) {
   __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$1,$2,$3);
  } else {
   $7 = ((($0)) + 16|0);
   $8 = ((($0)) + 12|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = (((($0)) + 16|0) + ($9<<3)|0);
   __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($7,$1,$2,$3);
   $11 = ($9|0)>(1);
   if ($11) {
    $12 = ((($0)) + 24|0);
    $13 = ((($1)) + 54|0);
    $$0 = $12;
    while(1) {
     __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($$0,$1,$2,$3);
     $14 = HEAP8[$13>>0]|0;
     $15 = ($14<<24>>24)==(0);
     if (!($15)) {
      break L1;
     }
     $16 = ((($$0)) + 8|0);
     $17 = ($16>>>0)<($10>>>0);
     if ($17) {
      $$0 = $16;
     } else {
      break;
     }
    }
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 >> 8;
 $7 = $5 & 1;
 $8 = ($7|0)==(0);
 if ($8) {
  $$0 = $6;
 } else {
  $9 = HEAP32[$2>>2]|0;
  $10 = (($9) + ($6)|0);
  $11 = HEAP32[$10>>2]|0;
  $$0 = $11;
 }
 $12 = HEAP32[$0>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 28|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($2) + ($$0)|0);
 $17 = $5 & 2;
 $18 = ($17|0)!=(0);
 $19 = $18 ? $3 : 2;
 FUNCTION_TABLE_viiii[$15 & 127]($12,$1,$16,$19);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 >> 8;
 $9 = $7 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  $$0 = $8;
 } else {
  $11 = HEAP32[$3>>2]|0;
  $12 = (($11) + ($8)|0);
  $13 = HEAP32[$12>>2]|0;
  $$0 = $13;
 }
 $14 = HEAP32[$0>>2]|0;
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($15)) + 20|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($3) + ($$0)|0);
 $19 = $7 & 2;
 $20 = ($19|0)!=(0);
 $21 = $20 ? $4 : 2;
 FUNCTION_TABLE_viiiiii[$17 & 63]($14,$1,$2,$18,$21,$5);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 >> 8;
 $8 = $6 & 1;
 $9 = ($8|0)==(0);
 if ($9) {
  $$0 = $7;
 } else {
  $10 = HEAP32[$2>>2]|0;
  $11 = (($10) + ($7)|0);
  $12 = HEAP32[$11>>2]|0;
  $$0 = $12;
 }
 $13 = HEAP32[$0>>2]|0;
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($14)) + 24|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($2) + ($$0)|0);
 $18 = $6 & 2;
 $19 = ($18|0)!=(0);
 $20 = $19 ? $3 : 2;
 FUNCTION_TABLE_viiiii[$16 & 63]($13,$1,$17,$20,$4);
 return;
}
function ___cxa_demangle($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$157 = 0, $$2 = 0, $$247 = 0, $$250 = 0, $$3 = 0, $$351 = 0, $$pr = 0, $$pr$pre = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond53 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(4192|0);
 $4 = sp + 4184|0;
 $5 = sp;
 $6 = sp + 4120|0;
 $7 = sp + 4112|0;
 $8 = ($0|0)==(0|0);
 $9 = ($3|0)!=(0|0);
 L1: do {
  if ($8) {
   label = 3;
  } else {
   $10 = ($1|0)!=(0|0);
   $11 = ($2|0)==(0|0);
   $or$cond = $10 & $11;
   if ($or$cond) {
    label = 3;
   } else {
    if ($10) {
     $12 = HEAP32[$2>>2]|0;
     $74 = $12;
    } else {
     $74 = 0;
    }
    __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EEC2Ev($5);
    __THREW__ = 0;
    invoke_vii(85,($6|0),($5|0));
    $13 = __THREW__; __THREW__ = 0;
    $14 = $13&1;
    if ($14) {
     $63 = ___cxa_find_matching_catch_2()|0;
     $64 = tempRet0;
     $$3 = $63;$$351 = $64;
    } else {
     $15 = ((($6)) + 48|0);
     $16 = ((($6)) + 61|0);
     ;HEAP32[$15>>2]=0|0;HEAP32[$15+4>>2]=0|0;HEAP32[$15+8>>2]=0|0;HEAP8[$15+12>>0]=0|0;
     HEAP8[$16>>0] = 1;
     $17 = ((($6)) + 32|0);
     $18 = ((($6)) + 36|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ((($6)) + 40|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($19>>>0)<($21>>>0);
     if ($22) {
      __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lj4096EEEEELj4096EEC2ERNS0_5arenaILj4096EEE($4,$5);
      HEAP32[$19>>2] = 0;
      $23 = ((($19)) + 4|0);
      HEAP32[$23>>2] = 0;
      $24 = ((($19)) + 8|0);
      $25 = HEAP32[$4>>2]|0;
      HEAP32[$24>>2] = 0;
      $26 = ((($19)) + 12|0);
      HEAP32[$26>>2] = $25;
      $27 = HEAP32[$18>>2]|0;
      $28 = ((($27)) + 16|0);
      HEAP32[$18>>2] = $28;
      label = 11;
     } else {
      __THREW__ = 0;
      invoke_vii(86,($17|0),($5|0));
      $29 = __THREW__; __THREW__ = 0;
      $30 = $29&1;
      if ($30) {
       $65 = ___cxa_find_matching_catch_2()|0;
       $66 = tempRet0;
       $$247 = $65;$$250 = $66;
      } else {
       label = 11;
      }
     }
     if ((label|0) == 11) {
      $31 = ((($6)) + 62|0);
      HEAP8[$31>>0] = 0;
      $32 = ((($6)) + 63|0);
      HEAP8[$32>>0] = 1;
      HEAP32[$7>>2] = 0;
      $33 = (_strlen($0)|0);
      $34 = (($0) + ($33)|0);
      __THREW__ = 0;
      invoke_viiii(87,($0|0),($34|0),($6|0),($7|0));
      $35 = __THREW__; __THREW__ = 0;
      $36 = $35&1;
      L16: do {
       if (!($36)) {
        $37 = HEAP32[$7>>2]|0;
        $38 = ($37|0)!=(0);
        $39 = HEAP8[$31>>0]|0;
        $40 = ($39<<24>>24)==(0);
        $or$cond53 = $38 | $40;
        do {
         if ($or$cond53) {
          $$pr = $37;
          label = 27;
         } else {
          $41 = HEAP32[$17>>2]|0;
          $42 = HEAP32[$18>>2]|0;
          $43 = ($41|0)==($42|0);
          if ($43) {
           label = 28;
          } else {
           $44 = HEAP32[$41>>2]|0;
           $45 = ((($41)) + 4|0);
           $46 = HEAP32[$45>>2]|0;
           $47 = ($44|0)==($46|0);
           if ($47) {
            label = 28;
           } else {
            HEAP8[$31>>0] = 0;
            HEAP8[$16>>0] = 0;
            $48 = HEAP32[$6>>2]|0;
            $49 = ((($6)) + 4|0);
            while(1) {
             $50 = HEAP32[$49>>2]|0;
             $51 = ($50|0)==($48|0);
             if ($51) {
              break;
             }
             $52 = ((($50)) + -24|0);
             HEAP32[$49>>2] = $52;
             __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($52);
            }
            $53 = ((($6)) + 16|0);
            $54 = HEAP32[$53>>2]|0;
            $55 = ((($6)) + 20|0);
            while(1) {
             $56 = HEAP32[$55>>2]|0;
             $57 = ($56|0)==($54|0);
             if ($57) {
              break;
             }
             $58 = ((($56)) + -16|0);
             HEAP32[$55>>2] = $58;
             __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($58);
            }
            __THREW__ = 0;
            invoke_viiii(87,($0|0),($34|0),($6|0),($7|0));
            $59 = __THREW__; __THREW__ = 0;
            $60 = $59&1;
            if ($60) {
             break L16;
            }
            $61 = HEAP8[$31>>0]|0;
            $62 = ($61<<24>>24)==(0);
            if ($62) {
             $$pr$pre = HEAP32[$7>>2]|0;
             $$pr = $$pr$pre;
             label = 27;
             break;
            } else {
             HEAP32[$7>>2] = -2;
             $$2 = 0;$100 = -2;
             break;
            }
           }
          }
         }
        } while(0);
        if ((label|0) == 27) {
         $67 = ($$pr|0)==(0);
         if ($67) {
          label = 28;
         } else {
          $$2 = 0;$100 = $$pr;
         }
        }
        do {
         if ((label|0) == 28) {
          $68 = ((($6)) + 4|0);
          $69 = HEAP32[$68>>2]|0;
          $70 = ((($69)) + -24|0);
          $71 = (__ZNK10__cxxabiv112_GLOBAL__N_111string_pair4sizeEv($70)|0);
          $72 = (($71) + 1)|0;
          $73 = ($72>>>0)>($74>>>0);
          if ($73) {
           $75 = (_realloc($1,$72)|0);
           $76 = ($75|0)==(0|0);
           if ($76) {
            HEAP32[$7>>2] = -1;
            $$2 = 0;$100 = -1;
            break;
           }
           if ($11) {
            $$157 = $75;
           } else {
            HEAP32[$2>>2] = $72;
            $$157 = $75;
           }
          } else {
           $77 = ($1|0)==(0|0);
           if ($77) {
            $$2 = 0;$100 = 0;
            break;
           } else {
            $$157 = $1;
           }
          }
          $78 = HEAP32[$68>>2]|0;
          $79 = ((($78)) + -12|0);
          $80 = ((($78)) + -24|0);
          $81 = ((($79)) + 11|0);
          $82 = HEAP8[$81>>0]|0;
          $83 = ($82<<24>>24)<(0);
          $84 = HEAP32[$79>>2]|0;
          $85 = $83 ? $84 : $79;
          $86 = ((($78)) + -8|0);
          $87 = HEAP32[$86>>2]|0;
          $88 = $82&255;
          $89 = $83 ? $87 : $88;
          __THREW__ = 0;
          (invoke_iiii(88,($80|0),($85|0),($89|0))|0);
          $90 = __THREW__; __THREW__ = 0;
          $91 = $90&1;
          if ($91) {
           break L16;
          }
          $92 = HEAP32[$68>>2]|0;
          $93 = ((($92)) + -24|0);
          $94 = ((($93)) + 11|0);
          $95 = HEAP8[$94>>0]|0;
          $96 = ($95<<24>>24)<(0);
          if ($96) {
           $97 = HEAP32[$93>>2]|0;
           $98 = $97;
          } else {
           $98 = $93;
          }
          _memcpy(($$157|0),($98|0),($71|0))|0;
          $99 = (($$157) + ($71)|0);
          HEAP8[$99>>0] = 0;
          $$2 = $$157;$100 = 0;
         }
        } while(0);
        if ($9) {
         HEAP32[$3>>2] = $100;
        }
        __ZN10__cxxabiv112_GLOBAL__N_12DbD2Ev($6);
        __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EED2Ev($5);
        $$0 = $$2;
        break L1;
       }
      } while(0);
      $101 = ___cxa_find_matching_catch_2()|0;
      $102 = tempRet0;
      $$247 = $101;$$250 = $102;
     }
     __ZN10__cxxabiv112_GLOBAL__N_12DbD2Ev($6);
     $$3 = $$247;$$351 = $$250;
    }
    __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EED2Ev($5);
    ___resumeException($$3|0);
    // unreachable;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  if ($9) {
   HEAP32[$3>>2] = -3;
   $$0 = 0;
  } else {
   $$0 = 0;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EEC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4096|0);
 HEAP32[$1>>2] = $0;
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_12DbC2ILj4096EEERNS0_5arenaIXT_EEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $4 = sp;
 __ZN10__cxxabiv112_GLOBAL__N_111short_allocINS0_11string_pairELj4096EEC2ERNS0_5arenaILj4096EEE($2,$1);
 HEAP32[$0>>2] = 0;
 $5 = ((($0)) + 4|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($0)) + 8|0);
 $7 = HEAP32[$2>>2]|0;
 HEAP32[$6>>2] = 0;
 $8 = ((($0)) + 12|0);
 HEAP32[$8>>2] = $7;
 $9 = ((($0)) + 16|0);
 __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lj4096EEEEELj4096EEC2ERNS0_5arenaILj4096EEE($3,$1);
 __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEC2EjRKS6_RKS7_($9,$3);
 $10 = ((($0)) + 32|0);
 __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS3_INS0_11string_pairENS1_IS4_Lj4096EEEEENS1_IS6_Lj4096EEEEELj4096EEC2ERNS0_5arenaILj4096EEE($4,$1);
 __ZNSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEENS4_IS8_Lj4096EEEEC2EjRKS8_RKS9_($10,$4);
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lj4096EEEEELj4096EEC2ERNS0_5arenaILj4096EEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = $1;
 return;
}
function __ZNSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEENS4_IS8_Lj4096EEEE24__emplace_back_slow_pathIJRNS2_5arenaILj4096EEEEEEvDpOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sroa$speculated$$i = 0, $$sroa$speculated$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 20|0;
 $3 = sp;
 $4 = ((($0)) + 12|0);
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$0>>2]|0;
 $8 = (($6) - ($7))|0;
 $9 = $8 >> 4;
 $10 = (($9) + 1)|0;
 $11 = (__ZNKSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEENS4_IS8_Lj4096EEEE8max_sizeEv($0)|0);
 $12 = ($11>>>0)<($10>>>0);
 if ($12) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
 }
 $13 = ((($0)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = HEAP32[$0>>2]|0;
 $16 = (($14) - ($15))|0;
 $17 = $16 >> 4;
 $18 = $11 >>> 1;
 $19 = ($17>>>0)<($18>>>0);
 $20 = $16 >> 3;
 $21 = ($20>>>0)<($10>>>0);
 $$sroa$speculated$i = $21 ? $10 : $20;
 $$sroa$speculated$$i = $19 ? $$sroa$speculated$i : $11;
 $22 = HEAP32[$5>>2]|0;
 $23 = (($22) - ($15))|0;
 $24 = $23 >> 4;
 __ZNSt3__214__split_bufferINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEEERNS5_IS9_Lj4096EEEEC2EjjSB_($3,$$sroa$speculated$$i,$24,$4);
 $25 = ((($3)) + 8|0);
 $26 = HEAP32[$25>>2]|0;
 __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lj4096EEEEELj4096EEC2ERNS0_5arenaILj4096EEE($2,$1);
 HEAP32[$26>>2] = 0;
 $27 = ((($26)) + 4|0);
 HEAP32[$27>>2] = 0;
 $28 = ((($26)) + 8|0);
 $29 = HEAP32[$2>>2]|0;
 HEAP32[$28>>2] = 0;
 $30 = ((($26)) + 12|0);
 HEAP32[$30>>2] = $29;
 $31 = ((($26)) + 16|0);
 HEAP32[$25>>2] = $31;
 __ZNSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEENS4_IS8_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS8_RS9_EE($0,$3);
 __ZNSt3__214__split_bufferINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEEERNS5_IS9_Lj4096EEEED2Ev($3);
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv112_GLOBAL__N_18demangleINS0_2DbEEEvPKcS4_RT_Ri($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$pr = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond56 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $4 = ($0>>>0)<($1>>>0);
 L1: do {
  if ($4) {
   $5 = HEAP8[$0>>0]|0;
   $6 = ($5<<24>>24)==(95);
   L3: do {
    if ($6) {
     $7 = $1;
     $8 = $0;
     $9 = (($7) - ($8))|0;
     $10 = ($9|0)>(3);
     if (!($10)) {
      HEAP32[$3>>2] = -2;
      break L1;
     }
     $11 = ((($0)) + 1|0);
     $12 = HEAP8[$11>>0]|0;
     $13 = ((($0)) + 2|0);
     switch ($12<<24>>24) {
     case 90:  {
      $14 = (__ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($13,$1,$2)|0);
      $15 = ($14|0)==($13|0);
      $16 = ($14|0)==($1|0);
      $or$cond = $15 | $16;
      if ($or$cond) {
       $$0 = $14;
      } else {
       $17 = HEAP8[$14>>0]|0;
       $18 = ($17<<24>>24)==(46);
       if ($18) {
        $19 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_dot_suffixINS0_2DbEEEPKcS4_S4_RT_($14,$1,$2)|0);
        $$0 = $19;
       } else {
        $$0 = $14;
       }
      }
      $20 = ($$0|0)==($1|0);
      if ($20) {
       break L3;
      }
      HEAP32[$3>>2] = -2;
      break L1;
      break;
     }
     case 95:  {
      $21 = HEAP8[$13>>0]|0;
      $22 = ($21<<24>>24)==(95);
      if ($22) {
       $23 = ((($0)) + 3|0);
       $24 = HEAP8[$23>>0]|0;
       $25 = ($24<<24>>24)==(90);
       if ($25) {
        $26 = ((($0)) + 4|0);
        $27 = (__ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($26,$1,$2)|0);
        $28 = ($27|0)==($26|0);
        $29 = ($27|0)==($1|0);
        $or$cond56 = $28 | $29;
        if (!($or$cond56)) {
         $30 = (__ZN10__cxxabiv112_GLOBAL__N_118parse_block_invokeINS0_2DbEEEPKcS4_S4_RT_($27,$1,$2)|0);
         $31 = ($30|0)==($1|0);
         if ($31) {
          break L3;
         }
        }
        HEAP32[$3>>2] = -2;
        break L1;
       }
      }
      break;
     }
     default: {
     }
     }
     HEAP32[$3>>2] = -2;
     break L1;
    } else {
     $32 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
     $33 = ($32|0)==($1|0);
     if (!($33)) {
      HEAP32[$3>>2] = -2;
      break L1;
     }
    }
   } while(0);
   $$pr = HEAP32[$3>>2]|0;
   $34 = ($$pr|0)==(0);
   if ($34) {
    $35 = HEAP32[$2>>2]|0;
    $36 = ((($2)) + 4|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = ($35|0)==($37|0);
    if ($38) {
     HEAP32[$3>>2] = -2;
    }
   }
  } else {
   HEAP32[$3>>2] = -2;
  }
 } while(0);
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 12|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($1);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
 return;
}
function __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($0) {
 $0 = $0|0;
 var $$cast = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = ((($0)) + 4|0);
  while(1) {
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==($1|0);
   if ($5) {
    break;
   }
   $6 = ((($4)) + -24|0);
   HEAP32[$3>>2] = $6;
   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($6);
  }
  $7 = ((($0)) + 12|0);
  $8 = HEAP32[$0>>2]|0;
  $9 = ((($0)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $$cast = $8;
  $11 = (($10) - ($$cast))|0;
  $12 = (($11|0) / 24)&-1;
  __ZN10__cxxabiv112_GLOBAL__N_111short_allocINS0_11string_pairELj4096EE10deallocateEPS2_j($7,$8,$12);
 }
 return;
}
function __ZNK10__cxxabiv112_GLOBAL__N_111string_pair4sizeEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 11|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)<(0);
 if ($3) {
  $4 = ((($0)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $15 = $5;
 } else {
  $6 = $2&255;
  $15 = $6;
 }
 $7 = ((($0)) + 12|0);
 $8 = ((($7)) + 11|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = ($9<<24>>24)<(0);
 if ($10) {
  $11 = ((($0)) + 16|0);
  $12 = HEAP32[$11>>2]|0;
  $16 = $12;
 } else {
  $13 = $9&255;
  $16 = $13;
 }
 $14 = (($16) + ($15))|0;
 return ($14|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ((($0)) + 11|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)<(0);
 if ($6) {
  $7 = ((($0)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $8 & 2147483647;
  $phitmp$i = (($9) + -1)|0;
  $10 = ((($0)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $14 = $11;$15 = $phitmp$i;
 } else {
  $12 = $5&255;
  $14 = $12;$15 = 10;
 }
 $13 = (($15) - ($14))|0;
 $16 = ($13>>>0)<($2>>>0);
 $17 = (($14) + ($2))|0;
 if ($16) {
  $27 = (($17) - ($15))|0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE21__grow_by_and_replaceEjjjjjjPKc($0,$15,$27,$14,$14,0,$2,$1);
 } else {
  $18 = ($2|0)==(0);
  if (!($18)) {
   if ($6) {
    $19 = HEAP32[$0>>2]|0;
    $21 = $19;
   } else {
    $21 = $0;
   }
   $20 = (($21) + ($14)|0);
   (__ZNSt3__211char_traitsIcE4copyEPcPKcj($20,$1,$2)|0);
   $22 = HEAP8[$4>>0]|0;
   $23 = ($22<<24>>24)<(0);
   if ($23) {
    $24 = ((($0)) + 4|0);
    HEAP32[$24>>2] = $17;
   } else {
    $25 = $17&255;
    HEAP8[$4>>0] = $25;
   }
   $26 = (($21) + ($17)|0);
   HEAP8[$3>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($26,$3);
  }
 }
 STACKTOP = sp;return ($0|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_12DbD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 32|0);
 __ZNSt3__213__vector_baseINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEEENS5_IS9_Lj4096EEEED2Ev($1);
 $2 = ((($0)) + 16|0);
 __ZNSt3__213__vector_baseINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEED2Ev($2);
 __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($0);
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4096|0);
 HEAP32[$1>>2] = 0;
 return;
}
function __ZNSt3__213__vector_baseINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEEENS5_IS9_Lj4096EEEED2Ev($0) {
 $0 = $0|0;
 var $$cast = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = ((($0)) + 4|0);
  while(1) {
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==($1|0);
   if ($5) {
    break;
   }
   $6 = ((($4)) + -16|0);
   HEAP32[$3>>2] = $6;
   __ZNSt3__213__vector_baseINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEED2Ev($6);
  }
  $7 = ((($0)) + 12|0);
  $8 = HEAP32[$0>>2]|0;
  $9 = ((($0)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $$cast = $8;
  $11 = (($10) - ($$cast))|0;
  $12 = $11 >> 4;
  __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS3_INS0_11string_pairENS1_IS4_Lj4096EEEEENS1_IS6_Lj4096EEEEELj4096EE10deallocateEPS8_j($7,$8,$12);
 }
 return;
}
function __ZNSt3__213__vector_baseINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEED2Ev($0) {
 $0 = $0|0;
 var $$cast = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = ((($0)) + 4|0);
  while(1) {
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==($1|0);
   if ($5) {
    break;
   }
   $6 = ((($4)) + -16|0);
   HEAP32[$3>>2] = $6;
   __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($6);
  }
  $7 = ((($0)) + 12|0);
  $8 = HEAP32[$0>>2]|0;
  $9 = ((($0)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $$cast = $8;
  $11 = (($10) - ($$cast))|0;
  $12 = $11 >> 4;
  __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lj4096EEEEELj4096EE10deallocateEPS6_j($7,$8,$12);
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lj4096EEEEELj4096EE10deallocateEPS6_j($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = $2 << 4;
 __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE10deallocateEPcj($3,$1,$4);
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE10deallocateEPcj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (__ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE17pointer_in_bufferEPc($0,$1)|0);
 if ($3) {
  $4 = (__ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE8align_upEj($2)|0);
  $5 = (($1) + ($4)|0);
  $6 = ((($0)) + 4096|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($5|0)==($7|0);
  if ($8) {
   HEAP32[$6>>2] = $1;
  }
 } else {
  _free($1);
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE17pointer_in_bufferEPc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0>>>0)<=($1>>>0);
 $3 = ((($0)) + 4096|0);
 $4 = ($3>>>0)>=($1>>>0);
 $5 = $2 & $4;
 return ($5|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE8align_upEj($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + 15)|0;
 $2 = $1 & -16;
 return ($2|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS3_INS0_11string_pairENS1_IS4_Lj4096EEEEENS1_IS6_Lj4096EEEEELj4096EE10deallocateEPS8_j($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = $2 << 4;
 __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE10deallocateEPcj($3,$1,$4);
 return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE21__grow_by_and_replaceEjjjjjjPKc($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $8 = sp;
 $9 = (-18 - ($1))|0;
 $10 = ($9>>>0)<($2>>>0);
 if ($10) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
 }
 $11 = ((($0)) + 11|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = ($12<<24>>24)<(0);
 if ($13) {
  $14 = HEAP32[$0>>2]|0;
  $25 = $14;
 } else {
  $25 = $0;
 }
 $15 = ($1>>>0)<(2147483623);
 if ($15) {
  $16 = (($2) + ($1))|0;
  $17 = $1 << 1;
  $18 = ($16>>>0)<($17>>>0);
  $$sroa$speculated = $18 ? $17 : $16;
  $19 = ($$sroa$speculated>>>0)<(11);
  $20 = (($$sroa$speculated) + 16)|0;
  $21 = $20 & -16;
  $phitmp = $19 ? 11 : $21;
  $22 = $phitmp;
 } else {
  $22 = -17;
 }
 $23 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($22)|0);
 $24 = ($4|0)==(0);
 if (!($24)) {
  (__ZNSt3__211char_traitsIcE4copyEPcPKcj($23,$25,$4)|0);
 }
 $26 = ($6|0)==(0);
 if (!($26)) {
  $27 = (($23) + ($4)|0);
  (__ZNSt3__211char_traitsIcE4copyEPcPKcj($27,$7,$6)|0);
 }
 $28 = (($3) - ($5))|0;
 $29 = (($28) - ($4))|0;
 $30 = ($29|0)==(0);
 if (!($30)) {
  $31 = (($23) + ($4)|0);
  $32 = (($31) + ($6)|0);
  $33 = (($25) + ($4)|0);
  $34 = (($33) + ($5)|0);
  (__ZNSt3__211char_traitsIcE4copyEPcPKcj($32,$34,$29)|0);
 }
 $35 = ($1|0)==(10);
 if (!($35)) {
  __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE10deallocateEPcj($25);
 }
 HEAP32[$0>>2] = $23;
 $36 = $22 | -2147483648;
 $37 = ((($0)) + 8|0);
 HEAP32[$37>>2] = $36;
 $38 = (($28) + ($6))|0;
 $39 = ((($0)) + 4|0);
 HEAP32[$39>>2] = $38;
 $40 = (($23) + ($38)|0);
 HEAP8[$8>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($40,$8);
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_malloc($0)|0);
 return ($1|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE10deallocateEPcj($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($0);
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111short_allocINS0_11string_pairELj4096EE10deallocateEPS2_j($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = ($2*24)|0;
 __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE10deallocateEPcj($3,$1,$4);
 return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 11|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)<(0);
 if ($3) {
  $4 = HEAP32[$0>>2]|0;
  __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE10deallocateEPcj($4);
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i189 = 0, $$0$i$i194 = 0, $$0132 = 0, $$0141$off0$ph = 0, $$0147 = 0, $$0160 = 0, $$0166 = 0, $$11 = 0, $$1135 = 0, $$1167 = 0, $$1167$ph = 0, $$2136 = 0, $$2149 = 0, $$2162 = 0, $$3144$off0$ph = 0, $$3169 = 0, $$4151 = 0;
 var $$4157 = 0, $$4164 = 0, $$5139 = 0, $$5152 = 0, $$5165 = 0, $$6140 = 0, $$6159 = 0, $$in = 0, $$in256 = 0, $$pre = 0, $$pre$i = 0, $$pre$i185 = 0, $$pre237 = 0, $$pre238 = 0, $$pre239 = 0, $$pre240 = 0, $$pre241 = 0, $$pre242 = 0, $$pre243 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $exitcond$i$i$i$i = 0, $exitcond$i$i190 = 0, $exitcond$i$i195 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $3 = sp + 73|0;
 $4 = sp + 72|0;
 $5 = sp + 64|0;
 $6 = sp + 56|0;
 $7 = sp + 48|0;
 $8 = sp + 36|0;
 $9 = sp + 24|0;
 $10 = sp + 12|0;
 $11 = sp;
 $12 = ($0|0)==($1|0);
 do {
  if ($12) {
   $$6140 = $0;
   label = 111;
  } else {
   $13 = ((($2)) + 56|0);
   __ZN10__cxxabiv112_GLOBAL__N_110save_valueIjEC2ERj($5,$13);
   $14 = HEAP32[$13>>2]|0;
   $15 = (($14) + 1)|0;
   HEAP32[$13>>2] = $15;
   $16 = ((($2)) + 61|0);
   __ZN10__cxxabiv112_GLOBAL__N_110save_valueIbEC2ERb($6,$16);
   $17 = HEAP32[$13>>2]|0;
   $18 = ($17>>>0)>(1);
   if ($18) {
    HEAP8[$16>>0] = 1;
   }
   $19 = HEAP8[$0>>0]|0;
   $20 = $19 << 24 >> 24;
   L6: do {
    switch ($20|0) {
    case 84: case 71:  {
     __THREW__ = 0;
     $21 = (invoke_iiii(89,($0|0),($1|0),($2|0))|0);
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     if ($23) {
      label = 6;
     } else {
      $$5139 = $21;$$6159 = 1;
      label = 109;
     }
     break;
    }
    default: {
     __THREW__ = 0;
     $26 = (invoke_iiii(90,($0|0),($1|0),($2|0))|0);
     $27 = __THREW__; __THREW__ = 0;
     $28 = $27&1;
     if ($28) {
      label = 6;
     } else {
      $29 = ((($2)) + 48|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = ((($2)) + 52|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = ($26|0)==($0|0);
      L9: do {
       if ($33) {
        $$2136 = $0;
       } else {
        $34 = ($26|0)==($1|0);
        if ($34) {
         $$2136 = $1;
        } else {
         $35 = HEAP8[$26>>0]|0;
         switch ($35<<24>>24) {
         case 46: case 69:  {
          $$2136 = $26;
          break L9;
          break;
         }
         default: {
         }
         }
         __ZN10__cxxabiv112_GLOBAL__N_110save_valueIbEC2ERb($7,$16);
         HEAP8[$16>>0] = 0;
         ;HEAP32[$8>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;
         $$0$i$i194 = 0;
         while(1) {
          $exitcond$i$i195 = ($$0$i$i194|0)==(3);
          if ($exitcond$i$i195) {
           break;
          }
          $36 = (($8) + ($$0$i$i194<<2)|0);
          HEAP32[$36>>2] = 0;
          $37 = (($$0$i$i194) + 1)|0;
          $$0$i$i194 = $37;
         }
         $38 = HEAP32[$2>>2]|0;
         $39 = ((($2)) + 4|0);
         $40 = HEAP32[$39>>2]|0;
         $41 = ($38|0)==($40|0);
         L17: do {
          if ($41) {
           $$1135 = $0;$$4157 = 0;
          } else {
           $42 = ((($40)) + -24|0);
           $43 = ((($42)) + 11|0);
           $44 = HEAP8[$43>>0]|0;
           $45 = ($44<<24>>24)<(0);
           if ($45) {
            $46 = ((($40)) + -20|0);
            $47 = HEAP32[$46>>2]|0;
            $50 = $47;
           } else {
            $48 = $44&255;
            $50 = $48;
           }
           $49 = ($50|0)==(0);
           if ($49) {
            $$1135 = $0;$$4157 = 0;
           } else {
            $51 = ((($2)) + 60|0);
            $52 = HEAP8[$51>>0]|0;
            $53 = ($52<<24>>24)==(0);
            L24: do {
             if ($53) {
              if ($45) {
               $54 = HEAP32[$42>>2]|0;
               $55 = ((($40)) + -20|0);
               $56 = HEAP32[$55>>2]|0;
               $59 = $54;$60 = $56;
              } else {
               $57 = $44&255;
               $59 = $42;$60 = $57;
              }
              $58 = (($59) + ($60)|0);
              $61 = ((($58)) + -1|0);
              $62 = HEAP8[$61>>0]|0;
              $63 = ($62<<24>>24)==(62);
              if ($63) {
               if ($45) {
                $64 = ((($40)) + -20|0);
                $65 = HEAP32[$64>>2]|0;
                $66 = HEAP32[$42>>2]|0;
                $$in = $65;$70 = $66;
               } else {
                $67 = $44&255;
                $$in = $67;$70 = $42;
               }
               $68 = (($$in) + -2)|0;
               $69 = (($70) + ($68)|0);
               $71 = HEAP8[$69>>0]|0;
               $72 = ($71<<24>>24)==(45);
               if ($72) {
                $$0166 = $26;$138 = $40;
                label = 55;
               } else {
                if ($45) {
                 $73 = ((($40)) + -20|0);
                 $74 = HEAP32[$73>>2]|0;
                 $75 = HEAP32[$42>>2]|0;
                 $$in256 = $74;$79 = $75;
                } else {
                 $76 = $44&255;
                 $$in256 = $76;$79 = $42;
                }
                $77 = (($$in256) + -2)|0;
                $78 = (($79) + ($77)|0);
                $80 = HEAP8[$78>>0]|0;
                $81 = ($80<<24>>24)==(62);
                if ($81) {
                 $$0166 = $26;$138 = $40;
                 label = 55;
                } else {
                 __THREW__ = 0;
                 $82 = (invoke_iiii(91,($26|0),($1|0),($2|0))|0);
                 $83 = __THREW__; __THREW__ = 0;
                 $84 = $83&1;
                 if ($84) {
                  label = 34;
                  break;
                 }
                 $85 = ($82|0)==($26|0);
                 if ($85) {
                  $$1135 = $0;$$4157 = 0;
                  break L17;
                 }
                 $88 = HEAP32[$39>>2]|0;
                 $89 = HEAP32[$2>>2]|0;
                 $90 = (($88) - ($89))|0;
                 $91 = (($90|0) / 24)&-1;
                 $92 = ($91>>>0)<(2);
                 $93 = $88;
                 if ($92) {
                  $$1135 = $0;$$4157 = 0;
                  break L17;
                 }
                 $94 = ((($93)) + -24|0);
                 ;HEAP32[$9>>2]=HEAP32[$94>>2]|0;HEAP32[$9+4>>2]=HEAP32[$94+4>>2]|0;HEAP32[$9+8>>2]=HEAP32[$94+8>>2]|0;
                 $$0$i$i189 = 0;
                 while(1) {
                  $exitcond$i$i190 = ($$0$i$i189|0)==(3);
                  if ($exitcond$i$i190) {
                   break;
                  }
                  $95 = (($94) + ($$0$i$i189<<2)|0);
                  HEAP32[$95>>2] = 0;
                  $96 = (($$0$i$i189) + 1)|0;
                  $$0$i$i189 = $96;
                 }
                 $97 = ((($93)) + -12|0);
                 $98 = ((($8)) + 11|0);
                 $99 = HEAP8[$98>>0]|0;
                 $100 = ($99<<24>>24)<(0);
                 if ($100) {
                  $101 = HEAP32[$8>>2]|0;
                  HEAP8[$3>>0] = 0;
                  __ZNSt3__211char_traitsIcE6assignERcRKc($101,$3);
                  $102 = ((($8)) + 4|0);
                  HEAP32[$102>>2] = 0;
                 } else {
                  HEAP8[$4>>0] = 0;
                  __ZNSt3__211char_traitsIcE6assignERcRKc($8,$4);
                  HEAP8[$98>>0] = 0;
                 }
                 __THREW__ = 0;
                 invoke_vi(92,($8|0));
                 $103 = __THREW__; __THREW__ = 0;
                 $104 = $103&1;
                 if ($104) {
                  $105 = ___cxa_find_matching_catch_3(0|0)|0;
                  $106 = tempRet0;
                  ___clang_call_terminate($105);
                  // unreachable;
                 }
                 ;HEAP32[$8>>2]=HEAP32[$97>>2]|0;HEAP32[$8+4>>2]=HEAP32[$97+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$97+8>>2]|0;
                 $$0$i$i$i$i = 0;
                 while(1) {
                  $exitcond$i$i$i$i = ($$0$i$i$i$i|0)==(3);
                  if ($exitcond$i$i$i$i) {
                   break;
                  }
                  $107 = (($97) + ($$0$i$i$i$i<<2)|0);
                  HEAP32[$107>>2] = 0;
                  $108 = (($$0$i$i$i$i) + 1)|0;
                  $$0$i$i$i$i = $108;
                 }
                 $109 = HEAP8[$98>>0]|0;
                 $110 = ($109<<24>>24)<(0);
                 $111 = ((($8)) + 4|0);
                 $112 = HEAP32[$111>>2]|0;
                 $113 = $109&255;
                 $114 = $110 ? $112 : $113;
                 $115 = ($114|0)==(0);
                 if ($115) {
                  __THREW__ = 0;
                  invoke_vii(93,($9|0),32);
                  $116 = __THREW__; __THREW__ = 0;
                  $117 = $116&1;
                  if (!($117)) {
                   label = 50;
                  }
                 } else {
                  label = 50;
                 }
                 do {
                  if ((label|0) == 50) {
                   $120 = HEAP32[$39>>2]|0;
                   $121 = ((($120)) + -24|0);
                   $123 = $120;
                   while(1) {
                    $122 = ($123|0)==($121|0);
                    if ($122) {
                     break;
                    }
                    $124 = ((($123)) + -24|0);
                    HEAP32[$39>>2] = $124;
                    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($124);
                    $$pre$i185 = HEAP32[$39>>2]|0;
                    $123 = $$pre$i185;
                   }
                   $125 = ((($120)) + -48|0);
                   $126 = ((($9)) + 11|0);
                   $127 = HEAP8[$126>>0]|0;
                   $128 = ($127<<24>>24)<(0);
                   $129 = HEAP32[$9>>2]|0;
                   $130 = $128 ? $129 : $9;
                   $131 = ((($9)) + 4|0);
                   $132 = HEAP32[$131>>2]|0;
                   $133 = $127&255;
                   $134 = $128 ? $132 : $133;
                   __THREW__ = 0;
                   (invoke_iiiii(94,($125|0),0,($130|0),($134|0))|0);
                   $135 = __THREW__; __THREW__ = 0;
                   $136 = $135&1;
                   if ($136) {
                    break;
                   }
                   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
                   $$pre = HEAP32[$39>>2]|0;
                   $$0166 = $82;$138 = $$pre;
                   label = 55;
                   break L24;
                  }
                 } while(0);
                 $118 = ___cxa_find_matching_catch_2()|0;
                 $119 = tempRet0;
                 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
                 $$4151 = $118;$$4164 = $119;
                }
               }
              } else {
               $$0166 = $26;$138 = $40;
               label = 55;
              }
             } else {
              $$0166 = $26;$138 = $40;
              label = 55;
             }
            } while(0);
            L69: do {
             if ((label|0) == 55) {
              $137 = ((($138)) + -24|0);
              __THREW__ = 0;
              invoke_vii(93,($137|0),40);
              $139 = __THREW__; __THREW__ = 0;
              $140 = $139&1;
              if ($140) {
               label = 34;
              } else {
               $141 = ($$0166|0)==($1|0);
               if ($141) {
                label = 58;
               } else {
                $142 = HEAP8[$$0166>>0]|0;
                $143 = ($142<<24>>24)==(118);
                if ($143) {
                 $148 = ((($$0166)) + 1|0);
                 $$pre242 = HEAP32[$2>>2]|0;
                 $$pre243 = HEAP32[$39>>2]|0;
                 $$3169 = $148;$230 = $$pre242;$231 = $$pre243;
                } else {
                 label = 58;
                }
               }
               do {
                if ((label|0) == 58) {
                 $144 = ((($10)) + 11|0);
                 $145 = ((($10)) + 4|0);
                 $146 = ((($11)) + 11|0);
                 $147 = ((($11)) + 4|0);
                 $$0141$off0$ph = 1;$$1167$ph = $$0166;
                 L77: while(1) {
                  $$pre237 = HEAP32[$39>>2]|0;
                  $$pre238 = HEAP32[$2>>2]|0;
                  $$1167 = $$1167$ph;$150 = $$pre238;$151 = $$pre237;
                  while(1) {
                   $149 = (($151) - ($150))|0;
                   $152 = (($149|0) / 24)&-1;
                   __THREW__ = 0;
                   $153 = (invoke_iiii(91,($$1167|0),($1|0),($2|0))|0);
                   $154 = __THREW__; __THREW__ = 0;
                   $155 = $154&1;
                   if ($155) {
                    label = 62;
                    break L77;
                   }
                   $156 = HEAP32[$39>>2]|0;
                   $157 = HEAP32[$2>>2]|0;
                   $158 = (($156) - ($157))|0;
                   $159 = (($158|0) / 24)&-1;
                   $160 = ($153|0)==($$1167|0);
                   if ($160) {
                    label = 92;
                    break L77;
                   }
                   $163 = ($159>>>0)>($152>>>0);
                   if ($163) {
                    break;
                   } else {
                    $$1167 = $153;$150 = $157;$151 = $156;
                   }
                  }
                  ;HEAP32[$10>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
                  $$0$i$i = 0;
                  while(1) {
                   $exitcond$i$i = ($$0$i$i|0)==(3);
                   if ($exitcond$i$i) {
                    $$0132 = $152;
                    break;
                   }
                   $164 = (($10) + ($$0$i$i<<2)|0);
                   HEAP32[$164>>2] = 0;
                   $165 = (($$0$i$i) + 1)|0;
                   $$0$i$i = $165;
                  }
                  while(1) {
                   $166 = ($$0132>>>0)<($159>>>0);
                   if (!($166)) {
                    $$0 = $152;
                    break;
                   }
                   $167 = HEAP8[$144>>0]|0;
                   $168 = ($167<<24>>24)<(0);
                   $169 = HEAP32[$145>>2]|0;
                   $170 = $167&255;
                   $171 = $168 ? $169 : $170;
                   $172 = ($171|0)==(0);
                   if (!($172)) {
                    __THREW__ = 0;
                    (invoke_iii(95,($10|0),(7790|0))|0);
                    $173 = __THREW__; __THREW__ = 0;
                    $174 = $173&1;
                    if ($174) {
                     label = 70;
                     break L77;
                    }
                   }
                   $177 = HEAP32[$2>>2]|0;
                   $178 = (($177) + (($$0132*24)|0)|0);
                   __THREW__ = 0;
                   invoke_vii(96,($11|0),($178|0));
                   $179 = __THREW__; __THREW__ = 0;
                   $180 = $179&1;
                   if ($180) {
                    label = 74;
                    break L77;
                   }
                   $181 = HEAP8[$146>>0]|0;
                   $182 = ($181<<24>>24)<(0);
                   $183 = HEAP32[$11>>2]|0;
                   $184 = $182 ? $183 : $11;
                   $185 = HEAP32[$147>>2]|0;
                   $186 = $181&255;
                   $187 = $182 ? $185 : $186;
                   __THREW__ = 0;
                   (invoke_iiii(88,($10|0),($184|0),($187|0))|0);
                   $188 = __THREW__; __THREW__ = 0;
                   $189 = $188&1;
                   if ($189) {
                    label = 75;
                    break L77;
                   }
                   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($11);
                   $190 = (($$0132) + 1)|0;
                   $$0132 = $190;
                  }
                  while(1) {
                   $195 = ($$0>>>0)<($159>>>0);
                   if (!($195)) {
                    break;
                   }
                   $202 = HEAP32[$39>>2]|0;
                   $203 = ((($202)) + -24|0);
                   $205 = $202;
                   while(1) {
                    $204 = ($205|0)==($203|0);
                    if ($204) {
                     break;
                    }
                    $206 = ((($205)) + -24|0);
                    HEAP32[$39>>2] = $206;
                    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($206);
                    $$pre$i = HEAP32[$39>>2]|0;
                    $205 = $$pre$i;
                   }
                   $207 = (($$0) + 1)|0;
                   $$0 = $207;
                  }
                  $196 = HEAP8[$144>>0]|0;
                  $197 = ($196<<24>>24)<(0);
                  $198 = HEAP32[$145>>2]|0;
                  $199 = $196&255;
                  $200 = $197 ? $198 : $199;
                  $201 = ($200|0)==(0);
                  if ($201) {
                   $$3144$off0$ph = $$0141$off0$ph;
                  } else {
                   $208 = HEAP32[$2>>2]|0;
                   $209 = HEAP32[$39>>2]|0;
                   $210 = ($208|0)==($209|0);
                   if ($210) {
                    label = 105;
                    break;
                   }
                   if ($$0141$off0$ph) {
                    $217 = $209;$219 = $196;$224 = $198;
                   } else {
                    $211 = ((($209)) + -24|0);
                    __THREW__ = 0;
                    (invoke_iii(95,($211|0),(7790|0))|0);
                    $212 = __THREW__; __THREW__ = 0;
                    $213 = $212&1;
                    if ($213) {
                     label = 87;
                     break;
                    }
                    $$pre239 = HEAP32[$39>>2]|0;
                    $$pre240 = HEAP8[$144>>0]|0;
                    $$pre241 = HEAP32[$145>>2]|0;
                    $217 = $$pre239;$219 = $$pre240;$224 = $$pre241;
                   }
                   $216 = ((($217)) + -24|0);
                   $218 = ($219<<24>>24)<(0);
                   $220 = HEAP32[$10>>2]|0;
                   $221 = $218 ? $220 : $10;
                   $222 = $219&255;
                   $223 = $218 ? $224 : $222;
                   __THREW__ = 0;
                   (invoke_iiii(88,($216|0),($221|0),($223|0))|0);
                   $225 = __THREW__; __THREW__ = 0;
                   $226 = $225&1;
                   if ($226) {
                    label = 87;
                    break;
                   } else {
                    $$3144$off0$ph = 0;
                   }
                  }
                  __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($10);
                  $$0141$off0$ph = $$3144$off0$ph;$$1167$ph = $153;
                 }
                 if ((label|0) == 62) {
                  $161 = ___cxa_find_matching_catch_2()|0;
                  $162 = tempRet0;
                  $$4151 = $161;$$4164 = $162;
                  break L69;
                 }
                 else if ((label|0) == 70) {
                  $175 = ___cxa_find_matching_catch_2()|0;
                  $176 = tempRet0;
                  $$2149 = $175;$$2162 = $176;
                 }
                 else if ((label|0) == 74) {
                  $191 = ___cxa_find_matching_catch_2()|0;
                  $192 = tempRet0;
                  $$0147 = $191;$$0160 = $192;
                  label = 76;
                 }
                 else if ((label|0) == 75) {
                  $193 = ___cxa_find_matching_catch_2()|0;
                  $194 = tempRet0;
                  __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($11);
                  $$0147 = $193;$$0160 = $194;
                  label = 76;
                 }
                 else if ((label|0) == 87) {
                  $214 = ___cxa_find_matching_catch_2()|0;
                  $215 = tempRet0;
                  $$2149 = $214;$$2162 = $215;
                 }
                 else if ((label|0) == 92) {
                  $227 = $156;
                  $228 = $157;
                  $$3169 = $$1167;$230 = $228;$231 = $227;
                  break;
                 }
                 else if ((label|0) == 105) {
                  __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($10);
                  $$1135 = $0;$$4157 = 0;
                  break L17;
                 }
                 if ((label|0) == 76) {
                  $$2149 = $$0147;$$2162 = $$0160;
                 }
                 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($10);
                 $$4151 = $$2149;$$4164 = $$2162;
                 break L69;
                }
               } while(0);
               $229 = ($230|0)==($231|0);
               if ($229) {
                $$1135 = $0;$$4157 = 0;
                break L17;
               }
               $232 = ((($231)) + -24|0);
               __THREW__ = 0;
               invoke_vii(93,($232|0),41);
               $233 = __THREW__; __THREW__ = 0;
               $234 = $233&1;
               if ($234) {
                label = 34;
               } else {
                $235 = $30 & 1;
                $236 = ($235|0)==(0);
                if (!($236)) {
                 $237 = HEAP32[$39>>2]|0;
                 $238 = ((($237)) + -24|0);
                 __THREW__ = 0;
                 (invoke_iii(95,($238|0),(7513|0))|0);
                 $239 = __THREW__; __THREW__ = 0;
                 $240 = $239&1;
                 if ($240) {
                  label = 34;
                  break;
                 }
                }
                $241 = $30 & 2;
                $242 = ($241|0)==(0);
                if (!($242)) {
                 $243 = HEAP32[$39>>2]|0;
                 $244 = ((($243)) + -24|0);
                 __THREW__ = 0;
                 (invoke_iii(95,($244|0),(7520|0))|0);
                 $245 = __THREW__; __THREW__ = 0;
                 $246 = $245&1;
                 if ($246) {
                  label = 34;
                  break;
                 }
                }
                $247 = $30 & 4;
                $248 = ($247|0)==(0);
                if (!($248)) {
                 $249 = HEAP32[$39>>2]|0;
                 $250 = ((($249)) + -24|0);
                 __THREW__ = 0;
                 (invoke_iii(95,($250|0),(7530|0))|0);
                 $251 = __THREW__; __THREW__ = 0;
                 $252 = $251&1;
                 if ($252) {
                  label = 34;
                  break;
                 }
                }
                switch ($32|0) {
                case 1:  {
                 $253 = HEAP32[$39>>2]|0;
                 $254 = ((($253)) + -24|0);
                 __THREW__ = 0;
                 (invoke_iii(95,($254|0),(8994|0))|0);
                 $255 = __THREW__; __THREW__ = 0;
                 $256 = $255&1;
                 if ($256) {
                  label = 34;
                  break L69;
                 }
                 break;
                }
                case 2:  {
                 $257 = HEAP32[$39>>2]|0;
                 $258 = ((($257)) + -24|0);
                 __THREW__ = 0;
                 (invoke_iii(95,($258|0),(8997|0))|0);
                 $259 = __THREW__; __THREW__ = 0;
                 $260 = $259&1;
                 if ($260) {
                  label = 34;
                  break L69;
                 }
                 break;
                }
                default: {
                }
                }
                $261 = HEAP32[$39>>2]|0;
                $262 = ((($261)) + -24|0);
                $263 = ((($8)) + 11|0);
                $264 = HEAP8[$263>>0]|0;
                $265 = ($264<<24>>24)<(0);
                $266 = HEAP32[$8>>2]|0;
                $267 = $265 ? $266 : $8;
                $268 = ((($8)) + 4|0);
                $269 = HEAP32[$268>>2]|0;
                $270 = $264&255;
                $271 = $265 ? $269 : $270;
                __THREW__ = 0;
                (invoke_iiii(88,($262|0),($267|0),($271|0))|0);
                $272 = __THREW__; __THREW__ = 0;
                $273 = $272&1;
                if ($273) {
                 label = 34;
                } else {
                 $$1135 = $$3169;$$4157 = 1;
                 break L17;
                }
               }
              }
             }
            } while(0);
            if ((label|0) == 34) {
             $86 = ___cxa_find_matching_catch_2()|0;
             $87 = tempRet0;
             $$4151 = $86;$$4164 = $87;
            }
            __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
            __ZN10__cxxabiv112_GLOBAL__N_110save_valueIbED2Ev($7);
            $$5152 = $$4151;$$5165 = $$4164;
            break L6;
           }
          }
         } while(0);
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
         __ZN10__cxxabiv112_GLOBAL__N_110save_valueIbED2Ev($7);
         if ($$4157) {
          $$2136 = $$1135;
         } else {
          $$5139 = $$1135;$$6159 = 0;
          label = 109;
          break L6;
         }
        }
       }
      } while(0);
      $$5139 = $$2136;$$6159 = 1;
      label = 109;
     }
    }
    }
   } while(0);
   if ((label|0) == 6) {
    $24 = ___cxa_find_matching_catch_2()|0;
    $25 = tempRet0;
    $$5152 = $24;$$5165 = $25;
   }
   else if ((label|0) == 109) {
    __ZN10__cxxabiv112_GLOBAL__N_110save_valueIbED2Ev($6);
    __ZN10__cxxabiv112_GLOBAL__N_110save_valueIjED2Ev($5);
    if ($$6159) {
     $$6140 = $$5139;
     label = 111;
     break;
    } else {
     $$11 = $0;
     break;
    }
   }
   __ZN10__cxxabiv112_GLOBAL__N_110save_valueIbED2Ev($6);
   __ZN10__cxxabiv112_GLOBAL__N_110save_valueIjED2Ev($5);
   ___resumeException($$5152|0);
   // unreachable;
  }
 } while(0);
 if ((label|0) == 111) {
  $$11 = $$6140;
 }
 STACKTOP = sp;return ($$11|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_116parse_dot_suffixINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0$i$i$i = 0, $$0$i$i$i16 = 0, $$012 = 0, $$014 = 0, $$1 = 0, $$113 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i17 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = sp + 24|0;
 $4 = sp + 12|0;
 $5 = sp;
 $6 = ($0|0)==($1|0);
 L1: do {
  if ($6) {
   $$014 = $0;
  } else {
   $7 = HEAP8[$0>>0]|0;
   $8 = ($7<<24>>24)==(46);
   if ($8) {
    $9 = HEAP32[$2>>2]|0;
    $10 = ((($2)) + 4|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($9|0)==($11|0);
    if ($12) {
     $$014 = $0;
    } else {
     ;HEAP32[$5>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESC_SC_($5,$0,$1);
     __THREW__ = 0;
     $13 = (invoke_iiii(97,($5|0),0,(7563|0))|0);
     $14 = __THREW__; __THREW__ = 0;
     $15 = $14&1;
     if ($15) {
      $36 = ___cxa_find_matching_catch_2()|0;
      $37 = tempRet0;
      $$1 = $37;$$113 = $36;
     } else {
      ;HEAP32[$4>>2]=HEAP32[$5>>2]|0;HEAP32[$4+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$5+8>>2]|0;
      $$0$i$i$i = 0;
      while(1) {
       $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
       if ($exitcond$i$i$i) {
        break;
       }
       $16 = (($5) + ($$0$i$i$i<<2)|0);
       HEAP32[$16>>2] = 0;
       $17 = (($$0$i$i$i) + 1)|0;
       $$0$i$i$i = $17;
      }
      __THREW__ = 0;
      $18 = (invoke_iii(95,($4|0),(7566|0))|0);
      $19 = __THREW__; __THREW__ = 0;
      $20 = $19&1;
      do {
       if ($20) {
        $38 = ___cxa_find_matching_catch_2()|0;
        $39 = tempRet0;
        $$0 = $39;$$012 = $38;
       } else {
        ;HEAP32[$3>>2]=HEAP32[$4>>2]|0;HEAP32[$3+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[$4+8>>2]|0;
        $$0$i$i$i16 = 0;
        while(1) {
         $exitcond$i$i$i17 = ($$0$i$i$i16|0)==(3);
         if ($exitcond$i$i$i17) {
          break;
         }
         $21 = (($4) + ($$0$i$i$i16<<2)|0);
         HEAP32[$21>>2] = 0;
         $22 = (($$0$i$i$i16) + 1)|0;
         $$0$i$i$i16 = $22;
        }
        $23 = HEAP32[$10>>2]|0;
        $24 = ((($23)) + -24|0);
        $25 = ((($3)) + 11|0);
        $26 = HEAP8[$25>>0]|0;
        $27 = ($26<<24>>24)<(0);
        $28 = HEAP32[$3>>2]|0;
        $29 = $27 ? $28 : $3;
        $30 = ((($3)) + 4|0);
        $31 = HEAP32[$30>>2]|0;
        $32 = $26&255;
        $33 = $27 ? $31 : $32;
        __THREW__ = 0;
        (invoke_iiii(88,($24|0),($29|0),($33|0))|0);
        $34 = __THREW__; __THREW__ = 0;
        $35 = $34&1;
        if ($35) {
         $40 = ___cxa_find_matching_catch_2()|0;
         $41 = tempRet0;
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
         $$0 = $41;$$012 = $40;
         break;
        } else {
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
         $$014 = $1;
         break L1;
        }
       }
      } while(0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      $$1 = $$0;$$113 = $$012;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
     ___resumeException($$113|0);
     // unreachable;
    }
   } else {
    $$014 = $0;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$014|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_118parse_block_invokeINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$031 = 0, $$032 = 0, $$133 = 0, $$2 = 0, $$236 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isdigit = 0, $isdigit40 = 0, $isdigittmp = 0, $isdigittmp39 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1;
 $4 = $0;
 $5 = (($3) - ($4))|0;
 $6 = ($5|0)>(12);
 L1: do {
  if ($6) {
   $$031 = 0;$$032 = $0;
   while(1) {
    $7 = ($$031|0)<(13);
    $8 = ((($$032)) + 1|0);
    if (!($7)) {
     break;
    }
    $9 = HEAP8[$$032>>0]|0;
    $10 = (9199 + ($$031)|0);
    $11 = HEAP8[$10>>0]|0;
    $12 = ($9<<24>>24)==($11<<24>>24);
    $13 = (($$031) + 1)|0;
    if ($12) {
     $$031 = $13;$$032 = $8;
    } else {
     $$236 = $0;
     break L1;
    }
   }
   $14 = ($$032|0)==($1|0);
   L6: do {
    if ($14) {
     $$2 = $1;
    } else {
     $15 = HEAP8[$$032>>0]|0;
     $16 = ($15<<24>>24)==(95);
     if ($16) {
      $17 = ($8|0)==($1|0);
      if ($17) {
       $$236 = $0;
       break L1;
      }
      $18 = HEAP8[$8>>0]|0;
      $19 = $18 << 24 >> 24;
      $isdigittmp39 = (($19) + -48)|0;
      $isdigit40 = ($isdigittmp39>>>0)<(10);
      if (!($isdigit40)) {
       $$236 = $0;
       break L1;
      }
      $20 = ((($$032)) + 2|0);
      $$133 = $20;
     } else {
      $$133 = $$032;
     }
     while(1) {
      $21 = ($$133|0)==($1|0);
      if ($21) {
       $$2 = $1;
       break L6;
      }
      $22 = HEAP8[$$133>>0]|0;
      $23 = $22 << 24 >> 24;
      $isdigittmp = (($23) + -48)|0;
      $isdigit = ($isdigittmp>>>0)<(10);
      if (!($isdigit)) {
       $$2 = $$133;
       break L6;
      }
      $24 = ((($$133)) + 1|0);
      $$133 = $24;
     }
    }
   } while(0);
   $25 = HEAP32[$2>>2]|0;
   $26 = ((($2)) + 4|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = ($25|0)==($27|0);
   if ($28) {
    $$236 = $0;
   } else {
    $29 = ((($27)) + -24|0);
    (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($29,0,9213)|0);
    $$236 = $$2;
   }
  } else {
   $$236 = $0;
  }
 } while(0);
 return ($$236|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0 = 0, $$0$i = 0, $$0$i$i$i = 0, $$0$i$i$i571 = 0, $$0$i$i$i575 = 0, $$0$i$i$i578 = 0, $$0$i532 = 0, $$0$i540 = 0, $$0434 = 0, $$0435 = 0, $$0438 = 0, $$0444 = 0, $$0445 = 0, $$0458 = 0, $$0477 = 0, $$0478 = 0, $$10455 = 0, $$10468 = 0, $$11456 = 0;
 var $$11469 = 0, $$12457 = 0, $$12470 = 0, $$13 = 0, $$13471 = 0, $$14 = 0, $$1429 = 0, $$1436 = 0, $$1446 = 0, $$14472 = 0, $$1459 = 0, $$15 = 0, $$15473 = 0, $$16 = 0, $$16474 = 0, $$2437 = 0, $$3448 = 0, $$3461 = 0, $$4449 = 0, $$4462 = 0;
 var $$5 = 0, $$6451 = 0, $$6464 = 0, $$7452 = 0, $$7465 = 0, $$8453 = 0, $$8466 = 0, $$9454 = 0, $$9467 = 0, $$in = 0, $$ph = 0, $$ph584 = 0, $$ph584618 = 0, $$pre$i = 0, $$pre$i495 = 0, $$pre$i548 = 0, $$pre$i558 = 0, $$pre$i566 = 0, $$sroa$0$0$$sroa_idx$i = 0, $$sroa$0$0$$sroa_idx$i482 = 0;
 var $$sroa$0$0$$sroa_idx$i486 = 0, $$sroa$0$0$$sroa_idx$i488 = 0, $$sroa$0$0$$sroa_idx$i492 = 0, $$sroa$0$0$$sroa_idx$i496 = 0, $$sroa$0$0$$sroa_idx$i502 = 0, $$sroa$0$0$$sroa_idx$i506 = 0, $$sroa$0$0$$sroa_idx$i510 = 0, $$sroa$0$0$$sroa_idx$i512 = 0, $$sroa$0$0$$sroa_idx$i516 = 0, $$sroa$0$0$$sroa_idx$i520 = 0, $$sroa$0$0$$sroa_idx$i524 = 0, $$sroa$0$0$$sroa_idx$i528 = 0, $$sroa$0$0$$sroa_idx$i536 = 0, $$sroa$0$0$$sroa_idx$i544 = 0, $$sroa$0$0$$sroa_idx$i582 = 0, $$sroa$0$0$copyload$i483595 = 0, $$sroa$0$0$copyload$i487596 = 0, $$sroa$0$0$copyload$i489597 = 0, $$sroa$0$0$copyload$i493598 = 0, $$sroa$0$0$copyload$i497593 = 0;
 var $$sroa$0$0$copyload$i503610 = 0, $$sroa$0$0$copyload$i507609 = 0, $$sroa$0$0$copyload$i511599 = 0, $$sroa$0$0$copyload$i513608 = 0, $$sroa$0$0$copyload$i517607 = 0, $$sroa$0$0$copyload$i521606 = 0, $$sroa$0$0$copyload$i525605 = 0, $$sroa$0$0$copyload$i529604 = 0, $$sroa$0$0$copyload$i537603 = 0, $$sroa$0$0$copyload$i545601 = 0, $$sroa$0$0$copyload$i553602 = 0, $$sroa$0$0$copyload$i583600 = 0, $$sroa$0$0$copyload$i594 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0;
 var $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0;
 var $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0;
 var $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0;
 var $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0;
 var $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0;
 var $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0;
 var $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0;
 var $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0;
 var $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0;
 var $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0;
 var $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0;
 var $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0;
 var $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0;
 var $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0;
 var $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0;
 var $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0;
 var $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0;
 var $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0;
 var $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0;
 var $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0;
 var $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0;
 var $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0;
 var $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0;
 var $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0;
 var $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0;
 var $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0;
 var $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0;
 var $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0;
 var $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0;
 var $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0;
 var $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0;
 var $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0;
 var $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0;
 var $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0;
 var $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0;
 var $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0;
 var $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0;
 var $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0;
 var $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0;
 var $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0;
 var $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i572 = 0, $exitcond$i$i$i576 = 0, $exitcond$i$i$i579 = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i562 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 592|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(592|0);
 $3 = sp + 588|0;
 $4 = sp + 584|0;
 $5 = sp + 568|0;
 $6 = sp + 560|0;
 $7 = sp + 544|0;
 $8 = sp + 536|0;
 $9 = sp + 520|0;
 $10 = sp + 512|0;
 $11 = sp + 496|0;
 $12 = sp + 488|0;
 $13 = sp + 472|0;
 $14 = sp + 468|0;
 $15 = sp + 464|0;
 $16 = sp + 452|0;
 $17 = sp + 448|0;
 $18 = sp + 436|0;
 $19 = sp + 424|0;
 $20 = sp + 420|0;
 $21 = sp + 408|0;
 $22 = sp + 404|0;
 $23 = sp + 392|0;
 $24 = sp + 376|0;
 $25 = sp + 368|0;
 $26 = sp + 356|0;
 $27 = sp + 344|0;
 $28 = sp + 320|0;
 $29 = sp + 308|0;
 $30 = sp + 296|0;
 $31 = sp + 284|0;
 $32 = sp + 272|0;
 $33 = sp + 248|0;
 $34 = sp + 236|0;
 $35 = sp + 224|0;
 $36 = sp + 212|0;
 $37 = sp + 200|0;
 $38 = sp + 176|0;
 $39 = sp + 164|0;
 $40 = sp + 152|0;
 $41 = sp + 136|0;
 $42 = sp + 128|0;
 $43 = sp + 112|0;
 $44 = sp + 108|0;
 $45 = sp + 96|0;
 $46 = sp + 80|0;
 $47 = sp + 76|0;
 $48 = sp + 72|0;
 $49 = sp + 56|0;
 $50 = sp + 48|0;
 $51 = sp + 32|0;
 $52 = sp + 24|0;
 $53 = sp + 8|0;
 $54 = sp;
 $55 = ($0|0)==($1|0);
 L1: do {
  if ($55) {
   $$5 = $0;
  } else {
   $56 = HEAP8[$0>>0]|0;
   $57 = $56 << 24 >> 24;
   $58 = ((($2)) + 16|0);
   switch ($57|0) {
   case 75: case 86: case 114:  {
    HEAP32[$3>>2] = 0;
    $59 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_cv_qualifiersEPKcS2_Rj($0,$1,$3)|0);
    $60 = ($59|0)==($0|0);
    L5: do {
     if ($60) {
      $$1429 = $0;
     } else {
      $61 = HEAP8[$59>>0]|0;
      $62 = ($61<<24>>24)==(70);
      $63 = ((($2)) + 4|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = HEAP32[$2>>2]|0;
      $66 = (($64) - ($65))|0;
      $67 = (($66|0) / 24)&-1;
      $68 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($59,$1,$2)|0);
      $69 = HEAP32[$63>>2]|0;
      $70 = HEAP32[$2>>2]|0;
      $71 = (($69) - ($70))|0;
      $72 = (($71|0) / 24)&-1;
      $73 = ($68|0)==($59|0);
      if ($73) {
       $$1429 = $0;
      } else {
       $74 = ((($2)) + 20|0);
       $75 = HEAP32[$74>>2]|0;
       L8: do {
        if ($62) {
         $76 = ((($75)) + -16|0);
         $78 = $75;
         while(1) {
          $77 = ($78|0)==($76|0);
          if ($77) {
           $83 = $76;
           break L8;
          }
          $79 = ((($78)) + -16|0);
          HEAP32[$74>>2] = $79;
          __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($79);
          $$pre$i495 = HEAP32[$74>>2]|0;
          $78 = $$pre$i495;
         }
        } else {
         $83 = $75;
        }
       } while(0);
       $$sroa$0$0$$sroa_idx$i496 = ((($2)) + 12|0);
       $$sroa$0$0$copyload$i497593 = HEAP32[$$sroa$0$0$$sroa_idx$i496>>2]|0;
       HEAP32[$4>>2] = $$sroa$0$0$copyload$i497593;
       $80 = ((($2)) + 24|0);
       $81 = HEAP32[$80>>2]|0;
       $82 = ($83>>>0)<($81>>>0);
       if ($82) {
        HEAP32[$83>>2] = 0;
        $84 = ((($83)) + 4|0);
        HEAP32[$84>>2] = 0;
        $85 = ((($83)) + 8|0);
        $86 = HEAP32[$4>>2]|0;
        HEAP32[$85>>2] = 0;
        $87 = ((($83)) + 12|0);
        HEAP32[$87>>2] = $86;
        $88 = HEAP32[$74>>2]|0;
        $89 = ((($88)) + 16|0);
        HEAP32[$74>>2] = $89;
       } else {
        __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE24__emplace_back_slow_pathIJS5_EEEvDpOT_($58,$4);
       }
       $90 = HEAP32[$3>>2]|0;
       $91 = $90 & 1;
       $92 = ($91|0)==(0);
       $93 = $90 & 2;
       $94 = ($93|0)==(0);
       $95 = $90 & 4;
       $96 = ($95|0)==(0);
       $$0434 = $67;
       while(1) {
        $97 = ($$0434>>>0)<($72>>>0);
        if (!($97)) {
         $$1429 = $68;
         break L5;
        }
        if ($62) {
         $98 = HEAP32[$2>>2]|0;
         $99 = (((($98) + (($$0434*24)|0)|0)) + 12|0);
         $100 = ((($99)) + 11|0);
         $101 = HEAP8[$100>>0]|0;
         $102 = ($101<<24>>24)<(0);
         if ($102) {
          $103 = (((($98) + (($$0434*24)|0)|0)) + 16|0);
          $104 = HEAP32[$103>>2]|0;
          $105 = HEAP32[$99>>2]|0;
          $$in = $104;$109 = $105;
         } else {
          $106 = $101&255;
          $$in = $106;$109 = $99;
         }
         $107 = (($$in) + -2)|0;
         $108 = (($109) + ($107)|0);
         $110 = HEAP8[$108>>0]|0;
         $111 = ($110<<24>>24)==(38);
         if ($111) {
          $112 = (($$in) + -3)|0;
          $$0435 = $112;
         } else {
          if ($102) {
           $113 = HEAP32[$99>>2]|0;
           $114 = (((($98) + (($$0434*24)|0)|0)) + 16|0);
           $115 = HEAP32[$114>>2]|0;
           $118 = $113;$119 = $115;
          } else {
           $116 = $101&255;
           $118 = $99;$119 = $116;
          }
          $117 = (($118) + ($119)|0);
          $120 = ((($117)) + -1|0);
          $121 = HEAP8[$120>>0]|0;
          $122 = ($121<<24>>24)==(38);
          $$ = $122 ? $107 : $$in;
          $$0435 = $$;
         }
         if ($92) {
          $$1436 = $$0435;
         } else {
          $123 = (($$0435) + 6)|0;
          (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($99,$$0435,7513)|0);
          $$1436 = $123;
         }
         if ($94) {
          $$2437 = $$1436;
         } else {
          $124 = (($$1436) + 9)|0;
          $125 = HEAP32[$2>>2]|0;
          $126 = (((($125) + (($$0434*24)|0)|0)) + 12|0);
          (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($126,$$1436,7520)|0);
          $$2437 = $124;
         }
         if (!($96)) {
          $127 = HEAP32[$2>>2]|0;
          $128 = (((($127) + (($$0434*24)|0)|0)) + 12|0);
          (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($128,$$2437,7530)|0);
         }
        } else {
         if (!($92)) {
          $129 = HEAP32[$2>>2]|0;
          $130 = (($129) + (($$0434*24)|0)|0);
          (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($130,7513)|0);
         }
         if (!($94)) {
          $131 = HEAP32[$2>>2]|0;
          $132 = (($131) + (($$0434*24)|0)|0);
          (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($132,7520)|0);
         }
         if (!($96)) {
          $133 = HEAP32[$2>>2]|0;
          $134 = (($133) + (($$0434*24)|0)|0);
          (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($134,7530)|0);
         }
        }
        $135 = HEAP32[$74>>2]|0;
        $136 = HEAP32[$2>>2]|0;
        $137 = (($136) + (($$0434*24)|0)|0);
        $138 = ((($135)) + -12|0);
        $139 = HEAP32[$138>>2]|0;
        $140 = ((($135)) + -8|0);
        $141 = HEAP32[$140>>2]|0;
        $142 = ($139|0)==($141|0);
        if ($142) {
         $145 = ((($135)) + -16|0);
         __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIRKS3_EEvOT_($145,$137);
        } else {
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_($139,$137);
         $143 = HEAP32[$138>>2]|0;
         $144 = ((($143)) + 24|0);
         HEAP32[$138>>2] = $144;
        }
        $146 = (($$0434) + 1)|0;
        $$0434 = $146;
       }
      }
     }
    } while(0);
    $$5 = $$1429;
    break L1;
    break;
   }
   default: {
   }
   }
   $147 = (__ZN10__cxxabiv112_GLOBAL__N_118parse_builtin_typeINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
   $148 = ($147|0)==($0|0);
   if ($148) {
    $149 = HEAP8[$0>>0]|0;
    $150 = $149 << 24 >> 24;
    $151 = ((($0)) + 1|0);
    $152 = ($151|0)!=($1|0);
    L58: do {
     switch ($150|0) {
     case 65:  {
      $153 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_array_typeINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
      $154 = ($153|0)==($0|0);
      if ($154) {
       $$5 = $0;
       break L1;
      }
      $155 = HEAP32[$2>>2]|0;
      $156 = ((($2)) + 4|0);
      $157 = HEAP32[$156>>2]|0;
      $158 = ($155|0)==($157|0);
      if ($158) {
       $$5 = $0;
       break L1;
      }
      $159 = ((($157)) + -24|0);
      $$sroa$0$0$$sroa_idx$i502 = ((($2)) + 12|0);
      $$sroa$0$0$copyload$i503610 = HEAP32[$$sroa$0$0$$sroa_idx$i502>>2]|0;
      HEAP32[$6>>2] = $$sroa$0$0$copyload$i503610;
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($5,$159,$6);
      $160 = ((($2)) + 20|0);
      $161 = HEAP32[$160>>2]|0;
      $162 = ((($2)) + 24|0);
      $163 = HEAP32[$162>>2]|0;
      $164 = ($161>>>0)<($163>>>0);
      if ($164) {
       $165 = ((($5)) + 12|0);
       HEAP32[$161>>2] = 0;
       $166 = ((($161)) + 4|0);
       HEAP32[$166>>2] = 0;
       $167 = ((($161)) + 8|0);
       $168 = HEAP32[$165>>2]|0;
       HEAP32[$167>>2] = 0;
       $169 = ((($161)) + 12|0);
       HEAP32[$169>>2] = $168;
       $170 = HEAP32[$5>>2]|0;
       HEAP32[$161>>2] = $170;
       $171 = ((($5)) + 4|0);
       $172 = HEAP32[$171>>2]|0;
       HEAP32[$166>>2] = $172;
       $173 = ((($5)) + 8|0);
       $174 = HEAP32[$173>>2]|0;
       $175 = ((($161)) + 8|0);
       HEAP32[$175>>2] = $174;
       HEAP32[$173>>2] = 0;
       HEAP32[$171>>2] = 0;
       HEAP32[$5>>2] = 0;
       $176 = HEAP32[$160>>2]|0;
       $177 = ((($176)) + 16|0);
       HEAP32[$160>>2] = $177;
      } else {
       __THREW__ = 0;
       invoke_vii(98,($58|0),($5|0));
       $178 = __THREW__; __THREW__ = 0;
       $179 = $178&1;
       if ($179) {
        $180 = ___cxa_find_matching_catch_2()|0;
        $181 = tempRet0;
        __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($5);
        $$16 = $180;$$16474 = $181;
        break L58;
       }
      }
      __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($5);
      $$5 = $153;
      break L1;
      break;
     }
     case 67:  {
      $182 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($151,$1,$2)|0);
      $183 = ($182|0)==($151|0);
      if ($183) {
       $$5 = $0;
       break L1;
      }
      $184 = HEAP32[$2>>2]|0;
      $185 = ((($2)) + 4|0);
      $186 = HEAP32[$185>>2]|0;
      $187 = ($184|0)==($186|0);
      if ($187) {
       $$5 = $0;
       break L1;
      }
      $188 = ((($186)) + -24|0);
      (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($188,7540)|0);
      $189 = HEAP32[$185>>2]|0;
      $190 = ((($189)) + -24|0);
      $$sroa$0$0$$sroa_idx$i506 = ((($2)) + 12|0);
      $$sroa$0$0$copyload$i507609 = HEAP32[$$sroa$0$0$$sroa_idx$i506>>2]|0;
      HEAP32[$8>>2] = $$sroa$0$0$copyload$i507609;
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($7,$190,$8);
      $191 = ((($2)) + 20|0);
      $192 = HEAP32[$191>>2]|0;
      $193 = ((($2)) + 24|0);
      $194 = HEAP32[$193>>2]|0;
      $195 = ($192>>>0)<($194>>>0);
      if ($195) {
       $196 = ((($7)) + 12|0);
       HEAP32[$192>>2] = 0;
       $197 = ((($192)) + 4|0);
       HEAP32[$197>>2] = 0;
       $198 = ((($192)) + 8|0);
       $199 = HEAP32[$196>>2]|0;
       HEAP32[$198>>2] = 0;
       $200 = ((($192)) + 12|0);
       HEAP32[$200>>2] = $199;
       $201 = HEAP32[$7>>2]|0;
       HEAP32[$192>>2] = $201;
       $202 = ((($7)) + 4|0);
       $203 = HEAP32[$202>>2]|0;
       HEAP32[$197>>2] = $203;
       $204 = ((($7)) + 8|0);
       $205 = HEAP32[$204>>2]|0;
       $206 = ((($192)) + 8|0);
       HEAP32[$206>>2] = $205;
       HEAP32[$204>>2] = 0;
       HEAP32[$202>>2] = 0;
       HEAP32[$7>>2] = 0;
       $207 = HEAP32[$191>>2]|0;
       $208 = ((($207)) + 16|0);
       HEAP32[$191>>2] = $208;
      } else {
       __THREW__ = 0;
       invoke_vii(98,($58|0),($7|0));
       $209 = __THREW__; __THREW__ = 0;
       $210 = $209&1;
       if ($210) {
        $211 = ___cxa_find_matching_catch_2()|0;
        $212 = tempRet0;
        __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($7);
        $$16 = $211;$$16474 = $212;
        break L58;
       }
      }
      __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($7);
      $$5 = $182;
      break L1;
      break;
     }
     case 70:  {
      $213 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_function_typeINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
      $214 = ($213|0)==($0|0);
      if ($214) {
       $$5 = $0;
       break L1;
      }
      $215 = HEAP32[$2>>2]|0;
      $216 = ((($2)) + 4|0);
      $217 = HEAP32[$216>>2]|0;
      $218 = ($215|0)==($217|0);
      if ($218) {
       $$5 = $0;
       break L1;
      }
      $219 = ((($217)) + -24|0);
      $$sroa$0$0$$sroa_idx$i512 = ((($2)) + 12|0);
      $$sroa$0$0$copyload$i513608 = HEAP32[$$sroa$0$0$$sroa_idx$i512>>2]|0;
      HEAP32[$10>>2] = $$sroa$0$0$copyload$i513608;
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($9,$219,$10);
      $220 = ((($2)) + 20|0);
      $221 = HEAP32[$220>>2]|0;
      $222 = ((($2)) + 24|0);
      $223 = HEAP32[$222>>2]|0;
      $224 = ($221>>>0)<($223>>>0);
      if ($224) {
       $225 = ((($9)) + 12|0);
       HEAP32[$221>>2] = 0;
       $226 = ((($221)) + 4|0);
       HEAP32[$226>>2] = 0;
       $227 = ((($221)) + 8|0);
       $228 = HEAP32[$225>>2]|0;
       HEAP32[$227>>2] = 0;
       $229 = ((($221)) + 12|0);
       HEAP32[$229>>2] = $228;
       $230 = HEAP32[$9>>2]|0;
       HEAP32[$221>>2] = $230;
       $231 = ((($9)) + 4|0);
       $232 = HEAP32[$231>>2]|0;
       HEAP32[$226>>2] = $232;
       $233 = ((($9)) + 8|0);
       $234 = HEAP32[$233>>2]|0;
       $235 = ((($221)) + 8|0);
       HEAP32[$235>>2] = $234;
       HEAP32[$233>>2] = 0;
       HEAP32[$231>>2] = 0;
       HEAP32[$9>>2] = 0;
       $236 = HEAP32[$220>>2]|0;
       $237 = ((($236)) + 16|0);
       HEAP32[$220>>2] = $237;
      } else {
       __THREW__ = 0;
       invoke_vii(98,($58|0),($9|0));
       $238 = __THREW__; __THREW__ = 0;
       $239 = $238&1;
       if ($239) {
        $240 = ___cxa_find_matching_catch_2()|0;
        $241 = tempRet0;
        __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($9);
        $$16 = $240;$$16474 = $241;
        break L58;
       }
      }
      __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($9);
      $$5 = $213;
      break L1;
      break;
     }
     case 71:  {
      $242 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($151,$1,$2)|0);
      $243 = ($242|0)==($151|0);
      if ($243) {
       $$5 = $0;
       break L1;
      }
      $244 = HEAP32[$2>>2]|0;
      $245 = ((($2)) + 4|0);
      $246 = HEAP32[$245>>2]|0;
      $247 = ($244|0)==($246|0);
      if ($247) {
       $$5 = $0;
       break L1;
      }
      $248 = ((($246)) + -24|0);
      (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($248,7549)|0);
      $249 = HEAP32[$245>>2]|0;
      $250 = ((($249)) + -24|0);
      $$sroa$0$0$$sroa_idx$i516 = ((($2)) + 12|0);
      $$sroa$0$0$copyload$i517607 = HEAP32[$$sroa$0$0$$sroa_idx$i516>>2]|0;
      HEAP32[$12>>2] = $$sroa$0$0$copyload$i517607;
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($11,$250,$12);
      $251 = ((($2)) + 20|0);
      $252 = HEAP32[$251>>2]|0;
      $253 = ((($2)) + 24|0);
      $254 = HEAP32[$253>>2]|0;
      $255 = ($252>>>0)<($254>>>0);
      if ($255) {
       $256 = ((($11)) + 12|0);
       HEAP32[$252>>2] = 0;
       $257 = ((($252)) + 4|0);
       HEAP32[$257>>2] = 0;
       $258 = ((($252)) + 8|0);
       $259 = HEAP32[$256>>2]|0;
       HEAP32[$258>>2] = 0;
       $260 = ((($252)) + 12|0);
       HEAP32[$260>>2] = $259;
       $261 = HEAP32[$11>>2]|0;
       HEAP32[$252>>2] = $261;
       $262 = ((($11)) + 4|0);
       $263 = HEAP32[$262>>2]|0;
       HEAP32[$257>>2] = $263;
       $264 = ((($11)) + 8|0);
       $265 = HEAP32[$264>>2]|0;
       $266 = ((($252)) + 8|0);
       HEAP32[$266>>2] = $265;
       HEAP32[$264>>2] = 0;
       HEAP32[$262>>2] = 0;
       HEAP32[$11>>2] = 0;
       $267 = HEAP32[$251>>2]|0;
       $268 = ((($267)) + 16|0);
       HEAP32[$251>>2] = $268;
      } else {
       __THREW__ = 0;
       invoke_vii(98,($58|0),($11|0));
       $269 = __THREW__; __THREW__ = 0;
       $270 = $269&1;
       if ($270) {
        $271 = ___cxa_find_matching_catch_2()|0;
        $272 = tempRet0;
        __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($11);
        $$16 = $271;$$16474 = $272;
        break L58;
       }
      }
      __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($11);
      $$5 = $242;
      break L1;
      break;
     }
     case 77:  {
      $273 = (__ZN10__cxxabiv112_GLOBAL__N_128parse_pointer_to_member_typeINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
      $274 = ($273|0)==($0|0);
      if ($274) {
       $$5 = $0;
       break L1;
      }
      $275 = HEAP32[$2>>2]|0;
      $276 = ((($2)) + 4|0);
      $277 = HEAP32[$276>>2]|0;
      $278 = ($275|0)==($277|0);
      if ($278) {
       $$5 = $0;
       break L1;
      }
      $279 = ((($277)) + -24|0);
      $$sroa$0$0$$sroa_idx$i520 = ((($2)) + 12|0);
      $$sroa$0$0$copyload$i521606 = HEAP32[$$sroa$0$0$$sroa_idx$i520>>2]|0;
      HEAP32[$14>>2] = $$sroa$0$0$copyload$i521606;
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($13,$279,$14);
      $280 = ((($2)) + 20|0);
      $281 = HEAP32[$280>>2]|0;
      $282 = ((($2)) + 24|0);
      $283 = HEAP32[$282>>2]|0;
      $284 = ($281>>>0)<($283>>>0);
      if ($284) {
       $285 = ((($13)) + 12|0);
       HEAP32[$281>>2] = 0;
       $286 = ((($281)) + 4|0);
       HEAP32[$286>>2] = 0;
       $287 = ((($281)) + 8|0);
       $288 = HEAP32[$285>>2]|0;
       HEAP32[$287>>2] = 0;
       $289 = ((($281)) + 12|0);
       HEAP32[$289>>2] = $288;
       $290 = HEAP32[$13>>2]|0;
       HEAP32[$281>>2] = $290;
       $291 = ((($13)) + 4|0);
       $292 = HEAP32[$291>>2]|0;
       HEAP32[$286>>2] = $292;
       $293 = ((($13)) + 8|0);
       $294 = HEAP32[$293>>2]|0;
       $295 = ((($281)) + 8|0);
       HEAP32[$295>>2] = $294;
       HEAP32[$293>>2] = 0;
       HEAP32[$291>>2] = 0;
       HEAP32[$13>>2] = 0;
       $296 = HEAP32[$280>>2]|0;
       $297 = ((($296)) + 16|0);
       HEAP32[$280>>2] = $297;
      } else {
       __THREW__ = 0;
       invoke_vii(98,($58|0),($13|0));
       $298 = __THREW__; __THREW__ = 0;
       $299 = $298&1;
       if ($299) {
        $300 = ___cxa_find_matching_catch_2()|0;
        $301 = tempRet0;
        __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($13);
        $$16 = $300;$$16474 = $301;
        break L58;
       }
      }
      __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($13);
      $$5 = $273;
      break L1;
      break;
     }
     case 79:  {
      $302 = ((($2)) + 4|0);
      $303 = HEAP32[$302>>2]|0;
      $304 = HEAP32[$2>>2]|0;
      $305 = (($303) - ($304))|0;
      $306 = (($305|0) / 24)&-1;
      $307 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($151,$1,$2)|0);
      $308 = HEAP32[$302>>2]|0;
      $309 = HEAP32[$2>>2]|0;
      $310 = (($308) - ($309))|0;
      $311 = (($310|0) / 24)&-1;
      $312 = ($307|0)==($151|0);
      if ($312) {
       $$5 = $0;
       break L1;
      }
      $$sroa$0$0$$sroa_idx$i524 = ((($2)) + 12|0);
      $$sroa$0$0$copyload$i525605 = HEAP32[$$sroa$0$0$$sroa_idx$i524>>2]|0;
      HEAP32[$15>>2] = $$sroa$0$0$copyload$i525605;
      $313 = ((($2)) + 20|0);
      $314 = HEAP32[$313>>2]|0;
      $315 = ((($2)) + 24|0);
      $316 = HEAP32[$315>>2]|0;
      $317 = ($314>>>0)<($316>>>0);
      if ($317) {
       HEAP32[$314>>2] = 0;
       $318 = ((($314)) + 4|0);
       HEAP32[$318>>2] = 0;
       $319 = ((($314)) + 8|0);
       HEAP32[$319>>2] = 0;
       $320 = ((($314)) + 12|0);
       HEAP32[$320>>2] = $$sroa$0$0$copyload$i525605;
       $321 = HEAP32[$313>>2]|0;
       $322 = ((($321)) + 16|0);
       HEAP32[$313>>2] = $322;
      } else {
       __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE24__emplace_back_slow_pathIJS5_EEEvDpOT_($58,$15);
      }
      $323 = ((($16)) + 11|0);
      $324 = ((($16)) + 4|0);
      $$0478 = $306;
      while(1) {
       $325 = ($$0478>>>0)<($311>>>0);
       if (!($325)) {
        $$5 = $307;
        break L1;
       }
       $326 = HEAP32[$2>>2]|0;
       $327 = (((($326) + (($$0478*24)|0)|0)) + 12|0);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_jjRKS6_($16,$327,2);
       __THREW__ = 0;
       $328 = (invoke_ii(99,(7560|0))|0);
       $329 = __THREW__; __THREW__ = 0;
       $330 = $329&1;
       if ($330) {
        label = 89;
        break;
       }
       $331 = HEAP8[$323>>0]|0;
       $332 = ($331<<24>>24)<(0);
       $333 = HEAP32[$324>>2]|0;
       $334 = $331&255;
       $335 = $332 ? $333 : $334;
       $336 = ($328|0)==($335|0);
       if ($336) {
        __THREW__ = 0;
        $337 = (invoke_iiii(100,($16|0),(7560|0),($328|0))|0);
        $338 = __THREW__; __THREW__ = 0;
        $339 = $338&1;
        if ($339) {
         label = 88;
         break;
        }
        $340 = ($337|0)==(0);
        $$0$i = $340;
       } else {
        $$0$i = 0;
       }
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($16);
       $345 = HEAP32[$2>>2]|0;
       if ($$0$i) {
        $346 = (($345) + (($$0478*24)|0)|0);
        (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($346,7563)|0);
        $347 = HEAP32[$2>>2]|0;
        $348 = (((($347) + (($$0478*24)|0)|0)) + 12|0);
        (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($348,0,7566)|0);
       } else {
        $349 = (((($345) + (($$0478*24)|0)|0)) + 12|0);
        $350 = ((($349)) + 11|0);
        $351 = HEAP8[$350>>0]|0;
        $352 = ($351<<24>>24)<(0);
        if ($352) {
         $353 = HEAP32[$349>>2]|0;
         $355 = $353;
        } else {
         $355 = $349;
        }
        $354 = HEAP8[$355>>0]|0;
        $356 = ($354<<24>>24)==(40);
        if ($356) {
         $357 = (($345) + (($$0478*24)|0)|0);
         (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($357,7568)|0);
         $358 = HEAP32[$2>>2]|0;
         $359 = (((($358) + (($$0478*24)|0)|0)) + 12|0);
         (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($359,0,7566)|0);
        }
       }
       $360 = HEAP32[$2>>2]|0;
       $361 = (($360) + (($$0478*24)|0)|0);
       (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($361,7570)|0);
       $362 = HEAP32[$313>>2]|0;
       $363 = HEAP32[$2>>2]|0;
       $364 = (($363) + (($$0478*24)|0)|0);
       $365 = ((($362)) + -12|0);
       $366 = HEAP32[$365>>2]|0;
       $367 = ((($362)) + -8|0);
       $368 = HEAP32[$367>>2]|0;
       $369 = ($366|0)==($368|0);
       if ($369) {
        $372 = ((($362)) + -16|0);
        __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIRKS3_EEvOT_($372,$364);
       } else {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_($366,$364);
        $370 = HEAP32[$365>>2]|0;
        $371 = ((($370)) + 24|0);
        HEAP32[$365>>2] = $371;
       }
       $373 = (($$0478) + 1)|0;
       $$0478 = $373;
      }
      if ((label|0) == 88) {
       $341 = ___cxa_find_matching_catch_3(0|0)|0;
       $342 = tempRet0;
       ___clang_call_terminate($341);
       // unreachable;
      }
      else if ((label|0) == 89) {
       $343 = ___cxa_find_matching_catch_3(0|0)|0;
       $344 = tempRet0;
       ___clang_call_terminate($343);
       // unreachable;
      }
      break;
     }
     case 80:  {
      $374 = ((($2)) + 4|0);
      $375 = HEAP32[$374>>2]|0;
      $376 = HEAP32[$2>>2]|0;
      $377 = (($375) - ($376))|0;
      $378 = (($377|0) / 24)&-1;
      $379 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($151,$1,$2)|0);
      $380 = HEAP32[$374>>2]|0;
      $381 = HEAP32[$2>>2]|0;
      $382 = (($380) - ($381))|0;
      $383 = (($382|0) / 24)&-1;
      $384 = ($379|0)==($151|0);
      if ($384) {
       $$5 = $0;
       break L1;
      }
      $$sroa$0$0$$sroa_idx$i528 = ((($2)) + 12|0);
      $$sroa$0$0$copyload$i529604 = HEAP32[$$sroa$0$0$$sroa_idx$i528>>2]|0;
      HEAP32[$17>>2] = $$sroa$0$0$copyload$i529604;
      $385 = ((($2)) + 20|0);
      $386 = HEAP32[$385>>2]|0;
      $387 = ((($2)) + 24|0);
      $388 = HEAP32[$387>>2]|0;
      $389 = ($386>>>0)<($388>>>0);
      if ($389) {
       HEAP32[$386>>2] = 0;
       $390 = ((($386)) + 4|0);
       HEAP32[$390>>2] = 0;
       $391 = ((($386)) + 8|0);
       HEAP32[$391>>2] = 0;
       $392 = ((($386)) + 12|0);
       HEAP32[$392>>2] = $$sroa$0$0$copyload$i529604;
       $393 = HEAP32[$385>>2]|0;
       $394 = ((($393)) + 16|0);
       HEAP32[$385>>2] = $394;
      } else {
       __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE24__emplace_back_slow_pathIJS5_EEEvDpOT_($58,$17);
      }
      $395 = ((($18)) + 11|0);
      $396 = ((($18)) + 4|0);
      $397 = ((($19)) + 11|0);
      $398 = ((($19)) + 4|0);
      $$0477 = $378;
      while(1) {
       $399 = ($$0477>>>0)<($383>>>0);
       if (!($399)) {
        $$5 = $379;
        break L1;
       }
       $400 = HEAP32[$2>>2]|0;
       $401 = (((($400) + (($$0477*24)|0)|0)) + 12|0);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_jjRKS6_($18,$401,2);
       __THREW__ = 0;
       $402 = (invoke_ii(99,(7560|0))|0);
       $403 = __THREW__; __THREW__ = 0;
       $404 = $403&1;
       if ($404) {
        label = 112;
        break;
       }
       $405 = HEAP8[$395>>0]|0;
       $406 = ($405<<24>>24)<(0);
       $407 = HEAP32[$396>>2]|0;
       $408 = $405&255;
       $409 = $406 ? $407 : $408;
       $410 = ($402|0)==($409|0);
       if ($410) {
        __THREW__ = 0;
        $411 = (invoke_iiii(100,($18|0),(7560|0),($402|0))|0);
        $412 = __THREW__; __THREW__ = 0;
        $413 = $412&1;
        if ($413) {
         label = 111;
         break;
        }
        $414 = ($411|0)==(0);
        $$0$i532 = $414;
       } else {
        $$0$i532 = 0;
       }
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($18);
       $419 = HEAP32[$2>>2]|0;
       if ($$0$i532) {
        $420 = (($419) + (($$0477*24)|0)|0);
        (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($420,7563)|0);
        $421 = HEAP32[$2>>2]|0;
        $422 = (((($421) + (($$0477*24)|0)|0)) + 12|0);
        (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($422,0,7566)|0);
       } else {
        $423 = (((($419) + (($$0477*24)|0)|0)) + 12|0);
        $424 = ((($423)) + 11|0);
        $425 = HEAP8[$424>>0]|0;
        $426 = ($425<<24>>24)<(0);
        if ($426) {
         $427 = HEAP32[$423>>2]|0;
         $429 = $427;
        } else {
         $429 = $423;
        }
        $428 = HEAP8[$429>>0]|0;
        $430 = ($428<<24>>24)==(40);
        if ($430) {
         $431 = (($419) + (($$0477*24)|0)|0);
         (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($431,7568)|0);
         $432 = HEAP32[$2>>2]|0;
         $433 = (((($432) + (($$0477*24)|0)|0)) + 12|0);
         (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($433,0,7566)|0);
        }
       }
       $434 = HEAP8[$151>>0]|0;
       $435 = ($434<<24>>24)==(85);
       if ($435) {
        $438 = HEAP32[$2>>2]|0;
        $439 = (($438) + (($$0477*24)|0)|0);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_jjRKS6_($19,$439,12);
        __THREW__ = 0;
        $440 = (invoke_ii(99,(7573|0))|0);
        $441 = __THREW__; __THREW__ = 0;
        $442 = $441&1;
        if ($442) {
         label = 127;
         break;
        }
        $443 = HEAP8[$397>>0]|0;
        $444 = ($443<<24>>24)<(0);
        $445 = HEAP32[$398>>2]|0;
        $446 = $443&255;
        $447 = $444 ? $445 : $446;
        $448 = ($440|0)==($447|0);
        if ($448) {
         __THREW__ = 0;
         $449 = (invoke_iiii(100,($19|0),(7573|0),($440|0))|0);
         $450 = __THREW__; __THREW__ = 0;
         $451 = $450&1;
         if ($451) {
          label = 126;
          break;
         }
         $phitmp$i = ($449|0)!=(0);
         $$ph = $phitmp$i;
        } else {
         $$ph = 1;
        }
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($19);
        $456 = HEAP32[$2>>2]|0;
        $457 = (($456) + (($$0477*24)|0)|0);
        if ($$ph) {
         $458 = $457;
         label = 129;
        } else {
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7replaceEjjPKc($457);
        }
       } else {
        $436 = HEAP32[$2>>2]|0;
        $437 = (($436) + (($$0477*24)|0)|0);
        $458 = $437;
        label = 129;
       }
       if ((label|0) == 129) {
        label = 0;
        (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($458,7586)|0);
       }
       $459 = HEAP32[$385>>2]|0;
       $460 = HEAP32[$2>>2]|0;
       $461 = (($460) + (($$0477*24)|0)|0);
       $462 = ((($459)) + -12|0);
       $463 = HEAP32[$462>>2]|0;
       $464 = ((($459)) + -8|0);
       $465 = HEAP32[$464>>2]|0;
       $466 = ($463|0)==($465|0);
       if ($466) {
        $469 = ((($459)) + -16|0);
        __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIRKS3_EEvOT_($469,$461);
       } else {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_($463,$461);
        $467 = HEAP32[$462>>2]|0;
        $468 = ((($467)) + 24|0);
        HEAP32[$462>>2] = $468;
       }
       $470 = (($$0477) + 1)|0;
       $$0477 = $470;
      }
      if ((label|0) == 111) {
       $415 = ___cxa_find_matching_catch_3(0|0)|0;
       $416 = tempRet0;
       ___clang_call_terminate($415);
       // unreachable;
      }
      else if ((label|0) == 112) {
       $417 = ___cxa_find_matching_catch_3(0|0)|0;
       $418 = tempRet0;
       ___clang_call_terminate($417);
       // unreachable;
      }
      else if ((label|0) == 126) {
       $452 = ___cxa_find_matching_catch_3(0|0)|0;
       $453 = tempRet0;
       ___clang_call_terminate($452);
       // unreachable;
      }
      else if ((label|0) == 127) {
       $454 = ___cxa_find_matching_catch_3(0|0)|0;
       $455 = tempRet0;
       ___clang_call_terminate($454);
       // unreachable;
      }
      break;
     }
     case 82:  {
      $471 = ((($2)) + 4|0);
      $472 = HEAP32[$471>>2]|0;
      $473 = HEAP32[$2>>2]|0;
      $474 = (($472) - ($473))|0;
      $475 = (($474|0) / 24)&-1;
      $476 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($151,$1,$2)|0);
      $477 = HEAP32[$471>>2]|0;
      $478 = HEAP32[$2>>2]|0;
      $479 = (($477) - ($478))|0;
      $480 = (($479|0) / 24)&-1;
      $481 = ($476|0)==($151|0);
      if ($481) {
       $$5 = $0;
       break L1;
      }
      $$sroa$0$0$$sroa_idx$i536 = ((($2)) + 12|0);
      $$sroa$0$0$copyload$i537603 = HEAP32[$$sroa$0$0$$sroa_idx$i536>>2]|0;
      HEAP32[$20>>2] = $$sroa$0$0$copyload$i537603;
      $482 = ((($2)) + 20|0);
      $483 = HEAP32[$482>>2]|0;
      $484 = ((($2)) + 24|0);
      $485 = HEAP32[$484>>2]|0;
      $486 = ($483>>>0)<($485>>>0);
      if ($486) {
       HEAP32[$483>>2] = 0;
       $487 = ((($483)) + 4|0);
       HEAP32[$487>>2] = 0;
       $488 = ((($483)) + 8|0);
       HEAP32[$488>>2] = 0;
       $489 = ((($483)) + 12|0);
       HEAP32[$489>>2] = $$sroa$0$0$copyload$i537603;
       $490 = HEAP32[$482>>2]|0;
       $491 = ((($490)) + 16|0);
       HEAP32[$482>>2] = $491;
      } else {
       __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE24__emplace_back_slow_pathIJS5_EEEvDpOT_($58,$20);
      }
      $492 = ((($21)) + 11|0);
      $493 = ((($21)) + 4|0);
      $$0444 = $475;
      while(1) {
       $494 = ($$0444>>>0)<($480>>>0);
       if (!($494)) {
        $$5 = $476;
        break L1;
       }
       $495 = HEAP32[$2>>2]|0;
       $496 = (((($495) + (($$0444*24)|0)|0)) + 12|0);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_jjRKS6_($21,$496,2);
       __THREW__ = 0;
       $497 = (invoke_ii(99,(7560|0))|0);
       $498 = __THREW__; __THREW__ = 0;
       $499 = $498&1;
       if ($499) {
        label = 146;
        break;
       }
       $500 = HEAP8[$492>>0]|0;
       $501 = ($500<<24>>24)<(0);
       $502 = HEAP32[$493>>2]|0;
       $503 = $500&255;
       $504 = $501 ? $502 : $503;
       $505 = ($497|0)==($504|0);
       if ($505) {
        __THREW__ = 0;
        $506 = (invoke_iiii(100,($21|0),(7560|0),($497|0))|0);
        $507 = __THREW__; __THREW__ = 0;
        $508 = $507&1;
        if ($508) {
         label = 145;
         break;
        }
        $509 = ($506|0)==(0);
        $$0$i540 = $509;
       } else {
        $$0$i540 = 0;
       }
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($21);
       $514 = HEAP32[$2>>2]|0;
       if ($$0$i540) {
        $515 = (($514) + (($$0444*24)|0)|0);
        (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($515,7563)|0);
        $516 = HEAP32[$2>>2]|0;
        $517 = (((($516) + (($$0444*24)|0)|0)) + 12|0);
        (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($517,0,7566)|0);
       } else {
        $518 = (((($514) + (($$0444*24)|0)|0)) + 12|0);
        $519 = ((($518)) + 11|0);
        $520 = HEAP8[$519>>0]|0;
        $521 = ($520<<24>>24)<(0);
        if ($521) {
         $522 = HEAP32[$518>>2]|0;
         $524 = $522;
        } else {
         $524 = $518;
        }
        $523 = HEAP8[$524>>0]|0;
        $525 = ($523<<24>>24)==(40);
        if ($525) {
         $526 = (($514) + (($$0444*24)|0)|0);
         (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($526,7568)|0);
         $527 = HEAP32[$2>>2]|0;
         $528 = (((($527) + (($$0444*24)|0)|0)) + 12|0);
         (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($528,0,7566)|0);
        }
       }
       $529 = HEAP32[$2>>2]|0;
       $530 = (($529) + (($$0444*24)|0)|0);
       (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($530,7588)|0);
       $531 = HEAP32[$482>>2]|0;
       $532 = HEAP32[$2>>2]|0;
       $533 = (($532) + (($$0444*24)|0)|0);
       $534 = ((($531)) + -12|0);
       $535 = HEAP32[$534>>2]|0;
       $536 = ((($531)) + -8|0);
       $537 = HEAP32[$536>>2]|0;
       $538 = ($535|0)==($537|0);
       if ($538) {
        $541 = ((($531)) + -16|0);
        __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIRKS3_EEvOT_($541,$533);
       } else {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_($535,$533);
        $539 = HEAP32[$534>>2]|0;
        $540 = ((($539)) + 24|0);
        HEAP32[$534>>2] = $540;
       }
       $542 = (($$0444) + 1)|0;
       $$0444 = $542;
      }
      if ((label|0) == 145) {
       $510 = ___cxa_find_matching_catch_3(0|0)|0;
       $511 = tempRet0;
       ___clang_call_terminate($510);
       // unreachable;
      }
      else if ((label|0) == 146) {
       $512 = ___cxa_find_matching_catch_3(0|0)|0;
       $513 = tempRet0;
       ___clang_call_terminate($512);
       // unreachable;
      }
      break;
     }
     case 84:  {
      $543 = ((($2)) + 4|0);
      $544 = HEAP32[$543>>2]|0;
      $545 = HEAP32[$2>>2]|0;
      $546 = (($544) - ($545))|0;
      $547 = (($546|0) / 24)&-1;
      $548 = (__ZN10__cxxabiv112_GLOBAL__N_120parse_template_paramINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
      $549 = HEAP32[$543>>2]|0;
      $550 = HEAP32[$2>>2]|0;
      $551 = (($549) - ($550))|0;
      $552 = (($551|0) / 24)&-1;
      $553 = ($548|0)==($0|0);
      if ($553) {
       $$5 = $0;
       break L1;
      }
      $$sroa$0$0$$sroa_idx$i544 = ((($2)) + 12|0);
      $$sroa$0$0$copyload$i545601 = HEAP32[$$sroa$0$0$$sroa_idx$i544>>2]|0;
      HEAP32[$22>>2] = $$sroa$0$0$copyload$i545601;
      $554 = ((($2)) + 20|0);
      $555 = HEAP32[$554>>2]|0;
      $556 = ((($2)) + 24|0);
      $557 = HEAP32[$556>>2]|0;
      $558 = ($555>>>0)<($557>>>0);
      if ($558) {
       HEAP32[$555>>2] = 0;
       $559 = ((($555)) + 4|0);
       HEAP32[$559>>2] = 0;
       $560 = ((($555)) + 8|0);
       HEAP32[$560>>2] = 0;
       $561 = ((($555)) + 12|0);
       HEAP32[$561>>2] = $$sroa$0$0$copyload$i545601;
       $562 = HEAP32[$554>>2]|0;
       $563 = ((($562)) + 16|0);
       HEAP32[$554>>2] = $563;
      } else {
       __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE24__emplace_back_slow_pathIJS5_EEEvDpOT_($58,$22);
      }
      $$0438 = $547;
      while(1) {
       $564 = ($$0438>>>0)<($552>>>0);
       if (!($564)) {
        break;
       }
       $570 = HEAP32[$554>>2]|0;
       $571 = HEAP32[$2>>2]|0;
       $572 = (($571) + (($$0438*24)|0)|0);
       $573 = ((($570)) + -12|0);
       $574 = HEAP32[$573>>2]|0;
       $575 = ((($570)) + -8|0);
       $576 = HEAP32[$575>>2]|0;
       $577 = ($574|0)==($576|0);
       if ($577) {
        $580 = ((($570)) + -16|0);
        __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIRKS3_EEvOT_($580,$572);
       } else {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_($574,$572);
        $578 = HEAP32[$573>>2]|0;
        $579 = ((($578)) + 24|0);
        HEAP32[$573>>2] = $579;
       }
       $581 = (($$0438) + 1)|0;
       $$0438 = $581;
      }
      $565 = ((($2)) + 63|0);
      $566 = HEAP8[$565>>0]|0;
      $567 = ($566<<24>>24)!=(0);
      $568 = (($547) + 1)|0;
      $569 = ($552|0)==($568|0);
      $or$cond = $569 & $567;
      if (!($or$cond)) {
       $$5 = $548;
       break L1;
      }
      $582 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($548,$1,$2)|0);
      $583 = ($582|0)==($548|0);
      if ($583) {
       $$5 = $548;
       break L1;
      }
      $584 = HEAP32[$543>>2]|0;
      $585 = ((($584)) + -24|0);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($23,$585);
      $586 = HEAP32[$543>>2]|0;
      $587 = ((($586)) + -24|0);
      $589 = $586;
      while(1) {
       $588 = ($589|0)==($587|0);
       if ($588) {
        break;
       }
       $590 = ((($589)) + -24|0);
       HEAP32[$543>>2] = $590;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($590);
       $$pre$i548 = HEAP32[$543>>2]|0;
       $589 = $$pre$i548;
      }
      $591 = ((($586)) + -48|0);
      $592 = ((($23)) + 11|0);
      $593 = HEAP8[$592>>0]|0;
      $594 = ($593<<24>>24)<(0);
      $595 = HEAP32[$23>>2]|0;
      $596 = $594 ? $595 : $23;
      $597 = ((($23)) + 4|0);
      $598 = HEAP32[$597>>2]|0;
      $599 = $593&255;
      $600 = $594 ? $598 : $599;
      __THREW__ = 0;
      (invoke_iiii(88,($591|0),($596|0),($600|0))|0);
      $601 = __THREW__; __THREW__ = 0;
      $602 = $601&1;
      if ($602) {
       $625 = ___cxa_find_matching_catch_2()|0;
       $626 = tempRet0;
       $$1446 = $625;$$1459 = $626;
      } else {
       $603 = HEAP32[$543>>2]|0;
       $604 = ((($603)) + -24|0);
       $$sroa$0$0$copyload$i553602 = HEAP32[$$sroa$0$0$$sroa_idx$i544>>2]|0;
       HEAP32[$25>>2] = $$sroa$0$0$copyload$i553602;
       __THREW__ = 0;
       invoke_viii(101,($24|0),($604|0),($25|0));
       $605 = __THREW__; __THREW__ = 0;
       $606 = $605&1;
       do {
        if ($606) {
         $627 = ___cxa_find_matching_catch_2()|0;
         $628 = tempRet0;
         $$0445 = $627;$$0458 = $628;
        } else {
         $607 = HEAP32[$554>>2]|0;
         $608 = HEAP32[$556>>2]|0;
         $609 = ($607>>>0)<($608>>>0);
         if ($609) {
          $610 = ((($24)) + 12|0);
          HEAP32[$607>>2] = 0;
          $611 = ((($607)) + 4|0);
          HEAP32[$611>>2] = 0;
          $612 = ((($607)) + 8|0);
          $613 = HEAP32[$610>>2]|0;
          HEAP32[$612>>2] = 0;
          $614 = ((($607)) + 12|0);
          HEAP32[$614>>2] = $613;
          $615 = HEAP32[$24>>2]|0;
          HEAP32[$607>>2] = $615;
          $616 = ((($24)) + 4|0);
          $617 = HEAP32[$616>>2]|0;
          HEAP32[$611>>2] = $617;
          $618 = ((($24)) + 8|0);
          $619 = HEAP32[$618>>2]|0;
          $620 = ((($607)) + 8|0);
          HEAP32[$620>>2] = $619;
          HEAP32[$618>>2] = 0;
          HEAP32[$616>>2] = 0;
          HEAP32[$24>>2] = 0;
          $621 = HEAP32[$554>>2]|0;
          $622 = ((($621)) + 16|0);
          HEAP32[$554>>2] = $622;
         } else {
          __THREW__ = 0;
          invoke_vii(98,($58|0),($24|0));
          $623 = __THREW__; __THREW__ = 0;
          $624 = $623&1;
          if ($624) {
           $629 = ___cxa_find_matching_catch_2()|0;
           $630 = tempRet0;
           __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($24);
           $$0445 = $629;$$0458 = $630;
           break;
          }
         }
         __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($24);
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($23);
         $$5 = $582;
         break L1;
        }
       } while(0);
       $$1446 = $$0445;$$1459 = $$0458;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($23);
      $$16 = $$1446;$$16474 = $$1459;
      break;
     }
     case 85:  {
      if (!($152)) {
       $$5 = $0;
       break L1;
      }
      $631 = (__ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($151,$1,$2)|0);
      $632 = ($631|0)==($151|0);
      if ($632) {
       $$5 = $0;
       break L1;
      }
      $633 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($631,$1,$2)|0);
      $634 = ($633|0)==($631|0);
      if ($634) {
       $$5 = $0;
       break L1;
      }
      $635 = ((($2)) + 4|0);
      $636 = HEAP32[$635>>2]|0;
      $637 = HEAP32[$2>>2]|0;
      $638 = (($636) - ($637))|0;
      $639 = (($638|0) / 24)&-1;
      $640 = ($639>>>0)<(2);
      if ($640) {
       $$5 = $0;
       break L1;
      }
      $641 = $636;
      $642 = ((($641)) + -24|0);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($26,$642);
      $643 = HEAP32[$635>>2]|0;
      $644 = ((($643)) + -24|0);
      $646 = $643;
      while(1) {
       $645 = ($646|0)==($644|0);
       if ($645) {
        break;
       }
       $647 = ((($646)) + -24|0);
       HEAP32[$635>>2] = $647;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($647);
       $$pre$i558 = HEAP32[$635>>2]|0;
       $646 = $$pre$i558;
      }
      $648 = ((($643)) + -48|0);
      __THREW__ = 0;
      invoke_viii(102,($27|0),($648|0),9);
      $649 = __THREW__; __THREW__ = 0;
      $650 = $649&1;
      L245: do {
       if ($650) {
        $693 = ___cxa_find_matching_catch_2()|0;
        $694 = tempRet0;
        $$13 = $693;$$13471 = $694;
       } else {
        __THREW__ = 0;
        $651 = (invoke_ii(99,(7590|0))|0);
        $652 = __THREW__; __THREW__ = 0;
        $653 = $652&1;
        if ($653) {
         $667 = ___cxa_find_matching_catch_3(0|0)|0;
         $668 = tempRet0;
         ___clang_call_terminate($667);
         // unreachable;
        }
        $654 = ((($27)) + 11|0);
        $655 = HEAP8[$654>>0]|0;
        $656 = ($655<<24>>24)<(0);
        $657 = ((($27)) + 4|0);
        $658 = HEAP32[$657>>2]|0;
        $659 = $655&255;
        $660 = $656 ? $658 : $659;
        $661 = ($651|0)==($660|0);
        L251: do {
         if ($661) {
          __THREW__ = 0;
          $662 = (invoke_iiii(100,($27|0),(7590|0),($651|0))|0);
          $663 = __THREW__; __THREW__ = 0;
          $664 = $663&1;
          if ($664) {
           $665 = ___cxa_find_matching_catch_3(0|0)|0;
           $666 = tempRet0;
           ___clang_call_terminate($665);
           // unreachable;
          }
          $phitmp$i562 = ($662|0)==(0);
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($27);
          if ($phitmp$i562) {
           $701 = HEAP32[$635>>2]|0;
           $702 = ((($701)) + -24|0);
           __THREW__ = 0;
           invoke_vii(96,($32|0),($702|0));
           $703 = __THREW__; __THREW__ = 0;
           $704 = $703&1;
           if ($704) {
            $691 = ___cxa_find_matching_catch_2()|0;
            $692 = tempRet0;
            $$13 = $691;$$13471 = $692;
            break L245;
           }
           $705 = HEAP32[$635>>2]|0;
           $706 = ((($705)) + -24|0);
           $708 = $705;
           while(1) {
            $707 = ($708|0)==($706|0);
            if ($707) {
             break;
            }
            $709 = ((($708)) + -24|0);
            HEAP32[$635>>2] = $709;
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($709);
            $$pre$i566 = HEAP32[$635>>2]|0;
            $708 = $$pre$i566;
           }
           $710 = ((($32)) + 11|0);
           $711 = HEAP8[$710>>0]|0;
           $712 = ($711<<24>>24)<(0);
           $713 = HEAP32[$32>>2]|0;
           $$ph584618 = ((($713)) + 9|0);
           $714 = ((($32)) + 4|0);
           $715 = HEAP32[$714>>2]|0;
           $$ph584 = ((($32)) + 9|0);
           $716 = $711&255;
           $717 = $712 ? $713 : $32;
           $718 = $712 ? $$ph584618 : $$ph584;
           $719 = $712 ? $715 : $716;
           $720 = (($717) + ($719)|0);
           __THREW__ = 0;
           $721 = (invoke_iiii(104,($718|0),($720|0),($2|0))|0);
           $722 = __THREW__; __THREW__ = 0;
           $723 = $722&1;
           L264: do {
            if ($723) {
             $757 = ___cxa_find_matching_catch_2()|0;
             $758 = tempRet0;
             $$11456 = $757;$$11469 = $758;
            } else {
             $724 = HEAP8[$710>>0]|0;
             $725 = ($724<<24>>24)<(0);
             $726 = HEAP32[$32>>2]|0;
             $727 = $725 ? $726 : $32;
             $728 = ((($727)) + 9|0);
             $729 = ($721|0)==($728|0);
             L267: do {
              if ($729) {
               __THREW__ = 0;
               invoke_viii(103,($40|0),($26|0),(7600|0));
               $767 = __THREW__; __THREW__ = 0;
               $768 = $767&1;
               if ($768) {
                $790 = ___cxa_find_matching_catch_2()|0;
                $791 = tempRet0;
                $$10455 = $790;$$10468 = $791;
               } else {
                $769 = HEAP8[$710>>0]|0;
                $770 = ($769<<24>>24)<(0);
                $771 = HEAP32[$32>>2]|0;
                $772 = $770 ? $771 : $32;
                $773 = ((($32)) + 4|0);
                $774 = HEAP32[$773>>2]|0;
                $775 = $769&255;
                $776 = $770 ? $774 : $775;
                __THREW__ = 0;
                $777 = (invoke_iiii(88,($40|0),($772|0),($776|0))|0);
                $778 = __THREW__; __THREW__ = 0;
                $779 = $778&1;
                L272: do {
                 if ($779) {
                  $792 = ___cxa_find_matching_catch_2()|0;
                  $793 = tempRet0;
                  $$9454 = $792;$$9467 = $793;
                 } else {
                  ;HEAP32[$39>>2]=HEAP32[$40>>2]|0;HEAP32[$39+4>>2]=HEAP32[$40+4>>2]|0;HEAP32[$39+8>>2]=HEAP32[$40+8>>2]|0;
                  $$0$i$i$i578 = 0;
                  while(1) {
                   $exitcond$i$i$i579 = ($$0$i$i$i578|0)==(3);
                   if ($exitcond$i$i$i579) {
                    break;
                   }
                   $780 = (($40) + ($$0$i$i$i578<<2)|0);
                   HEAP32[$780>>2] = 0;
                   $781 = (($$0$i$i$i578) + 1)|0;
                   $$0$i$i$i578 = $781;
                  }
                  __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($38,$39);
                  $782 = HEAP32[$635>>2]|0;
                  $783 = ((($2)) + 8|0);
                  $784 = HEAP32[$783>>2]|0;
                  $785 = ($782>>>0)<($784>>>0);
                  do {
                   if ($785) {
                    __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($782,$38);
                    $786 = HEAP32[$635>>2]|0;
                    $787 = ((($786)) + 24|0);
                    HEAP32[$635>>2] = $787;
                   } else {
                    __THREW__ = 0;
                    invoke_vii(105,($2|0),($38|0));
                    $788 = __THREW__; __THREW__ = 0;
                    $789 = $788&1;
                    if (!($789)) {
                     break;
                    }
                    $794 = ___cxa_find_matching_catch_2()|0;
                    $795 = tempRet0;
                    __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($38);
                    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($39);
                    $$9454 = $794;$$9467 = $795;
                    break L272;
                   }
                  } while(0);
                  __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($38);
                  __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($39);
                  __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($40);
                  break L267;
                 }
                } while(0);
                __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($40);
                $$10455 = $$9454;$$10468 = $$9467;
               }
               $$11456 = $$10455;$$11469 = $$10468;
               break L264;
              } else {
               __THREW__ = 0;
               invoke_viii(103,($36|0),($26|0),(7602|0));
               $730 = __THREW__; __THREW__ = 0;
               $731 = $730&1;
               if ($731) {
                $759 = ___cxa_find_matching_catch_2()|0;
                $760 = tempRet0;
                $$8453 = $759;$$8466 = $760;
               } else {
                $732 = HEAP32[$635>>2]|0;
                $733 = ((($732)) + -24|0);
                __THREW__ = 0;
                invoke_vii(96,($37|0),($733|0));
                $734 = __THREW__; __THREW__ = 0;
                $735 = $734&1;
                if ($735) {
                 $761 = ___cxa_find_matching_catch_2()|0;
                 $762 = tempRet0;
                 $$7452 = $761;$$7465 = $762;
                } else {
                 $736 = ((($37)) + 11|0);
                 $737 = HEAP8[$736>>0]|0;
                 $738 = ($737<<24>>24)<(0);
                 $739 = HEAP32[$37>>2]|0;
                 $740 = $738 ? $739 : $37;
                 $741 = ((($37)) + 4|0);
                 $742 = HEAP32[$741>>2]|0;
                 $743 = $737&255;
                 $744 = $738 ? $742 : $743;
                 __THREW__ = 0;
                 $745 = (invoke_iiii(88,($36|0),($740|0),($744|0))|0);
                 $746 = __THREW__; __THREW__ = 0;
                 $747 = $746&1;
                 do {
                  if ($747) {
                   $763 = ___cxa_find_matching_catch_2()|0;
                   $764 = tempRet0;
                   $$6451 = $763;$$6464 = $764;
                  } else {
                   ;HEAP32[$35>>2]=HEAP32[$36>>2]|0;HEAP32[$35+4>>2]=HEAP32[$36+4>>2]|0;HEAP32[$35+8>>2]=HEAP32[$36+8>>2]|0;
                   $$0$i$i$i571 = 0;
                   while(1) {
                    $exitcond$i$i$i572 = ($$0$i$i$i571|0)==(3);
                    if ($exitcond$i$i$i572) {
                     break;
                    }
                    $748 = (($36) + ($$0$i$i$i571<<2)|0);
                    HEAP32[$748>>2] = 0;
                    $749 = (($$0$i$i$i571) + 1)|0;
                    $$0$i$i$i571 = $749;
                   }
                   __THREW__ = 0;
                   $750 = (invoke_iii(95,($35|0),(7604|0))|0);
                   $751 = __THREW__; __THREW__ = 0;
                   $752 = $751&1;
                   if ($752) {
                    $765 = ___cxa_find_matching_catch_2()|0;
                    $766 = tempRet0;
                    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($35);
                    $$6451 = $765;$$6464 = $766;
                    break;
                   }
                   ;HEAP32[$34>>2]=HEAP32[$35>>2]|0;HEAP32[$34+4>>2]=HEAP32[$35+4>>2]|0;HEAP32[$34+8>>2]=HEAP32[$35+8>>2]|0;
                   $$0$i$i$i575 = 0;
                   while(1) {
                    $exitcond$i$i$i576 = ($$0$i$i$i575|0)==(3);
                    if ($exitcond$i$i$i576) {
                     break;
                    }
                    $753 = (($35) + ($$0$i$i$i575<<2)|0);
                    HEAP32[$753>>2] = 0;
                    $754 = (($$0$i$i$i575) + 1)|0;
                    $$0$i$i$i575 = $754;
                   }
                   __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($33,$34);
                   $755 = HEAP32[$635>>2]|0;
                   $756 = ((($755)) + -24|0);
                   __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($756,$33);
                   __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($33);
                   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($34);
                   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($35);
                   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($37);
                   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($36);
                   break L267;
                  }
                 } while(0);
                 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($37);
                 $$7452 = $$6451;$$7465 = $$6464;
                }
                __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($36);
                $$8453 = $$7452;$$8466 = $$7465;
               }
               $$11456 = $$8453;$$11469 = $$8466;
               break L264;
              }
             } while(0);
             __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($32);
             break L251;
            }
           } while(0);
           __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($32);
           $$13 = $$11456;$$13471 = $$11469;
           break L245;
          } else {
           label = 199;
          }
         } else {
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($27);
          label = 199;
         }
        } while(0);
        L313: do {
         if ((label|0) == 199) {
          __THREW__ = 0;
          invoke_viii(103,($30|0),($26|0),(7600|0));
          $669 = __THREW__; __THREW__ = 0;
          $670 = $669&1;
          if ($670) {
           $695 = ___cxa_find_matching_catch_2()|0;
           $696 = tempRet0;
           $$4449 = $695;$$4462 = $696;
          } else {
           $671 = HEAP32[$635>>2]|0;
           $672 = ((($671)) + -24|0);
           __THREW__ = 0;
           invoke_vii(96,($31|0),($672|0));
           $673 = __THREW__; __THREW__ = 0;
           $674 = $673&1;
           do {
            if ($674) {
             $697 = ___cxa_find_matching_catch_2()|0;
             $698 = tempRet0;
             $$3448 = $697;$$3461 = $698;
            } else {
             $675 = ((($31)) + 11|0);
             $676 = HEAP8[$675>>0]|0;
             $677 = ($676<<24>>24)<(0);
             $678 = HEAP32[$31>>2]|0;
             $679 = $677 ? $678 : $31;
             $680 = ((($31)) + 4|0);
             $681 = HEAP32[$680>>2]|0;
             $682 = $676&255;
             $683 = $677 ? $681 : $682;
             __THREW__ = 0;
             $684 = (invoke_iiii(88,($30|0),($679|0),($683|0))|0);
             $685 = __THREW__; __THREW__ = 0;
             $686 = $685&1;
             if ($686) {
              $699 = ___cxa_find_matching_catch_2()|0;
              $700 = tempRet0;
              __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($31);
              $$3448 = $699;$$3461 = $700;
              break;
             }
             ;HEAP32[$29>>2]=HEAP32[$30>>2]|0;HEAP32[$29+4>>2]=HEAP32[$30+4>>2]|0;HEAP32[$29+8>>2]=HEAP32[$30+8>>2]|0;
             $$0$i$i$i = 0;
             while(1) {
              $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
              if ($exitcond$i$i$i) {
               break;
              }
              $687 = (($30) + ($$0$i$i$i<<2)|0);
              HEAP32[$687>>2] = 0;
              $688 = (($$0$i$i$i) + 1)|0;
              $$0$i$i$i = $688;
             }
             __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($28,$29);
             $689 = HEAP32[$635>>2]|0;
             $690 = ((($689)) + -24|0);
             __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($690,$28);
             __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($28);
             __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($29);
             __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($31);
             __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($30);
             break L313;
            }
           } while(0);
           __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($30);
           $$4449 = $$3448;$$4462 = $$3461;
          }
          $$13 = $$4449;$$13471 = $$4462;
          break L245;
         }
        } while(0);
        $796 = HEAP32[$635>>2]|0;
        $797 = ((($796)) + -24|0);
        $$sroa$0$0$$sroa_idx$i582 = ((($2)) + 12|0);
        $$sroa$0$0$copyload$i583600 = HEAP32[$$sroa$0$0$$sroa_idx$i582>>2]|0;
        HEAP32[$42>>2] = $$sroa$0$0$copyload$i583600;
        __THREW__ = 0;
        invoke_viii(101,($41|0),($797|0),($42|0));
        $798 = __THREW__; __THREW__ = 0;
        $799 = $798&1;
        do {
         if ($799) {
          $820 = ___cxa_find_matching_catch_2()|0;
          $821 = tempRet0;
          $$12457 = $820;$$12470 = $821;
         } else {
          $800 = ((($2)) + 20|0);
          $801 = HEAP32[$800>>2]|0;
          $802 = ((($2)) + 24|0);
          $803 = HEAP32[$802>>2]|0;
          $804 = ($801>>>0)<($803>>>0);
          if ($804) {
           $805 = ((($41)) + 12|0);
           HEAP32[$801>>2] = 0;
           $806 = ((($801)) + 4|0);
           HEAP32[$806>>2] = 0;
           $807 = ((($801)) + 8|0);
           $808 = HEAP32[$805>>2]|0;
           HEAP32[$807>>2] = 0;
           $809 = ((($801)) + 12|0);
           HEAP32[$809>>2] = $808;
           $810 = HEAP32[$41>>2]|0;
           HEAP32[$801>>2] = $810;
           $811 = ((($41)) + 4|0);
           $812 = HEAP32[$811>>2]|0;
           HEAP32[$806>>2] = $812;
           $813 = ((($41)) + 8|0);
           $814 = HEAP32[$813>>2]|0;
           $815 = ((($801)) + 8|0);
           HEAP32[$815>>2] = $814;
           HEAP32[$813>>2] = 0;
           HEAP32[$811>>2] = 0;
           HEAP32[$41>>2] = 0;
           $816 = HEAP32[$800>>2]|0;
           $817 = ((($816)) + 16|0);
           HEAP32[$800>>2] = $817;
          } else {
           __THREW__ = 0;
           invoke_vii(98,($58|0),($41|0));
           $818 = __THREW__; __THREW__ = 0;
           $819 = $818&1;
           if ($819) {
            $822 = ___cxa_find_matching_catch_2()|0;
            $823 = tempRet0;
            __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($41);
            $$12457 = $822;$$12470 = $823;
            break;
           }
          }
          __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($41);
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($26);
          $$5 = $633;
          break L1;
         }
        } while(0);
        $$13 = $$12457;$$13471 = $$12470;
       }
      } while(0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($26);
      $$16 = $$13;$$16474 = $$13471;
      break;
     }
     case 83:  {
      if ($152) {
       $824 = HEAP8[$151>>0]|0;
       $825 = ($824<<24>>24)==(116);
       if ($825) {
        $826 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
        $827 = ($826|0)==($0|0);
        if ($827) {
         $$5 = $0;
         break L1;
        }
        $828 = HEAP32[$2>>2]|0;
        $829 = ((($2)) + 4|0);
        $830 = HEAP32[$829>>2]|0;
        $831 = ($828|0)==($830|0);
        if ($831) {
         $$5 = $0;
         break L1;
        }
        $832 = ((($830)) + -24|0);
        $$sroa$0$0$$sroa_idx$i510 = ((($2)) + 12|0);
        $$sroa$0$0$copyload$i511599 = HEAP32[$$sroa$0$0$$sroa_idx$i510>>2]|0;
        HEAP32[$44>>2] = $$sroa$0$0$copyload$i511599;
        __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($43,$832,$44);
        $833 = ((($2)) + 20|0);
        $834 = HEAP32[$833>>2]|0;
        $835 = ((($2)) + 24|0);
        $836 = HEAP32[$835>>2]|0;
        $837 = ($834>>>0)<($836>>>0);
        if ($837) {
         $838 = ((($43)) + 12|0);
         HEAP32[$834>>2] = 0;
         $839 = ((($834)) + 4|0);
         HEAP32[$839>>2] = 0;
         $840 = ((($834)) + 8|0);
         $841 = HEAP32[$838>>2]|0;
         HEAP32[$840>>2] = 0;
         $842 = ((($834)) + 12|0);
         HEAP32[$842>>2] = $841;
         $843 = HEAP32[$43>>2]|0;
         HEAP32[$834>>2] = $843;
         $844 = ((($43)) + 4|0);
         $845 = HEAP32[$844>>2]|0;
         HEAP32[$839>>2] = $845;
         $846 = ((($43)) + 8|0);
         $847 = HEAP32[$846>>2]|0;
         $848 = ((($834)) + 8|0);
         HEAP32[$848>>2] = $847;
         HEAP32[$846>>2] = 0;
         HEAP32[$844>>2] = 0;
         HEAP32[$43>>2] = 0;
         $849 = HEAP32[$833>>2]|0;
         $850 = ((($849)) + 16|0);
         HEAP32[$833>>2] = $850;
        } else {
         __THREW__ = 0;
         invoke_vii(98,($58|0),($43|0));
         $851 = __THREW__; __THREW__ = 0;
         $852 = $851&1;
         if ($852) {
          $853 = ___cxa_find_matching_catch_2()|0;
          $854 = tempRet0;
          __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($43);
          $$16 = $853;$$16474 = $854;
          break L58;
         }
        }
        __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($43);
        $$5 = $826;
        break L1;
       }
      }
      $855 = (__ZN10__cxxabiv112_GLOBAL__N_118parse_substitutionINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
      $856 = ($855|0)==($0|0);
      if ($856) {
       $$5 = $0;
       break L1;
      }
      $857 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($855,$1,$2)|0);
      $858 = ($857|0)==($855|0);
      if ($858) {
       $$5 = $855;
       break L1;
      }
      $859 = ((($2)) + 4|0);
      $860 = HEAP32[$859>>2]|0;
      $861 = HEAP32[$2>>2]|0;
      $862 = (($860) - ($861))|0;
      $863 = (($862|0) / 24)&-1;
      $864 = ($863>>>0)<(2);
      if ($864) {
       $$5 = $855;
       break L1;
      }
      $865 = $860;
      $866 = ((($865)) + -24|0);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($45,$866);
      $867 = HEAP32[$859>>2]|0;
      $868 = ((($867)) + -24|0);
      $870 = $867;
      while(1) {
       $869 = ($870|0)==($868|0);
       if ($869) {
        break;
       }
       $871 = ((($870)) + -24|0);
       HEAP32[$859>>2] = $871;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($871);
       $$pre$i = HEAP32[$859>>2]|0;
       $870 = $$pre$i;
      }
      $872 = ((($867)) + -48|0);
      $873 = ((($45)) + 11|0);
      $874 = HEAP8[$873>>0]|0;
      $875 = ($874<<24>>24)<(0);
      $876 = HEAP32[$45>>2]|0;
      $877 = $875 ? $876 : $45;
      $878 = ((($45)) + 4|0);
      $879 = HEAP32[$878>>2]|0;
      $880 = $874&255;
      $881 = $875 ? $879 : $880;
      __THREW__ = 0;
      (invoke_iiii(88,($872|0),($877|0),($881|0))|0);
      $882 = __THREW__; __THREW__ = 0;
      $883 = $882&1;
      if ($883) {
       $908 = ___cxa_find_matching_catch_2()|0;
       $909 = tempRet0;
       $$15 = $908;$$15473 = $909;
      } else {
       $884 = HEAP32[$859>>2]|0;
       $885 = ((($884)) + -24|0);
       $$sroa$0$0$$sroa_idx$i492 = ((($2)) + 12|0);
       $$sroa$0$0$copyload$i493598 = HEAP32[$$sroa$0$0$$sroa_idx$i492>>2]|0;
       HEAP32[$47>>2] = $$sroa$0$0$copyload$i493598;
       __THREW__ = 0;
       invoke_viii(101,($46|0),($885|0),($47|0));
       $886 = __THREW__; __THREW__ = 0;
       $887 = $886&1;
       do {
        if ($887) {
         $910 = ___cxa_find_matching_catch_2()|0;
         $911 = tempRet0;
         $$14 = $910;$$14472 = $911;
        } else {
         $888 = ((($2)) + 20|0);
         $889 = HEAP32[$888>>2]|0;
         $890 = ((($2)) + 24|0);
         $891 = HEAP32[$890>>2]|0;
         $892 = ($889>>>0)<($891>>>0);
         if ($892) {
          $893 = ((($46)) + 12|0);
          HEAP32[$889>>2] = 0;
          $894 = ((($889)) + 4|0);
          HEAP32[$894>>2] = 0;
          $895 = ((($889)) + 8|0);
          $896 = HEAP32[$893>>2]|0;
          HEAP32[$895>>2] = 0;
          $897 = ((($889)) + 12|0);
          HEAP32[$897>>2] = $896;
          $898 = HEAP32[$46>>2]|0;
          HEAP32[$889>>2] = $898;
          $899 = ((($46)) + 4|0);
          $900 = HEAP32[$899>>2]|0;
          HEAP32[$894>>2] = $900;
          $901 = ((($46)) + 8|0);
          $902 = HEAP32[$901>>2]|0;
          $903 = ((($889)) + 8|0);
          HEAP32[$903>>2] = $902;
          HEAP32[$901>>2] = 0;
          HEAP32[$899>>2] = 0;
          HEAP32[$46>>2] = 0;
          $904 = HEAP32[$888>>2]|0;
          $905 = ((($904)) + 16|0);
          HEAP32[$888>>2] = $905;
         } else {
          __THREW__ = 0;
          invoke_vii(98,($58|0),($46|0));
          $906 = __THREW__; __THREW__ = 0;
          $907 = $906&1;
          if ($907) {
           $912 = ___cxa_find_matching_catch_2()|0;
           $913 = tempRet0;
           __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($46);
           $$14 = $912;$$14472 = $913;
           break;
          }
         }
         __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($46);
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($45);
         $$5 = $857;
         break L1;
        }
       } while(0);
       $$15 = $$14;$$15473 = $$14472;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($45);
      $$16 = $$15;$$16474 = $$15473;
      break;
     }
     case 68:  {
      if ($152) {
       $914 = HEAP8[$151>>0]|0;
       $915 = $914 << 24 >> 24;
       switch ($915|0) {
       case 112:  {
        $916 = ((($2)) + 4|0);
        $917 = HEAP32[$916>>2]|0;
        $918 = HEAP32[$2>>2]|0;
        $919 = (($917) - ($918))|0;
        $920 = (($919|0) / 24)&-1;
        $921 = ((($0)) + 2|0);
        $922 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($921,$1,$2)|0);
        $923 = HEAP32[$916>>2]|0;
        $924 = HEAP32[$2>>2]|0;
        $925 = (($923) - ($924))|0;
        $926 = (($925|0) / 24)&-1;
        $927 = ($922|0)==($921|0);
        if ($927) {
         label = 315;
         break L58;
        }
        $$sroa$0$0$$sroa_idx$i488 = ((($2)) + 12|0);
        $$sroa$0$0$copyload$i489597 = HEAP32[$$sroa$0$0$$sroa_idx$i488>>2]|0;
        HEAP32[$48>>2] = $$sroa$0$0$copyload$i489597;
        $928 = ((($2)) + 20|0);
        $929 = HEAP32[$928>>2]|0;
        $930 = ((($2)) + 24|0);
        $931 = HEAP32[$930>>2]|0;
        $932 = ($929>>>0)<($931>>>0);
        if ($932) {
         HEAP32[$929>>2] = 0;
         $933 = ((($929)) + 4|0);
         HEAP32[$933>>2] = 0;
         $934 = ((($929)) + 8|0);
         HEAP32[$934>>2] = 0;
         $935 = ((($929)) + 12|0);
         HEAP32[$935>>2] = $$sroa$0$0$copyload$i489597;
         $936 = HEAP32[$928>>2]|0;
         $937 = ((($936)) + 16|0);
         HEAP32[$928>>2] = $937;
        } else {
         __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE24__emplace_back_slow_pathIJS5_EEEvDpOT_($58,$48);
        }
        $$0 = $920;
        while(1) {
         $938 = ($$0>>>0)<($926>>>0);
         if (!($938)) {
          $$5 = $922;
          break L1;
         }
         $939 = HEAP32[$928>>2]|0;
         $940 = HEAP32[$2>>2]|0;
         $941 = (($940) + (($$0*24)|0)|0);
         $942 = ((($939)) + -12|0);
         $943 = HEAP32[$942>>2]|0;
         $944 = ((($939)) + -8|0);
         $945 = HEAP32[$944>>2]|0;
         $946 = ($943|0)==($945|0);
         if ($946) {
          $949 = ((($939)) + -16|0);
          __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIRKS3_EEvOT_($949,$941);
         } else {
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_($943,$941);
          $947 = HEAP32[$942>>2]|0;
          $948 = ((($947)) + 24|0);
          HEAP32[$942>>2] = $948;
         }
         $950 = (($$0) + 1)|0;
         $$0 = $950;
        }
        break;
       }
       case 84: case 116:  {
        $951 = (__ZN10__cxxabiv112_GLOBAL__N_114parse_decltypeINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
        $952 = ($951|0)==($0|0);
        if ($952) {
         label = 315;
         break L58;
        }
        $953 = HEAP32[$2>>2]|0;
        $954 = ((($2)) + 4|0);
        $955 = HEAP32[$954>>2]|0;
        $956 = ($953|0)==($955|0);
        if ($956) {
         $$5 = $0;
         break L1;
        }
        $957 = ((($955)) + -24|0);
        $$sroa$0$0$$sroa_idx$i486 = ((($2)) + 12|0);
        $$sroa$0$0$copyload$i487596 = HEAP32[$$sroa$0$0$$sroa_idx$i486>>2]|0;
        HEAP32[$50>>2] = $$sroa$0$0$copyload$i487596;
        __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($49,$957,$50);
        $958 = ((($2)) + 20|0);
        $959 = HEAP32[$958>>2]|0;
        $960 = ((($2)) + 24|0);
        $961 = HEAP32[$960>>2]|0;
        $962 = ($959>>>0)<($961>>>0);
        if ($962) {
         $963 = ((($49)) + 12|0);
         HEAP32[$959>>2] = 0;
         $964 = ((($959)) + 4|0);
         HEAP32[$964>>2] = 0;
         $965 = ((($959)) + 8|0);
         $966 = HEAP32[$963>>2]|0;
         HEAP32[$965>>2] = 0;
         $967 = ((($959)) + 12|0);
         HEAP32[$967>>2] = $966;
         $968 = HEAP32[$49>>2]|0;
         HEAP32[$959>>2] = $968;
         $969 = ((($49)) + 4|0);
         $970 = HEAP32[$969>>2]|0;
         HEAP32[$964>>2] = $970;
         $971 = ((($49)) + 8|0);
         $972 = HEAP32[$971>>2]|0;
         $973 = ((($959)) + 8|0);
         HEAP32[$973>>2] = $972;
         HEAP32[$971>>2] = 0;
         HEAP32[$969>>2] = 0;
         HEAP32[$49>>2] = 0;
         $974 = HEAP32[$958>>2]|0;
         $975 = ((($974)) + 16|0);
         HEAP32[$958>>2] = $975;
        } else {
         __THREW__ = 0;
         invoke_vii(98,($58|0),($49|0));
         $976 = __THREW__; __THREW__ = 0;
         $977 = $976&1;
         if ($977) {
          $978 = ___cxa_find_matching_catch_2()|0;
          $979 = tempRet0;
          __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($49);
          $$16 = $978;$$16474 = $979;
          break L58;
         }
        }
        __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($49);
        $$5 = $951;
        break L1;
        break;
       }
       case 118:  {
        $980 = (__ZN10__cxxabiv112_GLOBAL__N_117parse_vector_typeINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
        $981 = ($980|0)==($0|0);
        if ($981) {
         label = 315;
         break L58;
        }
        $982 = HEAP32[$2>>2]|0;
        $983 = ((($2)) + 4|0);
        $984 = HEAP32[$983>>2]|0;
        $985 = ($982|0)==($984|0);
        if ($985) {
         $$5 = $0;
         break L1;
        }
        $986 = ((($984)) + -24|0);
        $$sroa$0$0$$sroa_idx$i482 = ((($2)) + 12|0);
        $$sroa$0$0$copyload$i483595 = HEAP32[$$sroa$0$0$$sroa_idx$i482>>2]|0;
        HEAP32[$52>>2] = $$sroa$0$0$copyload$i483595;
        __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($51,$986,$52);
        $987 = ((($2)) + 20|0);
        $988 = HEAP32[$987>>2]|0;
        $989 = ((($2)) + 24|0);
        $990 = HEAP32[$989>>2]|0;
        $991 = ($988>>>0)<($990>>>0);
        if ($991) {
         $992 = ((($51)) + 12|0);
         HEAP32[$988>>2] = 0;
         $993 = ((($988)) + 4|0);
         HEAP32[$993>>2] = 0;
         $994 = ((($988)) + 8|0);
         $995 = HEAP32[$992>>2]|0;
         HEAP32[$994>>2] = 0;
         $996 = ((($988)) + 12|0);
         HEAP32[$996>>2] = $995;
         $997 = HEAP32[$51>>2]|0;
         HEAP32[$988>>2] = $997;
         $998 = ((($51)) + 4|0);
         $999 = HEAP32[$998>>2]|0;
         HEAP32[$993>>2] = $999;
         $1000 = ((($51)) + 8|0);
         $1001 = HEAP32[$1000>>2]|0;
         $1002 = ((($988)) + 8|0);
         HEAP32[$1002>>2] = $1001;
         HEAP32[$1000>>2] = 0;
         HEAP32[$998>>2] = 0;
         HEAP32[$51>>2] = 0;
         $1003 = HEAP32[$987>>2]|0;
         $1004 = ((($1003)) + 16|0);
         HEAP32[$987>>2] = $1004;
        } else {
         __THREW__ = 0;
         invoke_vii(98,($58|0),($51|0));
         $1005 = __THREW__; __THREW__ = 0;
         $1006 = $1005&1;
         if ($1006) {
          $1007 = ___cxa_find_matching_catch_2()|0;
          $1008 = tempRet0;
          __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($51);
          $$16 = $1007;$$16474 = $1008;
          break L58;
         }
        }
        __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($51);
        $$5 = $980;
        break L1;
        break;
       }
       default: {
        label = 315;
        break L58;
       }
       }
      } else {
       label = 315;
      }
      break;
     }
     default: {
      label = 315;
     }
     }
    } while(0);
    do {
     if ((label|0) == 315) {
      $1009 = (__ZN10__cxxabiv112_GLOBAL__N_118parse_builtin_typeINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
      $1010 = ($1009|0)==($0|0);
      if (!($1010)) {
       $$5 = $1009;
       break L1;
      }
      $1011 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
      $1012 = ($1011|0)==($0|0);
      if ($1012) {
       $$5 = $0;
       break L1;
      }
      $1013 = HEAP32[$2>>2]|0;
      $1014 = ((($2)) + 4|0);
      $1015 = HEAP32[$1014>>2]|0;
      $1016 = ($1013|0)==($1015|0);
      if ($1016) {
       $$5 = $0;
       break L1;
      }
      $1017 = ((($1015)) + -24|0);
      $$sroa$0$0$$sroa_idx$i = ((($2)) + 12|0);
      $$sroa$0$0$copyload$i594 = HEAP32[$$sroa$0$0$$sroa_idx$i>>2]|0;
      HEAP32[$54>>2] = $$sroa$0$0$copyload$i594;
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($53,$1017,$54);
      $1018 = ((($2)) + 20|0);
      $1019 = HEAP32[$1018>>2]|0;
      $1020 = ((($2)) + 24|0);
      $1021 = HEAP32[$1020>>2]|0;
      $1022 = ($1019>>>0)<($1021>>>0);
      if ($1022) {
       $1023 = ((($53)) + 12|0);
       HEAP32[$1019>>2] = 0;
       $1024 = ((($1019)) + 4|0);
       HEAP32[$1024>>2] = 0;
       $1025 = ((($1019)) + 8|0);
       $1026 = HEAP32[$1023>>2]|0;
       HEAP32[$1025>>2] = 0;
       $1027 = ((($1019)) + 12|0);
       HEAP32[$1027>>2] = $1026;
       $1028 = HEAP32[$53>>2]|0;
       HEAP32[$1019>>2] = $1028;
       $1029 = ((($53)) + 4|0);
       $1030 = HEAP32[$1029>>2]|0;
       HEAP32[$1024>>2] = $1030;
       $1031 = ((($53)) + 8|0);
       $1032 = HEAP32[$1031>>2]|0;
       $1033 = ((($1019)) + 8|0);
       HEAP32[$1033>>2] = $1032;
       HEAP32[$1031>>2] = 0;
       HEAP32[$1029>>2] = 0;
       HEAP32[$53>>2] = 0;
       $1034 = HEAP32[$1018>>2]|0;
       $1035 = ((($1034)) + 16|0);
       HEAP32[$1018>>2] = $1035;
      } else {
       __THREW__ = 0;
       invoke_vii(98,($58|0),($53|0));
       $1036 = __THREW__; __THREW__ = 0;
       $1037 = $1036&1;
       if ($1037) {
        $1038 = ___cxa_find_matching_catch_2()|0;
        $1039 = tempRet0;
        __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($53);
        $$16 = $1038;$$16474 = $1039;
        break;
       }
      }
      __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($53);
      $$5 = $1011;
      break L1;
     }
    } while(0);
    ___resumeException($$16|0);
    // unreachable;
   } else {
    $$5 = $147;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$5|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_119parse_cv_qualifiersEPKcS2_Rj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$1 = 0, $$2 = 0, $$pre = 0, $$pre13 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAP32[$2>>2] = 0;
 $3 = ($0|0)==($1|0);
 if ($3) {
  $$2 = $0;
 } else {
  $4 = HEAP8[$0>>0]|0;
  $5 = ($4<<24>>24)==(114);
  if ($5) {
   HEAP32[$2>>2] = 4;
   $6 = ((($0)) + 1|0);
   $$pre = HEAP8[$6>>0]|0;
   $$0 = $6;$10 = 4;$8 = $$pre;
  } else {
   $$0 = $0;$10 = 0;$8 = $4;
  }
  $7 = ($8<<24>>24)==(86);
  if ($7) {
   $9 = $10 | 2;
   HEAP32[$2>>2] = $9;
   $11 = ((($$0)) + 1|0);
   $$pre13 = HEAP8[$11>>0]|0;
   $$1 = $11;$13 = $$pre13;$15 = $9;
  } else {
   $$1 = $$0;$13 = $8;$15 = $10;
  }
  $12 = ($13<<24>>24)==(75);
  if ($12) {
   $14 = $15 | 1;
   HEAP32[$2>>2] = $14;
   $16 = ((($$1)) + 1|0);
   $$2 = $16;
  } else {
   $$2 = $$1;
  }
 }
 return ($$2|0);
}
function __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE24__emplace_back_slow_pathIJS5_EEEvDpOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sroa$speculated$$i = 0, $$sroa$speculated$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 $3 = ((($0)) + 12|0);
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$0>>2]|0;
 $7 = (($5) - ($6))|0;
 $8 = $7 >> 4;
 $9 = (($8) + 1)|0;
 $10 = (__ZNKSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE8max_sizeEv($0)|0);
 $11 = ($10>>>0)<($9>>>0);
 if ($11) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
 }
 $12 = ((($0)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[$0>>2]|0;
 $15 = (($13) - ($14))|0;
 $16 = $15 >> 4;
 $17 = $10 >>> 1;
 $18 = ($16>>>0)<($17>>>0);
 $19 = $15 >> 3;
 $20 = ($19>>>0)<($9>>>0);
 $$sroa$speculated$i = $20 ? $9 : $19;
 $$sroa$speculated$$i = $18 ? $$sroa$speculated$i : $10;
 $21 = HEAP32[$4>>2]|0;
 $22 = (($21) - ($14))|0;
 $23 = $22 >> 4;
 __ZNSt3__214__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($2,$$sroa$speculated$$i,$23,$3);
 $24 = ((($2)) + 8|0);
 $25 = HEAP32[$24>>2]|0;
 HEAP32[$25>>2] = 0;
 $26 = ((($25)) + 4|0);
 HEAP32[$26>>2] = 0;
 $27 = ((($25)) + 8|0);
 $28 = HEAP32[$1>>2]|0;
 HEAP32[$27>>2] = 0;
 $29 = ((($25)) + 12|0);
 HEAP32[$29>>2] = $28;
 $30 = ((($25)) + 16|0);
 HEAP32[$24>>2] = $30;
 __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($0,$2);
 __ZNSt3__214__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($2);
 STACKTOP = sp;return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (__ZNSt3__211char_traitsIcE6lengthEPKc($2)|0);
 $4 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($0,$1,$2,$3)|0);
 return ($4|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__211char_traitsIcE6lengthEPKc($1)|0);
 $3 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($0,$1,$2)|0);
 return ($3|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($0,$1);
 $2 = ((($0)) + 12|0);
 $3 = ((($1)) + 12|0);
 __THREW__ = 0;
 invoke_vii(106,($2|0),($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch_2()|0;
  $7 = tempRet0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
  ___resumeException($6|0);
  // unreachable;
 } else {
  return;
 }
}
function __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIRKS3_EEvOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sroa$speculated$$i = 0, $$sroa$speculated$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 $3 = ((($0)) + 12|0);
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$0>>2]|0;
 $7 = (($5) - ($6))|0;
 $8 = (($7|0) / 24)&-1;
 $9 = (($8) + 1)|0;
 $10 = (__ZNKSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE8max_sizeEv($0)|0);
 $11 = ($10>>>0)<($9>>>0);
 if ($11) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
 }
 $12 = ((($0)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[$0>>2]|0;
 $15 = (($13) - ($14))|0;
 $16 = (($15|0) / 24)&-1;
 $17 = $10 >>> 1;
 $18 = ($16>>>0)<($17>>>0);
 $19 = $16 << 1;
 $20 = ($19>>>0)<($9>>>0);
 $$sroa$speculated$i = $20 ? $9 : $19;
 $$sroa$speculated$$i = $18 ? $$sroa$speculated$i : $10;
 $21 = HEAP32[$4>>2]|0;
 $22 = (($21) - ($14))|0;
 $23 = (($22|0) / 24)&-1;
 __ZNSt3__214__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($2,$$sroa$speculated$$i,$23,$3);
 $24 = ((($2)) + 8|0);
 $25 = HEAP32[$24>>2]|0;
 __THREW__ = 0;
 invoke_vii(107,($25|0),($1|0));
 $26 = __THREW__; __THREW__ = 0;
 $27 = $26&1;
 if ($27) {
  $29 = ___cxa_find_matching_catch_2()|0;
  $30 = tempRet0;
  __ZNSt3__214__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($2);
  ___resumeException($29|0);
  // unreachable;
 } else {
  $28 = ((($25)) + 24|0);
  HEAP32[$24>>2] = $28;
  __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($0,$2);
  __ZNSt3__214__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($2);
  STACKTOP = sp;return;
 }
}
function __ZN10__cxxabiv112_GLOBAL__N_118parse_builtin_typeINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$073 = 0, $$074 = 0, $$1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
 var $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0;
 var $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 704|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(704|0);
 $3 = sp + 672|0;
 $4 = sp + 648|0;
 $5 = sp + 624|0;
 $6 = sp + 600|0;
 $7 = sp + 576|0;
 $8 = sp + 552|0;
 $9 = sp + 528|0;
 $10 = sp + 504|0;
 $11 = sp + 480|0;
 $12 = sp + 456|0;
 $13 = sp + 432|0;
 $14 = sp + 408|0;
 $15 = sp + 384|0;
 $16 = sp + 360|0;
 $17 = sp + 336|0;
 $18 = sp + 312|0;
 $19 = sp + 288|0;
 $20 = sp + 264|0;
 $21 = sp + 240|0;
 $22 = sp + 216|0;
 $23 = sp + 192|0;
 $24 = sp + 168|0;
 $25 = sp + 144|0;
 $26 = sp + 120|0;
 $27 = sp + 96|0;
 $28 = sp + 72|0;
 $29 = sp + 48|0;
 $30 = sp + 24|0;
 $31 = sp;
 $32 = ($0|0)==($1|0);
 L1: do {
  if ($32) {
   $$1 = $0;
  } else {
   $33 = HEAP8[$0>>0]|0;
   $34 = $33 << 24 >> 24;
   $35 = ((($0)) + 1|0);
   L3: do {
    switch ($34|0) {
    case 118:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj5EEERAT__Kc($3,9005);
     $36 = ((($2)) + 4|0);
     $37 = HEAP32[$36>>2]|0;
     $38 = ((($2)) + 8|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = ($37>>>0)<($39>>>0);
     if ($40) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($37,$3);
      $41 = HEAP32[$36>>2]|0;
      $42 = ((($41)) + 24|0);
      HEAP32[$36>>2] = $42;
     } else {
      __THREW__ = 0;
      invoke_vii(105,($2|0),($3|0));
      $43 = __THREW__; __THREW__ = 0;
      $44 = $43&1;
      if ($44) {
       $45 = ___cxa_find_matching_catch_2()|0;
       $46 = tempRet0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
       $$073 = $46;$$074 = $45;
       break L3;
      }
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
     $$1 = $35;
     break L1;
     break;
    }
    case 119:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj8EEERAT__Kc($4);
     $47 = ((($2)) + 4|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ((($2)) + 8|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = ($48>>>0)<($50>>>0);
     if ($51) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($48,$4);
      $52 = HEAP32[$47>>2]|0;
      $53 = ((($52)) + 24|0);
      HEAP32[$47>>2] = $53;
     } else {
      __THREW__ = 0;
      invoke_vii(105,($2|0),($4|0));
      $54 = __THREW__; __THREW__ = 0;
      $55 = $54&1;
      if ($55) {
       $56 = ___cxa_find_matching_catch_2()|0;
       $57 = tempRet0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
       $$073 = $57;$$074 = $56;
       break L3;
      }
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
     $$1 = $35;
     break L1;
     break;
    }
    case 98:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj5EEERAT__Kc($5,9010);
     $58 = ((($2)) + 4|0);
     $59 = HEAP32[$58>>2]|0;
     $60 = ((($2)) + 8|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = ($59>>>0)<($61>>>0);
     if ($62) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($59,$5);
      $63 = HEAP32[$58>>2]|0;
      $64 = ((($63)) + 24|0);
      HEAP32[$58>>2] = $64;
     } else {
      __THREW__ = 0;
      invoke_vii(105,($2|0),($5|0));
      $65 = __THREW__; __THREW__ = 0;
      $66 = $65&1;
      if ($66) {
       $67 = ___cxa_find_matching_catch_2()|0;
       $68 = tempRet0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
       $$073 = $68;$$074 = $67;
       break L3;
      }
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
     $$1 = $35;
     break L1;
     break;
    }
    case 99:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj5EEERAT__Kc($6,8779);
     $69 = ((($2)) + 4|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ((($2)) + 8|0);
     $72 = HEAP32[$71>>2]|0;
     $73 = ($70>>>0)<($72>>>0);
     if ($73) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($70,$6);
      $74 = HEAP32[$69>>2]|0;
      $75 = ((($74)) + 24|0);
      HEAP32[$69>>2] = $75;
     } else {
      __THREW__ = 0;
      invoke_vii(105,($2|0),($6|0));
      $76 = __THREW__; __THREW__ = 0;
      $77 = $76&1;
      if ($77) {
       $78 = ___cxa_find_matching_catch_2()|0;
       $79 = tempRet0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($6);
       $$073 = $79;$$074 = $78;
       break L3;
      }
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($6);
     $$1 = $35;
     break L1;
     break;
    }
    case 97:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj12EEERAT__Kc($7,8784);
     $80 = ((($2)) + 4|0);
     $81 = HEAP32[$80>>2]|0;
     $82 = ((($2)) + 8|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ($81>>>0)<($83>>>0);
     if ($84) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($81,$7);
      $85 = HEAP32[$80>>2]|0;
      $86 = ((($85)) + 24|0);
      HEAP32[$80>>2] = $86;
     } else {
      __THREW__ = 0;
      invoke_vii(105,($2|0),($7|0));
      $87 = __THREW__; __THREW__ = 0;
      $88 = $87&1;
      if ($88) {
       $89 = ___cxa_find_matching_catch_2()|0;
       $90 = tempRet0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($7);
       $$073 = $90;$$074 = $89;
       break L3;
      }
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($7);
     $$1 = $35;
     break L1;
     break;
    }
    case 104:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj14EEERAT__Kc($8,8796);
     $91 = ((($2)) + 4|0);
     $92 = HEAP32[$91>>2]|0;
     $93 = ((($2)) + 8|0);
     $94 = HEAP32[$93>>2]|0;
     $95 = ($92>>>0)<($94>>>0);
     if ($95) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($92,$8);
      $96 = HEAP32[$91>>2]|0;
      $97 = ((($96)) + 24|0);
      HEAP32[$91>>2] = $97;
     } else {
      __THREW__ = 0;
      invoke_vii(105,($2|0),($8|0));
      $98 = __THREW__; __THREW__ = 0;
      $99 = $98&1;
      if ($99) {
       $100 = ___cxa_find_matching_catch_2()|0;
       $101 = tempRet0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($8);
       $$073 = $101;$$074 = $100;
       break L3;
      }
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($8);
     $$1 = $35;
     break L1;
     break;
    }
    case 115:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj6EEERAT__Kc($9,8810);
     $102 = ((($2)) + 4|0);
     $103 = HEAP32[$102>>2]|0;
     $104 = ((($2)) + 8|0);
     $105 = HEAP32[$104>>2]|0;
     $106 = ($103>>>0)<($105>>>0);
     if ($106) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($103,$9);
      $107 = HEAP32[$102>>2]|0;
      $108 = ((($107)) + 24|0);
      HEAP32[$102>>2] = $108;
     } else {
      __THREW__ = 0;
      invoke_vii(105,($2|0),($9|0));
      $109 = __THREW__; __THREW__ = 0;
      $110 = $109&1;
      if ($110) {
       $111 = ___cxa_find_matching_catch_2()|0;
       $112 = tempRet0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($9);
       $$073 = $112;$$074 = $111;
       break L3;
      }
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($9);
     $$1 = $35;
     break L1;
     break;
    }
    case 116:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj15EEERAT__Kc($10,8816);
     $113 = ((($2)) + 4|0);
     $114 = HEAP32[$113>>2]|0;
     $115 = ((($2)) + 8|0);
     $116 = HEAP32[$115>>2]|0;
     $117 = ($114>>>0)<($116>>>0);
     if ($117) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($114,$10);
      $118 = HEAP32[$113>>2]|0;
      $119 = ((($118)) + 24|0);
      HEAP32[$113>>2] = $119;
     } else {
      __THREW__ = 0;
      invoke_vii(105,($2|0),($10|0));
      $120 = __THREW__; __THREW__ = 0;
      $121 = $120&1;
      if ($121) {
       $122 = ___cxa_find_matching_catch_2()|0;
       $123 = tempRet0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($10);
       $$073 = $123;$$074 = $122;
       break L3;
      }
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($10);
     $$1 = $35;
     break L1;
     break;
    }
    case 105:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj4EEERAT__Kc($11,9015);
     $124 = ((($2)) + 4|0);
     $125 = HEAP32[$124>>2]|0;
     $126 = ((($2)) + 8|0);
     $127 = HEAP32[$126>>2]|0;
     $128 = ($125>>>0)<($127>>>0);
     if ($128) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($125,$11);
      $129 = HEAP32[$124>>2]|0;
      $130 = ((($129)) + 24|0);
      HEAP32[$124>>2] = $130;
     } else {
      __THREW__ = 0;
      invoke_vii(105,($2|0),($11|0));
      $131 = __THREW__; __THREW__ = 0;
      $132 = $131&1;
      if ($132) {
       $133 = ___cxa_find_matching_catch_2()|0;
       $134 = tempRet0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($11);
       $$073 = $134;$$074 = $133;
       break L3;
      }
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($11);
     $$1 = $35;
     break L1;
     break;
    }
    case 106:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj13EEERAT__Kc($12,9019);
     $135 = ((($2)) + 4|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = ((($2)) + 8|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = ($136>>>0)<($138>>>0);
     if ($139) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($136,$12);
      $140 = HEAP32[$135>>2]|0;
      $141 = ((($140)) + 24|0);
      HEAP32[$135>>2] = $141;
     } else {
      __THREW__ = 0;
      invoke_vii(105,($2|0),($12|0));
      $142 = __THREW__; __THREW__ = 0;
      $143 = $142&1;
      if ($143) {
       $144 = ___cxa_find_matching_catch_2()|0;
       $145 = tempRet0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($12);
       $$073 = $145;$$074 = $144;
       break L3;
      }
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($12);
     $$1 = $35;
     break L1;
     break;
    }
    case 108:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj5EEERAT__Kc($13,9032);
     $146 = ((($2)) + 4|0);
     $147 = HEAP32[$146>>2]|0;
     $148 = ((($2)) + 8|0);
     $149 = HEAP32[$148>>2]|0;
     $150 = ($147>>>0)<($149>>>0);
     if ($150) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($147,$13);
      $151 = HEAP32[$146>>2]|0;
      $152 = ((($151)) + 24|0);
      HEAP32[$146>>2] = $152;
     } else {
      __THREW__ = 0;
      invoke_vii(105,($2|0),($13|0));
      $153 = __THREW__; __THREW__ = 0;
      $154 = $153&1;
      if ($154) {
       $155 = ___cxa_find_matching_catch_2()|0;
       $156 = tempRet0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($13);
       $$073 = $156;$$074 = $155;
       break L3;
      }
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($13);
     $$1 = $35;
     break L1;
     break;
    }
    case 109:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj14EEERAT__Kc($14,9037);
     $157 = ((($2)) + 4|0);
     $158 = HEAP32[$157>>2]|0;
     $159 = ((($2)) + 8|0);
     $160 = HEAP32[$159>>2]|0;
     $161 = ($158>>>0)<($160>>>0);
     if ($161) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($158,$14);
      $162 = HEAP32[$157>>2]|0;
      $163 = ((($162)) + 24|0);
      HEAP32[$157>>2] = $163;
     } else {
      __THREW__ = 0;
      invoke_vii(105,($2|0),($14|0));
      $164 = __THREW__; __THREW__ = 0;
      $165 = $164&1;
      if ($165) {
       $166 = ___cxa_find_matching_catch_2()|0;
       $167 = tempRet0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($14);
       $$073 = $167;$$074 = $166;
       break L3;
      }
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($14);
     $$1 = $35;
     break L1;
     break;
    }
    case 120:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($15,9051);
     $168 = ((($2)) + 4|0);
     $169 = HEAP32[$168>>2]|0;
     $170 = ((($2)) + 8|0);
     $171 = HEAP32[$170>>2]|0;
     $172 = ($169>>>0)<($171>>>0);
     if ($172) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($169,$15);
      $173 = HEAP32[$168>>2]|0;
      $174 = ((($173)) + 24|0);
      HEAP32[$168>>2] = $174;
     } else {
      __THREW__ = 0;
      invoke_vii(105,($2|0),($15|0));
      $175 = __THREW__; __THREW__ = 0;
      $176 = $175&1;
      if ($176) {
       $177 = ___cxa_find_matching_catch_2()|0;
       $178 = tempRet0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($15);
       $$073 = $178;$$074 = $177;
       break L3;
      }
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($15);
     $$1 = $35;
     break L1;
     break;
    }
    case 121:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj19EEERAT__Kc($16);
     $179 = ((($2)) + 4|0);
     $180 = HEAP32[$179>>2]|0;
     $181 = ((($2)) + 8|0);
     $182 = HEAP32[$181>>2]|0;
     $183 = ($180>>>0)<($182>>>0);
     if ($183) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($180,$16);
      $184 = HEAP32[$179>>2]|0;
      $185 = ((($184)) + 24|0);
      HEAP32[$179>>2] = $185;
     } else {
      __THREW__ = 0;
      invoke_vii(105,($2|0),($16|0));
      $186 = __THREW__; __THREW__ = 0;
      $187 = $186&1;
      if ($187) {
       $188 = ___cxa_find_matching_catch_2()|0;
       $189 = tempRet0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($16);
       $$073 = $189;$$074 = $188;
       break L3;
      }
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($16);
     $$1 = $35;
     break L1;
     break;
    }
    case 110:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj9EEERAT__Kc($17,8845);
     $190 = ((($2)) + 4|0);
     $191 = HEAP32[$190>>2]|0;
     $192 = ((($2)) + 8|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = ($191>>>0)<($193>>>0);
     if ($194) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($191,$17);
      $195 = HEAP32[$190>>2]|0;
      $196 = ((($195)) + 24|0);
      HEAP32[$190>>2] = $196;
     } else {
      __THREW__ = 0;
      invoke_vii(105,($2|0),($17|0));
      $197 = __THREW__; __THREW__ = 0;
      $198 = $197&1;
      if ($198) {
       $199 = ___cxa_find_matching_catch_2()|0;
       $200 = tempRet0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($17);
       $$073 = $200;$$074 = $199;
       break L3;
      }
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($17);
     $$1 = $35;
     break L1;
     break;
    }
    case 111:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj18EEERAT__Kc($18,8854);
     $201 = ((($2)) + 4|0);
     $202 = HEAP32[$201>>2]|0;
     $203 = ((($2)) + 8|0);
     $204 = HEAP32[$203>>2]|0;
     $205 = ($202>>>0)<($204>>>0);
     if ($205) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($202,$18);
      $206 = HEAP32[$201>>2]|0;
      $207 = ((($206)) + 24|0);
      HEAP32[$201>>2] = $207;
     } else {
      __THREW__ = 0;
      invoke_vii(105,($2|0),($18|0));
      $208 = __THREW__; __THREW__ = 0;
      $209 = $208&1;
      if ($209) {
       $210 = ___cxa_find_matching_catch_2()|0;
       $211 = tempRet0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($18);
       $$073 = $211;$$074 = $210;
       break L3;
      }
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($18);
     $$1 = $35;
     break L1;
     break;
    }
    case 102:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj6EEERAT__Kc($19,9061);
     $212 = ((($2)) + 4|0);
     $213 = HEAP32[$212>>2]|0;
     $214 = ((($2)) + 8|0);
     $215 = HEAP32[$214>>2]|0;
     $216 = ($213>>>0)<($215>>>0);
     if ($216) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($213,$19);
      $217 = HEAP32[$212>>2]|0;
      $218 = ((($217)) + 24|0);
      HEAP32[$212>>2] = $218;
     } else {
      __THREW__ = 0;
      invoke_vii(105,($2|0),($19|0));
      $219 = __THREW__; __THREW__ = 0;
      $220 = $219&1;
      if ($220) {
       $221 = ___cxa_find_matching_catch_2()|0;
       $222 = tempRet0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($19);
       $$073 = $222;$$074 = $221;
       break L3;
      }
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($19);
     $$1 = $35;
     break L1;
     break;
    }
    case 100:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj7EEERAT__Kc($20);
     $223 = ((($2)) + 4|0);
     $224 = HEAP32[$223>>2]|0;
     $225 = ((($2)) + 8|0);
     $226 = HEAP32[$225>>2]|0;
     $227 = ($224>>>0)<($226>>>0);
     if ($227) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($224,$20);
      $228 = HEAP32[$223>>2]|0;
      $229 = ((($228)) + 24|0);
      HEAP32[$223>>2] = $229;
     } else {
      __THREW__ = 0;
      invoke_vii(105,($2|0),($20|0));
      $230 = __THREW__; __THREW__ = 0;
      $231 = $230&1;
      if ($231) {
       $232 = ___cxa_find_matching_catch_2()|0;
       $233 = tempRet0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($20);
       $$073 = $233;$$074 = $232;
       break L3;
      }
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($20);
     $$1 = $35;
     break L1;
     break;
    }
    case 101:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj12EEERAT__Kc($21,9067);
     $234 = ((($2)) + 4|0);
     $235 = HEAP32[$234>>2]|0;
     $236 = ((($2)) + 8|0);
     $237 = HEAP32[$236>>2]|0;
     $238 = ($235>>>0)<($237>>>0);
     if ($238) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($235,$21);
      $239 = HEAP32[$234>>2]|0;
      $240 = ((($239)) + 24|0);
      HEAP32[$234>>2] = $240;
     } else {
      __THREW__ = 0;
      invoke_vii(105,($2|0),($21|0));
      $241 = __THREW__; __THREW__ = 0;
      $242 = $241&1;
      if ($242) {
       $243 = ___cxa_find_matching_catch_2()|0;
       $244 = tempRet0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($21);
       $$073 = $244;$$074 = $243;
       break L3;
      }
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($21);
     $$1 = $35;
     break L1;
     break;
    }
    case 103:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($22,9079);
     $245 = ((($2)) + 4|0);
     $246 = HEAP32[$245>>2]|0;
     $247 = ((($2)) + 8|0);
     $248 = HEAP32[$247>>2]|0;
     $249 = ($246>>>0)<($248>>>0);
     if ($249) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($246,$22);
      $250 = HEAP32[$245>>2]|0;
      $251 = ((($250)) + 24|0);
      HEAP32[$245>>2] = $251;
     } else {
      __THREW__ = 0;
      invoke_vii(105,($2|0),($22|0));
      $252 = __THREW__; __THREW__ = 0;
      $253 = $252&1;
      if ($253) {
       $254 = ___cxa_find_matching_catch_2()|0;
       $255 = tempRet0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($22);
       $$073 = $255;$$074 = $254;
       break L3;
      }
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($22);
     $$1 = $35;
     break L1;
     break;
    }
    case 122:  {
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj4EEERAT__Kc($23,9090);
     $256 = ((($2)) + 4|0);
     $257 = HEAP32[$256>>2]|0;
     $258 = ((($2)) + 8|0);
     $259 = HEAP32[$258>>2]|0;
     $260 = ($257>>>0)<($259>>>0);
     if ($260) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($257,$23);
      $261 = HEAP32[$256>>2]|0;
      $262 = ((($261)) + 24|0);
      HEAP32[$256>>2] = $262;
     } else {
      __THREW__ = 0;
      invoke_vii(105,($2|0),($23|0));
      $263 = __THREW__; __THREW__ = 0;
      $264 = $263&1;
      if ($264) {
       $265 = ___cxa_find_matching_catch_2()|0;
       $266 = tempRet0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($23);
       $$073 = $266;$$074 = $265;
       break L3;
      }
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($23);
     $$1 = $35;
     break L1;
     break;
    }
    case 117:  {
     $267 = (__ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($35,$1,$2)|0);
     $268 = ($267|0)==($35|0);
     $$ = $268 ? $0 : $267;
     $$1 = $$;
     break L1;
     break;
    }
    case 68:  {
     $269 = ($35|0)==($1|0);
     if ($269) {
      $$1 = $0;
      break L1;
     }
     $270 = HEAP8[$35>>0]|0;
     $271 = $270 << 24 >> 24;
     $272 = ((($0)) + 2|0);
     switch ($271|0) {
     case 100:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($24,9094);
      $273 = ((($2)) + 4|0);
      $274 = HEAP32[$273>>2]|0;
      $275 = ((($2)) + 8|0);
      $276 = HEAP32[$275>>2]|0;
      $277 = ($274>>>0)<($276>>>0);
      if ($277) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($274,$24);
       $278 = HEAP32[$273>>2]|0;
       $279 = ((($278)) + 24|0);
       HEAP32[$273>>2] = $279;
      } else {
       __THREW__ = 0;
       invoke_vii(105,($2|0),($24|0));
       $280 = __THREW__; __THREW__ = 0;
       $281 = $280&1;
       if ($281) {
        $282 = ___cxa_find_matching_catch_2()|0;
        $283 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($24);
        $$073 = $283;$$074 = $282;
        break L3;
       }
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($24);
      $$1 = $272;
      break L1;
      break;
     }
     case 101:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($25,9104);
      $284 = ((($2)) + 4|0);
      $285 = HEAP32[$284>>2]|0;
      $286 = ((($2)) + 8|0);
      $287 = HEAP32[$286>>2]|0;
      $288 = ($285>>>0)<($287>>>0);
      if ($288) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($285,$25);
       $289 = HEAP32[$284>>2]|0;
       $290 = ((($289)) + 24|0);
       HEAP32[$284>>2] = $290;
      } else {
       __THREW__ = 0;
       invoke_vii(105,($2|0),($25|0));
       $291 = __THREW__; __THREW__ = 0;
       $292 = $291&1;
       if ($292) {
        $293 = ___cxa_find_matching_catch_2()|0;
        $294 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($25);
        $$073 = $294;$$074 = $293;
        break L3;
       }
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($25);
      $$1 = $272;
      break L1;
      break;
     }
     case 102:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($26,9115);
      $295 = ((($2)) + 4|0);
      $296 = HEAP32[$295>>2]|0;
      $297 = ((($2)) + 8|0);
      $298 = HEAP32[$297>>2]|0;
      $299 = ($296>>>0)<($298>>>0);
      if ($299) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($296,$26);
       $300 = HEAP32[$295>>2]|0;
       $301 = ((($300)) + 24|0);
       HEAP32[$295>>2] = $301;
      } else {
       __THREW__ = 0;
       invoke_vii(105,($2|0),($26|0));
       $302 = __THREW__; __THREW__ = 0;
       $303 = $302&1;
       if ($303) {
        $304 = ___cxa_find_matching_catch_2()|0;
        $305 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($26);
        $$073 = $305;$$074 = $304;
        break L3;
       }
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($26);
      $$1 = $272;
      break L1;
      break;
     }
     case 104:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($27,9125);
      $306 = ((($2)) + 4|0);
      $307 = HEAP32[$306>>2]|0;
      $308 = ((($2)) + 8|0);
      $309 = HEAP32[$308>>2]|0;
      $310 = ($307>>>0)<($309>>>0);
      if ($310) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($307,$27);
       $311 = HEAP32[$306>>2]|0;
       $312 = ((($311)) + 24|0);
       HEAP32[$306>>2] = $312;
      } else {
       __THREW__ = 0;
       invoke_vii(105,($2|0),($27|0));
       $313 = __THREW__; __THREW__ = 0;
       $314 = $313&1;
       if ($314) {
        $315 = ___cxa_find_matching_catch_2()|0;
        $316 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($27);
        $$073 = $316;$$074 = $315;
        break L3;
       }
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($27);
      $$1 = $272;
      break L1;
      break;
     }
     case 105:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj9EEERAT__Kc($28,9135);
      $317 = ((($2)) + 4|0);
      $318 = HEAP32[$317>>2]|0;
      $319 = ((($2)) + 8|0);
      $320 = HEAP32[$319>>2]|0;
      $321 = ($318>>>0)<($320>>>0);
      if ($321) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($318,$28);
       $322 = HEAP32[$317>>2]|0;
       $323 = ((($322)) + 24|0);
       HEAP32[$317>>2] = $323;
      } else {
       __THREW__ = 0;
       invoke_vii(105,($2|0),($28|0));
       $324 = __THREW__; __THREW__ = 0;
       $325 = $324&1;
       if ($325) {
        $326 = ___cxa_find_matching_catch_2()|0;
        $327 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($28);
        $$073 = $327;$$074 = $326;
        break L3;
       }
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($28);
      $$1 = $272;
      break L1;
      break;
     }
     case 115:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj9EEERAT__Kc($29,9144);
      $328 = ((($2)) + 4|0);
      $329 = HEAP32[$328>>2]|0;
      $330 = ((($2)) + 8|0);
      $331 = HEAP32[$330>>2]|0;
      $332 = ($329>>>0)<($331>>>0);
      if ($332) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($329,$29);
       $333 = HEAP32[$328>>2]|0;
       $334 = ((($333)) + 24|0);
       HEAP32[$328>>2] = $334;
      } else {
       __THREW__ = 0;
       invoke_vii(105,($2|0),($29|0));
       $335 = __THREW__; __THREW__ = 0;
       $336 = $335&1;
       if ($336) {
        $337 = ___cxa_find_matching_catch_2()|0;
        $338 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($29);
        $$073 = $338;$$074 = $337;
        break L3;
       }
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($29);
      $$1 = $272;
      break L1;
      break;
     }
     case 97:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj5EEERAT__Kc($30,9153);
      $339 = ((($2)) + 4|0);
      $340 = HEAP32[$339>>2]|0;
      $341 = ((($2)) + 8|0);
      $342 = HEAP32[$341>>2]|0;
      $343 = ($340>>>0)<($342>>>0);
      if ($343) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($340,$30);
       $344 = HEAP32[$339>>2]|0;
       $345 = ((($344)) + 24|0);
       HEAP32[$339>>2] = $345;
      } else {
       __THREW__ = 0;
       invoke_vii(105,($2|0),($30|0));
       $346 = __THREW__; __THREW__ = 0;
       $347 = $346&1;
       if ($347) {
        $348 = ___cxa_find_matching_catch_2()|0;
        $349 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($30);
        $$073 = $349;$$074 = $348;
        break L3;
       }
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($30);
      $$1 = $272;
      break L1;
      break;
     }
     case 110:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj15EEERAT__Kc($31,9158);
      $350 = ((($2)) + 4|0);
      $351 = HEAP32[$350>>2]|0;
      $352 = ((($2)) + 8|0);
      $353 = HEAP32[$352>>2]|0;
      $354 = ($351>>>0)<($353>>>0);
      if ($354) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($351,$31);
       $355 = HEAP32[$350>>2]|0;
       $356 = ((($355)) + 24|0);
       HEAP32[$350>>2] = $356;
      } else {
       __THREW__ = 0;
       invoke_vii(105,($2|0),($31|0));
       $357 = __THREW__; __THREW__ = 0;
       $358 = $357&1;
       if ($358) {
        $359 = ___cxa_find_matching_catch_2()|0;
        $360 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($31);
        $$073 = $360;$$074 = $359;
        break L3;
       }
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($31);
      $$1 = $272;
      break L1;
      break;
     }
     default: {
      $$1 = $0;
      break L1;
     }
     }
     break;
    }
    default: {
     $$1 = $0;
     break L1;
    }
    }
   } while(0);
   ___resumeException($$074|0);
   // unreachable;
  }
 } while(0);
 STACKTOP = sp;return ($$1|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_116parse_array_typeINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i134 = 0, $$0$i$i$i113 = 0, $$0$i$i$i121 = 0, $$0$i$i$i125 = 0, $$0$i$i$i129 = 0, $$082 = 0, $$089 = 0, $$183 = 0, $$190 = 0, $$284 = 0, $$291 = 0, $$385 = 0, $$392 = 0, $$486 = 0, $$493 = 0, $$587 = 0, $$594 = 0, $$688 = 0;
 var $$695 = 0, $$7 = 0, $$off = 0, $$pre$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i$i = 0, $exitcond$i$i$i$i135 = 0, $exitcond$i$i$i114 = 0, $exitcond$i$i$i122 = 0, $exitcond$i$i$i126 = 0, $exitcond$i$i$i130 = 0, $or$cond109 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $3 = sp + 175|0;
 $4 = sp + 174|0;
 $5 = sp + 173|0;
 $6 = sp + 172|0;
 $7 = sp + 160|0;
 $8 = sp + 148|0;
 $9 = sp + 136|0;
 $10 = sp + 124|0;
 $11 = sp + 112|0;
 $12 = sp + 88|0;
 $13 = sp + 64|0;
 $14 = sp + 48|0;
 $15 = sp + 36|0;
 $16 = sp + 24|0;
 $17 = sp + 12|0;
 $18 = sp;
 $19 = ($0|0)==($1|0);
 L1: do {
  if ($19) {
   $$7 = $0;
  } else {
   $20 = HEAP8[$0>>0]|0;
   $21 = ($20<<24>>24)==(65);
   if ($21) {
    $22 = ((($0)) + 1|0);
    $23 = ($22|0)==($1|0);
    if ($23) {
     $$7 = $0;
    } else {
     $24 = HEAP8[$22>>0]|0;
     $25 = ($24<<24>>24)==(95);
     if ($25) {
      $26 = ((($0)) + 2|0);
      $27 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($26,$1,$2)|0);
      $28 = ($27|0)==($26|0);
      if ($28) {
       $$7 = $0;
       break;
      }
      $29 = HEAP32[$2>>2]|0;
      $30 = ((($2)) + 4|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = ($29|0)==($31|0);
      if ($32) {
       $$7 = $0;
       break;
      }
      $33 = ((($31)) + -12|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_jjRKS6_($7,$33,2);
      __THREW__ = 0;
      $34 = (invoke_ii(99,(7560|0))|0);
      $35 = __THREW__; __THREW__ = 0;
      $36 = $35&1;
      if ($36) {
       $50 = ___cxa_find_matching_catch_3(0|0)|0;
       $51 = tempRet0;
       ___clang_call_terminate($50);
       // unreachable;
      }
      $37 = ((($7)) + 11|0);
      $38 = HEAP8[$37>>0]|0;
      $39 = ($38<<24>>24)<(0);
      $40 = ((($7)) + 4|0);
      $41 = HEAP32[$40>>2]|0;
      $42 = $38&255;
      $43 = $39 ? $41 : $42;
      $44 = ($34|0)==($43|0);
      if ($44) {
       __THREW__ = 0;
       $45 = (invoke_iiii(100,($7|0),(7560|0),($34|0))|0);
       $46 = __THREW__; __THREW__ = 0;
       $47 = $46&1;
       if ($47) {
        $48 = ___cxa_find_matching_catch_3(0|0)|0;
        $49 = tempRet0;
        ___clang_call_terminate($48);
        // unreachable;
       }
       $52 = ($45|0)==(0);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
       if ($52) {
        $53 = HEAP32[$30>>2]|0;
        $54 = ((($53)) + -12|0);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE5eraseEjj($54);
       }
      } else {
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
      }
      $55 = HEAP32[$30>>2]|0;
      $56 = ((($55)) + -12|0);
      (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($56,0,9001)|0);
      $$7 = $27;
      break;
     }
     $$off = (($24) + -49)<<24>>24;
     $57 = ($$off&255)<(9);
     if ($57) {
      $58 = (__ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($22,$1)|0);
      $59 = ($58|0)==($1|0);
      if ($59) {
       $$7 = $0;
       break;
      }
      $60 = HEAP8[$58>>0]|0;
      $61 = ($60<<24>>24)==(95);
      if (!($61)) {
       $$7 = $0;
       break;
      }
      $62 = ((($58)) + 1|0);
      $63 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($62,$1,$2)|0);
      $64 = ($63|0)==($62|0);
      if ($64) {
       $$7 = $0;
       break;
      }
      $65 = HEAP32[$2>>2]|0;
      $66 = ((($2)) + 4|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = ($65|0)==($67|0);
      if ($68) {
       $$7 = $0;
       break;
      }
      $69 = ((($67)) + -12|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_jjRKS6_($8,$69,2);
      __THREW__ = 0;
      $70 = (invoke_ii(99,(7560|0))|0);
      $71 = __THREW__; __THREW__ = 0;
      $72 = $71&1;
      if ($72) {
       $86 = ___cxa_find_matching_catch_3(0|0)|0;
       $87 = tempRet0;
       ___clang_call_terminate($86);
       // unreachable;
      }
      $73 = ((($8)) + 11|0);
      $74 = HEAP8[$73>>0]|0;
      $75 = ($74<<24>>24)<(0);
      $76 = ((($8)) + 4|0);
      $77 = HEAP32[$76>>2]|0;
      $78 = $74&255;
      $79 = $75 ? $77 : $78;
      $80 = ($70|0)==($79|0);
      if ($80) {
       __THREW__ = 0;
       $81 = (invoke_iiii(100,($8|0),(7560|0),($70|0))|0);
       $82 = __THREW__; __THREW__ = 0;
       $83 = $82&1;
       if ($83) {
        $84 = ___cxa_find_matching_catch_3(0|0)|0;
        $85 = tempRet0;
        ___clang_call_terminate($84);
        // unreachable;
       }
       $88 = ($81|0)==(0);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
       if ($88) {
        $89 = HEAP32[$66>>2]|0;
        $90 = ((($89)) + -12|0);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE5eraseEjj($90);
       }
      } else {
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
      }
      $91 = HEAP32[$66>>2]|0;
      $92 = ((($91)) + -12|0);
      ;HEAP32[$11>>2]=0|0;HEAP32[$11+4>>2]=0|0;HEAP32[$11+8>>2]=0|0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESC_SC_($11,$22,$58);
      __THREW__ = 0;
      $93 = (invoke_iiii(97,($11|0),0,(7560|0))|0);
      $94 = __THREW__; __THREW__ = 0;
      $95 = $94&1;
      if ($95) {
       $114 = ___cxa_find_matching_catch_2()|0;
       $115 = tempRet0;
       $$183 = $115;$$190 = $114;
      } else {
       ;HEAP32[$10>>2]=HEAP32[$11>>2]|0;HEAP32[$10+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$10+8>>2]=HEAP32[$11+8>>2]|0;
       $$0$i$i$i = 0;
       while(1) {
        $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
        if ($exitcond$i$i$i) {
         break;
        }
        $96 = (($11) + ($$0$i$i$i<<2)|0);
        HEAP32[$96>>2] = 0;
        $97 = (($$0$i$i$i) + 1)|0;
        $$0$i$i$i = $97;
       }
       __THREW__ = 0;
       $98 = (invoke_iii(95,($10|0),(7615|0))|0);
       $99 = __THREW__; __THREW__ = 0;
       $100 = $99&1;
       do {
        if ($100) {
         $116 = ___cxa_find_matching_catch_2()|0;
         $117 = tempRet0;
         $$082 = $117;$$089 = $116;
        } else {
         ;HEAP32[$9>>2]=HEAP32[$10>>2]|0;HEAP32[$9+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$9+8>>2]=HEAP32[$10+8>>2]|0;
         $$0$i$i$i113 = 0;
         while(1) {
          $exitcond$i$i$i114 = ($$0$i$i$i113|0)==(3);
          if ($exitcond$i$i$i114) {
           break;
          }
          $101 = (($10) + ($$0$i$i$i113<<2)|0);
          HEAP32[$101>>2] = 0;
          $102 = (($$0$i$i$i113) + 1)|0;
          $$0$i$i$i113 = $102;
         }
         $103 = ((($9)) + 11|0);
         $104 = HEAP8[$103>>0]|0;
         $105 = ($104<<24>>24)<(0);
         $106 = HEAP32[$9>>2]|0;
         $107 = $105 ? $106 : $9;
         $108 = ((($9)) + 4|0);
         $109 = HEAP32[$108>>2]|0;
         $110 = $104&255;
         $111 = $105 ? $109 : $110;
         __THREW__ = 0;
         (invoke_iiiii(94,($92|0),0,($107|0),($111|0))|0);
         $112 = __THREW__; __THREW__ = 0;
         $113 = $112&1;
         if ($113) {
          $118 = ___cxa_find_matching_catch_2()|0;
          $119 = tempRet0;
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
          $$082 = $119;$$089 = $118;
          break;
         } else {
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($10);
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($11);
          $$7 = $63;
          break L1;
         }
        }
       } while(0);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($10);
       $$183 = $$082;$$190 = $$089;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($11);
      $$688 = $$183;$$695 = $$190;
     } else {
      $120 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($22,$1,$2)|0);
      $121 = ($120|0)==($22|0);
      $122 = ($120|0)==($1|0);
      $or$cond109 = $121 | $122;
      if ($or$cond109) {
       $$7 = $0;
       break;
      }
      $123 = HEAP8[$120>>0]|0;
      $124 = ($123<<24>>24)==(95);
      if (!($124)) {
       $$7 = $0;
       break;
      }
      $125 = ((($120)) + 1|0);
      $126 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($125,$1,$2)|0);
      $127 = ($126|0)==($125|0);
      if ($127) {
       $$7 = $0;
       break;
      }
      $128 = ((($2)) + 4|0);
      $129 = HEAP32[$128>>2]|0;
      $130 = HEAP32[$2>>2]|0;
      $131 = (($129) - ($130))|0;
      $132 = (($131|0) / 24)&-1;
      $133 = ($132>>>0)<(2);
      if ($133) {
       $$7 = $0;
       break;
      }
      $134 = $129;
      $135 = ((($134)) + -24|0);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($12,$135);
      $136 = HEAP32[$128>>2]|0;
      $137 = ((($136)) + -24|0);
      $139 = $136;
      while(1) {
       $138 = ($139|0)==($137|0);
       if ($138) {
        break;
       }
       $140 = ((($139)) + -24|0);
       HEAP32[$128>>2] = $140;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($140);
       $$pre$i = HEAP32[$128>>2]|0;
       $139 = $$pre$i;
      }
      $141 = ((($136)) + -48|0);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($13,$141);
      $142 = HEAP32[$128>>2]|0;
      $143 = ((($142)) + -24|0);
      $144 = ((($143)) + 11|0);
      $145 = HEAP8[$144>>0]|0;
      $146 = ($145<<24>>24)<(0);
      if ($146) {
       $147 = HEAP32[$143>>2]|0;
       HEAP8[$5>>0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($147,$5);
       $148 = ((($142)) + -20|0);
       HEAP32[$148>>2] = 0;
      } else {
       HEAP8[$6>>0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($143,$6);
       HEAP8[$144>>0] = 0;
      }
      __THREW__ = 0;
      invoke_vi(92,($143|0));
      $149 = __THREW__; __THREW__ = 0;
      $150 = $149&1;
      if ($150) {
       $151 = ___cxa_find_matching_catch_3(0|0)|0;
       $152 = tempRet0;
       ___clang_call_terminate($151);
       // unreachable;
      }
      ;HEAP32[$143>>2]=HEAP32[$12>>2]|0;HEAP32[$143+4>>2]=HEAP32[$12+4>>2]|0;HEAP32[$143+8>>2]=HEAP32[$12+8>>2]|0;
      $$0$i$i$i$i = 0;
      while(1) {
       $exitcond$i$i$i$i = ($$0$i$i$i$i|0)==(3);
       if ($exitcond$i$i$i$i) {
        break;
       }
       $153 = (($12) + ($$0$i$i$i$i<<2)|0);
       HEAP32[$153>>2] = 0;
       $154 = (($$0$i$i$i$i) + 1)|0;
       $$0$i$i$i$i = $154;
      }
      $155 = ((($12)) + 12|0);
      __THREW__ = 0;
      invoke_viii(102,($14|0),($155|0),2);
      $156 = __THREW__; __THREW__ = 0;
      $157 = $156&1;
      L77: do {
       if ($157) {
        $181 = ___cxa_find_matching_catch_2()|0;
        $182 = tempRet0;
        $$587 = $182;$$594 = $181;
       } else {
        __THREW__ = 0;
        $158 = (invoke_ii(99,(7560|0))|0);
        $159 = __THREW__; __THREW__ = 0;
        $160 = $159&1;
        if ($160) {
         $174 = ___cxa_find_matching_catch_3(0|0)|0;
         $175 = tempRet0;
         ___clang_call_terminate($174);
         // unreachable;
        }
        $161 = ((($14)) + 11|0);
        $162 = HEAP8[$161>>0]|0;
        $163 = ($162<<24>>24)<(0);
        $164 = ((($14)) + 4|0);
        $165 = HEAP32[$164>>2]|0;
        $166 = $162&255;
        $167 = $163 ? $165 : $166;
        $168 = ($158|0)==($167|0);
        do {
         if ($168) {
          __THREW__ = 0;
          $169 = (invoke_iiii(100,($14|0),(7560|0),($158|0))|0);
          $170 = __THREW__; __THREW__ = 0;
          $171 = $170&1;
          if ($171) {
           $172 = ___cxa_find_matching_catch_3(0|0)|0;
           $173 = tempRet0;
           ___clang_call_terminate($172);
           // unreachable;
          }
          $176 = ($169|0)==(0);
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($14);
          if ($176) {
           __THREW__ = 0;
           invoke_vi(108,($155|0));
           $177 = __THREW__; __THREW__ = 0;
           $178 = $177&1;
           if (!($178)) {
            break;
           }
           $179 = ___cxa_find_matching_catch_2()|0;
           $180 = tempRet0;
           $$587 = $180;$$594 = $179;
           break L77;
          }
         } else {
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($14);
         }
        } while(0);
        __THREW__ = 0;
        invoke_vii(96,($18|0),($13|0));
        $183 = __THREW__; __THREW__ = 0;
        $184 = $183&1;
        if ($184) {
         $222 = ___cxa_find_matching_catch_2()|0;
         $223 = tempRet0;
         $$486 = $223;$$493 = $222;
        } else {
         __THREW__ = 0;
         $185 = (invoke_iiii(97,($18|0),0,(7560|0))|0);
         $186 = __THREW__; __THREW__ = 0;
         $187 = $186&1;
         if ($187) {
          $224 = ___cxa_find_matching_catch_2()|0;
          $225 = tempRet0;
          $$385 = $225;$$392 = $224;
         } else {
          ;HEAP32[$17>>2]=HEAP32[$18>>2]|0;HEAP32[$17+4>>2]=HEAP32[$18+4>>2]|0;HEAP32[$17+8>>2]=HEAP32[$18+8>>2]|0;
          $$0$i$i$i121 = 0;
          while(1) {
           $exitcond$i$i$i122 = ($$0$i$i$i121|0)==(3);
           if ($exitcond$i$i$i122) {
            break;
           }
           $188 = (($18) + ($$0$i$i$i121<<2)|0);
           HEAP32[$188>>2] = 0;
           $189 = (($$0$i$i$i121) + 1)|0;
           $$0$i$i$i121 = $189;
          }
          __THREW__ = 0;
          $190 = (invoke_iii(95,($17|0),(7615|0))|0);
          $191 = __THREW__; __THREW__ = 0;
          $192 = $191&1;
          do {
           if ($192) {
            $226 = ___cxa_find_matching_catch_2()|0;
            $227 = tempRet0;
            $$284 = $227;$$291 = $226;
           } else {
            ;HEAP32[$16>>2]=HEAP32[$17>>2]|0;HEAP32[$16+4>>2]=HEAP32[$17+4>>2]|0;HEAP32[$16+8>>2]=HEAP32[$17+8>>2]|0;
            $$0$i$i$i125 = 0;
            while(1) {
             $exitcond$i$i$i126 = ($$0$i$i$i125|0)==(3);
             if ($exitcond$i$i$i126) {
              break;
             }
             $193 = (($17) + ($$0$i$i$i125<<2)|0);
             HEAP32[$193>>2] = 0;
             $194 = (($$0$i$i$i125) + 1)|0;
             $$0$i$i$i125 = $194;
            }
            $195 = ((($155)) + 11|0);
            $196 = HEAP8[$195>>0]|0;
            $197 = ($196<<24>>24)<(0);
            $198 = HEAP32[$155>>2]|0;
            $199 = $197 ? $198 : $155;
            $200 = ((($12)) + 16|0);
            $201 = HEAP32[$200>>2]|0;
            $202 = $196&255;
            $203 = $197 ? $201 : $202;
            __THREW__ = 0;
            $204 = (invoke_iiii(88,($16|0),($199|0),($203|0))|0);
            $205 = __THREW__; __THREW__ = 0;
            $206 = $205&1;
            if ($206) {
             $228 = ___cxa_find_matching_catch_2()|0;
             $229 = tempRet0;
             __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($16);
             $$284 = $229;$$291 = $228;
             break;
            }
            ;HEAP32[$15>>2]=HEAP32[$16>>2]|0;HEAP32[$15+4>>2]=HEAP32[$16+4>>2]|0;HEAP32[$15+8>>2]=HEAP32[$16+8>>2]|0;
            $$0$i$i$i129 = 0;
            while(1) {
             $exitcond$i$i$i130 = ($$0$i$i$i129|0)==(3);
             if ($exitcond$i$i$i130) {
              break;
             }
             $207 = (($16) + ($$0$i$i$i129<<2)|0);
             HEAP32[$207>>2] = 0;
             $208 = (($$0$i$i$i129) + 1)|0;
             $$0$i$i$i129 = $208;
            }
            $209 = HEAP32[$128>>2]|0;
            $210 = ((($209)) + -12|0);
            $211 = ((($210)) + 11|0);
            $212 = HEAP8[$211>>0]|0;
            $213 = ($212<<24>>24)<(0);
            if ($213) {
             $214 = HEAP32[$210>>2]|0;
             HEAP8[$3>>0] = 0;
             __ZNSt3__211char_traitsIcE6assignERcRKc($214,$3);
             $215 = ((($209)) + -8|0);
             HEAP32[$215>>2] = 0;
            } else {
             HEAP8[$4>>0] = 0;
             __ZNSt3__211char_traitsIcE6assignERcRKc($210,$4);
             HEAP8[$211>>0] = 0;
            }
            __THREW__ = 0;
            invoke_vi(92,($210|0));
            $216 = __THREW__; __THREW__ = 0;
            $217 = $216&1;
            if ($217) {
             $218 = ___cxa_find_matching_catch_3(0|0)|0;
             $219 = tempRet0;
             ___clang_call_terminate($218);
             // unreachable;
            }
            ;HEAP32[$210>>2]=HEAP32[$15>>2]|0;HEAP32[$210+4>>2]=HEAP32[$15+4>>2]|0;HEAP32[$210+8>>2]=HEAP32[$15+8>>2]|0;
            $$0$i$i$i$i134 = 0;
            while(1) {
             $exitcond$i$i$i$i135 = ($$0$i$i$i$i134|0)==(3);
             if ($exitcond$i$i$i$i135) {
              break;
             }
             $220 = (($15) + ($$0$i$i$i$i134<<2)|0);
             HEAP32[$220>>2] = 0;
             $221 = (($$0$i$i$i$i134) + 1)|0;
             $$0$i$i$i$i134 = $221;
            }
            __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($15);
            __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($16);
            __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($17);
            __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($18);
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($13);
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($12);
            $$7 = $126;
            break L1;
           }
          } while(0);
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($17);
          $$385 = $$284;$$392 = $$291;
         }
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($18);
         $$486 = $$385;$$493 = $$392;
        }
        $$587 = $$486;$$594 = $$493;
       }
      } while(0);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($13);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($12);
      $$688 = $$587;$$695 = $$594;
     }
     ___resumeException($$695|0);
     // unreachable;
    }
   } else {
    $$7 = $0;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$7|0);
}
function __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = 0;
 $3 = ((($0)) + 4|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($0)) + 8|0);
 $5 = HEAP32[$2>>2]|0;
 HEAP32[$4>>2] = 0;
 $6 = ((($0)) + 12|0);
 HEAP32[$6>>2] = $5;
 __THREW__ = 0;
 invoke_vi(109,($0|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if (!($8)) {
  $9 = HEAP32[$3>>2]|0;
  __THREW__ = 0;
  invoke_vii(107,($9|0),($1|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if (!($11)) {
   $14 = HEAP32[$3>>2]|0;
   $15 = ((($14)) + 24|0);
   HEAP32[$3>>2] = $15;
   return;
  }
 }
 $12 = ___cxa_find_matching_catch_2()|0;
 $13 = tempRet0;
 __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($0);
 ___resumeException($12|0);
 // unreachable;
}
function __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE21__push_back_slow_pathIS6_EEvOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sroa$speculated$$i = 0, $$sroa$speculated$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 $3 = ((($0)) + 12|0);
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$0>>2]|0;
 $7 = (($5) - ($6))|0;
 $8 = $7 >> 4;
 $9 = (($8) + 1)|0;
 $10 = (__ZNKSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE8max_sizeEv($0)|0);
 $11 = ($10>>>0)<($9>>>0);
 if ($11) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
 }
 $12 = ((($0)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[$0>>2]|0;
 $15 = (($13) - ($14))|0;
 $16 = $15 >> 4;
 $17 = $10 >>> 1;
 $18 = ($16>>>0)<($17>>>0);
 $19 = $15 >> 3;
 $20 = ($19>>>0)<($9>>>0);
 $$sroa$speculated$i = $20 ? $9 : $19;
 $$sroa$speculated$$i = $18 ? $$sroa$speculated$i : $10;
 $21 = HEAP32[$4>>2]|0;
 $22 = (($21) - ($14))|0;
 $23 = $22 >> 4;
 __ZNSt3__214__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($2,$$sroa$speculated$$i,$23,$3);
 $24 = ((($2)) + 8|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ((($1)) + 12|0);
 HEAP32[$25>>2] = 0;
 $27 = ((($25)) + 4|0);
 HEAP32[$27>>2] = 0;
 $28 = ((($25)) + 8|0);
 $29 = HEAP32[$26>>2]|0;
 HEAP32[$28>>2] = 0;
 $30 = ((($25)) + 12|0);
 HEAP32[$30>>2] = $29;
 $31 = HEAP32[$1>>2]|0;
 HEAP32[$25>>2] = $31;
 $32 = ((($1)) + 4|0);
 $33 = HEAP32[$32>>2]|0;
 HEAP32[$27>>2] = $33;
 $34 = ((($1)) + 8|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ((($25)) + 8|0);
 HEAP32[$36>>2] = $35;
 HEAP32[$34>>2] = 0;
 HEAP32[$32>>2] = 0;
 HEAP32[$1>>2] = 0;
 $37 = ((($25)) + 16|0);
 HEAP32[$24>>2] = $37;
 __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($0,$2);
 __ZNSt3__214__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($2);
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv112_GLOBAL__N_119parse_function_typeINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0101 = 0, $$0105$ph = 0, $$0105$ph$clear = 0, $$0111 = 0, $$088 = 0, $$097 = 0, $$1112 = 0, $$1112$ph = 0, $$3100 = 0, $$3104 = 0, $$8 = 0, $$not = 0, $$not114 = 0, $$not115 = 0, $$pre$i = 0, $$pre$i119 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0, $brmerge117 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 12|0;
 $4 = sp;
 $5 = ($0|0)==($1|0);
 L1: do {
  if ($5) {
   $$8 = $0;
  } else {
   $6 = HEAP8[$0>>0]|0;
   $7 = ($6<<24>>24)==(70);
   if ($7) {
    $8 = ((($0)) + 1|0);
    $9 = ($8|0)==($1|0);
    if ($9) {
     $$8 = $0;
    } else {
     $10 = HEAP8[$8>>0]|0;
     $11 = ($10<<24>>24)==(89);
     if ($11) {
      $12 = ((($0)) + 2|0);
      $13 = ($12|0)==($1|0);
      if ($13) {
       $$8 = $0;
       break;
      } else {
       $$0111 = $12;
      }
     } else {
      $$0111 = $8;
     }
     $14 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($$0111,$1,$2)|0);
     $15 = ($14|0)==($$0111|0);
     if ($15) {
      $$8 = $0;
     } else {
      ;HEAP32[$3>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
      $16 = (__ZNSt3__211char_traitsIcE6lengthEPKc(7568)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3,7568,$16);
      $17 = ((($2)) + 4|0);
      $18 = ((($3)) + 11|0);
      $19 = ((($3)) + 4|0);
      $20 = ((($4)) + 11|0);
      $21 = ((($4)) + 4|0);
      $$0105$ph = 0;$$1112$ph = $14;
      L9: while(1) {
       $$1112 = $$1112$ph;
       L11: while(1) {
        $22 = ($$1112|0)==($1|0);
        if ($22) {
         label = 10;
         break L9;
        }
        $30 = HEAP8[$$1112>>0]|0;
        $31 = ((($$1112)) + 1|0);
        switch ($30<<24>>24) {
        case 69:  {
         label = 15;
         break L9;
         break;
        }
        case 118:  {
         $$1112 = $31;
         continue L11;
         break;
        }
        default: {
        }
        }
        $$not = ($30<<24>>24)!=(82);
        $$not114 = ($31|0)==($1|0);
        $brmerge = $$not114 | $$not;
        if (!($brmerge)) {
         $34 = HEAP8[$31>>0]|0;
         $35 = ($34<<24>>24)==(69);
         if ($35) {
          $$0105$ph = 1;$$1112$ph = $31;
          continue L9;
         }
        }
        $$not115 = ($30<<24>>24)!=(79);
        $brmerge117 = $$not114 | $$not115;
        if (!($brmerge117)) {
         $36 = HEAP8[$31>>0]|0;
         $37 = ($36<<24>>24)==(69);
         if ($37) {
          $$0105$ph = 2;$$1112$ph = $31;
          continue L9;
         }
        }
        $38 = HEAP32[$17>>2]|0;
        $39 = HEAP32[$2>>2]|0;
        $40 = (($38) - ($39))|0;
        $41 = (($40|0) / 24)&-1;
        __THREW__ = 0;
        $42 = (invoke_iiii(91,($$1112|0),($1|0),($2|0))|0);
        $43 = __THREW__; __THREW__ = 0;
        $44 = $43&1;
        if ($44) {
         label = 22;
         break L9;
        }
        $45 = HEAP32[$17>>2]|0;
        $46 = HEAP32[$2>>2]|0;
        $47 = (($45) - ($46))|0;
        $48 = (($47|0) / 24)&-1;
        $49 = ($42|0)==($$1112|0);
        $50 = ($42|0)==($1|0);
        $or$cond = $49 | $50;
        if ($or$cond) {
         label = 44;
         break L9;
        } else {
         $$088 = $41;
        }
        while(1) {
         $53 = ($$088>>>0)<($48>>>0);
         if (!($53)) {
          $$0 = $41;
          break;
         }
         $54 = HEAP8[$18>>0]|0;
         $55 = ($54<<24>>24)<(0);
         $56 = HEAP32[$19>>2]|0;
         $57 = $54&255;
         $58 = $55 ? $56 : $57;
         $59 = ($58>>>0)>(1);
         if ($59) {
          __THREW__ = 0;
          (invoke_iii(95,($3|0),(7790|0))|0);
          $60 = __THREW__; __THREW__ = 0;
          $61 = $60&1;
          if ($61) {
           label = 26;
           break L9;
          }
         }
         $64 = HEAP32[$2>>2]|0;
         $65 = (($64) + (($$088*24)|0)|0);
         __THREW__ = 0;
         invoke_vii(96,($4|0),($65|0));
         $66 = __THREW__; __THREW__ = 0;
         $67 = $66&1;
         if ($67) {
          label = 30;
          break L9;
         }
         $68 = HEAP8[$20>>0]|0;
         $69 = ($68<<24>>24)<(0);
         $70 = HEAP32[$4>>2]|0;
         $71 = $69 ? $70 : $4;
         $72 = HEAP32[$21>>2]|0;
         $73 = $68&255;
         $74 = $69 ? $72 : $73;
         __THREW__ = 0;
         (invoke_iiii(88,($3|0),($71|0),($74|0))|0);
         $75 = __THREW__; __THREW__ = 0;
         $76 = $75&1;
         if ($76) {
          label = 31;
          break L9;
         }
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
         $77 = (($$088) + 1)|0;
         $$088 = $77;
        }
        while(1) {
         $82 = ($$0>>>0)<($48>>>0);
         if (!($82)) {
          $$1112 = $42;
          continue L11;
         }
         $83 = HEAP32[$17>>2]|0;
         $84 = ((($83)) + -24|0);
         $86 = $83;
         while(1) {
          $85 = ($86|0)==($84|0);
          if ($85) {
           break;
          }
          $87 = ((($86)) + -24|0);
          HEAP32[$17>>2] = $87;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($87);
          $$pre$i119 = HEAP32[$17>>2]|0;
          $86 = $$pre$i119;
         }
         $88 = (($$0) + 1)|0;
         $$0 = $88;
        }
       }
      }
      L37: do {
       if ((label|0) == 10) {
        $23 = HEAP32[$17>>2]|0;
        $24 = ((($23)) + -24|0);
        $26 = $23;
        while(1) {
         $25 = ($26|0)==($24|0);
         if ($25) {
          label = 44;
          break L37;
         }
         $27 = ((($26)) + -24|0);
         HEAP32[$17>>2] = $27;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($27);
         $$pre$i = HEAP32[$17>>2]|0;
         $26 = $$pre$i;
        }
       }
       else if ((label|0) == 15) {
        __THREW__ = 0;
        (invoke_iii(95,($3|0),(7566|0))|0);
        $32 = __THREW__; __THREW__ = 0;
        $33 = $32&1;
        L39: do {
         if (!($33)) {
          $$0105$ph$clear = $$0105$ph & 3;
          switch ($$0105$ph$clear<<24>>24) {
          case 1:  {
           __THREW__ = 0;
           (invoke_iii(95,($3|0),(8994|0))|0);
           $89 = __THREW__; __THREW__ = 0;
           $90 = $89&1;
           if ($90) {
            break L39;
           }
           break;
          }
          case 2:  {
           __THREW__ = 0;
           (invoke_iii(95,($3|0),(8997|0))|0);
           $91 = __THREW__; __THREW__ = 0;
           $92 = $91&1;
           if ($92) {
            break L39;
           }
           break;
          }
          default: {
          }
          }
          $93 = HEAP32[$2>>2]|0;
          $94 = HEAP32[$17>>2]|0;
          $95 = ($93|0)==($94|0);
          if ($95) {
           label = 44;
           break L37;
          }
          $96 = ((($94)) + -24|0);
          __THREW__ = 0;
          (invoke_iii(95,($96|0),(7600|0))|0);
          $97 = __THREW__; __THREW__ = 0;
          $98 = $97&1;
          if (!($98)) {
           $99 = HEAP32[$17>>2]|0;
           $100 = ((($99)) + -12|0);
           $101 = HEAP8[$18>>0]|0;
           $102 = ($101<<24>>24)<(0);
           $103 = HEAP32[$3>>2]|0;
           $104 = $102 ? $103 : $3;
           $105 = HEAP32[$19>>2]|0;
           $106 = $101&255;
           $107 = $102 ? $105 : $106;
           __THREW__ = 0;
           (invoke_iiiii(94,($100|0),0,($104|0),($107|0))|0);
           $108 = __THREW__; __THREW__ = 0;
           $109 = $108&1;
           if (!($109)) {
            __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
            $$8 = $31;
            break L1;
           }
          }
         }
        } while(0);
        $28 = ___cxa_find_matching_catch_2()|0;
        $29 = tempRet0;
        $$3100 = $29;$$3104 = $28;
       }
       else if ((label|0) == 22) {
        $51 = ___cxa_find_matching_catch_2()|0;
        $52 = tempRet0;
        $$3100 = $52;$$3104 = $51;
       }
       else if ((label|0) == 26) {
        $62 = ___cxa_find_matching_catch_2()|0;
        $63 = tempRet0;
        $$3100 = $63;$$3104 = $62;
       }
       else if ((label|0) == 30) {
        $78 = ___cxa_find_matching_catch_2()|0;
        $79 = tempRet0;
        $$0101 = $78;$$097 = $79;
        label = 32;
       }
       else if ((label|0) == 31) {
        $80 = ___cxa_find_matching_catch_2()|0;
        $81 = tempRet0;
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
        $$0101 = $80;$$097 = $81;
        label = 32;
       }
      } while(0);
      if ((label|0) == 32) {
       $$3100 = $$097;$$3104 = $$0101;
      }
      else if ((label|0) == 44) {
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
       $$8 = $0;
       break;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      ___resumeException($$3104|0);
      // unreachable;
     }
    }
   } else {
    $$8 = $0;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$8|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_128parse_pointer_to_member_typeINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i63 = 0, $$0$i$i$i$i80 = 0, $$0$i$i$i$i85 = 0, $$0$i$i$i51 = 0, $$0$i$i$i54 = 0, $$0$i$i$i58 = 0, $$0$i$i$i66 = 0, $$0$i$i$i70 = 0, $$0$i$i$i74 = 0, $$033 = 0, $$1 = 0, $$134 = 0, $$2 = 0, $$235 = 0, $$3 = 0, $$336 = 0, $$345 = 0;
 var $$4 = 0, $$437 = 0, $$5 = 0, $$538 = 0, $$6 = 0, $$639 = 0, $$pre$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i$i = 0, $exitcond$i$i$i$i64 = 0, $exitcond$i$i$i$i81 = 0, $exitcond$i$i$i$i86 = 0, $exitcond$i$i$i52 = 0, $exitcond$i$i$i55 = 0, $exitcond$i$i$i59 = 0, $exitcond$i$i$i67 = 0, $exitcond$i$i$i71 = 0, $exitcond$i$i$i75 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $3 = sp + 167|0;
 $4 = sp + 166|0;
 $5 = sp + 165|0;
 $6 = sp + 164|0;
 $7 = sp + 163|0;
 $8 = sp + 162|0;
 $9 = sp + 161|0;
 $10 = sp + 160|0;
 $11 = sp + 136|0;
 $12 = sp + 112|0;
 $13 = sp + 96|0;
 $14 = sp + 84|0;
 $15 = sp + 72|0;
 $16 = sp + 60|0;
 $17 = sp + 48|0;
 $18 = sp + 36|0;
 $19 = sp + 24|0;
 $20 = sp + 12|0;
 $21 = sp;
 $22 = ($0|0)==($1|0);
 do {
  if ($22) {
   $$345 = $0;
  } else {
   $23 = HEAP8[$0>>0]|0;
   $24 = ($23<<24>>24)==(77);
   if ($24) {
    $25 = ((($0)) + 1|0);
    $26 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($25,$1,$2)|0);
    $27 = ($26|0)==($25|0);
    if ($27) {
     $$345 = $0;
    } else {
     $28 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($26,$1,$2)|0);
     $29 = ($28|0)==($26|0);
     if ($29) {
      $$345 = $0;
     } else {
      $30 = ((($2)) + 4|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = HEAP32[$2>>2]|0;
      $33 = (($31) - ($32))|0;
      $34 = (($33|0) / 24)&-1;
      $35 = ($34>>>0)<(2);
      if ($35) {
       $$345 = $0;
      } else {
       $36 = $31;
       $37 = ((($36)) + -24|0);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($11,$37);
       $38 = HEAP32[$30>>2]|0;
       $39 = ((($38)) + -24|0);
       $41 = $38;
       while(1) {
        $40 = ($41|0)==($39|0);
        if ($40) {
         break;
        }
        $42 = ((($41)) + -24|0);
        HEAP32[$30>>2] = $42;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($42);
        $$pre$i = HEAP32[$30>>2]|0;
        $41 = $$pre$i;
       }
       $43 = ((($38)) + -48|0);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($12,$43);
       $44 = ((($11)) + 12|0);
       $45 = ((($44)) + 11|0);
       $46 = HEAP8[$45>>0]|0;
       $47 = ($46<<24>>24)<(0);
       $48 = HEAP32[$44>>2]|0;
       $49 = $47 ? $48 : $44;
       $50 = HEAP8[$49>>0]|0;
       $51 = ($50<<24>>24)==(40);
       L11: do {
        if ($51) {
         __THREW__ = 0;
         $52 = (invoke_iii(95,($11|0),(7568|0))|0);
         $53 = __THREW__; __THREW__ = 0;
         $54 = $53&1;
         if ($54) {
          $109 = ___cxa_find_matching_catch_2()|0;
          $110 = tempRet0;
          $$2 = $110;$$235 = $109;
         } else {
          ;HEAP32[$15>>2]=HEAP32[$11>>2]|0;HEAP32[$15+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$15+8>>2]=HEAP32[$11+8>>2]|0;
          $$0$i$i$i = 0;
          while(1) {
           $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
           if ($exitcond$i$i$i) {
            break;
           }
           $55 = (($11) + ($$0$i$i$i<<2)|0);
           HEAP32[$55>>2] = 0;
           $56 = (($$0$i$i$i) + 1)|0;
           $$0$i$i$i = $56;
          }
          __THREW__ = 0;
          invoke_vii(96,($16|0),($12|0));
          $57 = __THREW__; __THREW__ = 0;
          $58 = $57&1;
          if ($58) {
           $111 = ___cxa_find_matching_catch_2()|0;
           $112 = tempRet0;
           $$1 = $112;$$134 = $111;
          } else {
           $59 = ((($16)) + 11|0);
           $60 = HEAP8[$59>>0]|0;
           $61 = ($60<<24>>24)<(0);
           $62 = HEAP32[$16>>2]|0;
           $63 = $61 ? $62 : $16;
           $64 = ((($16)) + 4|0);
           $65 = HEAP32[$64>>2]|0;
           $66 = $60&255;
           $67 = $61 ? $65 : $66;
           __THREW__ = 0;
           $68 = (invoke_iiii(88,($15|0),($63|0),($67|0))|0);
           $69 = __THREW__; __THREW__ = 0;
           $70 = $69&1;
           do {
            if ($70) {
             $113 = ___cxa_find_matching_catch_2()|0;
             $114 = tempRet0;
             $$0 = $114;$$033 = $113;
            } else {
             ;HEAP32[$14>>2]=HEAP32[$15>>2]|0;HEAP32[$14+4>>2]=HEAP32[$15+4>>2]|0;HEAP32[$14+8>>2]=HEAP32[$15+8>>2]|0;
             $$0$i$i$i51 = 0;
             while(1) {
              $exitcond$i$i$i52 = ($$0$i$i$i51|0)==(3);
              if ($exitcond$i$i$i52) {
               break;
              }
              $71 = (($15) + ($$0$i$i$i51<<2)|0);
              HEAP32[$71>>2] = 0;
              $72 = (($$0$i$i$i51) + 1)|0;
              $$0$i$i$i51 = $72;
             }
             __THREW__ = 0;
             $73 = (invoke_iii(95,($14|0),(8990|0))|0);
             $74 = __THREW__; __THREW__ = 0;
             $75 = $74&1;
             if ($75) {
              $115 = ___cxa_find_matching_catch_2()|0;
              $116 = tempRet0;
              __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($14);
              $$0 = $116;$$033 = $115;
              break;
             }
             ;HEAP32[$13>>2]=HEAP32[$14>>2]|0;HEAP32[$13+4>>2]=HEAP32[$14+4>>2]|0;HEAP32[$13+8>>2]=HEAP32[$14+8>>2]|0;
             $$0$i$i$i54 = 0;
             while(1) {
              $exitcond$i$i$i55 = ($$0$i$i$i54|0)==(3);
              if ($exitcond$i$i$i55) {
               break;
              }
              $76 = (($14) + ($$0$i$i$i54<<2)|0);
              HEAP32[$76>>2] = 0;
              $77 = (($$0$i$i$i54) + 1)|0;
              $$0$i$i$i54 = $77;
             }
             $78 = HEAP32[$30>>2]|0;
             $79 = ((($78)) + -24|0);
             $80 = ((($79)) + 11|0);
             $81 = HEAP8[$80>>0]|0;
             $82 = ($81<<24>>24)<(0);
             if ($82) {
              $83 = HEAP32[$79>>2]|0;
              HEAP8[$9>>0] = 0;
              __ZNSt3__211char_traitsIcE6assignERcRKc($83,$9);
              $84 = ((($78)) + -20|0);
              HEAP32[$84>>2] = 0;
             } else {
              HEAP8[$10>>0] = 0;
              __ZNSt3__211char_traitsIcE6assignERcRKc($79,$10);
              HEAP8[$80>>0] = 0;
             }
             __THREW__ = 0;
             invoke_vi(92,($79|0));
             $85 = __THREW__; __THREW__ = 0;
             $86 = $85&1;
             if ($86) {
              $87 = ___cxa_find_matching_catch_3(0|0)|0;
              $88 = tempRet0;
              ___clang_call_terminate($87);
              // unreachable;
             }
             ;HEAP32[$79>>2]=HEAP32[$13>>2]|0;HEAP32[$79+4>>2]=HEAP32[$13+4>>2]|0;HEAP32[$79+8>>2]=HEAP32[$13+8>>2]|0;
             $$0$i$i$i$i = 0;
             while(1) {
              $exitcond$i$i$i$i = ($$0$i$i$i$i|0)==(3);
              if ($exitcond$i$i$i$i) {
               break;
              }
              $89 = (($13) + ($$0$i$i$i$i<<2)|0);
              HEAP32[$89>>2] = 0;
              $90 = (($$0$i$i$i$i) + 1)|0;
              $$0$i$i$i$i = $90;
             }
             __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($13);
             __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($14);
             __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($16);
             __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($15);
             __THREW__ = 0;
             $91 = (invoke_iiii(97,($44|0),0,(7566|0))|0);
             $92 = __THREW__; __THREW__ = 0;
             $93 = $92&1;
             if ($93) {
              $117 = ___cxa_find_matching_catch_2()|0;
              $118 = tempRet0;
              $$6 = $118;$$639 = $117;
              label = 89;
              break L11;
             }
             ;HEAP32[$17>>2]=HEAP32[$44>>2]|0;HEAP32[$17+4>>2]=HEAP32[$44+4>>2]|0;HEAP32[$17+8>>2]=HEAP32[$44+8>>2]|0;
             $$0$i$i$i58 = 0;
             while(1) {
              $exitcond$i$i$i59 = ($$0$i$i$i58|0)==(3);
              if ($exitcond$i$i$i59) {
               break;
              }
              $94 = (($44) + ($$0$i$i$i58<<2)|0);
              HEAP32[$94>>2] = 0;
              $95 = (($$0$i$i$i58) + 1)|0;
              $$0$i$i$i58 = $95;
             }
             $96 = HEAP32[$30>>2]|0;
             $97 = ((($96)) + -12|0);
             $98 = ((($97)) + 11|0);
             $99 = HEAP8[$98>>0]|0;
             $100 = ($99<<24>>24)<(0);
             if ($100) {
              $101 = HEAP32[$97>>2]|0;
              HEAP8[$7>>0] = 0;
              __ZNSt3__211char_traitsIcE6assignERcRKc($101,$7);
              $102 = ((($96)) + -8|0);
              HEAP32[$102>>2] = 0;
             } else {
              HEAP8[$8>>0] = 0;
              __ZNSt3__211char_traitsIcE6assignERcRKc($97,$8);
              HEAP8[$98>>0] = 0;
             }
             __THREW__ = 0;
             invoke_vi(92,($97|0));
             $103 = __THREW__; __THREW__ = 0;
             $104 = $103&1;
             if ($104) {
              $105 = ___cxa_find_matching_catch_3(0|0)|0;
              $106 = tempRet0;
              ___clang_call_terminate($105);
              // unreachable;
             }
             ;HEAP32[$97>>2]=HEAP32[$17>>2]|0;HEAP32[$97+4>>2]=HEAP32[$17+4>>2]|0;HEAP32[$97+8>>2]=HEAP32[$17+8>>2]|0;
             $$0$i$i$i$i63 = 0;
             while(1) {
              $exitcond$i$i$i$i64 = ($$0$i$i$i$i63|0)==(3);
              if ($exitcond$i$i$i$i64) {
               break;
              }
              $107 = (($17) + ($$0$i$i$i$i63<<2)|0);
              HEAP32[$107>>2] = 0;
              $108 = (($$0$i$i$i$i63) + 1)|0;
              $$0$i$i$i$i63 = $108;
             }
             __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($17);
             label = 88;
             break L11;
            }
           } while(0);
           __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($16);
           $$1 = $$0;$$134 = $$033;
          }
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($15);
          $$2 = $$1;$$235 = $$134;
         }
         $$6 = $$2;$$639 = $$235;
         label = 89;
        } else {
         __THREW__ = 0;
         $119 = (invoke_iii(95,($11|0),(7600|0))|0);
         $120 = __THREW__; __THREW__ = 0;
         $121 = $120&1;
         if ($121) {
          $171 = ___cxa_find_matching_catch_2()|0;
          $172 = tempRet0;
          $$5 = $172;$$538 = $171;
         } else {
          ;HEAP32[$20>>2]=HEAP32[$11>>2]|0;HEAP32[$20+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$20+8>>2]=HEAP32[$11+8>>2]|0;
          $$0$i$i$i66 = 0;
          while(1) {
           $exitcond$i$i$i67 = ($$0$i$i$i66|0)==(3);
           if ($exitcond$i$i$i67) {
            break;
           }
           $122 = (($11) + ($$0$i$i$i66<<2)|0);
           HEAP32[$122>>2] = 0;
           $123 = (($$0$i$i$i66) + 1)|0;
           $$0$i$i$i66 = $123;
          }
          __THREW__ = 0;
          invoke_vii(96,($21|0),($12|0));
          $124 = __THREW__; __THREW__ = 0;
          $125 = $124&1;
          if ($125) {
           $173 = ___cxa_find_matching_catch_2()|0;
           $174 = tempRet0;
           $$4 = $174;$$437 = $173;
          } else {
           $126 = ((($21)) + 11|0);
           $127 = HEAP8[$126>>0]|0;
           $128 = ($127<<24>>24)<(0);
           $129 = HEAP32[$21>>2]|0;
           $130 = $128 ? $129 : $21;
           $131 = ((($21)) + 4|0);
           $132 = HEAP32[$131>>2]|0;
           $133 = $127&255;
           $134 = $128 ? $132 : $133;
           __THREW__ = 0;
           $135 = (invoke_iiii(88,($20|0),($130|0),($134|0))|0);
           $136 = __THREW__; __THREW__ = 0;
           $137 = $136&1;
           do {
            if ($137) {
             $175 = ___cxa_find_matching_catch_2()|0;
             $176 = tempRet0;
             $$3 = $176;$$336 = $175;
            } else {
             ;HEAP32[$19>>2]=HEAP32[$20>>2]|0;HEAP32[$19+4>>2]=HEAP32[$20+4>>2]|0;HEAP32[$19+8>>2]=HEAP32[$20+8>>2]|0;
             $$0$i$i$i70 = 0;
             while(1) {
              $exitcond$i$i$i71 = ($$0$i$i$i70|0)==(3);
              if ($exitcond$i$i$i71) {
               break;
              }
              $138 = (($20) + ($$0$i$i$i70<<2)|0);
              HEAP32[$138>>2] = 0;
              $139 = (($$0$i$i$i70) + 1)|0;
              $$0$i$i$i70 = $139;
             }
             __THREW__ = 0;
             $140 = (invoke_iii(95,($19|0),(8990|0))|0);
             $141 = __THREW__; __THREW__ = 0;
             $142 = $141&1;
             if ($142) {
              $177 = ___cxa_find_matching_catch_2()|0;
              $178 = tempRet0;
              __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($19);
              $$3 = $178;$$336 = $177;
              break;
             }
             ;HEAP32[$18>>2]=HEAP32[$19>>2]|0;HEAP32[$18+4>>2]=HEAP32[$19+4>>2]|0;HEAP32[$18+8>>2]=HEAP32[$19+8>>2]|0;
             $$0$i$i$i74 = 0;
             while(1) {
              $exitcond$i$i$i75 = ($$0$i$i$i74|0)==(3);
              if ($exitcond$i$i$i75) {
               break;
              }
              $143 = (($19) + ($$0$i$i$i74<<2)|0);
              HEAP32[$143>>2] = 0;
              $144 = (($$0$i$i$i74) + 1)|0;
              $$0$i$i$i74 = $144;
             }
             $145 = HEAP32[$30>>2]|0;
             $146 = ((($145)) + -24|0);
             $147 = ((($146)) + 11|0);
             $148 = HEAP8[$147>>0]|0;
             $149 = ($148<<24>>24)<(0);
             if ($149) {
              $150 = HEAP32[$146>>2]|0;
              HEAP8[$5>>0] = 0;
              __ZNSt3__211char_traitsIcE6assignERcRKc($150,$5);
              $151 = ((($145)) + -20|0);
              HEAP32[$151>>2] = 0;
             } else {
              HEAP8[$6>>0] = 0;
              __ZNSt3__211char_traitsIcE6assignERcRKc($146,$6);
              HEAP8[$147>>0] = 0;
             }
             __THREW__ = 0;
             invoke_vi(92,($146|0));
             $152 = __THREW__; __THREW__ = 0;
             $153 = $152&1;
             if ($153) {
              $154 = ___cxa_find_matching_catch_3(0|0)|0;
              $155 = tempRet0;
              ___clang_call_terminate($154);
              // unreachable;
             }
             ;HEAP32[$146>>2]=HEAP32[$18>>2]|0;HEAP32[$146+4>>2]=HEAP32[$18+4>>2]|0;HEAP32[$146+8>>2]=HEAP32[$18+8>>2]|0;
             $$0$i$i$i$i80 = 0;
             while(1) {
              $exitcond$i$i$i$i81 = ($$0$i$i$i$i80|0)==(3);
              if ($exitcond$i$i$i$i81) {
               break;
              }
              $156 = (($18) + ($$0$i$i$i$i80<<2)|0);
              HEAP32[$156>>2] = 0;
              $157 = (($$0$i$i$i$i80) + 1)|0;
              $$0$i$i$i$i80 = $157;
             }
             __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($18);
             __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($19);
             __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($21);
             __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($20);
             $158 = HEAP32[$30>>2]|0;
             $159 = ((($158)) + -12|0);
             $160 = ((($159)) + 11|0);
             $161 = HEAP8[$160>>0]|0;
             $162 = ($161<<24>>24)<(0);
             if ($162) {
              $163 = HEAP32[$159>>2]|0;
              HEAP8[$3>>0] = 0;
              __ZNSt3__211char_traitsIcE6assignERcRKc($163,$3);
              $164 = ((($158)) + -8|0);
              HEAP32[$164>>2] = 0;
             } else {
              HEAP8[$4>>0] = 0;
              __ZNSt3__211char_traitsIcE6assignERcRKc($159,$4);
              HEAP8[$160>>0] = 0;
             }
             __THREW__ = 0;
             invoke_vi(92,($159|0));
             $165 = __THREW__; __THREW__ = 0;
             $166 = $165&1;
             if ($166) {
              $167 = ___cxa_find_matching_catch_3(0|0)|0;
              $168 = tempRet0;
              ___clang_call_terminate($167);
              // unreachable;
             }
             ;HEAP32[$159>>2]=HEAP32[$44>>2]|0;HEAP32[$159+4>>2]=HEAP32[$44+4>>2]|0;HEAP32[$159+8>>2]=HEAP32[$44+8>>2]|0;
             $$0$i$i$i$i85 = 0;
             while(1) {
              $exitcond$i$i$i$i86 = ($$0$i$i$i$i85|0)==(3);
              if ($exitcond$i$i$i$i86) {
               label = 88;
               break L11;
              }
              $169 = (($44) + ($$0$i$i$i$i85<<2)|0);
              HEAP32[$169>>2] = 0;
              $170 = (($$0$i$i$i$i85) + 1)|0;
              $$0$i$i$i$i85 = $170;
             }
            }
           } while(0);
           __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($21);
           $$4 = $$3;$$437 = $$336;
          }
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($20);
          $$5 = $$4;$$538 = $$437;
         }
         $$6 = $$5;$$639 = $$538;
         label = 89;
        }
       } while(0);
       if ((label|0) == 88) {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($12);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($11);
        $$345 = $28;
        break;
       }
       else if ((label|0) == 89) {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($12);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($11);
        ___resumeException($$639|0);
        // unreachable;
       }
      }
     }
    }
   } else {
    $$345 = $0;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$345|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_jjRKS6_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $3 = ((($1)) + 11|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)<(0);
 $6 = ((($1)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $4&255;
 $9 = $5 ? $7 : $8;
 $10 = HEAP32[$1>>2]|0;
 $11 = $5 ? $10 : $1;
 $12 = ($9>>>0)<($2>>>0);
 $$sroa$speculated = $12 ? $9 : $2;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($0,$11,$$sroa$speculated);
 return;
}
function __ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEjjPKcj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$$ = 0, $$pre = 0, $$sroa$speculated8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 11|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)<(0);
 if ($5) {
  $6 = ((($0)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $14 = $7;
 } else {
  $8 = $4&255;
  $14 = $8;
 }
 $9 = ($2|0)==(-1);
 if ($9) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_out_of_rangeEv($0);
  $$pre = HEAP8[$3>>0]|0;
  $11 = $$pre;
 } else {
  $11 = $4;
 }
 $10 = ($11<<24>>24)<(0);
 if ($10) {
  $12 = HEAP32[$0>>2]|0;
  $15 = $12;
 } else {
  $15 = $0;
 }
 $13 = ($14>>>0)>($2>>>0);
 $$sroa$speculated8 = $13 ? $2 : $14;
 $16 = (__ZNSt3__211char_traitsIcE7compareEPKcS3_j($15,$1,$$sroa$speculated8)|0);
 $17 = ($16|0)==(0);
 if ($17) {
  $18 = ($14>>>0)<($2>>>0);
  $$ = $13&1;
  $$$ = $18 ? -1 : $$;
  return ($$$|0);
 } else {
  return ($16|0);
 }
 return (0)|0;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7replaceEjjPKc($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNSt3__211char_traitsIcE6lengthEPKc(8987)|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7replaceEjjPKcj($0,$1);
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_120parse_template_paramINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$067 = 0, $$068 = 0, $$069 = 0, $$070 = 0, $$1 = 0, $$sroa$077$0 = 0, $$sroa$083$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $isdigit = 0, $isdigit72 = 0, $isdigittmp = 0, $isdigittmp71 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = sp + 40|0;
 $4 = sp + 16|0;
 $5 = sp;
 $6 = $1;
 $7 = $0;
 $8 = (($6) - ($7))|0;
 $9 = ($8|0)>(1);
 L1: do {
  if ($9) {
   $10 = HEAP8[$0>>0]|0;
   $11 = ($10<<24>>24)==(84);
   if ($11) {
    $12 = ((($0)) + 1|0);
    $13 = HEAP8[$12>>0]|0;
    $14 = ($13<<24>>24)==(95);
    $15 = ((($2)) + 62|0);
    $16 = ((($2)) + 32|0);
    do {
     if ($14) {
      $17 = HEAP32[$16>>2]|0;
      $18 = ((($2)) + 36|0);
      $19 = HEAP32[$18>>2]|0;
      $20 = ($17|0)==($19|0);
      if ($20) {
       $$1 = $0;
       break L1;
      }
      $21 = ((($19)) + -16|0);
      $22 = HEAP32[$21>>2]|0;
      $23 = ((($19)) + -12|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = ($22|0)==($24|0);
      $26 = ((($0)) + 2|0);
      if ($25) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj3EEERAT__Kc($3);
       $39 = ((($2)) + 4|0);
       $40 = HEAP32[$39>>2]|0;
       $41 = ((($2)) + 8|0);
       $42 = HEAP32[$41>>2]|0;
       $43 = ($40>>>0)<($42>>>0);
       if ($43) {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($40,$3);
        $44 = HEAP32[$39>>2]|0;
        $45 = ((($44)) + 24|0);
        HEAP32[$39>>2] = $45;
       } else {
        __THREW__ = 0;
        invoke_vii(105,($2|0),($3|0));
        $46 = __THREW__; __THREW__ = 0;
        $47 = $46&1;
        if ($47) {
         $48 = ___cxa_find_matching_catch_2()|0;
         $49 = tempRet0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
         $$069 = $49;$$070 = $48;
         break;
        }
       }
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
       HEAP8[$15>>0] = 1;
       $$1 = $26;
       break L1;
      }
      $27 = HEAP32[$22>>2]|0;
      $28 = ((($22)) + 4|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = ((($2)) + 4|0);
      $31 = ((($2)) + 8|0);
      $$sroa$083$0 = $27;
      while(1) {
       $32 = ($$sroa$083$0|0)==($29|0);
       if ($32) {
        $$1 = $26;
        break L1;
       }
       $33 = HEAP32[$30>>2]|0;
       $34 = HEAP32[$31>>2]|0;
       $35 = ($33|0)==($34|0);
       if ($35) {
        __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIRKS3_EEvOT_($2,$$sroa$083$0);
       } else {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_($33,$$sroa$083$0);
        $36 = HEAP32[$30>>2]|0;
        $37 = ((($36)) + 24|0);
        HEAP32[$30>>2] = $37;
       }
       $38 = ((($$sroa$083$0)) + 24|0);
       $$sroa$083$0 = $38;
      }
     } else {
      $50 = $13 << 24 >> 24;
      $isdigittmp = (($50) + -48)|0;
      $isdigit = ($isdigittmp>>>0)<(10);
      if (!($isdigit)) {
       $$1 = $0;
       break L1;
      }
      $51 = ((($0)) + 2|0);
      $$067 = $isdigittmp;$$068 = $51;
      while(1) {
       $52 = ($$068|0)==($1|0);
       $53 = ((($$068)) + 1|0);
       if ($52) {
        $$1 = $0;
        break L1;
       }
       $54 = HEAP8[$$068>>0]|0;
       $55 = $54 << 24 >> 24;
       $isdigittmp71 = (($55) + -48)|0;
       $isdigit72 = ($isdigittmp71>>>0)<(10);
       if (!($isdigit72)) {
        break;
       }
       $56 = ($$067*10)|0;
       $57 = (($isdigittmp71) + ($56))|0;
       $$067 = $57;$$068 = $53;
      }
      $58 = ($54<<24>>24)==(95);
      if (!($58)) {
       $$1 = $0;
       break L1;
      }
      $59 = HEAP32[$16>>2]|0;
      $60 = ((($2)) + 36|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($59|0)==($61|0);
      if ($62) {
       $$1 = $0;
       break L1;
      }
      $63 = (($$067) + 1)|0;
      $64 = ((($61)) + -16|0);
      $65 = ((($61)) + -12|0);
      $66 = HEAP32[$65>>2]|0;
      $67 = HEAP32[$64>>2]|0;
      $68 = (($66) - ($67))|0;
      $69 = $68 >> 4;
      $70 = ($63>>>0)<($69>>>0);
      $71 = $67;
      if (!($70)) {
       ;HEAP32[$5>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESC_SC_($5,$0,$53);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($4,$5);
       $85 = ((($2)) + 4|0);
       $86 = HEAP32[$85>>2]|0;
       $87 = ((($2)) + 8|0);
       $88 = HEAP32[$87>>2]|0;
       $89 = ($86>>>0)<($88>>>0);
       if ($89) {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($86,$4);
        $90 = HEAP32[$85>>2]|0;
        $91 = ((($90)) + 24|0);
        HEAP32[$85>>2] = $91;
       } else {
        __THREW__ = 0;
        invoke_vii(105,($2|0),($4|0));
        $92 = __THREW__; __THREW__ = 0;
        $93 = $92&1;
        if ($93) {
         $94 = ___cxa_find_matching_catch_2()|0;
         $95 = tempRet0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
         $$069 = $95;$$070 = $94;
         break;
        }
       }
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
       HEAP8[$15>>0] = 1;
       $$1 = $53;
       break L1;
      }
      $72 = (($71) + ($63<<4)|0);
      $73 = HEAP32[$72>>2]|0;
      $74 = (((($71) + ($63<<4)|0)) + 4|0);
      $75 = HEAP32[$74>>2]|0;
      $76 = ((($2)) + 4|0);
      $77 = ((($2)) + 8|0);
      $$sroa$077$0 = $73;
      while(1) {
       $78 = ($$sroa$077$0|0)==($75|0);
       if ($78) {
        $$1 = $53;
        break L1;
       }
       $79 = HEAP32[$76>>2]|0;
       $80 = HEAP32[$77>>2]|0;
       $81 = ($79|0)==($80|0);
       if ($81) {
        __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIRKS3_EEvOT_($2,$$sroa$077$0);
       } else {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_($79,$$sroa$077$0);
        $82 = HEAP32[$76>>2]|0;
        $83 = ((($82)) + 24|0);
        HEAP32[$76>>2] = $83;
       }
       $84 = ((($$sroa$077$0)) + 24|0);
       $$sroa$077$0 = $84;
      }
     }
    } while(0);
    ___resumeException($$070|0);
    // unreachable;
   } else {
    $$1 = $0;
   }
  } else {
   $$1 = $0;
  }
 } while(0);
 STACKTOP = sp;return ($$1|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0$i$i = 0, $$067 = 0, $$069 = 0, $$074 = 0, $$078 = 0, $$083 = 0, $$3 = 0, $$4 = 0, $$482 = 0, $$pre = 0, $$pre$i = 0, $$pre$i92 = 0, $$sroa$0$0$$sroa_idx$i85 = 0, $$sroa$0$0$copyload$i86100 = 0, $$sroa$0$0$copyload$i99 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $3 = sp + 72|0;
 $4 = sp + 60|0;
 $5 = sp + 56|0;
 $6 = sp + 52|0;
 $7 = sp + 40|0;
 $8 = sp + 16|0;
 $9 = sp;
 $10 = $1;
 $11 = $0;
 $12 = (($10) - ($11))|0;
 $13 = ($12|0)>(1);
 L1: do {
  if ($13) {
   $14 = HEAP8[$0>>0]|0;
   $15 = ($14<<24>>24)==(73);
   if ($15) {
    $16 = ((($2)) + 61|0);
    $17 = HEAP8[$16>>0]|0;
    $18 = ($17<<24>>24)==(0);
    $19 = ((($2)) + 32|0);
    $$pre = ((($2)) + 36|0);
    L4: do {
     if (!($18)) {
      $20 = HEAP32[$$pre>>2]|0;
      $21 = ((($20)) + -16|0);
      $22 = HEAP32[$21>>2]|0;
      $23 = ((($20)) + -12|0);
      while(1) {
       $24 = HEAP32[$23>>2]|0;
       $25 = ($24|0)==($22|0);
       if ($25) {
        break L4;
       }
       $26 = ((($24)) + -16|0);
       HEAP32[$23>>2] = $26;
       __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($26);
      }
     }
    } while(0);
    $27 = ((($0)) + 1|0);
    ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
    $28 = (__ZNSt3__211char_traitsIcE6lengthEPKc(7602)|0);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($4,7602,$28);
    $29 = ((($2)) + 4|0);
    $$sroa$0$0$$sroa_idx$i85 = ((($2)) + 12|0);
    $30 = ((($4)) + 11|0);
    $31 = ((($4)) + 4|0);
    $32 = ((($7)) + 11|0);
    $33 = ((($7)) + 4|0);
    $34 = ((($2)) + 40|0);
    $$083 = $27;
    L10: while(1) {
     $35 = HEAP8[$$083>>0]|0;
     $36 = ($35<<24>>24)==(69);
     if ($36) {
      label = 50;
      break;
     }
     $37 = HEAP8[$16>>0]|0;
     $38 = ($37<<24>>24)==(0);
     if (!($38)) {
      $$sroa$0$0$copyload$i99 = HEAP32[$$sroa$0$0$$sroa_idx$i85>>2]|0;
      HEAP32[$5>>2] = $$sroa$0$0$copyload$i99;
      $39 = HEAP32[$$pre>>2]|0;
      $40 = HEAP32[$34>>2]|0;
      $41 = ($39>>>0)<($40>>>0);
      if ($41) {
       __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lj4096EEEEELj4096EEC2IS4_EERKNS1_IT_Lj4096EEE($3,$5);
       HEAP32[$39>>2] = 0;
       $42 = ((($39)) + 4|0);
       HEAP32[$42>>2] = 0;
       $43 = ((($39)) + 8|0);
       $44 = HEAP32[$3>>2]|0;
       HEAP32[$43>>2] = 0;
       $45 = ((($39)) + 12|0);
       HEAP32[$45>>2] = $44;
       $46 = HEAP32[$$pre>>2]|0;
       $47 = ((($46)) + 16|0);
       HEAP32[$$pre>>2] = $47;
      } else {
       __THREW__ = 0;
       invoke_vii(110,($19|0),($5|0));
       $48 = __THREW__; __THREW__ = 0;
       $49 = $48&1;
       if ($49) {
        label = 14;
        break;
       }
      }
     }
     $52 = HEAP32[$29>>2]|0;
     $53 = HEAP32[$2>>2]|0;
     $54 = (($52) - ($53))|0;
     $55 = (($54|0) / 24)&-1;
     __THREW__ = 0;
     $56 = (invoke_iiii(111,($$083|0),($1|0),($2|0))|0);
     $57 = __THREW__; __THREW__ = 0;
     $58 = $57&1;
     if ($58) {
      label = 20;
      break;
     }
     $59 = HEAP32[$29>>2]|0;
     $60 = HEAP32[$2>>2]|0;
     $61 = (($59) - ($60))|0;
     $62 = (($61|0) / 24)&-1;
     $63 = HEAP8[$16>>0]|0;
     $64 = ($63<<24>>24)==(0);
     L21: do {
      if (!($64)) {
       $65 = HEAP32[$$pre>>2]|0;
       $66 = ((($65)) + -16|0);
       $68 = $65;
       while(1) {
        $67 = ($68|0)==($66|0);
        if ($67) {
         break L21;
        }
        $69 = ((($68)) + -16|0);
        HEAP32[$$pre>>2] = $69;
        __ZNSt3__213__vector_baseINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEED2Ev($69);
        $$pre$i = HEAP32[$$pre>>2]|0;
        $68 = $$pre$i;
       }
      }
     } while(0);
     $72 = ($56|0)==($$083|0);
     $73 = ($56|0)==($1|0);
     $or$cond = $72 | $73;
     if ($or$cond) {
      label = 61;
      break;
     }
     $74 = HEAP8[$16>>0]|0;
     $75 = ($74<<24>>24)==(0);
     L28: do {
      if ($75) {
       $$0 = $55;
      } else {
       $76 = HEAP32[$$pre>>2]|0;
       $$sroa$0$0$copyload$i86100 = HEAP32[$$sroa$0$0$$sroa_idx$i85>>2]|0;
       HEAP32[$6>>2] = $$sroa$0$0$copyload$i86100;
       $77 = ((($76)) + -12|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = ((($76)) + -8|0);
       $80 = HEAP32[$79>>2]|0;
       $81 = ($78>>>0)<($80>>>0);
       if ($81) {
        HEAP32[$78>>2] = 0;
        $82 = ((($78)) + 4|0);
        HEAP32[$82>>2] = 0;
        $83 = ((($78)) + 8|0);
        HEAP32[$83>>2] = 0;
        $84 = ((($78)) + 12|0);
        HEAP32[$84>>2] = $$sroa$0$0$copyload$i86100;
        $85 = HEAP32[$77>>2]|0;
        $86 = ((($85)) + 16|0);
        HEAP32[$77>>2] = $86;
       } else {
        $87 = ((($76)) + -16|0);
        __THREW__ = 0;
        invoke_vii(112,($87|0),($6|0));
        $88 = __THREW__; __THREW__ = 0;
        $89 = $88&1;
        if ($89) {
         label = 28;
         break L10;
        }
       }
       $$067 = $55;
       while(1) {
        $90 = ($$067>>>0)<($62>>>0);
        if (!($90)) {
         $$0 = $55;
         break L28;
        }
        $93 = HEAP32[$$pre>>2]|0;
        $94 = ((($93)) + -12|0);
        $95 = HEAP32[$94>>2]|0;
        $96 = HEAP32[$2>>2]|0;
        $97 = (($96) + (($$067*24)|0)|0);
        $98 = ((($95)) + -12|0);
        $99 = HEAP32[$98>>2]|0;
        $100 = ((($95)) + -8|0);
        $101 = HEAP32[$100>>2]|0;
        $102 = ($99|0)==($101|0);
        if ($102) {
         $107 = ((($95)) + -16|0);
         __THREW__ = 0;
         invoke_vii(113,($107|0),($97|0));
         $108 = __THREW__; __THREW__ = 0;
         $109 = $108&1;
         if ($109) {
          label = 34;
          break L10;
         }
        } else {
         __THREW__ = 0;
         invoke_vii(107,($99|0),($97|0));
         $103 = __THREW__; __THREW__ = 0;
         $104 = $103&1;
         if ($104) {
          label = 34;
          break L10;
         }
         $105 = HEAP32[$98>>2]|0;
         $106 = ((($105)) + 24|0);
         HEAP32[$98>>2] = $106;
        }
        $110 = (($$067) + 1)|0;
        $$067 = $110;
       }
      }
     } while(0);
     while(1) {
      $113 = ($$0>>>0)<($62>>>0);
      if (!($113)) {
       $$069 = $62;
       break;
      }
      $114 = HEAP8[$30>>0]|0;
      $115 = ($114<<24>>24)<(0);
      $116 = HEAP32[$31>>2]|0;
      $117 = $114&255;
      $118 = $115 ? $116 : $117;
      $119 = ($118>>>0)>(1);
      if ($119) {
       __THREW__ = 0;
       (invoke_iii(95,($4|0),(7790|0))|0);
       $120 = __THREW__; __THREW__ = 0;
       $121 = $120&1;
       if ($121) {
        label = 38;
        break L10;
       }
      }
      $124 = HEAP32[$2>>2]|0;
      $125 = (($124) + (($$0*24)|0)|0);
      __THREW__ = 0;
      invoke_vii(96,($7|0),($125|0));
      $126 = __THREW__; __THREW__ = 0;
      $127 = $126&1;
      if ($127) {
       label = 42;
       break L10;
      }
      $128 = HEAP8[$32>>0]|0;
      $129 = ($128<<24>>24)<(0);
      $130 = HEAP32[$7>>2]|0;
      $131 = $129 ? $130 : $7;
      $132 = HEAP32[$33>>2]|0;
      $133 = $128&255;
      $134 = $129 ? $132 : $133;
      __THREW__ = 0;
      (invoke_iiii(88,($4|0),($131|0),($134|0))|0);
      $135 = __THREW__; __THREW__ = 0;
      $136 = $135&1;
      if ($136) {
       label = 43;
       break L10;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
      $137 = (($$0) + 1)|0;
      $$0 = $137;
     }
     while(1) {
      $142 = ($$069|0)==($55|0);
      if ($142) {
       $$083 = $56;
       continue L10;
      }
      $143 = HEAP32[$29>>2]|0;
      $144 = ((($143)) + -24|0);
      $146 = $143;
      while(1) {
       $145 = ($146|0)==($144|0);
       if ($145) {
        break;
       }
       $147 = ((($146)) + -24|0);
       HEAP32[$29>>2] = $147;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($147);
       $$pre$i92 = HEAP32[$29>>2]|0;
       $146 = $$pre$i92;
      }
      $148 = (($$069) + -1)|0;
      $$069 = $148;
     }
    }
    do {
     if ((label|0) == 14) {
      $50 = ___cxa_find_matching_catch_2()|0;
      $51 = tempRet0;
      $$4 = $51;$$482 = $50;
     }
     else if ((label|0) == 20) {
      $70 = ___cxa_find_matching_catch_2()|0;
      $71 = tempRet0;
      $$4 = $71;$$482 = $70;
     }
     else if ((label|0) == 28) {
      $91 = ___cxa_find_matching_catch_2()|0;
      $92 = tempRet0;
      $$4 = $92;$$482 = $91;
     }
     else if ((label|0) == 34) {
      $111 = ___cxa_find_matching_catch_2()|0;
      $112 = tempRet0;
      $$4 = $112;$$482 = $111;
     }
     else if ((label|0) == 38) {
      $122 = ___cxa_find_matching_catch_2()|0;
      $123 = tempRet0;
      $$4 = $123;$$482 = $122;
     }
     else if ((label|0) == 42) {
      $138 = ___cxa_find_matching_catch_2()|0;
      $139 = tempRet0;
      $$074 = $139;$$078 = $138;
      label = 44;
     }
     else if ((label|0) == 43) {
      $140 = ___cxa_find_matching_catch_2()|0;
      $141 = tempRet0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
      $$074 = $141;$$078 = $140;
      label = 44;
     }
     else if ((label|0) == 50) {
      $149 = ((($$083)) + 1|0);
      $150 = HEAP8[$30>>0]|0;
      $151 = ($150<<24>>24)<(0);
      $152 = HEAP32[$4>>2]|0;
      $153 = HEAP32[$31>>2]|0;
      $154 = $150&255;
      $155 = $151 ? $152 : $4;
      $156 = $151 ? $153 : $154;
      $157 = (($155) + ($156)|0);
      $158 = ((($157)) + -1|0);
      $159 = HEAP8[$158>>0]|0;
      $160 = ($159<<24>>24)==(62);
      if ($160) {
       __THREW__ = 0;
       (invoke_iii(95,($4|0),(8981|0))|0);
       $165 = __THREW__; __THREW__ = 0;
       $166 = $165&1;
       if ($166) {
        label = 52;
       }
      } else {
       __THREW__ = 0;
       (invoke_iii(95,($4|0),(7604|0))|0);
       $161 = __THREW__; __THREW__ = 0;
       $162 = $161&1;
       if ($162) {
        label = 52;
       }
      }
      if ((label|0) == 52) {
       $163 = ___cxa_find_matching_catch_2()|0;
       $164 = tempRet0;
       $$4 = $164;$$482 = $163;
       break;
      }
      ;HEAP32[$9>>2]=HEAP32[$4>>2]|0;HEAP32[$9+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$9+8>>2]=HEAP32[$4+8>>2]|0;
      $$0$i$i = 0;
      while(1) {
       $exitcond$i$i = ($$0$i$i|0)==(3);
       if ($exitcond$i$i) {
        break;
       }
       $167 = (($4) + ($$0$i$i<<2)|0);
       HEAP32[$167>>2] = 0;
       $168 = (($$0$i$i) + 1)|0;
       $$0$i$i = $168;
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($8,$9);
      $169 = HEAP32[$29>>2]|0;
      $170 = ((($2)) + 8|0);
      $171 = HEAP32[$170>>2]|0;
      $172 = ($169>>>0)<($171>>>0);
      if ($172) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($169,$8);
       $173 = HEAP32[$29>>2]|0;
       $174 = ((($173)) + 24|0);
       HEAP32[$29>>2] = $174;
      } else {
       __THREW__ = 0;
       invoke_vii(105,($2|0),($8|0));
       $175 = __THREW__; __THREW__ = 0;
       $176 = $175&1;
       if ($176) {
        $177 = ___cxa_find_matching_catch_2()|0;
        $178 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($8);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
        $$4 = $178;$$482 = $177;
        break;
       }
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($8);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      $$3 = $149;
      break L1;
     }
     else if ((label|0) == 61) {
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      $$3 = $0;
      break L1;
     }
    } while(0);
    if ((label|0) == 44) {
     $$4 = $$074;$$482 = $$078;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
    ___resumeException($$482|0);
    // unreachable;
   } else {
    $$3 = $0;
   }
  } else {
   $$3 = $0;
  }
 } while(0);
 STACKTOP = sp;return ($$3|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 12|0);
 $3 = ((($2)) + 11|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)<(0);
 $6 = HEAP32[$2>>2]|0;
 $7 = $5 ? $6 : $2;
 $8 = ((($1)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $4&255;
 $11 = $5 ? $9 : $10;
 $12 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($1,$7,$11)|0);
 ;HEAP32[$0>>2]=HEAP32[$1>>2]|0;HEAP32[$0+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$1+8>>2]|0;
 $$0$i$i$i = 0;
 while(1) {
  $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
  if ($exitcond$i$i$i) {
   break;
  }
  $13 = (($1) + ($$0$i$i$i<<2)|0);
  HEAP32[$13>>2] = 0;
  $14 = (($$0$i$i$i) + 1)|0;
  $$0$i$i$i = $14;
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0$i = 0, $$0$i$i = 0, $$034 = 0, $$038 = 0, $$040 = 0, $$040$in = 0, $$1 = 0, $$135 = 0, $$3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0;
 var $9 = 0, $exitcond$i$i = 0, $isdigit = 0, $isdigit48 = 0, $isdigittmp = 0, $isdigittmp47 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $3 = sp + 76|0;
 $4 = sp + 64|0;
 $5 = sp + 40|0;
 $6 = sp + 16|0;
 $7 = sp;
 $8 = ($0|0)==($1|0);
 L1: do {
  if ($8) {
   $$3 = $0;
  } else {
   $9 = HEAP8[$0>>0]|0;
   $10 = $9 << 24 >> 24;
   $isdigittmp = (($10) + -48)|0;
   $isdigit = ($isdigittmp>>>0)<(10);
   if ($isdigit) {
    $11 = ((($0)) + 1|0);
    $12 = ($11|0)==($1|0);
    if ($12) {
     $$3 = $0;
    } else {
     $$038 = $isdigittmp;$$040$in = $11;
     while(1) {
      $$040 = HEAP8[$$040$in>>0]|0;
      $13 = $$040 << 24 >> 24;
      $isdigittmp47 = (($13) + -48)|0;
      $isdigit48 = ($isdigittmp47>>>0)<(10);
      if (!($isdigit48)) {
       break;
      }
      $14 = ((($$040$in)) + 1|0);
      $15 = ($14|0)==($1|0);
      if ($15) {
       $$3 = $0;
       break L1;
      }
      $16 = ($$038*10)|0;
      $17 = (($isdigittmp47) + ($16))|0;
      $$038 = $17;$$040$in = $14;
     }
     $18 = $1;
     $19 = $$040$in;
     $20 = (($18) - ($19))|0;
     $21 = ($20>>>0)<($$038>>>0);
     if ($21) {
      $$3 = $0;
     } else {
      ;HEAP32[$3>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3,$$040$in,$$038);
      __THREW__ = 0;
      invoke_viii(102,($4|0),($3|0),10);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      L10: do {
       if ($23) {
        $54 = ___cxa_find_matching_catch_2()|0;
        $55 = tempRet0;
        $$1 = $55;$$135 = $54;
       } else {
        __THREW__ = 0;
        $24 = (invoke_ii(99,(8948|0))|0);
        $25 = __THREW__; __THREW__ = 0;
        $26 = $25&1;
        if ($26) {
         $41 = ___cxa_find_matching_catch_3(0|0)|0;
         $42 = tempRet0;
         ___clang_call_terminate($41);
         // unreachable;
        }
        $27 = ((($4)) + 11|0);
        $28 = HEAP8[$27>>0]|0;
        $29 = ($28<<24>>24)<(0);
        $30 = ((($4)) + 4|0);
        $31 = HEAP32[$30>>2]|0;
        $32 = $28&255;
        $33 = $29 ? $31 : $32;
        $34 = ($24|0)==($33|0);
        do {
         if ($34) {
          __THREW__ = 0;
          $35 = (invoke_iiii(100,($4|0),(8948|0),($24|0))|0);
          $36 = __THREW__; __THREW__ = 0;
          $37 = $36&1;
          if ($37) {
           $39 = ___cxa_find_matching_catch_3(0|0)|0;
           $40 = tempRet0;
           ___clang_call_terminate($39);
           // unreachable;
          } else {
           $38 = ($35|0)==(0);
           $$0$i = $38;
           break;
          }
         } else {
          $$0$i = 0;
         }
        } while(0);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
        L22: do {
         if ($$0$i) {
          __THREW__ = 0;
          invoke_vi(114,($5|0));
          $43 = __THREW__; __THREW__ = 0;
          $44 = $43&1;
          do {
           if ($44) {
            $56 = ___cxa_find_matching_catch_2()|0;
            $57 = tempRet0;
            $$0 = $57;$$034 = $56;
           } else {
            $45 = ((($2)) + 4|0);
            $46 = HEAP32[$45>>2]|0;
            $47 = ((($2)) + 8|0);
            $48 = HEAP32[$47>>2]|0;
            $49 = ($46>>>0)<($48>>>0);
            if ($49) {
             __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($46,$5);
             $50 = HEAP32[$45>>2]|0;
             $51 = ((($50)) + 24|0);
             HEAP32[$45>>2] = $51;
            } else {
             __THREW__ = 0;
             invoke_vii(105,($2|0),($5|0));
             $52 = __THREW__; __THREW__ = 0;
             $53 = $52&1;
             if ($53) {
              $58 = ___cxa_find_matching_catch_2()|0;
              $59 = tempRet0;
              __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
              $$0 = $59;$$034 = $58;
              break;
             }
            }
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
            break L22;
           }
          } while(0);
          $$1 = $$0;$$135 = $$034;
          break L10;
         } else {
          ;HEAP32[$7>>2]=HEAP32[$3>>2]|0;HEAP32[$7+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$3+8>>2]|0;
          $$0$i$i = 0;
          while(1) {
           $exitcond$i$i = ($$0$i$i|0)==(3);
           if ($exitcond$i$i) {
            break;
           }
           $60 = (($3) + ($$0$i$i<<2)|0);
           HEAP32[$60>>2] = 0;
           $61 = (($$0$i$i) + 1)|0;
           $$0$i$i = $61;
          }
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($6,$7);
          $62 = ((($2)) + 4|0);
          $63 = HEAP32[$62>>2]|0;
          $64 = ((($2)) + 8|0);
          $65 = HEAP32[$64>>2]|0;
          $66 = ($63>>>0)<($65>>>0);
          if ($66) {
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($63,$6);
           $67 = HEAP32[$62>>2]|0;
           $68 = ((($67)) + 24|0);
           HEAP32[$62>>2] = $68;
          } else {
           __THREW__ = 0;
           invoke_vii(105,($2|0),($6|0));
           $69 = __THREW__; __THREW__ = 0;
           $70 = $69&1;
           if ($70) {
            $71 = ___cxa_find_matching_catch_2()|0;
            $72 = tempRet0;
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($6);
            __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
            $$1 = $72;$$135 = $71;
            break L10;
           }
          }
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($6);
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
         }
        } while(0);
        $73 = (($$040$in) + ($$038)|0);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
        $$3 = $73;
        break L1;
       }
      } while(0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
      ___resumeException($$135|0);
      // unreachable;
     }
    }
   } else {
    $$3 = $0;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$3|0);
}
function __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EERKSB_PKS8_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $3 = (($0) + ($$0$i$i<<2)|0);
  HEAP32[$3>>2] = 0;
  $4 = (($$0$i$i) + 1)|0;
  $$0$i$i = $4;
 }
 $5 = ((($1)) + 11|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)<(0);
 $8 = ((($1)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $6&255;
 $11 = $7 ? $9 : $10;
 __THREW__ = 0;
 $12 = (invoke_ii(99,($2|0))|0);
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if (!($14)) {
  $15 = HEAP8[$5>>0]|0;
  $16 = ($15<<24>>24)<(0);
  $17 = HEAP32[$1>>2]|0;
  $18 = $16 ? $17 : $1;
  $19 = (($11) + ($12))|0;
  __THREW__ = 0;
  invoke_viiii(115,($0|0),($18|0),($11|0),($19|0));
  $20 = __THREW__; __THREW__ = 0;
  $21 = $20&1;
  if (!($21)) {
   __THREW__ = 0;
   (invoke_iiii(88,($0|0),($2|0),($12|0))|0);
   $22 = __THREW__; __THREW__ = 0;
   $23 = $22&1;
   if (!($23)) {
    return;
   }
  }
 }
 $24 = ___cxa_find_matching_catch_2()|0;
 $25 = tempRet0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
 ___resumeException($24|0);
 // unreachable;
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $$0$i$i1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $exitcond$i$i = 0, $exitcond$i$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=HEAP32[$1>>2]|0;HEAP32[$0+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$1+8>>2]|0;
 $$0$i$i1 = 0;
 while(1) {
  $exitcond$i$i2 = ($$0$i$i1|0)==(3);
  if ($exitcond$i$i2) {
   break;
  }
  $2 = (($1) + ($$0$i$i1<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($$0$i$i1) + 1)|0;
  $$0$i$i1 = $3;
 }
 $4 = ((($0)) + 12|0);
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $5 = (($4) + ($$0$i$i<<2)|0);
  HEAP32[$5>>2] = 0;
  $6 = (($$0$i$i) + 1)|0;
  $$0$i$i = $6;
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i$i$i$i = 0, $exitcond$i$i$i$i4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 3|0;
 $3 = sp + 2|0;
 $4 = sp + 1|0;
 $5 = sp;
 $6 = ((($0)) + 11|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = ($7<<24>>24)<(0);
 if ($8) {
  $9 = HEAP32[$0>>2]|0;
  HEAP8[$4>>0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($9,$4);
  $10 = ((($0)) + 4|0);
  HEAP32[$10>>2] = 0;
 } else {
  HEAP8[$5>>0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($0,$5);
  HEAP8[$6>>0] = 0;
 }
 __THREW__ = 0;
 invoke_vi(92,($0|0));
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if ($12) {
  $13 = ___cxa_find_matching_catch_3(0|0)|0;
  $14 = tempRet0;
  ___clang_call_terminate($13);
  // unreachable;
 }
 ;HEAP32[$0>>2]=HEAP32[$1>>2]|0;HEAP32[$0+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$1+8>>2]|0;
 $$0$i$i$i$i = 0;
 while(1) {
  $exitcond$i$i$i$i = ($$0$i$i$i$i|0)==(3);
  if ($exitcond$i$i$i$i) {
   break;
  }
  $15 = (($1) + ($$0$i$i$i$i<<2)|0);
  HEAP32[$15>>2] = 0;
  $16 = (($$0$i$i$i$i) + 1)|0;
  $$0$i$i$i$i = $16;
 }
 $17 = ((($0)) + 12|0);
 $18 = ((($1)) + 12|0);
 $19 = ((($17)) + 11|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = ($20<<24>>24)<(0);
 if ($21) {
  $22 = HEAP32[$17>>2]|0;
  HEAP8[$2>>0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($22,$2);
  $23 = ((($0)) + 16|0);
  HEAP32[$23>>2] = 0;
 } else {
  HEAP8[$3>>0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($17,$3);
  HEAP8[$19>>0] = 0;
 }
 __THREW__ = 0;
 invoke_vi(92,($17|0));
 $24 = __THREW__; __THREW__ = 0;
 $25 = $24&1;
 if ($25) {
  $26 = ___cxa_find_matching_catch_3(0|0)|0;
  $27 = tempRet0;
  ___clang_call_terminate($26);
  // unreachable;
 }
 ;HEAP32[$17>>2]=HEAP32[$18>>2]|0;HEAP32[$17+4>>2]=HEAP32[$18+4>>2]|0;HEAP32[$17+8>>2]=HEAP32[$18+8>>2]|0;
 $$0$i$i$i$i3 = 0;
 while(1) {
  $exitcond$i$i$i$i4 = ($$0$i$i$i$i3|0)==(3);
  if ($exitcond$i$i$i$i4) {
   break;
  }
  $28 = (($18) + ($$0$i$i$i$i3<<2)|0);
  HEAP32[$28>>2] = 0;
  $29 = (($$0$i$i$i$i3) + 1)|0;
  $$0$i$i$i$i3 = $29;
 }
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $$0$i$i3 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $exitcond$i$i = 0, $exitcond$i$i4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=HEAP32[$1>>2]|0;HEAP32[$0+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$1+8>>2]|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $2 = (($1) + ($$0$i$i<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($$0$i$i) + 1)|0;
  $$0$i$i = $3;
 }
 $4 = ((($0)) + 12|0);
 $5 = ((($1)) + 12|0);
 ;HEAP32[$4>>2]=HEAP32[$5>>2]|0;HEAP32[$4+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$5+8>>2]|0;
 $$0$i$i3 = 0;
 while(1) {
  $exitcond$i$i4 = ($$0$i$i3|0)==(3);
  if ($exitcond$i$i4) {
   break;
  }
  $6 = (($5) + ($$0$i$i3<<2)|0);
  HEAP32[$6>>2] = 0;
  $7 = (($$0$i$i3) + 1)|0;
  $$0$i$i3 = $7;
 }
 return;
}
function __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sroa$speculated$$i = 0, $$sroa$speculated$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 $3 = ((($0)) + 12|0);
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$0>>2]|0;
 $7 = (($5) - ($6))|0;
 $8 = (($7|0) / 24)&-1;
 $9 = (($8) + 1)|0;
 $10 = (__ZNKSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE8max_sizeEv($0)|0);
 $11 = ($10>>>0)<($9>>>0);
 if ($11) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
 }
 $12 = ((($0)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[$0>>2]|0;
 $15 = (($13) - ($14))|0;
 $16 = (($15|0) / 24)&-1;
 $17 = $10 >>> 1;
 $18 = ($16>>>0)<($17>>>0);
 $19 = $16 << 1;
 $20 = ($19>>>0)<($9>>>0);
 $$sroa$speculated$i = $20 ? $9 : $19;
 $$sroa$speculated$$i = $18 ? $$sroa$speculated$i : $10;
 $21 = HEAP32[$4>>2]|0;
 $22 = (($21) - ($14))|0;
 $23 = (($22|0) / 24)&-1;
 __ZNSt3__214__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($2,$$sroa$speculated$$i,$23,$3);
 $24 = ((($2)) + 8|0);
 $25 = HEAP32[$24>>2]|0;
 __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($25,$1);
 $26 = ((($25)) + 24|0);
 HEAP32[$24>>2] = $26;
 __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($0,$2);
 __ZNSt3__214__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($2);
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0 = 0, $$078 = 0, $$3 = 0, $$87 = 0, $$88 = 0, $$pre$i = 0, $$pre$i90 = 0, $$sroa$0$0$$sroa_idx$i = 0, $$sroa$0$0$copyload$i96 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = sp + 32|0;
 $4 = sp + 24|0;
 $5 = sp + 12|0;
 $6 = sp;
 $7 = $1;
 $8 = $0;
 $9 = (($7) - ($8))|0;
 $10 = ($9|0)>(1);
 L1: do {
  if ($10) {
   $11 = HEAP8[$0>>0]|0;
   $12 = ($11<<24>>24)==(76);
   $13 = ((($0)) + 1|0);
   $$ = $12 ? $13 : $0;
   $14 = HEAP8[$$>>0]|0;
   $15 = $14 << 24 >> 24;
   switch ($15|0) {
   case 78:  {
    $16 = (__ZN10__cxxabiv112_GLOBAL__N_117parse_nested_nameINS0_2DbEEEPKcS4_S4_RT_($$,$1,$2)|0);
    $17 = ($16|0)==($$|0);
    $$87 = $17 ? $0 : $16;
    $$3 = $$87;
    break L1;
    break;
   }
   case 90:  {
    $18 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_local_nameINS0_2DbEEEPKcS4_S4_RT_($$,$1,$2)|0);
    $19 = ($18|0)==($$|0);
    $$88 = $19 ? $0 : $18;
    $$3 = $$88;
    break L1;
    break;
   }
   default: {
    $20 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_unscoped_nameINS0_2DbEEEPKcS4_S4_RT_($$,$1,$2)|0);
    $21 = ($20|0)==($$|0);
    do {
     if ($21) {
      $81 = (__ZN10__cxxabiv112_GLOBAL__N_118parse_substitutionINS0_2DbEEEPKcS4_S4_RT_($$,$1,$2)|0);
      $82 = ($81|0)==($$|0);
      $83 = ($81|0)==($1|0);
      $or$cond = $82 | $83;
      if ($or$cond) {
       $$3 = $0;
       break L1;
      }
      $84 = HEAP8[$81>>0]|0;
      $85 = ($84<<24>>24)==(73);
      if (!($85)) {
       $$3 = $0;
       break L1;
      }
      $86 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($81,$1,$2)|0);
      $87 = ($86|0)==($81|0);
      if ($87) {
       $$3 = $0;
       break L1;
      }
      $88 = ((($2)) + 4|0);
      $89 = HEAP32[$88>>2]|0;
      $90 = HEAP32[$2>>2]|0;
      $91 = (($89) - ($90))|0;
      $92 = (($91|0) / 24)&-1;
      $93 = ($92>>>0)<(2);
      if ($93) {
       $$3 = $0;
       break L1;
      }
      $94 = $89;
      $95 = ((($94)) + -24|0);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($6,$95);
      $96 = HEAP32[$88>>2]|0;
      $97 = ((($96)) + -24|0);
      $99 = $96;
      while(1) {
       $98 = ($99|0)==($97|0);
       if ($98) {
        break;
       }
       $100 = ((($99)) + -24|0);
       HEAP32[$88>>2] = $100;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($100);
       $$pre$i90 = HEAP32[$88>>2]|0;
       $99 = $$pre$i90;
      }
      $101 = ((($96)) + -48|0);
      $102 = ((($6)) + 11|0);
      $103 = HEAP8[$102>>0]|0;
      $104 = ($103<<24>>24)<(0);
      $105 = HEAP32[$6>>2]|0;
      $106 = $104 ? $105 : $6;
      $107 = ((($6)) + 4|0);
      $108 = HEAP32[$107>>2]|0;
      $109 = $103&255;
      $110 = $104 ? $108 : $109;
      __THREW__ = 0;
      (invoke_iiii(88,($101|0),($106|0),($110|0))|0);
      $111 = __THREW__; __THREW__ = 0;
      $112 = $111&1;
      if ($112) {
       $113 = ___cxa_find_matching_catch_2()|0;
       $114 = tempRet0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
       $$0 = $114;$$078 = $113;
       break;
      } else {
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
       $$3 = $86;
       break L1;
      }
     } else {
      $22 = ($20|0)==($1|0);
      if ($22) {
       $$3 = $1;
       break L1;
      }
      $23 = HEAP8[$20>>0]|0;
      $24 = ($23<<24>>24)==(73);
      if (!($24)) {
       $$3 = $20;
       break L1;
      }
      $25 = HEAP32[$2>>2]|0;
      $26 = ((($2)) + 4|0);
      $27 = HEAP32[$26>>2]|0;
      $28 = ($25|0)==($27|0);
      if ($28) {
       $$3 = $0;
       break L1;
      }
      $29 = ((($27)) + -24|0);
      $$sroa$0$0$$sroa_idx$i = ((($2)) + 12|0);
      $$sroa$0$0$copyload$i96 = HEAP32[$$sroa$0$0$$sroa_idx$i>>2]|0;
      HEAP32[$4>>2] = $$sroa$0$0$copyload$i96;
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($3,$29,$4);
      $30 = ((($2)) + 20|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = ((($2)) + 24|0);
      $33 = HEAP32[$32>>2]|0;
      $34 = ($31>>>0)<($33>>>0);
      if ($34) {
       $35 = ((($3)) + 12|0);
       HEAP32[$31>>2] = 0;
       $36 = ((($31)) + 4|0);
       HEAP32[$36>>2] = 0;
       $37 = ((($31)) + 8|0);
       $38 = HEAP32[$35>>2]|0;
       HEAP32[$37>>2] = 0;
       $39 = ((($31)) + 12|0);
       HEAP32[$39>>2] = $38;
       $40 = HEAP32[$3>>2]|0;
       HEAP32[$31>>2] = $40;
       $41 = ((($3)) + 4|0);
       $42 = HEAP32[$41>>2]|0;
       HEAP32[$36>>2] = $42;
       $43 = ((($3)) + 8|0);
       $44 = HEAP32[$43>>2]|0;
       $45 = ((($31)) + 8|0);
       HEAP32[$45>>2] = $44;
       HEAP32[$43>>2] = 0;
       HEAP32[$41>>2] = 0;
       HEAP32[$3>>2] = 0;
       $46 = HEAP32[$30>>2]|0;
       $47 = ((($46)) + 16|0);
       HEAP32[$30>>2] = $47;
      } else {
       $48 = ((($2)) + 16|0);
       __THREW__ = 0;
       invoke_vii(98,($48|0),($3|0));
       $49 = __THREW__; __THREW__ = 0;
       $50 = $49&1;
       if ($50) {
        $58 = ___cxa_find_matching_catch_2()|0;
        $59 = tempRet0;
        __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($3);
        $$0 = $59;$$078 = $58;
        break;
       }
      }
      __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($3);
      $51 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($20,$1,$2)|0);
      $52 = ($51|0)==($20|0);
      if ($52) {
       $$3 = $0;
       break L1;
      }
      $53 = HEAP32[$26>>2]|0;
      $54 = HEAP32[$2>>2]|0;
      $55 = (($53) - ($54))|0;
      $56 = (($55|0) / 24)&-1;
      $57 = ($56>>>0)<(2);
      if ($57) {
       $$3 = $0;
       break L1;
      }
      $60 = $53;
      $61 = ((($60)) + -24|0);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($5,$61);
      $62 = HEAP32[$26>>2]|0;
      $63 = ((($62)) + -24|0);
      $65 = $62;
      while(1) {
       $64 = ($65|0)==($63|0);
       if ($64) {
        break;
       }
       $66 = ((($65)) + -24|0);
       HEAP32[$26>>2] = $66;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($66);
       $$pre$i = HEAP32[$26>>2]|0;
       $65 = $$pre$i;
      }
      $67 = ((($62)) + -48|0);
      $68 = ((($5)) + 11|0);
      $69 = HEAP8[$68>>0]|0;
      $70 = ($69<<24>>24)<(0);
      $71 = HEAP32[$5>>2]|0;
      $72 = $70 ? $71 : $5;
      $73 = ((($5)) + 4|0);
      $74 = HEAP32[$73>>2]|0;
      $75 = $69&255;
      $76 = $70 ? $74 : $75;
      __THREW__ = 0;
      (invoke_iiii(88,($67|0),($72|0),($76|0))|0);
      $77 = __THREW__; __THREW__ = 0;
      $78 = $77&1;
      if ($78) {
       $79 = ___cxa_find_matching_catch_2()|0;
       $80 = tempRet0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
       $$0 = $80;$$078 = $79;
       break;
      } else {
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
       $$3 = $51;
       break L1;
      }
     }
    } while(0);
    ___resumeException($$078|0);
    // unreachable;
   }
   }
  } else {
   $$3 = $0;
  }
 } while(0);
 STACKTOP = sp;return ($$3|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_118parse_substitutionINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$072 = 0, $$076 = 0, $$077 = 0, $$1 = 0, $$174 = 0, $$275 = 0, $$sink = 0, $$sink84 = 0, $$sroa$0103$0 = 0, $$sroa$097$0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $isdigit = 0, $isdigit81 = 0, $isdigittmp = 0, $isdigittmp80 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $3 = sp + 120|0;
 $4 = sp + 96|0;
 $5 = sp + 72|0;
 $6 = sp + 48|0;
 $7 = sp + 24|0;
 $8 = sp;
 $9 = $1;
 $10 = $0;
 $11 = (($9) - ($10))|0;
 $12 = ($11|0)>(1);
 L1: do {
  if ($12) {
   $13 = HEAP8[$0>>0]|0;
   $14 = ($13<<24>>24)==(83);
   if ($14) {
    $15 = ((($0)) + 1|0);
    $16 = HEAP8[$15>>0]|0;
    $17 = $16 << 24 >> 24;
    $18 = ((($0)) + 2|0);
    $19 = ((($2)) + 16|0);
    L4: do {
     switch ($17|0) {
     case 97:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj15EEERAT__Kc($3,8894);
      $20 = ((($2)) + 4|0);
      $21 = HEAP32[$20>>2]|0;
      $22 = ((($2)) + 8|0);
      $23 = HEAP32[$22>>2]|0;
      $24 = ($21>>>0)<($23>>>0);
      if ($24) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($21,$3);
       $25 = HEAP32[$20>>2]|0;
       $26 = ((($25)) + 24|0);
       HEAP32[$20>>2] = $26;
      } else {
       __THREW__ = 0;
       invoke_vii(105,($2|0),($3|0));
       $27 = __THREW__; __THREW__ = 0;
       $28 = $27&1;
       if ($28) {
        $29 = ___cxa_find_matching_catch_2()|0;
        $30 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
        $$076 = $29;$$077 = $30;
        break L4;
       }
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $$1 = $18;
      break L1;
      break;
     }
     case 98:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj18EEERAT__Kc($4,8909);
      $31 = ((($2)) + 4|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = ((($2)) + 8|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = ($32>>>0)<($34>>>0);
      if ($35) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($32,$4);
       $36 = HEAP32[$31>>2]|0;
       $37 = ((($36)) + 24|0);
       HEAP32[$31>>2] = $37;
      } else {
       __THREW__ = 0;
       invoke_vii(105,($2|0),($4|0));
       $38 = __THREW__; __THREW__ = 0;
       $39 = $38&1;
       if ($39) {
        $40 = ___cxa_find_matching_catch_2()|0;
        $41 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
        $$076 = $40;$$077 = $41;
        break L4;
       }
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
      $$1 = $18;
      break L1;
      break;
     }
     case 115:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj12EEERAT__Kc($5,8388);
      $42 = ((($2)) + 4|0);
      $43 = HEAP32[$42>>2]|0;
      $44 = ((($2)) + 8|0);
      $45 = HEAP32[$44>>2]|0;
      $46 = ($43>>>0)<($45>>>0);
      if ($46) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($43,$5);
       $47 = HEAP32[$42>>2]|0;
       $48 = ((($47)) + 24|0);
       HEAP32[$42>>2] = $48;
      } else {
       __THREW__ = 0;
       invoke_vii(105,($2|0),($5|0));
       $49 = __THREW__; __THREW__ = 0;
       $50 = $49&1;
       if ($50) {
        $51 = ___cxa_find_matching_catch_2()|0;
        $52 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
        $$076 = $51;$$077 = $52;
        break L4;
       }
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
      $$1 = $18;
      break L1;
      break;
     }
     case 105:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj13EEERAT__Kc($6,8484);
      $53 = ((($2)) + 4|0);
      $54 = HEAP32[$53>>2]|0;
      $55 = ((($2)) + 8|0);
      $56 = HEAP32[$55>>2]|0;
      $57 = ($54>>>0)<($56>>>0);
      if ($57) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($54,$6);
       $58 = HEAP32[$53>>2]|0;
       $59 = ((($58)) + 24|0);
       HEAP32[$53>>2] = $59;
      } else {
       __THREW__ = 0;
       invoke_vii(105,($2|0),($6|0));
       $60 = __THREW__; __THREW__ = 0;
       $61 = $60&1;
       if ($61) {
        $62 = ___cxa_find_matching_catch_2()|0;
        $63 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($6);
        $$076 = $62;$$077 = $63;
        break L4;
       }
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($6);
      $$1 = $18;
      break L1;
      break;
     }
     case 111:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj13EEERAT__Kc($7,8561);
      $64 = ((($2)) + 4|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = ((($2)) + 8|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = ($65>>>0)<($67>>>0);
      if ($68) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($65,$7);
       $69 = HEAP32[$64>>2]|0;
       $70 = ((($69)) + 24|0);
       HEAP32[$64>>2] = $70;
      } else {
       __THREW__ = 0;
       invoke_vii(105,($2|0),($7|0));
       $71 = __THREW__; __THREW__ = 0;
       $72 = $71&1;
       if ($72) {
        $73 = ___cxa_find_matching_catch_2()|0;
        $74 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($7);
        $$076 = $73;$$077 = $74;
        break L4;
       }
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($7);
      $$1 = $18;
      break L1;
      break;
     }
     case 100:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj14EEERAT__Kc($8,8638);
      $75 = ((($2)) + 4|0);
      $76 = HEAP32[$75>>2]|0;
      $77 = ((($2)) + 8|0);
      $78 = HEAP32[$77>>2]|0;
      $79 = ($76>>>0)<($78>>>0);
      if ($79) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($76,$8);
       $80 = HEAP32[$75>>2]|0;
       $81 = ((($80)) + 24|0);
       HEAP32[$75>>2] = $81;
      } else {
       __THREW__ = 0;
       invoke_vii(105,($2|0),($8|0));
       $82 = __THREW__; __THREW__ = 0;
       $83 = $82&1;
       if ($83) {
        $84 = ___cxa_find_matching_catch_2()|0;
        $85 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($8);
        $$076 = $84;$$077 = $85;
        break L4;
       }
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($8);
      $$1 = $18;
      break L1;
      break;
     }
     case 95:  {
      $86 = HEAP32[$19>>2]|0;
      $87 = ((($2)) + 20|0);
      $88 = HEAP32[$87>>2]|0;
      $89 = ($86|0)==($88|0);
      if ($89) {
       $$1 = $0;
       break L1;
      }
      $90 = HEAP32[$86>>2]|0;
      $91 = ((($86)) + 4|0);
      $92 = HEAP32[$91>>2]|0;
      $93 = ((($2)) + 4|0);
      $94 = ((($2)) + 8|0);
      $$sroa$0103$0 = $90;
      while(1) {
       $95 = ($$sroa$0103$0|0)==($92|0);
       if ($95) {
        $$1 = $18;
        break L1;
       }
       $96 = HEAP32[$93>>2]|0;
       $97 = HEAP32[$94>>2]|0;
       $98 = ($96|0)==($97|0);
       if ($98) {
        __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIRKS3_EEvOT_($2,$$sroa$0103$0);
       } else {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_($96,$$sroa$0103$0);
        $99 = HEAP32[$93>>2]|0;
        $100 = ((($99)) + 24|0);
        HEAP32[$93>>2] = $100;
       }
       $101 = ((($$sroa$0103$0)) + 24|0);
       $$sroa$0103$0 = $101;
      }
      break;
     }
     default: {
      $isdigittmp = (($17) + -48)|0;
      $isdigit = ($isdigittmp>>>0)<(10);
      if (!($isdigit)) {
       $102 = (_isupper($17)|0);
       $103 = ($102|0)==(0);
       if ($103) {
        $$1 = $0;
        break L1;
       }
      }
      $$sink = $isdigit ? -48 : -55;
      $104 = (($$sink) + ($17))|0;
      $$072 = $18;$$174 = $104;
      while(1) {
       $105 = ($$072|0)==($1|0);
       $106 = ((($$072)) + 1|0);
       if ($105) {
        $$1 = $0;
        break L1;
       }
       $107 = HEAP8[$$072>>0]|0;
       $108 = $107 << 24 >> 24;
       $isdigittmp80 = (($108) + -48)|0;
       $isdigit81 = ($isdigittmp80>>>0)<(10);
       if (!($isdigit81)) {
        $109 = (_isupper($108)|0);
        $110 = ($109|0)==(0);
        if ($110) {
         break;
        }
       }
       $111 = ($$174*36)|0;
       $$sink84 = $isdigit81 ? -48 : -55;
       $112 = (($108) + ($111))|0;
       $$275 = (($112) + ($$sink84))|0;
       $$072 = $106;$$174 = $$275;
      }
      $113 = ($107<<24>>24)==(95);
      if (!($113)) {
       $$1 = $0;
       break L1;
      }
      $114 = (($$174) + 1)|0;
      $115 = ((($2)) + 20|0);
      $116 = HEAP32[$115>>2]|0;
      $117 = HEAP32[$19>>2]|0;
      $118 = (($116) - ($117))|0;
      $119 = $118 >> 4;
      $120 = ($114>>>0)<($119>>>0);
      $121 = $117;
      if (!($120)) {
       $$1 = $0;
       break L1;
      }
      $122 = (($121) + ($114<<4)|0);
      $123 = HEAP32[$122>>2]|0;
      $124 = (((($121) + ($114<<4)|0)) + 4|0);
      $125 = HEAP32[$124>>2]|0;
      $126 = ((($2)) + 4|0);
      $127 = ((($2)) + 8|0);
      $$sroa$097$0 = $123;
      while(1) {
       $128 = ($$sroa$097$0|0)==($125|0);
       if ($128) {
        $$1 = $106;
        break L1;
       }
       $129 = HEAP32[$126>>2]|0;
       $130 = HEAP32[$127>>2]|0;
       $131 = ($129|0)==($130|0);
       if ($131) {
        __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIRKS3_EEvOT_($2,$$sroa$097$0);
       } else {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_($129,$$sroa$097$0);
        $132 = HEAP32[$126>>2]|0;
        $133 = ((($132)) + 24|0);
        HEAP32[$126>>2] = $133;
       }
       $134 = ((($$sroa$097$0)) + 24|0);
       $$sroa$097$0 = $134;
      }
     }
     }
    } while(0);
    ___resumeException($$076|0);
    // unreachable;
   } else {
    $$1 = $0;
   }
  } else {
   $$1 = $0;
  }
 } while(0);
 STACKTOP = sp;return ($$1|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_114parse_decltypeINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i$i = 0, $$0$i$i$i30 = 0, $$1 = 0, $$124 = 0, $$127 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i31 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = sp + 40|0;
 $4 = sp + 24|0;
 $5 = sp + 12|0;
 $6 = sp;
 $7 = $1;
 $8 = $0;
 $9 = (($7) - ($8))|0;
 $10 = ($9|0)>(3);
 L1: do {
  if ($10) {
   $11 = HEAP8[$0>>0]|0;
   $12 = ($11<<24>>24)==(68);
   if ($12) {
    $13 = ((($0)) + 1|0);
    $14 = HEAP8[$13>>0]|0;
    $15 = $14 << 24 >> 24;
    switch ($15|0) {
    case 84: case 116:  {
     break;
    }
    default: {
     $$127 = $0;
     break L1;
    }
    }
    $16 = ((($0)) + 2|0);
    $17 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($16,$1,$2)|0);
    $18 = ($17|0)==($16|0);
    $19 = ($17|0)==($1|0);
    $or$cond = $18 | $19;
    if ($or$cond) {
     $$127 = $0;
    } else {
     $20 = HEAP8[$17>>0]|0;
     $21 = ($20<<24>>24)==(69);
     if ($21) {
      $22 = HEAP32[$2>>2]|0;
      $23 = ((($2)) + 4|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = ($22|0)==($24|0);
      if ($25) {
       $$127 = $0;
      } else {
       $26 = ((($24)) + -24|0);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($6,$26);
       __THREW__ = 0;
       $27 = (invoke_iiii(97,($6|0),0,(8884|0))|0);
       $28 = __THREW__; __THREW__ = 0;
       $29 = $28&1;
       do {
        if ($29) {
         $40 = ___cxa_find_matching_catch_2()|0;
         $41 = tempRet0;
         $$1 = $41;$$124 = $40;
        } else {
         ;HEAP32[$5>>2]=HEAP32[$6>>2]|0;HEAP32[$5+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$6+8>>2]|0;
         $$0$i$i$i = 0;
         while(1) {
          $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
          if ($exitcond$i$i$i) {
           break;
          }
          $30 = (($6) + ($$0$i$i$i<<2)|0);
          HEAP32[$30>>2] = 0;
          $31 = (($$0$i$i$i) + 1)|0;
          $$0$i$i$i = $31;
         }
         __THREW__ = 0;
         $32 = (invoke_iii(95,($5|0),(7566|0))|0);
         $33 = __THREW__; __THREW__ = 0;
         $34 = $33&1;
         if ($34) {
          $42 = ___cxa_find_matching_catch_2()|0;
          $43 = tempRet0;
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
          $$1 = $43;$$124 = $42;
          break;
         }
         ;HEAP32[$4>>2]=HEAP32[$5>>2]|0;HEAP32[$4+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$5+8>>2]|0;
         $$0$i$i$i30 = 0;
         while(1) {
          $exitcond$i$i$i31 = ($$0$i$i$i30|0)==(3);
          if ($exitcond$i$i$i31) {
           break;
          }
          $35 = (($5) + ($$0$i$i$i30<<2)|0);
          HEAP32[$35>>2] = 0;
          $36 = (($$0$i$i$i30) + 1)|0;
          $$0$i$i$i30 = $36;
         }
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($3,$4);
         $37 = HEAP32[$23>>2]|0;
         $38 = ((($37)) + -24|0);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($38,$3);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
         $39 = ((($17)) + 1|0);
         $$127 = $39;
         break L1;
        }
       } while(0);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
       ___resumeException($$124|0);
       // unreachable;
      }
     } else {
      $$127 = $0;
     }
    }
   } else {
    $$127 = $0;
   }
  } else {
   $$127 = $0;
  }
 } while(0);
 STACKTOP = sp;return ($$127|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_117parse_vector_typeINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i = 0, $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i128 = 0, $$0$i$i$i132 = 0, $$0$i$i$i136 = 0, $$0$i$i$i141 = 0, $$0104 = 0, $$0113 = 0, $$1105 = 0, $$1114 = 0, $$2103 = 0, $$2106 = 0, $$2115 = 0, $$3107 = 0, $$3116 = 0, $$5109 = 0, $$5118 = 0, $$6110 = 0, $$6119 = 0;
 var $$7111 = 0, $$7120 = 0, $$8112 = 0, $$8121 = 0, $$899$ph = 0, $$9 = 0, $$off = 0, $$pre$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $exitcond$i$i$i = 0;
 var $exitcond$i$i$i$i = 0, $exitcond$i$i$i129 = 0, $exitcond$i$i$i133 = 0, $exitcond$i$i$i137 = 0, $exitcond$i$i$i142 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $3 = sp + 149|0;
 $4 = sp + 148|0;
 $5 = sp + 136|0;
 $6 = sp + 124|0;
 $7 = sp + 112|0;
 $8 = sp + 88|0;
 $9 = sp + 72|0;
 $10 = sp + 60|0;
 $11 = sp + 48|0;
 $12 = sp + 36|0;
 $13 = sp + 24|0;
 $14 = sp + 12|0;
 $15 = sp;
 $16 = $1;
 $17 = $0;
 $18 = (($16) - ($17))|0;
 $19 = ($18|0)>(3);
 L1: do {
  if ($19) {
   $20 = HEAP8[$0>>0]|0;
   $21 = ($20<<24>>24)==(68);
   if ($21) {
    $22 = ((($0)) + 1|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = ($23<<24>>24)==(118);
    if ($24) {
     $25 = ((($0)) + 2|0);
     $26 = HEAP8[$25>>0]|0;
     $$off = (($26) + -49)<<24>>24;
     $27 = ($$off&255)<(9);
     do {
      if ($27) {
       $28 = (__ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($25,$1)|0);
       $29 = ($28|0)==($1|0);
       if ($29) {
        $$9 = $0;
        break L1;
       }
       $30 = HEAP8[$28>>0]|0;
       $31 = ($30<<24>>24)==(95);
       if (!($31)) {
        $$9 = $0;
        break L1;
       }
       $32 = $28;
       $33 = $25;
       $34 = (($32) - ($33))|0;
       $35 = ((($28)) + 1|0);
       $36 = ($35|0)==($1|0);
       if ($36) {
        $$9 = $0;
        break L1;
       }
       $37 = HEAP8[$35>>0]|0;
       $38 = ($37<<24>>24)==(112);
       if ($38) {
        $74 = ((($28)) + 2|0);
        ;HEAP32[$11>>2]=0|0;HEAP32[$11+4>>2]=0|0;HEAP32[$11+8>>2]=0|0;
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($11,$25,$34);
        __THREW__ = 0;
        $75 = (invoke_iiii(97,($11|0),0,(7617|0))|0);
        $76 = __THREW__; __THREW__ = 0;
        $77 = $76&1;
        if ($77) {
         $94 = ___cxa_find_matching_catch_2()|0;
         $95 = tempRet0;
         $$3107 = $95;$$3116 = $94;
        } else {
         ;HEAP32[$10>>2]=HEAP32[$11>>2]|0;HEAP32[$10+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$10+8>>2]=HEAP32[$11+8>>2]|0;
         $$0$i$i$i132 = 0;
         while(1) {
          $exitcond$i$i$i133 = ($$0$i$i$i132|0)==(3);
          if ($exitcond$i$i$i133) {
           break;
          }
          $78 = (($11) + ($$0$i$i$i132<<2)|0);
          HEAP32[$78>>2] = 0;
          $79 = (($$0$i$i$i132) + 1)|0;
          $$0$i$i$i132 = $79;
         }
         __THREW__ = 0;
         $80 = (invoke_iii(95,($10|0),(7615|0))|0);
         $81 = __THREW__; __THREW__ = 0;
         $82 = $81&1;
         do {
          if ($82) {
           $96 = ___cxa_find_matching_catch_2()|0;
           $97 = tempRet0;
           $$2106 = $97;$$2115 = $96;
          } else {
           ;HEAP32[$9>>2]=HEAP32[$10>>2]|0;HEAP32[$9+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$9+8>>2]=HEAP32[$10+8>>2]|0;
           $$0$i$i$i136 = 0;
           while(1) {
            $exitcond$i$i$i137 = ($$0$i$i$i136|0)==(3);
            if ($exitcond$i$i$i137) {
             break;
            }
            $83 = (($10) + ($$0$i$i$i136<<2)|0);
            HEAP32[$83>>2] = 0;
            $84 = (($$0$i$i$i136) + 1)|0;
            $$0$i$i$i136 = $84;
           }
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($8,$9);
           $85 = ((($2)) + 4|0);
           $86 = HEAP32[$85>>2]|0;
           $87 = ((($2)) + 8|0);
           $88 = HEAP32[$87>>2]|0;
           $89 = ($86>>>0)<($88>>>0);
           if ($89) {
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($86,$8);
            $90 = HEAP32[$85>>2]|0;
            $91 = ((($90)) + 24|0);
            HEAP32[$85>>2] = $91;
           } else {
            __THREW__ = 0;
            invoke_vii(105,($2|0),($8|0));
            $92 = __THREW__; __THREW__ = 0;
            $93 = $92&1;
            if ($93) {
             $98 = ___cxa_find_matching_catch_2()|0;
             $99 = tempRet0;
             __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($8);
             __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
             $$2106 = $99;$$2115 = $98;
             break;
            }
           }
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($8);
           __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
           __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($10);
           __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($11);
           $$9 = $74;
           break L1;
          }
         } while(0);
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($10);
         $$3107 = $$2106;$$3116 = $$2115;
        }
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($11);
        $$8112 = $$3107;$$8121 = $$3116;
        break;
       } else {
        $39 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($35,$1,$2)|0);
        $40 = ($39|0)==($35|0);
        if ($40) {
         $$9 = $0;
         break L1;
        }
        $41 = HEAP32[$2>>2]|0;
        $42 = ((($2)) + 4|0);
        $43 = HEAP32[$42>>2]|0;
        $44 = ($41|0)==($43|0);
        if ($44) {
         $$9 = $0;
         break L1;
        }
        ;HEAP32[$7>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($7,$25,$34);
        __THREW__ = 0;
        $45 = (invoke_iiii(97,($7|0),0,(7606|0))|0);
        $46 = __THREW__; __THREW__ = 0;
        $47 = $46&1;
        if ($47) {
         $68 = ___cxa_find_matching_catch_2()|0;
         $69 = tempRet0;
         $$1105 = $69;$$1114 = $68;
        } else {
         ;HEAP32[$6>>2]=HEAP32[$7>>2]|0;HEAP32[$6+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$7+8>>2]|0;
         $$0$i$i$i = 0;
         while(1) {
          $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
          if ($exitcond$i$i$i) {
           break;
          }
          $48 = (($7) + ($$0$i$i$i<<2)|0);
          HEAP32[$48>>2] = 0;
          $49 = (($$0$i$i$i) + 1)|0;
          $$0$i$i$i = $49;
         }
         __THREW__ = 0;
         $50 = (invoke_iii(95,($6|0),(7615|0))|0);
         $51 = __THREW__; __THREW__ = 0;
         $52 = $51&1;
         do {
          if ($52) {
           $70 = ___cxa_find_matching_catch_2()|0;
           $71 = tempRet0;
           $$0104 = $71;$$0113 = $70;
          } else {
           ;HEAP32[$5>>2]=HEAP32[$6>>2]|0;HEAP32[$5+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$6+8>>2]|0;
           $$0$i$i$i128 = 0;
           while(1) {
            $exitcond$i$i$i129 = ($$0$i$i$i128|0)==(3);
            if ($exitcond$i$i$i129) {
             break;
            }
            $53 = (($6) + ($$0$i$i$i128<<2)|0);
            HEAP32[$53>>2] = 0;
            $54 = (($$0$i$i$i128) + 1)|0;
            $$0$i$i$i128 = $54;
           }
           $55 = HEAP32[$42>>2]|0;
           $56 = ((($55)) + -24|0);
           $57 = ((($5)) + 11|0);
           $58 = HEAP8[$57>>0]|0;
           $59 = ($58<<24>>24)<(0);
           $60 = HEAP32[$5>>2]|0;
           $61 = $59 ? $60 : $5;
           $62 = ((($5)) + 4|0);
           $63 = HEAP32[$62>>2]|0;
           $64 = $58&255;
           $65 = $59 ? $63 : $64;
           __THREW__ = 0;
           (invoke_iiii(88,($56|0),($61|0),($65|0))|0);
           $66 = __THREW__; __THREW__ = 0;
           $67 = $66&1;
           if ($67) {
            $72 = ___cxa_find_matching_catch_2()|0;
            $73 = tempRet0;
            __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
            $$0104 = $73;$$0113 = $72;
            break;
           } else {
            __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
            __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
            __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
            $$9 = $39;
            break L1;
           }
          }
         } while(0);
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
         $$1105 = $$0104;$$1114 = $$0113;
        }
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
        $$8112 = $$1105;$$8121 = $$1114;
        break;
       }
      } else {
       ;HEAP32[$12>>2]=0|0;HEAP32[$12+4>>2]=0|0;HEAP32[$12+8>>2]=0|0;
       $$0$i$i = 0;
       while(1) {
        $exitcond$i$i = ($$0$i$i|0)==(3);
        if ($exitcond$i$i) {
         break;
        }
        $100 = (($12) + ($$0$i$i<<2)|0);
        HEAP32[$100>>2] = 0;
        $101 = (($$0$i$i) + 1)|0;
        $$0$i$i = $101;
       }
       $102 = ($26<<24>>24)==(95);
       L60: do {
        if ($102) {
         $$2103 = $25;
         label = 64;
        } else {
         __THREW__ = 0;
         $103 = (invoke_iiii(116,($25|0),($1|0),($2|0))|0);
         $104 = __THREW__; __THREW__ = 0;
         $105 = $104&1;
         if ($105) {
          label = 50;
         } else {
          $106 = ($103|0)==($25|0);
          if ($106) {
           $$2103 = $25;
           label = 64;
          } else {
           $107 = HEAP32[$2>>2]|0;
           $108 = ((($2)) + 4|0);
           $109 = HEAP32[$108>>2]|0;
           $110 = ($107|0)==($109|0);
           if ($110) {
            label = 83;
           } else {
            $113 = ((($109)) + -24|0);
            __THREW__ = 0;
            invoke_vii(96,($13|0),($113|0));
            $114 = __THREW__; __THREW__ = 0;
            $115 = $114&1;
            if ($115) {
             $132 = ___cxa_find_matching_catch_2()|0;
             $133 = tempRet0;
             $$7111 = $133;$$7120 = $132;
             break;
            }
            $116 = ((($12)) + 11|0);
            $117 = HEAP8[$116>>0]|0;
            $118 = ($117<<24>>24)<(0);
            if ($118) {
             $119 = HEAP32[$12>>2]|0;
             HEAP8[$3>>0] = 0;
             __ZNSt3__211char_traitsIcE6assignERcRKc($119,$3);
             $120 = ((($12)) + 4|0);
             HEAP32[$120>>2] = 0;
            } else {
             HEAP8[$4>>0] = 0;
             __ZNSt3__211char_traitsIcE6assignERcRKc($12,$4);
             HEAP8[$116>>0] = 0;
            }
            __THREW__ = 0;
            invoke_vi(92,($12|0));
            $121 = __THREW__; __THREW__ = 0;
            $122 = $121&1;
            if ($122) {
             $123 = ___cxa_find_matching_catch_3(0|0)|0;
             $124 = tempRet0;
             ___clang_call_terminate($123);
             // unreachable;
            }
            ;HEAP32[$12>>2]=HEAP32[$13>>2]|0;HEAP32[$12+4>>2]=HEAP32[$13+4>>2]|0;HEAP32[$12+8>>2]=HEAP32[$13+8>>2]|0;
            $$0$i$i$i$i = 0;
            while(1) {
             $exitcond$i$i$i$i = ($$0$i$i$i$i|0)==(3);
             if ($exitcond$i$i$i$i) {
              break;
             }
             $125 = (($13) + ($$0$i$i$i$i<<2)|0);
             HEAP32[$125>>2] = 0;
             $126 = (($$0$i$i$i$i) + 1)|0;
             $$0$i$i$i$i = $126;
            }
            __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($13);
            $127 = HEAP32[$108>>2]|0;
            $128 = ((($127)) + -24|0);
            $130 = $127;
            while(1) {
             $129 = ($130|0)==($128|0);
             if ($129) {
              $$2103 = $103;
              label = 64;
              break L60;
             }
             $131 = ((($130)) + -24|0);
             HEAP32[$108>>2] = $131;
             __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($131);
             $$pre$i = HEAP32[$108>>2]|0;
             $130 = $$pre$i;
            }
           }
          }
         }
        }
       } while(0);
       L82: do {
        if ((label|0) == 64) {
         $134 = ($$2103|0)==($1|0);
         L84: do {
          if ($134) {
           $$899$ph = $0;
          } else {
           $135 = HEAP8[$$2103>>0]|0;
           $136 = ($135<<24>>24)==(95);
           if ($136) {
            $137 = ((($$2103)) + 1|0);
            $138 = ($137|0)==($1|0);
            if ($138) {
             $$899$ph = $0;
            } else {
             __THREW__ = 0;
             $139 = (invoke_iiii(91,($137|0),($1|0),($2|0))|0);
             $140 = __THREW__; __THREW__ = 0;
             $141 = $140&1;
             if ($141) {
              label = 50;
              break L82;
             }
             $142 = ($139|0)==($137|0);
             if ($142) {
              $$899$ph = $0;
             } else {
              $143 = HEAP32[$2>>2]|0;
              $144 = ((($2)) + 4|0);
              $145 = HEAP32[$144>>2]|0;
              $146 = ($143|0)==($145|0);
              if ($146) {
               label = 83;
               break L82;
              }
              __THREW__ = 0;
              invoke_viii(117,($15|0),(7606|0),($12|0));
              $147 = __THREW__; __THREW__ = 0;
              $148 = $147&1;
              if ($148) {
               $167 = ___cxa_find_matching_catch_2()|0;
               $168 = tempRet0;
               $$6110 = $168;$$6119 = $167;
              } else {
               __THREW__ = 0;
               $149 = (invoke_iii(95,($15|0),(7615|0))|0);
               $150 = __THREW__; __THREW__ = 0;
               $151 = $150&1;
               do {
                if ($151) {
                 $169 = ___cxa_find_matching_catch_2()|0;
                 $170 = tempRet0;
                 $$5109 = $170;$$5118 = $169;
                } else {
                 ;HEAP32[$14>>2]=HEAP32[$15>>2]|0;HEAP32[$14+4>>2]=HEAP32[$15+4>>2]|0;HEAP32[$14+8>>2]=HEAP32[$15+8>>2]|0;
                 $$0$i$i$i141 = 0;
                 while(1) {
                  $exitcond$i$i$i142 = ($$0$i$i$i141|0)==(3);
                  if ($exitcond$i$i$i142) {
                   break;
                  }
                  $152 = (($15) + ($$0$i$i$i141<<2)|0);
                  HEAP32[$152>>2] = 0;
                  $153 = (($$0$i$i$i141) + 1)|0;
                  $$0$i$i$i141 = $153;
                 }
                 $154 = HEAP32[$144>>2]|0;
                 $155 = ((($154)) + -24|0);
                 $156 = ((($14)) + 11|0);
                 $157 = HEAP8[$156>>0]|0;
                 $158 = ($157<<24>>24)<(0);
                 $159 = HEAP32[$14>>2]|0;
                 $160 = $158 ? $159 : $14;
                 $161 = ((($14)) + 4|0);
                 $162 = HEAP32[$161>>2]|0;
                 $163 = $157&255;
                 $164 = $158 ? $162 : $163;
                 __THREW__ = 0;
                 (invoke_iiii(88,($155|0),($160|0),($164|0))|0);
                 $165 = __THREW__; __THREW__ = 0;
                 $166 = $165&1;
                 if ($166) {
                  $171 = ___cxa_find_matching_catch_2()|0;
                  $172 = tempRet0;
                  __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($14);
                  $$5109 = $172;$$5118 = $171;
                  break;
                 } else {
                  __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($14);
                  __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($15);
                  $$899$ph = $139;
                  break L84;
                 }
                }
               } while(0);
               __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($15);
               $$6110 = $$5109;$$6119 = $$5118;
              }
              $$7111 = $$6110;$$7120 = $$6119;
              break L82;
             }
            }
           } else {
            $$899$ph = $0;
           }
          }
         } while(0);
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($12);
         $$9 = $$899$ph;
         break L1;
        }
       } while(0);
       if ((label|0) == 50) {
        $111 = ___cxa_find_matching_catch_2()|0;
        $112 = tempRet0;
        $$7111 = $112;$$7120 = $111;
       }
       else if ((label|0) == 83) {
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($12);
        $$9 = $0;
        break L1;
       }
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($12);
       $$8112 = $$7111;$$8121 = $$7120;
      }
     } while(0);
     ___resumeException($$8121|0);
     // unreachable;
    } else {
     $$9 = $0;
    }
   } else {
    $$9 = $0;
   }
  } else {
   $$9 = $0;
  }
 } while(0);
 STACKTOP = sp;return ($$9|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$017 = 0, $$2 = 0, $$off = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isdigit = 0, $isdigittmp = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==($1|0);
 L1: do {
  if ($2) {
   $$2 = $0;
  } else {
   $3 = HEAP8[$0>>0]|0;
   $4 = ($3<<24>>24)==(110);
   $5 = ((($0)) + 1|0);
   $$ = $4 ? $5 : $0;
   $6 = ($$|0)==($1|0);
   if ($6) {
    $$2 = $0;
   } else {
    $7 = HEAP8[$$>>0]|0;
    $8 = ($7<<24>>24)==(48);
    $9 = ((($$)) + 1|0);
    if ($8) {
     $$2 = $9;
    } else {
     $$off = (($7) + -49)<<24>>24;
     $10 = ($$off&255)<(9);
     if ($10) {
      $$017 = $9;
      while(1) {
       $11 = ($$017|0)==($1|0);
       if ($11) {
        $$2 = $1;
        break L1;
       }
       $12 = HEAP8[$$017>>0]|0;
       $13 = $12 << 24 >> 24;
       $isdigittmp = (($13) + -48)|0;
       $isdigit = ($isdigittmp>>>0)<(10);
       if (!($isdigit)) {
        $$2 = $$017;
        break L1;
       }
       $14 = ((($$017)) + 1|0);
       $$017 = $14;
      }
     } else {
      $$2 = $0;
     }
    }
   }
  }
 } while(0);
 return ($$2|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ($2>>>0)>(4294967279);
 if ($4) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  label = 5;
 } else {
  $5 = ($2>>>0)<(11);
  if ($5) {
   $6 = $2&255;
   $7 = ((($0)) + 11|0);
   HEAP8[$7>>0] = $6;
   $$0 = $0;
  } else {
   label = 5;
  }
 }
 if ((label|0) == 5) {
  $8 = (($2) + 16)|0;
  $9 = $8 & -16;
  $10 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($9)|0);
  HEAP32[$0>>2] = $10;
  $11 = $9 | -2147483648;
  $12 = ((($0)) + 8|0);
  HEAP32[$12>>2] = $11;
  $13 = ((($0)) + 4|0);
  HEAP32[$13>>2] = $2;
  $$0 = $10;
 }
 (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0,$1,$2)|0);
 $14 = (($$0) + ($2)|0);
 HEAP8[$3>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($14,$3);
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i = 0, $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i615 = 0, $$0$i$i$i599 = 0, $$0$i$i$i605 = 0, $$0$i$i$i609 = 0, $$0$i$i$i618 = 0, $$0$i$i$i622 = 0, $$0$i$i$i625 = 0, $$0$i$i$i631 = 0, $$0$i$i$i634 = 0, $$0$i$i$i638 = 0, $$0$i$i$i642 = 0, $$0$i$i$i650 = 0, $$0$i$i$i654 = 0, $$0$i$i$i658 = 0, $$0$i$i$i662 = 0, $$0$i$i$i666 = 0, $$0$i$i602 = 0;
 var $$0503 = 0, $$0504$off0 = 0, $$0505 = 0, $$0526 = 0, $$10515 = 0, $$10536 = 0, $$12517 = 0, $$12538 = 0, $$14 = 0, $$14519 = 0, $$14540 = 0, $$1506 = 0, $$1527 = 0, $$15520 = 0, $$15541 = 0, $$16521 = 0, $$16542 = 0, $$17522 = 0, $$17543 = 0, $$18523 = 0;
 var $$18544 = 0, $$19524 = 0, $$19545 = 0, $$20525 = 0, $$20546 = 0, $$21 = 0, $$21547 = 0, $$2507 = 0, $$2528 = 0, $$3508 = 0, $$3529 = 0, $$5510 = 0, $$5531 = 0, $$558 = 0, $$559 = 0, $$560 = 0, $$561 = 0, $$562 = 0, $$563 = 0, $$564 = 0;
 var $$565 = 0, $$566 = 0, $$567 = 0, $$568 = 0, $$569 = 0, $$570 = 0, $$571 = 0, $$572 = 0, $$573 = 0, $$574 = 0, $$575 = 0, $$576 = 0, $$577 = 0, $$578 = 0, $$579 = 0, $$580 = 0, $$581 = 0, $$582 = 0, $$583 = 0, $$584 = 0;
 var $$585 = 0, $$586 = 0, $$587 = 0, $$588 = 0, $$589 = 0, $$590 = 0, $$591 = 0, $$592 = 0, $$593 = 0, $$594 = 0, $$595 = 0, $$596 = 0, $$597 = 0, $$598 = 0, $$6511 = 0, $$6532 = 0, $$7512 = 0, $$7533 = 0, $$8513 = 0, $$8534 = 0;
 var $$pre$i = 0, $$pre$i629 = 0, $$pre$i646 = 0, $$pre$i648 = 0, $$pre$i670 = 0, $$pre$i672 = 0, $$pre$i674 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0;
 var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0;
 var $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0;
 var $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0;
 var $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0;
 var $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0;
 var $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0;
 var $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0;
 var $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0;
 var $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0;
 var $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0;
 var $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0;
 var $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0;
 var $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0;
 var $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0;
 var $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0;
 var $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0;
 var $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0;
 var $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0;
 var $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0;
 var $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0;
 var $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0;
 var $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0;
 var $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0;
 var $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0;
 var $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0;
 var $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i$i = 0, $exitcond$i$i$i$i616 = 0, $exitcond$i$i$i600 = 0, $exitcond$i$i$i606 = 0, $exitcond$i$i$i610 = 0, $exitcond$i$i$i619 = 0, $exitcond$i$i$i623 = 0;
 var $exitcond$i$i$i626 = 0, $exitcond$i$i$i632 = 0, $exitcond$i$i$i635 = 0, $exitcond$i$i$i639 = 0, $exitcond$i$i$i643 = 0, $exitcond$i$i$i651 = 0, $exitcond$i$i$i655 = 0, $exitcond$i$i$i659 = 0, $exitcond$i$i$i663 = 0, $exitcond$i$i$i667 = 0, $exitcond$i$i603 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 960|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(960|0);
 $3 = sp + 951|0;
 $4 = sp + 950|0;
 $5 = sp + 949|0;
 $6 = sp + 948|0;
 $7 = sp + 936|0;
 $8 = sp + 924|0;
 $9 = sp + 912|0;
 $10 = sp + 900|0;
 $11 = sp + 888|0;
 $12 = sp + 876|0;
 $13 = sp + 864|0;
 $14 = sp + 852|0;
 $15 = sp + 840|0;
 $16 = sp + 828|0;
 $17 = sp + 816|0;
 $18 = sp + 804|0;
 $19 = sp + 792|0;
 $20 = sp + 780|0;
 $21 = sp + 768|0;
 $22 = sp + 756|0;
 $23 = sp + 744|0;
 $24 = sp + 732|0;
 $25 = sp + 720|0;
 $26 = sp + 708|0;
 $27 = sp + 696|0;
 $28 = sp + 684|0;
 $29 = sp + 672|0;
 $30 = sp + 660|0;
 $31 = sp + 648|0;
 $32 = sp + 624|0;
 $33 = sp + 608|0;
 $34 = sp + 596|0;
 $35 = sp + 584|0;
 $36 = sp + 572|0;
 $37 = sp + 560|0;
 $38 = sp + 548|0;
 $39 = sp + 536|0;
 $40 = sp + 524|0;
 $41 = sp + 512|0;
 $42 = sp + 500|0;
 $43 = sp + 488|0;
 $44 = sp + 476|0;
 $45 = sp + 464|0;
 $46 = sp + 440|0;
 $47 = sp + 424|0;
 $48 = sp + 412|0;
 $49 = sp + 400|0;
 $50 = sp + 388|0;
 $51 = sp + 376|0;
 $52 = sp + 364|0;
 $53 = sp + 352|0;
 $54 = sp + 340|0;
 $55 = sp + 328|0;
 $56 = sp + 316|0;
 $57 = sp + 304|0;
 $58 = sp + 292|0;
 $59 = sp + 280|0;
 $60 = sp + 256|0;
 $61 = sp + 240|0;
 $62 = sp + 228|0;
 $63 = sp + 216|0;
 $64 = sp + 204|0;
 $65 = sp + 192|0;
 $66 = sp + 180|0;
 $67 = sp + 168|0;
 $68 = sp + 144|0;
 $69 = sp + 132|0;
 $70 = sp + 120|0;
 $71 = sp + 108|0;
 $72 = sp + 96|0;
 $73 = sp + 84|0;
 $74 = sp + 72|0;
 $75 = sp + 60|0;
 $76 = sp + 48|0;
 $77 = sp + 36|0;
 $78 = sp + 24|0;
 $79 = sp;
 $80 = $1;
 $81 = $0;
 $82 = (($80) - ($81))|0;
 $83 = ($82|0)>(1);
 L1: do {
  if ($83) {
   $84 = ($82|0)>(3);
   $85 = ((($0)) + 2|0);
   if ($84) {
    $86 = HEAP8[$0>>0]|0;
    $87 = ($86<<24>>24)==(103);
    if ($87) {
     $88 = ((($0)) + 1|0);
     $89 = HEAP8[$88>>0]|0;
     $90 = ($89<<24>>24)==(115);
     $$558 = $90 ? $85 : $0;
     $$0503 = $$558;$$0504$off0 = $90;
    } else {
     $$0503 = $0;$$0504$off0 = 0;
    }
   } else {
    $$0503 = $0;$$0504$off0 = 0;
   }
   $91 = HEAP8[$$0503>>0]|0;
   $92 = $91 << 24 >> 24;
   $93 = ((($$0503)) + 1|0);
   $94 = ((($0)) + 3|0);
   $95 = ($85|0)!=($1|0);
   $96 = ((($$0503)) + 2|0);
   L7: do {
    switch ($92|0) {
    case 76:  {
     $97 = (__ZN10__cxxabiv112_GLOBAL__N_118parse_expr_primaryINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
     $$14 = $97;
     break L1;
     break;
    }
    case 84:  {
     $98 = (__ZN10__cxxabiv112_GLOBAL__N_120parse_template_paramINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
     $$14 = $98;
     break L1;
     break;
    }
    case 102:  {
     $99 = (__ZN10__cxxabiv112_GLOBAL__N_120parse_function_paramINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
     $$14 = $99;
     break L1;
     break;
    }
    case 97:  {
     $100 = HEAP8[$93>>0]|0;
     $101 = $100 << 24 >> 24;
     switch ($101|0) {
     case 97:  {
      ;HEAP32[$7>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
      $102 = (__ZNSt3__211char_traitsIcE6lengthEPKc(7570)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($7,7570,$102);
      __THREW__ = 0;
      $103 = (invoke_iiiii(118,($85|0),($1|0),($7|0),($2|0))|0);
      $104 = __THREW__; __THREW__ = 0;
      $105 = $104&1;
      if ($105) {
       $107 = ___cxa_find_matching_catch_2()|0;
       $108 = tempRet0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
       $$21 = $107;$$21547 = $108;
       break L7;
      } else {
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
       $106 = ($103|0)==($85|0);
       $$559 = $106 ? $0 : $103;
       $$14 = $$559;
       break L1;
      }
      break;
     }
     case 100:  {
      ;HEAP32[$8>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;
      $109 = (__ZNSt3__211char_traitsIcE6lengthEPKc(7588)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($8,7588,$109);
      __THREW__ = 0;
      $110 = (invoke_iiiii(119,($85|0),($1|0),($8|0),($2|0))|0);
      $111 = __THREW__; __THREW__ = 0;
      $112 = $111&1;
      if ($112) {
       $114 = ___cxa_find_matching_catch_2()|0;
       $115 = tempRet0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
       $$21 = $114;$$21547 = $115;
       break L7;
      } else {
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
       $113 = ($110|0)==($85|0);
       $$560 = $113 ? $0 : $110;
       $$14 = $$560;
       break L1;
      }
      break;
     }
     case 110:  {
      ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
      $116 = (__ZNSt3__211char_traitsIcE6lengthEPKc(7588)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($9,7588,$116);
      __THREW__ = 0;
      $117 = (invoke_iiiii(118,($85|0),($1|0),($9|0),($2|0))|0);
      $118 = __THREW__; __THREW__ = 0;
      $119 = $118&1;
      if ($119) {
       $121 = ___cxa_find_matching_catch_2()|0;
       $122 = tempRet0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
       $$21 = $121;$$21547 = $122;
       break L7;
      } else {
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
       $120 = ($117|0)==($85|0);
       $$561 = $120 ? $0 : $117;
       $$14 = $$561;
       break L1;
      }
      break;
     }
     case 78:  {
      ;HEAP32[$10>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
      $123 = (__ZNSt3__211char_traitsIcE6lengthEPKc(7631)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($10,7631,$123);
      __THREW__ = 0;
      $124 = (invoke_iiiii(118,($85|0),($1|0),($10|0),($2|0))|0);
      $125 = __THREW__; __THREW__ = 0;
      $126 = $125&1;
      if ($126) {
       $128 = ___cxa_find_matching_catch_2()|0;
       $129 = tempRet0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($10);
       $$21 = $128;$$21547 = $129;
       break L7;
      } else {
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($10);
       $127 = ($124|0)==($85|0);
       $$562 = $127 ? $0 : $124;
       $$14 = $$562;
       break L1;
      }
      break;
     }
     case 83:  {
      ;HEAP32[$11>>2]=0|0;HEAP32[$11+4>>2]=0|0;HEAP32[$11+8>>2]=0|0;
      $130 = (__ZNSt3__211char_traitsIcE6lengthEPKc(7634)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($11,7634,$130);
      __THREW__ = 0;
      $131 = (invoke_iiiii(118,($85|0),($1|0),($11|0),($2|0))|0);
      $132 = __THREW__; __THREW__ = 0;
      $133 = $132&1;
      if ($133) {
       $135 = ___cxa_find_matching_catch_2()|0;
       $136 = tempRet0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($11);
       $$21 = $135;$$21547 = $136;
       break L7;
      } else {
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($11);
       $134 = ($131|0)==($85|0);
       $$563 = $134 ? $0 : $131;
       $$14 = $$563;
       break L1;
      }
      break;
     }
     case 116:  {
      $137 = (__ZN10__cxxabiv112_GLOBAL__N_118parse_alignof_typeINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
      $$14 = $137;
      break L1;
      break;
     }
     case 122:  {
      $138 = (__ZN10__cxxabiv112_GLOBAL__N_118parse_alignof_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
      $$14 = $138;
      break L1;
      break;
     }
     default: {
      $$14 = $0;
      break L1;
     }
     }
     break;
    }
    case 99:  {
     $139 = HEAP8[$93>>0]|0;
     $140 = $139 << 24 >> 24;
     switch ($140|0) {
     case 99:  {
      $141 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_const_cast_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
      $$14 = $141;
      break L1;
      break;
     }
     case 108:  {
      $142 = (__ZN10__cxxabiv112_GLOBAL__N_115parse_call_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
      $$14 = $142;
      break L1;
      break;
     }
     case 109:  {
      ;HEAP32[$12>>2]=0|0;HEAP32[$12+4>>2]=0|0;HEAP32[$12+8>>2]=0|0;
      $143 = (__ZNSt3__211char_traitsIcE6lengthEPKc(7636)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($12,7636,$143);
      __THREW__ = 0;
      $144 = (invoke_iiiii(118,($85|0),($1|0),($12|0),($2|0))|0);
      $145 = __THREW__; __THREW__ = 0;
      $146 = $145&1;
      if ($146) {
       $148 = ___cxa_find_matching_catch_2()|0;
       $149 = tempRet0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($12);
       $$21 = $148;$$21547 = $149;
       break L7;
      } else {
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($12);
       $147 = ($144|0)==($85|0);
       $$564 = $147 ? $0 : $144;
       $$14 = $$564;
       break L1;
      }
      break;
     }
     case 111:  {
      ;HEAP32[$13>>2]=0|0;HEAP32[$13+4>>2]=0|0;HEAP32[$13+8>>2]=0|0;
      $150 = (__ZNSt3__211char_traitsIcE6lengthEPKc(7638)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($13,7638,$150);
      __THREW__ = 0;
      $151 = (invoke_iiiii(119,($85|0),($1|0),($13|0),($2|0))|0);
      $152 = __THREW__; __THREW__ = 0;
      $153 = $152&1;
      if ($153) {
       $155 = ___cxa_find_matching_catch_2()|0;
       $156 = tempRet0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($13);
       $$21 = $155;$$21547 = $156;
       break L7;
      } else {
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($13);
       $154 = ($151|0)==($85|0);
       $$565 = $154 ? $0 : $151;
       $$14 = $$565;
       break L1;
      }
      break;
     }
     case 118:  {
      $157 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_conversion_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
      $$14 = $157;
      break L1;
      break;
     }
     default: {
      $$14 = $0;
      break L1;
     }
     }
     break;
    }
    case 100:  {
     $158 = HEAP8[$93>>0]|0;
     $159 = $158 << 24 >> 24;
     switch ($159|0) {
     case 97:  {
      $160 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($96,$1,$2)|0);
      $161 = ($160|0)==($96|0);
      if ($161) {
       $$14 = $0;
       break L1;
      }
      $162 = HEAP32[$2>>2]|0;
      $163 = ((($2)) + 4|0);
      $164 = HEAP32[$163>>2]|0;
      $165 = ($162|0)==($164|0);
      if ($165) {
       $$14 = $0;
       break L1;
      }
      ;HEAP32[$16>>2]=0|0;HEAP32[$16+4>>2]=0|0;HEAP32[$16+8>>2]=0|0;
      L53: do {
       if ($$0504$off0) {
        $166 = (__ZNSt3__211char_traitsIcE6lengthEPKc(7640)|0);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($16,7640,$166);
       } else {
        $$0$i$i = 0;
        while(1) {
         $exitcond$i$i = ($$0$i$i|0)==(3);
         if ($exitcond$i$i) {
          break L53;
         }
         $167 = (($16) + ($$0$i$i<<2)|0);
         HEAP32[$167>>2] = 0;
         $168 = (($$0$i$i) + 1)|0;
         $$0$i$i = $168;
        }
       }
      } while(0);
      __THREW__ = 0;
      $169 = (invoke_iii(95,($16|0),(7643|0))|0);
      $170 = __THREW__; __THREW__ = 0;
      $171 = $170&1;
      if ($171) {
       $205 = ___cxa_find_matching_catch_2()|0;
       $206 = tempRet0;
       $$1506 = $205;$$1527 = $206;
      } else {
       ;HEAP32[$15>>2]=HEAP32[$16>>2]|0;HEAP32[$15+4>>2]=HEAP32[$16+4>>2]|0;HEAP32[$15+8>>2]=HEAP32[$16+8>>2]|0;
       $$0$i$i$i = 0;
       while(1) {
        $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
        if ($exitcond$i$i$i) {
         break;
        }
        $172 = (($16) + ($$0$i$i$i<<2)|0);
        HEAP32[$172>>2] = 0;
        $173 = (($$0$i$i$i) + 1)|0;
        $$0$i$i$i = $173;
       }
       $174 = HEAP32[$163>>2]|0;
       $175 = ((($174)) + -24|0);
       __THREW__ = 0;
       invoke_vii(96,($17|0),($175|0));
       $176 = __THREW__; __THREW__ = 0;
       $177 = $176&1;
       do {
        if ($177) {
         $207 = ___cxa_find_matching_catch_2()|0;
         $208 = tempRet0;
         $$0505 = $207;$$0526 = $208;
        } else {
         $178 = ((($17)) + 11|0);
         $179 = HEAP8[$178>>0]|0;
         $180 = ($179<<24>>24)<(0);
         $181 = HEAP32[$17>>2]|0;
         $182 = $180 ? $181 : $17;
         $183 = ((($17)) + 4|0);
         $184 = HEAP32[$183>>2]|0;
         $185 = $179&255;
         $186 = $180 ? $184 : $185;
         __THREW__ = 0;
         $187 = (invoke_iiii(88,($15|0),($182|0),($186|0))|0);
         $188 = __THREW__; __THREW__ = 0;
         $189 = $188&1;
         if ($189) {
          $209 = ___cxa_find_matching_catch_2()|0;
          $210 = tempRet0;
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($17);
          $$0505 = $209;$$0526 = $210;
          break;
         }
         ;HEAP32[$14>>2]=HEAP32[$15>>2]|0;HEAP32[$14+4>>2]=HEAP32[$15+4>>2]|0;HEAP32[$14+8>>2]=HEAP32[$15+8>>2]|0;
         $$0$i$i$i599 = 0;
         while(1) {
          $exitcond$i$i$i600 = ($$0$i$i$i599|0)==(3);
          if ($exitcond$i$i$i600) {
           break;
          }
          $190 = (($15) + ($$0$i$i$i599<<2)|0);
          HEAP32[$190>>2] = 0;
          $191 = (($$0$i$i$i599) + 1)|0;
          $$0$i$i$i599 = $191;
         }
         $192 = HEAP32[$163>>2]|0;
         $193 = ((($192)) + -24|0);
         $194 = ((($193)) + 11|0);
         $195 = HEAP8[$194>>0]|0;
         $196 = ($195<<24>>24)<(0);
         if ($196) {
          $197 = HEAP32[$193>>2]|0;
          HEAP8[$5>>0] = 0;
          __ZNSt3__211char_traitsIcE6assignERcRKc($197,$5);
          $198 = ((($192)) + -20|0);
          HEAP32[$198>>2] = 0;
         } else {
          HEAP8[$6>>0] = 0;
          __ZNSt3__211char_traitsIcE6assignERcRKc($193,$6);
          HEAP8[$194>>0] = 0;
         }
         __THREW__ = 0;
         invoke_vi(92,($193|0));
         $199 = __THREW__; __THREW__ = 0;
         $200 = $199&1;
         if ($200) {
          $201 = ___cxa_find_matching_catch_3(0|0)|0;
          $202 = tempRet0;
          ___clang_call_terminate($201);
          // unreachable;
         }
         ;HEAP32[$193>>2]=HEAP32[$14>>2]|0;HEAP32[$193+4>>2]=HEAP32[$14+4>>2]|0;HEAP32[$193+8>>2]=HEAP32[$14+8>>2]|0;
         $$0$i$i$i$i = 0;
         while(1) {
          $exitcond$i$i$i$i = ($$0$i$i$i$i|0)==(3);
          if ($exitcond$i$i$i$i) {
           break;
          }
          $203 = (($14) + ($$0$i$i$i$i<<2)|0);
          HEAP32[$203>>2] = 0;
          $204 = (($$0$i$i$i$i) + 1)|0;
          $$0$i$i$i$i = $204;
         }
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($14);
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($17);
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($15);
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($16);
         $$14 = $160;
         break L1;
        }
       } while(0);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($15);
       $$1506 = $$0505;$$1527 = $$0526;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($16);
      $$21 = $$1506;$$21547 = $$1527;
      break L7;
      break;
     }
     case 99:  {
      $211 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_dynamic_cast_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
      $$14 = $211;
      break L1;
      break;
     }
     case 101:  {
      ;HEAP32[$18>>2]=0|0;HEAP32[$18+4>>2]=0|0;HEAP32[$18+8>>2]=0|0;
      $212 = (__ZNSt3__211char_traitsIcE6lengthEPKc(7586)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($18,7586,$212);
      __THREW__ = 0;
      $213 = (invoke_iiiii(119,($85|0),($1|0),($18|0),($2|0))|0);
      $214 = __THREW__; __THREW__ = 0;
      $215 = $214&1;
      if ($215) {
       $217 = ___cxa_find_matching_catch_2()|0;
       $218 = tempRet0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($18);
       $$21 = $217;$$21547 = $218;
       break L7;
      } else {
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($18);
       $216 = ($213|0)==($85|0);
       $$566 = $216 ? $0 : $213;
       $$14 = $$566;
       break L1;
      }
      break;
     }
     case 108:  {
      $219 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($96,$1,$2)|0);
      $220 = ($219|0)==($96|0);
      if ($220) {
       $$14 = $0;
       break L1;
      }
      $221 = HEAP32[$2>>2]|0;
      $222 = ((($2)) + 4|0);
      $223 = HEAP32[$222>>2]|0;
      $224 = ($221|0)==($223|0);
      if ($224) {
       $$14 = $0;
       break L1;
      }
      ;HEAP32[$21>>2]=0|0;HEAP32[$21+4>>2]=0|0;HEAP32[$21+8>>2]=0|0;
      L98: do {
       if ($$0504$off0) {
        $225 = (__ZNSt3__211char_traitsIcE6lengthEPKc(7640)|0);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($21,7640,$225);
       } else {
        $$0$i$i602 = 0;
        while(1) {
         $exitcond$i$i603 = ($$0$i$i602|0)==(3);
         if ($exitcond$i$i603) {
          break L98;
         }
         $226 = (($21) + ($$0$i$i602<<2)|0);
         HEAP32[$226>>2] = 0;
         $227 = (($$0$i$i602) + 1)|0;
         $$0$i$i602 = $227;
        }
       }
      } while(0);
      __THREW__ = 0;
      $228 = (invoke_iii(95,($21|0),(7653|0))|0);
      $229 = __THREW__; __THREW__ = 0;
      $230 = $229&1;
      if ($230) {
       $264 = ___cxa_find_matching_catch_2()|0;
       $265 = tempRet0;
       $$3508 = $264;$$3529 = $265;
      } else {
       ;HEAP32[$20>>2]=HEAP32[$21>>2]|0;HEAP32[$20+4>>2]=HEAP32[$21+4>>2]|0;HEAP32[$20+8>>2]=HEAP32[$21+8>>2]|0;
       $$0$i$i$i605 = 0;
       while(1) {
        $exitcond$i$i$i606 = ($$0$i$i$i605|0)==(3);
        if ($exitcond$i$i$i606) {
         break;
        }
        $231 = (($21) + ($$0$i$i$i605<<2)|0);
        HEAP32[$231>>2] = 0;
        $232 = (($$0$i$i$i605) + 1)|0;
        $$0$i$i$i605 = $232;
       }
       $233 = HEAP32[$222>>2]|0;
       $234 = ((($233)) + -24|0);
       __THREW__ = 0;
       invoke_vii(96,($22|0),($234|0));
       $235 = __THREW__; __THREW__ = 0;
       $236 = $235&1;
       do {
        if ($236) {
         $266 = ___cxa_find_matching_catch_2()|0;
         $267 = tempRet0;
         $$2507 = $266;$$2528 = $267;
        } else {
         $237 = ((($22)) + 11|0);
         $238 = HEAP8[$237>>0]|0;
         $239 = ($238<<24>>24)<(0);
         $240 = HEAP32[$22>>2]|0;
         $241 = $239 ? $240 : $22;
         $242 = ((($22)) + 4|0);
         $243 = HEAP32[$242>>2]|0;
         $244 = $238&255;
         $245 = $239 ? $243 : $244;
         __THREW__ = 0;
         $246 = (invoke_iiii(88,($20|0),($241|0),($245|0))|0);
         $247 = __THREW__; __THREW__ = 0;
         $248 = $247&1;
         if ($248) {
          $268 = ___cxa_find_matching_catch_2()|0;
          $269 = tempRet0;
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($22);
          $$2507 = $268;$$2528 = $269;
          break;
         }
         ;HEAP32[$19>>2]=HEAP32[$20>>2]|0;HEAP32[$19+4>>2]=HEAP32[$20+4>>2]|0;HEAP32[$19+8>>2]=HEAP32[$20+8>>2]|0;
         $$0$i$i$i609 = 0;
         while(1) {
          $exitcond$i$i$i610 = ($$0$i$i$i609|0)==(3);
          if ($exitcond$i$i$i610) {
           break;
          }
          $249 = (($20) + ($$0$i$i$i609<<2)|0);
          HEAP32[$249>>2] = 0;
          $250 = (($$0$i$i$i609) + 1)|0;
          $$0$i$i$i609 = $250;
         }
         $251 = HEAP32[$222>>2]|0;
         $252 = ((($251)) + -24|0);
         $253 = ((($252)) + 11|0);
         $254 = HEAP8[$253>>0]|0;
         $255 = ($254<<24>>24)<(0);
         if ($255) {
          $256 = HEAP32[$252>>2]|0;
          HEAP8[$3>>0] = 0;
          __ZNSt3__211char_traitsIcE6assignERcRKc($256,$3);
          $257 = ((($251)) + -20|0);
          HEAP32[$257>>2] = 0;
         } else {
          HEAP8[$4>>0] = 0;
          __ZNSt3__211char_traitsIcE6assignERcRKc($252,$4);
          HEAP8[$253>>0] = 0;
         }
         __THREW__ = 0;
         invoke_vi(92,($252|0));
         $258 = __THREW__; __THREW__ = 0;
         $259 = $258&1;
         if ($259) {
          $260 = ___cxa_find_matching_catch_3(0|0)|0;
          $261 = tempRet0;
          ___clang_call_terminate($260);
          // unreachable;
         }
         ;HEAP32[$252>>2]=HEAP32[$19>>2]|0;HEAP32[$252+4>>2]=HEAP32[$19+4>>2]|0;HEAP32[$252+8>>2]=HEAP32[$19+8>>2]|0;
         $$0$i$i$i$i615 = 0;
         while(1) {
          $exitcond$i$i$i$i616 = ($$0$i$i$i$i615|0)==(3);
          if ($exitcond$i$i$i$i616) {
           break;
          }
          $262 = (($19) + ($$0$i$i$i$i615<<2)|0);
          HEAP32[$262>>2] = 0;
          $263 = (($$0$i$i$i$i615) + 1)|0;
          $$0$i$i$i$i615 = $263;
         }
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($19);
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($22);
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($20);
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($21);
         $$14 = $219;
         break L1;
        }
       } while(0);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($20);
       $$3508 = $$2507;$$3529 = $$2528;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($21);
      $$21 = $$3508;$$21547 = $$3529;
      break L7;
      break;
     }
     case 110:  {
      $270 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
      $$14 = $270;
      break L1;
      break;
     }
     case 115:  {
      $271 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_dot_star_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
      $$14 = $271;
      break L1;
      break;
     }
     case 116:  {
      $272 = (__ZN10__cxxabiv112_GLOBAL__N_114parse_dot_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
      $$14 = $272;
      break L1;
      break;
     }
     case 118:  {
      ;HEAP32[$23>>2]=0|0;HEAP32[$23+4>>2]=0|0;HEAP32[$23+8>>2]=0|0;
      $273 = (__ZNSt3__211char_traitsIcE6lengthEPKc(7661)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($23,7661,$273);
      __THREW__ = 0;
      $274 = (invoke_iiiii(118,($85|0),($1|0),($23|0),($2|0))|0);
      $275 = __THREW__; __THREW__ = 0;
      $276 = $275&1;
      if ($276) {
       $278 = ___cxa_find_matching_catch_2()|0;
       $279 = tempRet0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($23);
       $$21 = $278;$$21547 = $279;
       break L7;
      } else {
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($23);
       $277 = ($274|0)==($85|0);
       $$567 = $277 ? $0 : $274;
       $$14 = $$567;
       break L1;
      }
      break;
     }
     case 86:  {
      ;HEAP32[$24>>2]=0|0;HEAP32[$24+4>>2]=0|0;HEAP32[$24+8>>2]=0|0;
      $280 = (__ZNSt3__211char_traitsIcE6lengthEPKc(7663)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($24,7663,$280);
      __THREW__ = 0;
      $281 = (invoke_iiiii(118,($85|0),($1|0),($24|0),($2|0))|0);
      $282 = __THREW__; __THREW__ = 0;
      $283 = $282&1;
      if ($283) {
       $285 = ___cxa_find_matching_catch_2()|0;
       $286 = tempRet0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($24);
       $$21 = $285;$$21547 = $286;
       break L7;
      } else {
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($24);
       $284 = ($281|0)==($85|0);
       $$568 = $284 ? $0 : $281;
       $$14 = $$568;
       break L1;
      }
      break;
     }
     default: {
      $$14 = $0;
      break L1;
     }
     }
     break;
    }
    case 101:  {
     $287 = HEAP8[$93>>0]|0;
     $288 = $287 << 24 >> 24;
     switch ($288|0) {
     case 111:  {
      ;HEAP32[$25>>2]=0|0;HEAP32[$25+4>>2]=0|0;HEAP32[$25+8>>2]=0|0;
      $289 = (__ZNSt3__211char_traitsIcE6lengthEPKc(7666)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($25,7666,$289);
      __THREW__ = 0;
      $290 = (invoke_iiiii(118,($85|0),($1|0),($25|0),($2|0))|0);
      $291 = __THREW__; __THREW__ = 0;
      $292 = $291&1;
      if ($292) {
       $294 = ___cxa_find_matching_catch_2()|0;
       $295 = tempRet0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($25);
       $$21 = $294;$$21547 = $295;
       break L7;
      } else {
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($25);
       $293 = ($290|0)==($85|0);
       $$569 = $293 ? $0 : $290;
       $$14 = $$569;
       break L1;
      }
      break;
     }
     case 79:  {
      ;HEAP32[$26>>2]=0|0;HEAP32[$26+4>>2]=0|0;HEAP32[$26+8>>2]=0|0;
      $296 = (__ZNSt3__211char_traitsIcE6lengthEPKc(7668)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($26,7668,$296);
      __THREW__ = 0;
      $297 = (invoke_iiiii(118,($85|0),($1|0),($26|0),($2|0))|0);
      $298 = __THREW__; __THREW__ = 0;
      $299 = $298&1;
      if ($299) {
       $301 = ___cxa_find_matching_catch_2()|0;
       $302 = tempRet0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($26);
       $$21 = $301;$$21547 = $302;
       break L7;
      } else {
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($26);
       $300 = ($297|0)==($85|0);
       $$570 = $300 ? $0 : $297;
       $$14 = $$570;
       break L1;
      }
      break;
     }
     case 113:  {
      ;HEAP32[$27>>2]=0|0;HEAP32[$27+4>>2]=0|0;HEAP32[$27+8>>2]=0|0;
      $303 = (__ZNSt3__211char_traitsIcE6lengthEPKc(7671)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($27,7671,$303);
      __THREW__ = 0;
      $304 = (invoke_iiiii(118,($85|0),($1|0),($27|0),($2|0))|0);
      $305 = __THREW__; __THREW__ = 0;
      $306 = $305&1;
      if ($306) {
       $308 = ___cxa_find_matching_catch_2()|0;
       $309 = tempRet0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($27);
       $$21 = $308;$$21547 = $309;
       break L7;
      } else {
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($27);
       $307 = ($304|0)==($85|0);
       $$571 = $307 ? $0 : $304;
       $$14 = $$571;
       break L1;
      }
      break;
     }
     default: {
      $$14 = $0;
      break L1;
     }
     }
     break;
    }
    case 103:  {
     $310 = HEAP8[$93>>0]|0;
     $311 = $310 << 24 >> 24;
     switch ($311|0) {
     case 101:  {
      ;HEAP32[$28>>2]=0|0;HEAP32[$28+4>>2]=0|0;HEAP32[$28+8>>2]=0|0;
      $312 = (__ZNSt3__211char_traitsIcE6lengthEPKc(7674)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($28,7674,$312);
      __THREW__ = 0;
      $313 = (invoke_iiiii(118,($85|0),($1|0),($28|0),($2|0))|0);
      $314 = __THREW__; __THREW__ = 0;
      $315 = $314&1;
      if ($315) {
       $317 = ___cxa_find_matching_catch_2()|0;
       $318 = tempRet0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($28);
       $$21 = $317;$$21547 = $318;
       break L7;
      } else {
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($28);
       $316 = ($313|0)==($85|0);
       $$572 = $316 ? $0 : $313;
       $$14 = $$572;
       break L1;
      }
      break;
     }
     case 116:  {
      ;HEAP32[$29>>2]=0|0;HEAP32[$29+4>>2]=0|0;HEAP32[$29+8>>2]=0|0;
      $319 = (__ZNSt3__211char_traitsIcE6lengthEPKc(7604)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($29,7604,$319);
      __THREW__ = 0;
      $320 = (invoke_iiiii(118,($85|0),($1|0),($29|0),($2|0))|0);
      $321 = __THREW__; __THREW__ = 0;
      $322 = $321&1;
      if ($322) {
       $324 = ___cxa_find_matching_catch_2()|0;
       $325 = tempRet0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($29);
       $$21 = $324;$$21547 = $325;
       break L7;
      } else {
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($29);
       $323 = ($320|0)==($85|0);
       $$573 = $323 ? $0 : $320;
       $$14 = $$573;
       break L1;
      }
      break;
     }
     default: {
      $$14 = $0;
      break L1;
     }
     }
     break;
    }
    case 105:  {
     $326 = HEAP8[$93>>0]|0;
     $327 = ($326<<24>>24)==(120);
     if (!($327)) {
      $$14 = $0;
      break L1;
     }
     $328 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($85,$1,$2)|0);
     $329 = ($328|0)==($85|0);
     if ($329) {
      $$14 = $0;
      break L1;
     }
     $330 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($328,$1,$2)|0);
     $331 = ($330|0)==($328|0);
     $332 = ((($2)) + 4|0);
     if ($331) {
      $386 = HEAP32[$332>>2]|0;
      $387 = ((($386)) + -24|0);
      $389 = $386;
      while(1) {
       $388 = ($389|0)==($387|0);
       if ($388) {
        $$14 = $0;
        break L1;
       }
       $390 = ((($389)) + -24|0);
       HEAP32[$332>>2] = $390;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($390);
       $$pre$i629 = HEAP32[$332>>2]|0;
       $389 = $$pre$i629;
      }
     }
     $333 = HEAP32[$332>>2]|0;
     $334 = HEAP32[$2>>2]|0;
     $335 = (($333) - ($334))|0;
     $336 = (($335|0) / 24)&-1;
     $337 = ($336>>>0)<(2);
     if ($337) {
      $$14 = $0;
      break L1;
     }
     $338 = $333;
     $339 = ((($338)) + -24|0);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($30,$339);
     $340 = HEAP32[$332>>2]|0;
     $341 = ((($340)) + -24|0);
     $343 = $340;
     while(1) {
      $342 = ($343|0)==($341|0);
      if ($342) {
       break;
      }
      $344 = ((($343)) + -24|0);
      HEAP32[$332>>2] = $344;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($344);
      $$pre$i = HEAP32[$332>>2]|0;
      $343 = $$pre$i;
     }
     $345 = ((($340)) + -48|0);
     __THREW__ = 0;
     invoke_vii(96,($31|0),($345|0));
     $346 = __THREW__; __THREW__ = 0;
     $347 = $346&1;
     if ($347) {
      $376 = ___cxa_find_matching_catch_2()|0;
      $377 = tempRet0;
      $$8513 = $376;$$8534 = $377;
     } else {
      __THREW__ = 0;
      invoke_viii(117,($36|0),(7568|0),($31|0));
      $348 = __THREW__; __THREW__ = 0;
      $349 = $348&1;
      if ($349) {
       $378 = ___cxa_find_matching_catch_2()|0;
       $379 = tempRet0;
       $$7512 = $378;$$7533 = $379;
      } else {
       __THREW__ = 0;
       $350 = (invoke_iii(95,($36|0),(7677|0))|0);
       $351 = __THREW__; __THREW__ = 0;
       $352 = $351&1;
       if ($352) {
        $380 = ___cxa_find_matching_catch_2()|0;
        $381 = tempRet0;
        $$6511 = $380;$$6532 = $381;
       } else {
        ;HEAP32[$35>>2]=HEAP32[$36>>2]|0;HEAP32[$35+4>>2]=HEAP32[$36+4>>2]|0;HEAP32[$35+8>>2]=HEAP32[$36+8>>2]|0;
        $$0$i$i$i618 = 0;
        while(1) {
         $exitcond$i$i$i619 = ($$0$i$i$i618|0)==(3);
         if ($exitcond$i$i$i619) {
          break;
         }
         $353 = (($36) + ($$0$i$i$i618<<2)|0);
         HEAP32[$353>>2] = 0;
         $354 = (($$0$i$i$i618) + 1)|0;
         $$0$i$i$i618 = $354;
        }
        $355 = ((($30)) + 11|0);
        $356 = HEAP8[$355>>0]|0;
        $357 = ($356<<24>>24)<(0);
        $358 = HEAP32[$30>>2]|0;
        $359 = $357 ? $358 : $30;
        $360 = ((($30)) + 4|0);
        $361 = HEAP32[$360>>2]|0;
        $362 = $356&255;
        $363 = $357 ? $361 : $362;
        __THREW__ = 0;
        $364 = (invoke_iiii(88,($35|0),($359|0),($363|0))|0);
        $365 = __THREW__; __THREW__ = 0;
        $366 = $365&1;
        do {
         if ($366) {
          $382 = ___cxa_find_matching_catch_2()|0;
          $383 = tempRet0;
          $$5510 = $382;$$5531 = $383;
         } else {
          ;HEAP32[$34>>2]=HEAP32[$35>>2]|0;HEAP32[$34+4>>2]=HEAP32[$35+4>>2]|0;HEAP32[$34+8>>2]=HEAP32[$35+8>>2]|0;
          $$0$i$i$i622 = 0;
          while(1) {
           $exitcond$i$i$i623 = ($$0$i$i$i622|0)==(3);
           if ($exitcond$i$i$i623) {
            break;
           }
           $367 = (($35) + ($$0$i$i$i622<<2)|0);
           HEAP32[$367>>2] = 0;
           $368 = (($$0$i$i$i622) + 1)|0;
           $$0$i$i$i622 = $368;
          }
          __THREW__ = 0;
          $369 = (invoke_iii(95,($34|0),(7615|0))|0);
          $370 = __THREW__; __THREW__ = 0;
          $371 = $370&1;
          if ($371) {
           $384 = ___cxa_find_matching_catch_2()|0;
           $385 = tempRet0;
           __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($34);
           $$5510 = $384;$$5531 = $385;
           break;
          }
          ;HEAP32[$33>>2]=HEAP32[$34>>2]|0;HEAP32[$33+4>>2]=HEAP32[$34+4>>2]|0;HEAP32[$33+8>>2]=HEAP32[$34+8>>2]|0;
          $$0$i$i$i625 = 0;
          while(1) {
           $exitcond$i$i$i626 = ($$0$i$i$i625|0)==(3);
           if ($exitcond$i$i$i626) {
            break;
           }
           $372 = (($34) + ($$0$i$i$i625<<2)|0);
           HEAP32[$372>>2] = 0;
           $373 = (($$0$i$i$i625) + 1)|0;
           $$0$i$i$i625 = $373;
          }
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($32,$33);
          $374 = HEAP32[$332>>2]|0;
          $375 = ((($374)) + -24|0);
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($375,$32);
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($32);
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($33);
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($34);
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($35);
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($36);
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($31);
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($30);
          $$14 = $330;
          break L1;
         }
        } while(0);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($35);
        $$6511 = $$5510;$$6532 = $$5531;
       }
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($36);
       $$7512 = $$6511;$$7533 = $$6532;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($31);
      $$8513 = $$7512;$$8534 = $$7533;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($30);
     $$21 = $$8513;$$21547 = $$8534;
     break;
    }
    case 108:  {
     $391 = HEAP8[$93>>0]|0;
     $392 = $391 << 24 >> 24;
     switch ($392|0) {
     case 101:  {
      ;HEAP32[$37>>2]=0|0;HEAP32[$37+4>>2]=0|0;HEAP32[$37+8>>2]=0|0;
      $393 = (__ZNSt3__211char_traitsIcE6lengthEPKc(7680)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($37,7680,$393);
      __THREW__ = 0;
      $394 = (invoke_iiiii(118,($85|0),($1|0),($37|0),($2|0))|0);
      $395 = __THREW__; __THREW__ = 0;
      $396 = $395&1;
      if ($396) {
       $398 = ___cxa_find_matching_catch_2()|0;
       $399 = tempRet0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($37);
       $$21 = $398;$$21547 = $399;
       break L7;
      } else {
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($37);
       $397 = ($394|0)==($85|0);
       $$574 = $397 ? $0 : $394;
       $$14 = $$574;
       break L1;
      }
      break;
     }
     case 115:  {
      ;HEAP32[$38>>2]=0|0;HEAP32[$38+4>>2]=0|0;HEAP32[$38+8>>2]=0|0;
      $400 = (__ZNSt3__211char_traitsIcE6lengthEPKc(7683)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($38,7683,$400);
      __THREW__ = 0;
      $401 = (invoke_iiiii(118,($85|0),($1|0),($38|0),($2|0))|0);
      $402 = __THREW__; __THREW__ = 0;
      $403 = $402&1;
      if ($403) {
       $405 = ___cxa_find_matching_catch_2()|0;
       $406 = tempRet0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($38);
       $$21 = $405;$$21547 = $406;
       break L7;
      } else {
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($38);
       $404 = ($401|0)==($85|0);
       $$575 = $404 ? $0 : $401;
       $$14 = $$575;
       break L1;
      }
      break;
     }
     case 83:  {
      ;HEAP32[$39>>2]=0|0;HEAP32[$39+4>>2]=0|0;HEAP32[$39+8>>2]=0|0;
      $407 = (__ZNSt3__211char_traitsIcE6lengthEPKc(7686)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($39,7686,$407);
      __THREW__ = 0;
      $408 = (invoke_iiiii(118,($85|0),($1|0),($39|0),($2|0))|0);
      $409 = __THREW__; __THREW__ = 0;
      $410 = $409&1;
      if ($410) {
       $412 = ___cxa_find_matching_catch_2()|0;
       $413 = tempRet0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($39);
       $$21 = $412;$$21547 = $413;
       break L7;
      } else {
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($39);
       $411 = ($408|0)==($85|0);
       $$576 = $411 ? $0 : $408;
       $$14 = $$576;
       break L1;
      }
      break;
     }
     case 116:  {
      ;HEAP32[$40>>2]=0|0;HEAP32[$40+4>>2]=0|0;HEAP32[$40+8>>2]=0|0;
      $414 = (__ZNSt3__211char_traitsIcE6lengthEPKc(7602)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($40,7602,$414);
      __THREW__ = 0;
      $415 = (invoke_iiiii(118,($85|0),($1|0),($40|0),($2|0))|0);
      $416 = __THREW__; __THREW__ = 0;
      $417 = $416&1;
      if ($417) {
       $419 = ___cxa_find_matching_catch_2()|0;
       $420 = tempRet0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($40);
       $$21 = $419;$$21547 = $420;
       break L7;
      } else {
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($40);
       $418 = ($415|0)==($85|0);
       $$577 = $418 ? $0 : $415;
       $$14 = $$577;
       break L1;
      }
      break;
     }
     default: {
      $$14 = $0;
      break L1;
     }
     }
     break;
    }
    case 109:  {
     $421 = HEAP8[$93>>0]|0;
     $422 = $421 << 24 >> 24;
     switch ($422|0) {
     case 105:  {
      ;HEAP32[$41>>2]=0|0;HEAP32[$41+4>>2]=0|0;HEAP32[$41+8>>2]=0|0;
      $423 = (__ZNSt3__211char_traitsIcE6lengthEPKc(7690)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($41,7690,$423);
      __THREW__ = 0;
      $424 = (invoke_iiiii(118,($85|0),($1|0),($41|0),($2|0))|0);
      $425 = __THREW__; __THREW__ = 0;
      $426 = $425&1;
      if ($426) {
       $428 = ___cxa_find_matching_catch_2()|0;
       $429 = tempRet0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($41);
       $$21 = $428;$$21547 = $429;
       break L7;
      } else {
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($41);
       $427 = ($424|0)==($85|0);
       $$578 = $427 ? $0 : $424;
       $$14 = $$578;
       break L1;
      }
      break;
     }
     case 73:  {
      ;HEAP32[$42>>2]=0|0;HEAP32[$42+4>>2]=0|0;HEAP32[$42+8>>2]=0|0;
      $430 = (__ZNSt3__211char_traitsIcE6lengthEPKc(7692)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($42,7692,$430);
      __THREW__ = 0;
      $431 = (invoke_iiiii(118,($85|0),($1|0),($42|0),($2|0))|0);
      $432 = __THREW__; __THREW__ = 0;
      $433 = $432&1;
      if ($433) {
       $435 = ___cxa_find_matching_catch_2()|0;
       $436 = tempRet0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($42);
       $$21 = $435;$$21547 = $436;
       break L7;
      } else {
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($42);
       $434 = ($431|0)==($85|0);
       $$579 = $434 ? $0 : $431;
       $$14 = $$579;
       break L1;
      }
      break;
     }
     case 108:  {
      ;HEAP32[$43>>2]=0|0;HEAP32[$43+4>>2]=0|0;HEAP32[$43+8>>2]=0|0;
      $437 = (__ZNSt3__211char_traitsIcE6lengthEPKc(7586)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($43,7586,$437);
      __THREW__ = 0;
      $438 = (invoke_iiiii(118,($85|0),($1|0),($43|0),($2|0))|0);
      $439 = __THREW__; __THREW__ = 0;
      $440 = $439&1;
      if ($440) {
       $442 = ___cxa_find_matching_catch_2()|0;
       $443 = tempRet0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($43);
       $$21 = $442;$$21547 = $443;
       break L7;
      } else {
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($43);
       $441 = ($438|0)==($85|0);
       $$580 = $441 ? $0 : $438;
       $$14 = $$580;
       break L1;
      }
      break;
     }
     case 76:  {
      ;HEAP32[$44>>2]=0|0;HEAP32[$44+4>>2]=0|0;HEAP32[$44+8>>2]=0|0;
      $444 = (__ZNSt3__211char_traitsIcE6lengthEPKc(7695)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($44,7695,$444);
      __THREW__ = 0;
      $445 = (invoke_iiiii(118,($85|0),($1|0),($44|0),($2|0))|0);
      $446 = __THREW__; __THREW__ = 0;
      $447 = $446&1;
      if ($447) {
       $449 = ___cxa_find_matching_catch_2()|0;
       $450 = tempRet0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($44);
       $$21 = $449;$$21547 = $450;
       break L7;
      } else {
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($44);
       $448 = ($445|0)==($85|0);
       $$581 = $448 ? $0 : $445;
       $$14 = $$581;
       break L1;
      }
      break;
     }
     case 109:  {
      if ($95) {
       $451 = HEAP8[$85>>0]|0;
       $452 = ($451<<24>>24)==(95);
       if ($452) {
        ;HEAP32[$45>>2]=0|0;HEAP32[$45+4>>2]=0|0;HEAP32[$45+8>>2]=0|0;
        $453 = (__ZNSt3__211char_traitsIcE6lengthEPKc(7698)|0);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($45,7698,$453);
        __THREW__ = 0;
        $454 = (invoke_iiiii(119,($94|0),($1|0),($45|0),($2|0))|0);
        $455 = __THREW__; __THREW__ = 0;
        $456 = $455&1;
        if ($456) {
         $458 = ___cxa_find_matching_catch_2()|0;
         $459 = tempRet0;
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($45);
         $$21 = $458;$$21547 = $459;
         break L7;
        } else {
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($45);
         $457 = ($454|0)==($94|0);
         $$582 = $457 ? $0 : $454;
         $$14 = $$582;
         break L1;
        }
       }
      }
      $460 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($85,$1,$2)|0);
      $461 = ($460|0)==($85|0);
      if ($461) {
       $$14 = $0;
       break L1;
      }
      $462 = HEAP32[$2>>2]|0;
      $463 = ((($2)) + 4|0);
      $464 = HEAP32[$463>>2]|0;
      $465 = ($462|0)==($464|0);
      if ($465) {
       $$14 = $0;
       break L1;
      }
      $466 = ((($464)) + -24|0);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($49,$466);
      __THREW__ = 0;
      $467 = (invoke_iiii(97,($49|0),0,(7568|0))|0);
      $468 = __THREW__; __THREW__ = 0;
      $469 = $468&1;
      do {
       if ($469) {
        $479 = ___cxa_find_matching_catch_2()|0;
        $480 = tempRet0;
        $$10515 = $479;$$10536 = $480;
       } else {
        ;HEAP32[$48>>2]=HEAP32[$49>>2]|0;HEAP32[$48+4>>2]=HEAP32[$49+4>>2]|0;HEAP32[$48+8>>2]=HEAP32[$49+8>>2]|0;
        $$0$i$i$i631 = 0;
        while(1) {
         $exitcond$i$i$i632 = ($$0$i$i$i631|0)==(3);
         if ($exitcond$i$i$i632) {
          break;
         }
         $470 = (($49) + ($$0$i$i$i631<<2)|0);
         HEAP32[$470>>2] = 0;
         $471 = (($$0$i$i$i631) + 1)|0;
         $$0$i$i$i631 = $471;
        }
        __THREW__ = 0;
        $472 = (invoke_iii(95,($48|0),(7701|0))|0);
        $473 = __THREW__; __THREW__ = 0;
        $474 = $473&1;
        if ($474) {
         $481 = ___cxa_find_matching_catch_2()|0;
         $482 = tempRet0;
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($48);
         $$10515 = $481;$$10536 = $482;
         break;
        }
        ;HEAP32[$47>>2]=HEAP32[$48>>2]|0;HEAP32[$47+4>>2]=HEAP32[$48+4>>2]|0;HEAP32[$47+8>>2]=HEAP32[$48+8>>2]|0;
        $$0$i$i$i634 = 0;
        while(1) {
         $exitcond$i$i$i635 = ($$0$i$i$i634|0)==(3);
         if ($exitcond$i$i$i635) {
          break;
         }
         $475 = (($48) + ($$0$i$i$i634<<2)|0);
         HEAP32[$475>>2] = 0;
         $476 = (($$0$i$i$i634) + 1)|0;
         $$0$i$i$i634 = $476;
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($46,$47);
        $477 = HEAP32[$463>>2]|0;
        $478 = ((($477)) + -24|0);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($478,$46);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($46);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($47);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($48);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($49);
        $$14 = $460;
        break L1;
       }
      } while(0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($49);
      $$21 = $$10515;$$21547 = $$10536;
      break L7;
      break;
     }
     default: {
      $$14 = $0;
      break L1;
     }
     }
     break;
    }
    case 110:  {
     $483 = HEAP8[$93>>0]|0;
     $484 = $483 << 24 >> 24;
     switch ($484|0) {
     case 119: case 97:  {
      $485 = (__ZN10__cxxabiv112_GLOBAL__N_114parse_new_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
      $$14 = $485;
      break L1;
      break;
     }
     case 101:  {
      ;HEAP32[$50>>2]=0|0;HEAP32[$50+4>>2]=0|0;HEAP32[$50+8>>2]=0|0;
      $486 = (__ZNSt3__211char_traitsIcE6lengthEPKc(7705)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($50,7705,$486);
      __THREW__ = 0;
      $487 = (invoke_iiiii(118,($85|0),($1|0),($50|0),($2|0))|0);
      $488 = __THREW__; __THREW__ = 0;
      $489 = $488&1;
      if ($489) {
       $491 = ___cxa_find_matching_catch_2()|0;
       $492 = tempRet0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($50);
       $$21 = $491;$$21547 = $492;
       break L7;
      } else {
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($50);
       $490 = ($487|0)==($85|0);
       $$583 = $490 ? $0 : $487;
       $$14 = $$583;
       break L1;
      }
      break;
     }
     case 103:  {
      ;HEAP32[$51>>2]=0|0;HEAP32[$51+4>>2]=0|0;HEAP32[$51+8>>2]=0|0;
      $493 = (__ZNSt3__211char_traitsIcE6lengthEPKc(7690)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($51,7690,$493);
      __THREW__ = 0;
      $494 = (invoke_iiiii(119,($85|0),($1|0),($51|0),($2|0))|0);
      $495 = __THREW__; __THREW__ = 0;
      $496 = $495&1;
      if ($496) {
       $498 = ___cxa_find_matching_catch_2()|0;
       $499 = tempRet0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($51);
       $$21 = $498;$$21547 = $499;
       break L7;
      } else {
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($51);
       $497 = ($494|0)==($85|0);
       $$584 = $497 ? $0 : $494;
       $$14 = $$584;
       break L1;
      }
      break;
     }
     case 116:  {
      ;HEAP32[$52>>2]=0|0;HEAP32[$52+4>>2]=0|0;HEAP32[$52+8>>2]=0|0;
      $500 = (__ZNSt3__211char_traitsIcE6lengthEPKc(7708)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($52,7708,$500);
      __THREW__ = 0;
      $501 = (invoke_iiiii(119,($85|0),($1|0),($52|0),($2|0))|0);
      $502 = __THREW__; __THREW__ = 0;
      $503 = $502&1;
      if ($503) {
       $505 = ___cxa_find_matching_catch_2()|0;
       $506 = tempRet0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($52);
       $$21 = $505;$$21547 = $506;
       break L7;
      } else {
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($52);
       $504 = ($501|0)==($85|0);
       $$585 = $504 ? $0 : $501;
       $$14 = $$585;
       break L1;
      }
      break;
     }
     case 120:  {
      $507 = (__ZN10__cxxabiv112_GLOBAL__N_125parse_noexcept_expressionINS0_2DbEEEPKcS4_S4_RT_($85,$1,$2)|0);
      $508 = ($507|0)==($85|0);
      $$586 = $508 ? $0 : $507;
      $$14 = $$586;
      break L1;
      break;
     }
     default: {
      $$14 = $0;
      break L1;
     }
     }
     break;
    }
    case 111:  {
     $509 = HEAP8[$93>>0]|0;
     $510 = $509 << 24 >> 24;
     switch ($510|0) {
     case 110:  {
      $511 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
      $$14 = $511;
      break L1;
      break;
     }
     case 111:  {
      ;HEAP32[$53>>2]=0|0;HEAP32[$53+4>>2]=0|0;HEAP32[$53+8>>2]=0|0;
      $512 = (__ZNSt3__211char_traitsIcE6lengthEPKc(7710)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($53,7710,$512);
      __THREW__ = 0;
      $513 = (invoke_iiiii(118,($85|0),($1|0),($53|0),($2|0))|0);
      $514 = __THREW__; __THREW__ = 0;
      $515 = $514&1;
      if ($515) {
       $517 = ___cxa_find_matching_catch_2()|0;
       $518 = tempRet0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($53);
       $$21 = $517;$$21547 = $518;
       break L7;
      } else {
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($53);
       $516 = ($513|0)==($85|0);
       $$587 = $516 ? $0 : $513;
       $$14 = $$587;
       break L1;
      }
      break;
     }
     case 114:  {
      ;HEAP32[$54>>2]=0|0;HEAP32[$54+4>>2]=0|0;HEAP32[$54+8>>2]=0|0;
      $519 = (__ZNSt3__211char_traitsIcE6lengthEPKc(7713)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($54,7713,$519);
      __THREW__ = 0;
      $520 = (invoke_iiiii(118,($85|0),($1|0),($54|0),($2|0))|0);
      $521 = __THREW__; __THREW__ = 0;
      $522 = $521&1;
      if ($522) {
       $524 = ___cxa_find_matching_catch_2()|0;
       $525 = tempRet0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($54);
       $$21 = $524;$$21547 = $525;
       break L7;
      } else {
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($54);
       $523 = ($520|0)==($85|0);
       $$588 = $523 ? $0 : $520;
       $$14 = $$588;
       break L1;
      }
      break;
     }
     case 82:  {
      ;HEAP32[$55>>2]=0|0;HEAP32[$55+4>>2]=0|0;HEAP32[$55+8>>2]=0|0;
      $526 = (__ZNSt3__211char_traitsIcE6lengthEPKc(7715)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($55,7715,$526);
      __THREW__ = 0;
      $527 = (invoke_iiiii(118,($85|0),($1|0),($55|0),($2|0))|0);
      $528 = __THREW__; __THREW__ = 0;
      $529 = $528&1;
      if ($529) {
       $531 = ___cxa_find_matching_catch_2()|0;
       $532 = tempRet0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($55);
       $$21 = $531;$$21547 = $532;
       break L7;
      } else {
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($55);
       $530 = ($527|0)==($85|0);
       $$589 = $530 ? $0 : $527;
       $$14 = $$589;
       break L1;
      }
      break;
     }
     default: {
      $$14 = $0;
      break L1;
     }
     }
     break;
    }
    case 112:  {
     $533 = HEAP8[$93>>0]|0;
     $534 = $533 << 24 >> 24;
     switch ($534|0) {
     case 109:  {
      ;HEAP32[$56>>2]=0|0;HEAP32[$56+4>>2]=0|0;HEAP32[$56+8>>2]=0|0;
      $535 = (__ZNSt3__211char_traitsIcE6lengthEPKc(7718)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($56,7718,$535);
      __THREW__ = 0;
      $536 = (invoke_iiiii(118,($85|0),($1|0),($56|0),($2|0))|0);
      $537 = __THREW__; __THREW__ = 0;
      $538 = $537&1;
      if ($538) {
       $540 = ___cxa_find_matching_catch_2()|0;
       $541 = tempRet0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($56);
       $$21 = $540;$$21547 = $541;
       break L7;
      } else {
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($56);
       $539 = ($536|0)==($85|0);
       $$590 = $539 ? $0 : $536;
       $$14 = $$590;
       break L1;
      }
      break;
     }
     case 108:  {
      ;HEAP32[$57>>2]=0|0;HEAP32[$57+4>>2]=0|0;HEAP32[$57+8>>2]=0|0;
      $542 = (__ZNSt3__211char_traitsIcE6lengthEPKc(7722)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($57,7722,$542);
      __THREW__ = 0;
      $543 = (invoke_iiiii(118,($85|0),($1|0),($57|0),($2|0))|0);
      $544 = __THREW__; __THREW__ = 0;
      $545 = $544&1;
      if ($545) {
       $547 = ___cxa_find_matching_catch_2()|0;
       $548 = tempRet0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($57);
       $$21 = $547;$$21547 = $548;
       break L7;
      } else {
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($57);
       $546 = ($543|0)==($85|0);
       $$591 = $546 ? $0 : $543;
       $$14 = $$591;
       break L1;
      }
      break;
     }
     case 76:  {
      ;HEAP32[$58>>2]=0|0;HEAP32[$58+4>>2]=0|0;HEAP32[$58+8>>2]=0|0;
      $549 = (__ZNSt3__211char_traitsIcE6lengthEPKc(7724)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($58,7724,$549);
      __THREW__ = 0;
      $550 = (invoke_iiiii(118,($85|0),($1|0),($58|0),($2|0))|0);
      $551 = __THREW__; __THREW__ = 0;
      $552 = $551&1;
      if ($552) {
       $554 = ___cxa_find_matching_catch_2()|0;
       $555 = tempRet0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($58);
       $$21 = $554;$$21547 = $555;
       break L7;
      } else {
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($58);
       $553 = ($550|0)==($85|0);
       $$592 = $553 ? $0 : $550;
       $$14 = $$592;
       break L1;
      }
      break;
     }
     case 112:  {
      if ($95) {
       $556 = HEAP8[$85>>0]|0;
       $557 = ($556<<24>>24)==(95);
       if ($557) {
        ;HEAP32[$59>>2]=0|0;HEAP32[$59+4>>2]=0|0;HEAP32[$59+8>>2]=0|0;
        $558 = (__ZNSt3__211char_traitsIcE6lengthEPKc(7727)|0);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($59,7727,$558);
        __THREW__ = 0;
        $559 = (invoke_iiiii(119,($94|0),($1|0),($59|0),($2|0))|0);
        $560 = __THREW__; __THREW__ = 0;
        $561 = $560&1;
        if ($561) {
         $563 = ___cxa_find_matching_catch_2()|0;
         $564 = tempRet0;
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($59);
         $$21 = $563;$$21547 = $564;
         break L7;
        } else {
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($59);
         $562 = ($559|0)==($94|0);
         $$593 = $562 ? $0 : $559;
         $$14 = $$593;
         break L1;
        }
       }
      }
      $565 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($85,$1,$2)|0);
      $566 = ($565|0)==($85|0);
      if ($566) {
       $$14 = $0;
       break L1;
      }
      $567 = HEAP32[$2>>2]|0;
      $568 = ((($2)) + 4|0);
      $569 = HEAP32[$568>>2]|0;
      $570 = ($567|0)==($569|0);
      if ($570) {
       $$14 = $0;
       break L1;
      }
      $571 = ((($569)) + -24|0);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($63,$571);
      __THREW__ = 0;
      $572 = (invoke_iiii(97,($63|0),0,(7568|0))|0);
      $573 = __THREW__; __THREW__ = 0;
      $574 = $573&1;
      do {
       if ($574) {
        $584 = ___cxa_find_matching_catch_2()|0;
        $585 = tempRet0;
        $$12517 = $584;$$12538 = $585;
       } else {
        ;HEAP32[$62>>2]=HEAP32[$63>>2]|0;HEAP32[$62+4>>2]=HEAP32[$63+4>>2]|0;HEAP32[$62+8>>2]=HEAP32[$63+8>>2]|0;
        $$0$i$i$i638 = 0;
        while(1) {
         $exitcond$i$i$i639 = ($$0$i$i$i638|0)==(3);
         if ($exitcond$i$i$i639) {
          break;
         }
         $575 = (($63) + ($$0$i$i$i638<<2)|0);
         HEAP32[$575>>2] = 0;
         $576 = (($$0$i$i$i638) + 1)|0;
         $$0$i$i$i638 = $576;
        }
        __THREW__ = 0;
        $577 = (invoke_iii(95,($62|0),(7730|0))|0);
        $578 = __THREW__; __THREW__ = 0;
        $579 = $578&1;
        if ($579) {
         $586 = ___cxa_find_matching_catch_2()|0;
         $587 = tempRet0;
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($62);
         $$12517 = $586;$$12538 = $587;
         break;
        }
        ;HEAP32[$61>>2]=HEAP32[$62>>2]|0;HEAP32[$61+4>>2]=HEAP32[$62+4>>2]|0;HEAP32[$61+8>>2]=HEAP32[$62+8>>2]|0;
        $$0$i$i$i642 = 0;
        while(1) {
         $exitcond$i$i$i643 = ($$0$i$i$i642|0)==(3);
         if ($exitcond$i$i$i643) {
          break;
         }
         $580 = (($62) + ($$0$i$i$i642<<2)|0);
         HEAP32[$580>>2] = 0;
         $581 = (($$0$i$i$i642) + 1)|0;
         $$0$i$i$i642 = $581;
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($60,$61);
        $582 = HEAP32[$568>>2]|0;
        $583 = ((($582)) + -24|0);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($583,$60);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($60);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($61);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($62);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($63);
        $$14 = $565;
        break L1;
       }
      } while(0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($63);
      $$21 = $$12517;$$21547 = $$12538;
      break L7;
      break;
     }
     case 115:  {
      ;HEAP32[$64>>2]=0|0;HEAP32[$64+4>>2]=0|0;HEAP32[$64+8>>2]=0|0;
      $588 = (__ZNSt3__211char_traitsIcE6lengthEPKc(7722)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($64,7722,$588);
      __THREW__ = 0;
      $589 = (invoke_iiiii(119,($85|0),($1|0),($64|0),($2|0))|0);
      $590 = __THREW__; __THREW__ = 0;
      $591 = $590&1;
      if ($591) {
       $593 = ___cxa_find_matching_catch_2()|0;
       $594 = tempRet0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($64);
       $$21 = $593;$$21547 = $594;
       break L7;
      } else {
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($64);
       $592 = ($589|0)==($85|0);
       $$594 = $592 ? $0 : $589;
       $$14 = $$594;
       break L1;
      }
      break;
     }
     case 116:  {
      $595 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_arrow_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
      $$14 = $595;
      break L1;
      break;
     }
     default: {
      $$14 = $0;
      break L1;
     }
     }
     break;
    }
    case 113:  {
     $596 = HEAP8[$93>>0]|0;
     $597 = ($596<<24>>24)==(117);
     if (!($597)) {
      $$14 = $0;
      break L1;
     }
     $598 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($85,$1,$2)|0);
     $599 = ($598|0)==($85|0);
     if ($599) {
      $$14 = $0;
      break L1;
     }
     $600 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($598,$1,$2)|0);
     $601 = ($600|0)==($598|0);
     if ($601) {
      $700 = ((($2)) + 4|0);
      $701 = HEAP32[$700>>2]|0;
      $702 = ((($701)) + -24|0);
      $704 = $701;
      while(1) {
       $703 = ($704|0)==($702|0);
       if ($703) {
        $$14 = $0;
        break L1;
       }
       $705 = ((($704)) + -24|0);
       HEAP32[$700>>2] = $705;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($705);
       $$pre$i674 = HEAP32[$700>>2]|0;
       $704 = $$pre$i674;
      }
     }
     $602 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($600,$1,$2)|0);
     $603 = ($602|0)==($600|0);
     $604 = ((($2)) + 4|0);
     if ($603) {
      $691 = HEAP32[$604>>2]|0;
      $692 = ((($691)) + -24|0);
      $694 = $691;
      while(1) {
       $693 = ($694|0)==($692|0);
       if ($693) {
        break;
       }
       $695 = ((($694)) + -24|0);
       HEAP32[$604>>2] = $695;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($695);
       $$pre$i670 = HEAP32[$604>>2]|0;
       $694 = $$pre$i670;
      }
      $696 = ((($691)) + -48|0);
      $698 = $692;
      while(1) {
       $697 = ($698|0)==($696|0);
       if ($697) {
        $$14 = $0;
        break L1;
       }
       $699 = ((($698)) + -24|0);
       HEAP32[$604>>2] = $699;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($699);
       $$pre$i672 = HEAP32[$604>>2]|0;
       $698 = $$pre$i672;
      }
     }
     $605 = HEAP32[$604>>2]|0;
     $606 = HEAP32[$2>>2]|0;
     $607 = (($605) - ($606))|0;
     $608 = (($607|0) / 24)&-1;
     $609 = ($608>>>0)<(3);
     if ($609) {
      $$14 = $0;
      break L1;
     }
     $610 = $605;
     $611 = ((($610)) + -24|0);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($65,$611);
     $612 = HEAP32[$604>>2]|0;
     $613 = ((($612)) + -24|0);
     $615 = $612;
     while(1) {
      $614 = ($615|0)==($613|0);
      if ($614) {
       break;
      }
      $616 = ((($615)) + -24|0);
      HEAP32[$604>>2] = $616;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($616);
      $$pre$i646 = HEAP32[$604>>2]|0;
      $615 = $$pre$i646;
     }
     $617 = ((($612)) + -48|0);
     __THREW__ = 0;
     invoke_vii(96,($66|0),($617|0));
     $618 = __THREW__; __THREW__ = 0;
     $619 = $618&1;
     if ($619) {
      $675 = ___cxa_find_matching_catch_2()|0;
      $676 = tempRet0;
      $$20525 = $675;$$20546 = $676;
     } else {
      $620 = HEAP32[$604>>2]|0;
      $621 = ((($620)) + -24|0);
      $623 = $620;
      while(1) {
       $622 = ($623|0)==($621|0);
       if ($622) {
        break;
       }
       $624 = ((($623)) + -24|0);
       HEAP32[$604>>2] = $624;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($624);
       $$pre$i648 = HEAP32[$604>>2]|0;
       $623 = $$pre$i648;
      }
      $625 = ((($620)) + -48|0);
      __THREW__ = 0;
      invoke_vii(96,($67|0),($625|0));
      $626 = __THREW__; __THREW__ = 0;
      $627 = $626&1;
      if ($627) {
       $677 = ___cxa_find_matching_catch_2()|0;
       $678 = tempRet0;
       $$19524 = $677;$$19545 = $678;
      } else {
       __THREW__ = 0;
       invoke_viii(117,($74|0),(7568|0),($67|0));
       $628 = __THREW__; __THREW__ = 0;
       $629 = $628&1;
       if ($629) {
        $679 = ___cxa_find_matching_catch_2()|0;
        $680 = tempRet0;
        $$18523 = $679;$$18544 = $680;
       } else {
        __THREW__ = 0;
        $630 = (invoke_iii(95,($74|0),(7734|0))|0);
        $631 = __THREW__; __THREW__ = 0;
        $632 = $631&1;
        if ($632) {
         $681 = ___cxa_find_matching_catch_2()|0;
         $682 = tempRet0;
         $$17522 = $681;$$17543 = $682;
        } else {
         ;HEAP32[$73>>2]=HEAP32[$74>>2]|0;HEAP32[$73+4>>2]=HEAP32[$74+4>>2]|0;HEAP32[$73+8>>2]=HEAP32[$74+8>>2]|0;
         $$0$i$i$i650 = 0;
         while(1) {
          $exitcond$i$i$i651 = ($$0$i$i$i650|0)==(3);
          if ($exitcond$i$i$i651) {
           break;
          }
          $633 = (($74) + ($$0$i$i$i650<<2)|0);
          HEAP32[$633>>2] = 0;
          $634 = (($$0$i$i$i650) + 1)|0;
          $$0$i$i$i650 = $634;
         }
         $635 = ((($66)) + 11|0);
         $636 = HEAP8[$635>>0]|0;
         $637 = ($636<<24>>24)<(0);
         $638 = HEAP32[$66>>2]|0;
         $639 = $637 ? $638 : $66;
         $640 = ((($66)) + 4|0);
         $641 = HEAP32[$640>>2]|0;
         $642 = $636&255;
         $643 = $637 ? $641 : $642;
         __THREW__ = 0;
         $644 = (invoke_iiii(88,($73|0),($639|0),($643|0))|0);
         $645 = __THREW__; __THREW__ = 0;
         $646 = $645&1;
         if ($646) {
          $683 = ___cxa_find_matching_catch_2()|0;
          $684 = tempRet0;
          $$16521 = $683;$$16542 = $684;
         } else {
          ;HEAP32[$72>>2]=HEAP32[$73>>2]|0;HEAP32[$72+4>>2]=HEAP32[$73+4>>2]|0;HEAP32[$72+8>>2]=HEAP32[$73+8>>2]|0;
          $$0$i$i$i654 = 0;
          while(1) {
           $exitcond$i$i$i655 = ($$0$i$i$i654|0)==(3);
           if ($exitcond$i$i$i655) {
            break;
           }
           $647 = (($73) + ($$0$i$i$i654<<2)|0);
           HEAP32[$647>>2] = 0;
           $648 = (($$0$i$i$i654) + 1)|0;
           $$0$i$i$i654 = $648;
          }
          __THREW__ = 0;
          $649 = (invoke_iii(95,($72|0),(7740|0))|0);
          $650 = __THREW__; __THREW__ = 0;
          $651 = $650&1;
          if ($651) {
           $685 = ___cxa_find_matching_catch_2()|0;
           $686 = tempRet0;
           $$15520 = $685;$$15541 = $686;
          } else {
           ;HEAP32[$71>>2]=HEAP32[$72>>2]|0;HEAP32[$71+4>>2]=HEAP32[$72+4>>2]|0;HEAP32[$71+8>>2]=HEAP32[$72+8>>2]|0;
           $$0$i$i$i658 = 0;
           while(1) {
            $exitcond$i$i$i659 = ($$0$i$i$i658|0)==(3);
            if ($exitcond$i$i$i659) {
             break;
            }
            $652 = (($72) + ($$0$i$i$i658<<2)|0);
            HEAP32[$652>>2] = 0;
            $653 = (($$0$i$i$i658) + 1)|0;
            $$0$i$i$i658 = $653;
           }
           $654 = ((($65)) + 11|0);
           $655 = HEAP8[$654>>0]|0;
           $656 = ($655<<24>>24)<(0);
           $657 = HEAP32[$65>>2]|0;
           $658 = $656 ? $657 : $65;
           $659 = ((($65)) + 4|0);
           $660 = HEAP32[$659>>2]|0;
           $661 = $655&255;
           $662 = $656 ? $660 : $661;
           __THREW__ = 0;
           $663 = (invoke_iiii(88,($71|0),($658|0),($662|0))|0);
           $664 = __THREW__; __THREW__ = 0;
           $665 = $664&1;
           do {
            if ($665) {
             $687 = ___cxa_find_matching_catch_2()|0;
             $688 = tempRet0;
             $$14519 = $687;$$14540 = $688;
            } else {
             ;HEAP32[$70>>2]=HEAP32[$71>>2]|0;HEAP32[$70+4>>2]=HEAP32[$71+4>>2]|0;HEAP32[$70+8>>2]=HEAP32[$71+8>>2]|0;
             $$0$i$i$i662 = 0;
             while(1) {
              $exitcond$i$i$i663 = ($$0$i$i$i662|0)==(3);
              if ($exitcond$i$i$i663) {
               break;
              }
              $666 = (($71) + ($$0$i$i$i662<<2)|0);
              HEAP32[$666>>2] = 0;
              $667 = (($$0$i$i$i662) + 1)|0;
              $$0$i$i$i662 = $667;
             }
             __THREW__ = 0;
             $668 = (invoke_iii(95,($70|0),(7566|0))|0);
             $669 = __THREW__; __THREW__ = 0;
             $670 = $669&1;
             if ($670) {
              $689 = ___cxa_find_matching_catch_2()|0;
              $690 = tempRet0;
              __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($70);
              $$14519 = $689;$$14540 = $690;
              break;
             }
             ;HEAP32[$69>>2]=HEAP32[$70>>2]|0;HEAP32[$69+4>>2]=HEAP32[$70+4>>2]|0;HEAP32[$69+8>>2]=HEAP32[$70+8>>2]|0;
             $$0$i$i$i666 = 0;
             while(1) {
              $exitcond$i$i$i667 = ($$0$i$i$i666|0)==(3);
              if ($exitcond$i$i$i667) {
               break;
              }
              $671 = (($70) + ($$0$i$i$i666<<2)|0);
              HEAP32[$671>>2] = 0;
              $672 = (($$0$i$i$i666) + 1)|0;
              $$0$i$i$i666 = $672;
             }
             __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($68,$69);
             $673 = HEAP32[$604>>2]|0;
             $674 = ((($673)) + -24|0);
             __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($674,$68);
             __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($68);
             __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($69);
             __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($70);
             __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($71);
             __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($72);
             __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($73);
             __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($74);
             __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($67);
             __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($66);
             __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($65);
             $$14 = $602;
             break L1;
            }
           } while(0);
           __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($71);
           $$15520 = $$14519;$$15541 = $$14540;
          }
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($72);
          $$16521 = $$15520;$$16542 = $$15541;
         }
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($73);
         $$17522 = $$16521;$$17543 = $$16542;
        }
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($74);
        $$18523 = $$17522;$$18544 = $$17543;
       }
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($67);
       $$19524 = $$18523;$$19545 = $$18544;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($66);
      $$20525 = $$19524;$$20546 = $$19545;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($65);
     $$21 = $$20525;$$21547 = $$20546;
     break;
    }
    case 114:  {
     $706 = HEAP8[$93>>0]|0;
     $707 = $706 << 24 >> 24;
     switch ($707|0) {
     case 99:  {
      $708 = (__ZN10__cxxabiv112_GLOBAL__N_127parse_reinterpret_cast_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
      $$14 = $708;
      break L1;
      break;
     }
     case 109:  {
      ;HEAP32[$75>>2]=0|0;HEAP32[$75+4>>2]=0|0;HEAP32[$75+8>>2]=0|0;
      $709 = (__ZNSt3__211char_traitsIcE6lengthEPKc(7746)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($75,7746,$709);
      __THREW__ = 0;
      $710 = (invoke_iiiii(118,($85|0),($1|0),($75|0),($2|0))|0);
      $711 = __THREW__; __THREW__ = 0;
      $712 = $711&1;
      if ($712) {
       $714 = ___cxa_find_matching_catch_2()|0;
       $715 = tempRet0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($75);
       $$21 = $714;$$21547 = $715;
       break L7;
      } else {
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($75);
       $713 = ($710|0)==($85|0);
       $$595 = $713 ? $0 : $710;
       $$14 = $$595;
       break L1;
      }
      break;
     }
     case 77:  {
      ;HEAP32[$76>>2]=0|0;HEAP32[$76+4>>2]=0|0;HEAP32[$76+8>>2]=0|0;
      $716 = (__ZNSt3__211char_traitsIcE6lengthEPKc(7748)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($76,7748,$716);
      __THREW__ = 0;
      $717 = (invoke_iiiii(118,($85|0),($1|0),($76|0),($2|0))|0);
      $718 = __THREW__; __THREW__ = 0;
      $719 = $718&1;
      if ($719) {
       $721 = ___cxa_find_matching_catch_2()|0;
       $722 = tempRet0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($76);
       $$21 = $721;$$21547 = $722;
       break L7;
      } else {
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($76);
       $720 = ($717|0)==($85|0);
       $$596 = $720 ? $0 : $717;
       $$14 = $$596;
       break L1;
      }
      break;
     }
     case 115:  {
      ;HEAP32[$77>>2]=0|0;HEAP32[$77+4>>2]=0|0;HEAP32[$77+8>>2]=0|0;
      $723 = (__ZNSt3__211char_traitsIcE6lengthEPKc(7751)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($77,7751,$723);
      __THREW__ = 0;
      $724 = (invoke_iiiii(118,($85|0),($1|0),($77|0),($2|0))|0);
      $725 = __THREW__; __THREW__ = 0;
      $726 = $725&1;
      if ($726) {
       $728 = ___cxa_find_matching_catch_2()|0;
       $729 = tempRet0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($77);
       $$21 = $728;$$21547 = $729;
       break L7;
      } else {
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($77);
       $727 = ($724|0)==($85|0);
       $$597 = $727 ? $0 : $724;
       $$14 = $$597;
       break L1;
      }
      break;
     }
     case 83:  {
      ;HEAP32[$78>>2]=0|0;HEAP32[$78+4>>2]=0|0;HEAP32[$78+8>>2]=0|0;
      $730 = (__ZNSt3__211char_traitsIcE6lengthEPKc(7754)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($78,7754,$730);
      __THREW__ = 0;
      $731 = (invoke_iiiii(118,($85|0),($1|0),($78|0),($2|0))|0);
      $732 = __THREW__; __THREW__ = 0;
      $733 = $732&1;
      if ($733) {
       $735 = ___cxa_find_matching_catch_2()|0;
       $736 = tempRet0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($78);
       $$21 = $735;$$21547 = $736;
       break L7;
      } else {
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($78);
       $734 = ($731|0)==($85|0);
       $$598 = $734 ? $0 : $731;
       $$14 = $$598;
       break L1;
      }
      break;
     }
     default: {
      $$14 = $0;
      break L1;
     }
     }
     break;
    }
    case 115:  {
     $737 = HEAP8[$93>>0]|0;
     $738 = $737 << 24 >> 24;
     switch ($738|0) {
     case 99:  {
      $739 = (__ZN10__cxxabiv112_GLOBAL__N_122parse_static_cast_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
      $$14 = $739;
      break L1;
      break;
     }
     case 112:  {
      $740 = (__ZN10__cxxabiv112_GLOBAL__N_120parse_pack_expansionINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
      $$14 = $740;
      break L1;
      break;
     }
     case 114:  {
      $741 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
      $$14 = $741;
      break L1;
      break;
     }
     case 116:  {
      $742 = (__ZN10__cxxabiv112_GLOBAL__N_122parse_sizeof_type_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
      $$14 = $742;
      break L1;
      break;
     }
     case 122:  {
      $743 = (__ZN10__cxxabiv112_GLOBAL__N_122parse_sizeof_expr_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
      $$14 = $743;
      break L1;
      break;
     }
     case 90:  {
      $744 = $$0503;
      $745 = (($80) - ($744))|0;
      $746 = ($745|0)>(2);
      if (!($746)) {
       $$14 = $0;
       break L1;
      }
      $747 = HEAP8[$96>>0]|0;
      $748 = $747 << 24 >> 24;
      switch ($748|0) {
      case 84:  {
       $749 = (__ZN10__cxxabiv112_GLOBAL__N_128parse_sizeof_param_pack_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
       $$14 = $749;
       break L1;
       break;
      }
      case 102:  {
       $750 = (__ZN10__cxxabiv112_GLOBAL__N_137parse_sizeof_function_param_pack_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
       $$14 = $750;
       break L1;
       break;
      }
      default: {
       $$14 = $0;
       break L1;
      }
      }
      break;
     }
     default: {
      $$14 = $0;
      break L1;
     }
     }
     break;
    }
    case 116:  {
     $751 = HEAP8[$93>>0]|0;
     $752 = $751 << 24 >> 24;
     switch ($752|0) {
     case 105: case 101:  {
      $753 = (__ZN10__cxxabiv112_GLOBAL__N_117parse_typeid_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
      $$14 = $753;
      break L1;
      break;
     }
     case 114:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj6EEERAT__Kc($79,7758);
      $754 = ((($2)) + 4|0);
      $755 = HEAP32[$754>>2]|0;
      $756 = ((($2)) + 8|0);
      $757 = HEAP32[$756>>2]|0;
      $758 = ($755>>>0)<($757>>>0);
      if ($758) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($755,$79);
       $759 = HEAP32[$754>>2]|0;
       $760 = ((($759)) + 24|0);
       HEAP32[$754>>2] = $760;
      } else {
       __THREW__ = 0;
       invoke_vii(105,($2|0),($79|0));
       $761 = __THREW__; __THREW__ = 0;
       $762 = $761&1;
       if ($762) {
        $763 = ___cxa_find_matching_catch_2()|0;
        $764 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($79);
        $$21 = $763;$$21547 = $764;
        break L7;
       }
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($79);
      $$14 = $85;
      break L1;
      break;
     }
     case 119:  {
      $765 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_throw_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
      $$14 = $765;
      break L1;
      break;
     }
     default: {
      $$14 = $0;
      break L1;
     }
     }
     break;
    }
    case 57: case 56: case 55: case 54: case 53: case 52: case 51: case 50: case 49:  {
     $766 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
     $$14 = $766;
     break L1;
     break;
    }
    default: {
     $$14 = $0;
     break L1;
    }
    }
   } while(0);
   ___resumeException($$21|0);
   // unreachable;
  } else {
   $$14 = $0;
  }
 } while(0);
 STACKTOP = sp;return ($$14|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEj($0) {
 $0 = $0|0;
 var $$017$off022 = 0, $$01918 = 0, $$020153134 = 0, $$02016 = 0, $$phitmp$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 11|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)<(0);
 if ($3) {
  $4 = ((($0)) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = $5 & 2147483647;
  $phitmp$i = (($6) + -1)|0;
  $7 = ((($0)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $11 = $8;$15 = $phitmp$i;
 } else {
  $9 = $2&255;
  $11 = $9;$15 = 10;
 }
 $10 = ($11>>>0)<(11);
 $12 = (($11) + 16)|0;
 $13 = $12 & -16;
 $phitmp$i2 = (($13) + -1)|0;
 $$phitmp$i = $10 ? 10 : $phitmp$i2;
 $14 = ($$phitmp$i|0)==($15|0);
 L5: do {
  if (!($14)) {
   do {
    if ($10) {
     $23 = HEAP32[$0>>2]|0;
     $24 = ($2<<24>>24)<(0);
     if ($24) {
      $$017$off022 = 0;$$01918 = $23;$$02016 = $0;
      label = 12;
     } else {
      $25 = $2&255;
      $26 = (($25) + 1)|0;
      (__ZNSt3__211char_traitsIcE4copyEPcPKcj($0,$23,$26)|0);
      __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE10deallocateEPcj($23);
      label = 14;
     }
    } else {
     $16 = ($$phitmp$i>>>0)<=($15>>>0);
     $17 = (($$phitmp$i) + 1)|0;
     $18 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($17)|0);
     $19 = ($18|0)==(0|0);
     $or$cond = $16 & $19;
     if ($or$cond) {
      break L5;
     }
     $20 = HEAP8[$1>>0]|0;
     $21 = ($20<<24>>24)<(0);
     if ($21) {
      $22 = HEAP32[$0>>2]|0;
      $$017$off022 = 1;$$01918 = $22;$$02016 = $18;
      label = 12;
      break;
     } else {
      $27 = $20&255;
      $28 = (($27) + 1)|0;
      (__ZNSt3__211char_traitsIcE4copyEPcPKcj($18,$0,$28)|0);
      $$020153134 = $18;
      label = 13;
      break;
     }
    }
   } while(0);
   if ((label|0) == 12) {
    $29 = ((($0)) + 4|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = (($30) + 1)|0;
    (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$02016,$$01918,$31)|0);
    __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE10deallocateEPcj($$01918);
    if ($$017$off022) {
     $$020153134 = $$02016;
     label = 13;
    } else {
     label = 14;
    }
   }
   if ((label|0) == 13) {
    $32 = (($$phitmp$i) + 1)|0;
    $33 = $32 | -2147483648;
    $34 = ((($0)) + 8|0);
    HEAP32[$34>>2] = $33;
    $35 = ((($0)) + 4|0);
    HEAP32[$35>>2] = $11;
    HEAP32[$0>>2] = $$020153134;
    break;
   }
   else if ((label|0) == 14) {
    $36 = $11&255;
    HEAP8[$1>>0] = $36;
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $3 = (($0) + ($$0$i$i<<2)|0);
  HEAP32[$3>>2] = 0;
  $4 = (($$0$i$i) + 1)|0;
  $$0$i$i = $4;
 }
 __THREW__ = 0;
 $5 = (invoke_ii(99,($1|0))|0);
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  $8 = ((($2)) + 11|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = ($9<<24>>24)<(0);
  $11 = ((($2)) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $9&255;
  $14 = $10 ? $12 : $13;
  $15 = (($14) + ($5))|0;
  __THREW__ = 0;
  invoke_viiii(115,($0|0),($1|0),($5|0),($15|0));
  $16 = __THREW__; __THREW__ = 0;
  $17 = $16&1;
  if (!($17)) {
   $18 = HEAP8[$8>>0]|0;
   $19 = ($18<<24>>24)<(0);
   $20 = HEAP32[$2>>2]|0;
   $21 = $19 ? $20 : $2;
   __THREW__ = 0;
   (invoke_iiii(88,($0|0),($21|0),($14|0))|0);
   $22 = __THREW__; __THREW__ = 0;
   $23 = $22&1;
   if (!($23)) {
    return;
   }
  }
 }
 $24 = ___cxa_find_matching_catch_2()|0;
 $25 = tempRet0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($0);
 ___resumeException($24|0);
 // unreachable;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcjj($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = ($3>>>0)>(4294967279);
 if ($5) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  label = 5;
 } else {
  $6 = ($3>>>0)<(11);
  if ($6) {
   $7 = $2&255;
   $8 = ((($0)) + 11|0);
   HEAP8[$8>>0] = $7;
   $$0 = $0;
  } else {
   label = 5;
  }
 }
 if ((label|0) == 5) {
  $9 = (($3) + 16)|0;
  $10 = $9 & -16;
  $11 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($10)|0);
  HEAP32[$0>>2] = $11;
  $12 = $10 | -2147483648;
  $13 = ((($0)) + 8|0);
  HEAP32[$13>>2] = $12;
  $14 = ((($0)) + 4|0);
  HEAP32[$14>>2] = $2;
  $$0 = $11;
 }
 (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0,$1,$2)|0);
 $15 = (($$0) + ($2)|0);
 HEAP8[$4>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($15,$4);
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv112_GLOBAL__N_118parse_expr_primaryINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0$i$i$i = 0, $$0$i$i$i232 = 0, $$0$i$i$i236 = 0, $$0194 = 0, $$1202 = 0, $$1207 = 0, $$211 = 0, $$212 = 0, $$213 = 0, $$214 = 0, $$215 = 0, $$216 = 0, $$217 = 0, $$218 = 0, $$219 = 0, $$220 = 0, $$2203 = 0, $$2208 = 0, $$221 = 0;
 var $$222 = 0, $$223 = 0, $$224 = 0, $$225 = 0, $$226 = 0, $$227 = 0, $$3 = 0, $$3204 = 0, $$3209 = 0, $$4205 = 0, $$4210 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0;
 var $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i233 = 0, $exitcond$i$i$i237 = 0, $isdigit = 0;
 var $isdigittmp = 0, $or$cond = 0, $or$cond228 = 0, $or$cond256 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(320|0);
 $3 = sp + 296|0;
 $4 = sp + 272|0;
 $5 = sp + 248|0;
 $6 = sp + 232|0;
 $7 = sp + 220|0;
 $8 = sp + 208|0;
 $9 = sp + 196|0;
 $10 = sp + 184|0;
 $11 = sp + 172|0;
 $12 = sp + 160|0;
 $13 = sp + 148|0;
 $14 = sp + 136|0;
 $15 = sp + 124|0;
 $16 = sp + 112|0;
 $17 = sp + 100|0;
 $18 = sp + 88|0;
 $19 = sp + 64|0;
 $20 = sp + 48|0;
 $21 = sp + 36|0;
 $22 = sp + 24|0;
 $23 = sp + 12|0;
 $24 = sp;
 $25 = $1;
 $26 = $0;
 $27 = (($25) - ($26))|0;
 $28 = ($27|0)>(3);
 L1: do {
  if ($28) {
   $29 = HEAP8[$0>>0]|0;
   $30 = ($29<<24>>24)==(76);
   if ($30) {
    $31 = ((($0)) + 1|0);
    $32 = HEAP8[$31>>0]|0;
    $33 = $32 << 24 >> 24;
    $34 = ((($0)) + 3|0);
    $35 = ((($0)) + 2|0);
    L4: do {
     switch ($33|0) {
     case 84:  {
      $$3 = $0;
      break L1;
      break;
     }
     case 119:  {
      ;HEAP32[$3>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
      $36 = (__ZNSt3__211char_traitsIcE6lengthEPKc(8760)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3,8760,$36);
      __THREW__ = 0;
      $37 = (invoke_iiiii(120,($35|0),($1|0),($3|0),($2|0))|0);
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       $41 = ___cxa_find_matching_catch_2()|0;
       $42 = tempRet0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
       $$4205 = $41;$$4210 = $42;
       break L4;
      } else {
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
       $40 = ($37|0)==($35|0);
       $$ = $40 ? $0 : $37;
       $$3 = $$;
       break L1;
      }
      break;
     }
     case 98:  {
      $43 = HEAP8[$34>>0]|0;
      $44 = ($43<<24>>24)==(69);
      if (!($44)) {
       $$3 = $0;
       break L1;
      }
      $45 = HEAP8[$35>>0]|0;
      $46 = $45 << 24 >> 24;
      $47 = ((($0)) + 4|0);
      switch ($46|0) {
      case 48:  {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj6EEERAT__Kc($4,8768);
       $48 = ((($2)) + 4|0);
       $49 = HEAP32[$48>>2]|0;
       $50 = ((($2)) + 8|0);
       $51 = HEAP32[$50>>2]|0;
       $52 = ($49>>>0)<($51>>>0);
       if ($52) {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($49,$4);
        $53 = HEAP32[$48>>2]|0;
        $54 = ((($53)) + 24|0);
        HEAP32[$48>>2] = $54;
       } else {
        __THREW__ = 0;
        invoke_vii(105,($2|0),($4|0));
        $55 = __THREW__; __THREW__ = 0;
        $56 = $55&1;
        if ($56) {
         $57 = ___cxa_find_matching_catch_2()|0;
         $58 = tempRet0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
         $$4205 = $57;$$4210 = $58;
         break L4;
        }
       }
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
       $$3 = $47;
       break L1;
       break;
      }
      case 49:  {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj5EEERAT__Kc($5,8774);
       $59 = ((($2)) + 4|0);
       $60 = HEAP32[$59>>2]|0;
       $61 = ((($2)) + 8|0);
       $62 = HEAP32[$61>>2]|0;
       $63 = ($60>>>0)<($62>>>0);
       if ($63) {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($60,$5);
        $64 = HEAP32[$59>>2]|0;
        $65 = ((($64)) + 24|0);
        HEAP32[$59>>2] = $65;
       } else {
        __THREW__ = 0;
        invoke_vii(105,($2|0),($5|0));
        $66 = __THREW__; __THREW__ = 0;
        $67 = $66&1;
        if ($67) {
         $68 = ___cxa_find_matching_catch_2()|0;
         $69 = tempRet0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
         $$4205 = $68;$$4210 = $69;
         break L4;
        }
       }
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
       $$3 = $47;
       break L1;
       break;
      }
      default: {
       $$3 = $0;
       break L1;
      }
      }
      break;
     }
     case 99:  {
      ;HEAP32[$6>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
      $70 = (__ZNSt3__211char_traitsIcE6lengthEPKc(8779)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($6,8779,$70);
      __THREW__ = 0;
      $71 = (invoke_iiiii(120,($35|0),($1|0),($6|0),($2|0))|0);
      $72 = __THREW__; __THREW__ = 0;
      $73 = $72&1;
      if ($73) {
       $75 = ___cxa_find_matching_catch_2()|0;
       $76 = tempRet0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
       $$4205 = $75;$$4210 = $76;
       break L4;
      } else {
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
       $74 = ($71|0)==($35|0);
       $$211 = $74 ? $0 : $71;
       $$3 = $$211;
       break L1;
      }
      break;
     }
     case 97:  {
      ;HEAP32[$7>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
      $77 = (__ZNSt3__211char_traitsIcE6lengthEPKc(8784)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($7,8784,$77);
      __THREW__ = 0;
      $78 = (invoke_iiiii(120,($35|0),($1|0),($7|0),($2|0))|0);
      $79 = __THREW__; __THREW__ = 0;
      $80 = $79&1;
      if ($80) {
       $82 = ___cxa_find_matching_catch_2()|0;
       $83 = tempRet0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
       $$4205 = $82;$$4210 = $83;
       break L4;
      } else {
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
       $81 = ($78|0)==($35|0);
       $$212 = $81 ? $0 : $78;
       $$3 = $$212;
       break L1;
      }
      break;
     }
     case 104:  {
      ;HEAP32[$8>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;
      $84 = (__ZNSt3__211char_traitsIcE6lengthEPKc(8796)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($8,8796,$84);
      __THREW__ = 0;
      $85 = (invoke_iiiii(120,($35|0),($1|0),($8|0),($2|0))|0);
      $86 = __THREW__; __THREW__ = 0;
      $87 = $86&1;
      if ($87) {
       $89 = ___cxa_find_matching_catch_2()|0;
       $90 = tempRet0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
       $$4205 = $89;$$4210 = $90;
       break L4;
      } else {
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
       $88 = ($85|0)==($35|0);
       $$213 = $88 ? $0 : $85;
       $$3 = $$213;
       break L1;
      }
      break;
     }
     case 115:  {
      ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
      $91 = (__ZNSt3__211char_traitsIcE6lengthEPKc(8810)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($9,8810,$91);
      __THREW__ = 0;
      $92 = (invoke_iiiii(120,($35|0),($1|0),($9|0),($2|0))|0);
      $93 = __THREW__; __THREW__ = 0;
      $94 = $93&1;
      if ($94) {
       $96 = ___cxa_find_matching_catch_2()|0;
       $97 = tempRet0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
       $$4205 = $96;$$4210 = $97;
       break L4;
      } else {
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
       $95 = ($92|0)==($35|0);
       $$214 = $95 ? $0 : $92;
       $$3 = $$214;
       break L1;
      }
      break;
     }
     case 116:  {
      ;HEAP32[$10>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
      $98 = (__ZNSt3__211char_traitsIcE6lengthEPKc(8816)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($10,8816,$98);
      __THREW__ = 0;
      $99 = (invoke_iiiii(120,($35|0),($1|0),($10|0),($2|0))|0);
      $100 = __THREW__; __THREW__ = 0;
      $101 = $100&1;
      if ($101) {
       $103 = ___cxa_find_matching_catch_2()|0;
       $104 = tempRet0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($10);
       $$4205 = $103;$$4210 = $104;
       break L4;
      } else {
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($10);
       $102 = ($99|0)==($35|0);
       $$215 = $102 ? $0 : $99;
       $$3 = $$215;
       break L1;
      }
      break;
     }
     case 105:  {
      ;HEAP32[$11>>2]=0|0;HEAP32[$11+4>>2]=0|0;HEAP32[$11+8>>2]=0|0;
      $105 = (__ZNSt3__211char_traitsIcE6lengthEPKc(13607)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($11,13607,$105);
      __THREW__ = 0;
      $106 = (invoke_iiiii(120,($35|0),($1|0),($11|0),($2|0))|0);
      $107 = __THREW__; __THREW__ = 0;
      $108 = $107&1;
      if ($108) {
       $110 = ___cxa_find_matching_catch_2()|0;
       $111 = tempRet0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($11);
       $$4205 = $110;$$4210 = $111;
       break L4;
      } else {
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($11);
       $109 = ($106|0)==($35|0);
       $$216 = $109 ? $0 : $106;
       $$3 = $$216;
       break L1;
      }
      break;
     }
     case 106:  {
      ;HEAP32[$12>>2]=0|0;HEAP32[$12+4>>2]=0|0;HEAP32[$12+8>>2]=0|0;
      $112 = (__ZNSt3__211char_traitsIcE6lengthEPKc(8831)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($12,8831,$112);
      __THREW__ = 0;
      $113 = (invoke_iiiii(120,($35|0),($1|0),($12|0),($2|0))|0);
      $114 = __THREW__; __THREW__ = 0;
      $115 = $114&1;
      if ($115) {
       $117 = ___cxa_find_matching_catch_2()|0;
       $118 = tempRet0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($12);
       $$4205 = $117;$$4210 = $118;
       break L4;
      } else {
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($12);
       $116 = ($113|0)==($35|0);
       $$217 = $116 ? $0 : $113;
       $$3 = $$217;
       break L1;
      }
      break;
     }
     case 108:  {
      ;HEAP32[$13>>2]=0|0;HEAP32[$13+4>>2]=0|0;HEAP32[$13+8>>2]=0|0;
      $119 = (__ZNSt3__211char_traitsIcE6lengthEPKc(8833)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($13,8833,$119);
      __THREW__ = 0;
      $120 = (invoke_iiiii(120,($35|0),($1|0),($13|0),($2|0))|0);
      $121 = __THREW__; __THREW__ = 0;
      $122 = $121&1;
      if ($122) {
       $124 = ___cxa_find_matching_catch_2()|0;
       $125 = tempRet0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($13);
       $$4205 = $124;$$4210 = $125;
       break L4;
      } else {
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($13);
       $123 = ($120|0)==($35|0);
       $$218 = $123 ? $0 : $120;
       $$3 = $$218;
       break L1;
      }
      break;
     }
     case 109:  {
      ;HEAP32[$14>>2]=0|0;HEAP32[$14+4>>2]=0|0;HEAP32[$14+8>>2]=0|0;
      $126 = (__ZNSt3__211char_traitsIcE6lengthEPKc(8835)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($14,8835,$126);
      __THREW__ = 0;
      $127 = (invoke_iiiii(120,($35|0),($1|0),($14|0),($2|0))|0);
      $128 = __THREW__; __THREW__ = 0;
      $129 = $128&1;
      if ($129) {
       $131 = ___cxa_find_matching_catch_2()|0;
       $132 = tempRet0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($14);
       $$4205 = $131;$$4210 = $132;
       break L4;
      } else {
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($14);
       $130 = ($127|0)==($35|0);
       $$219 = $130 ? $0 : $127;
       $$3 = $$219;
       break L1;
      }
      break;
     }
     case 120:  {
      ;HEAP32[$15>>2]=0|0;HEAP32[$15+4>>2]=0|0;HEAP32[$15+8>>2]=0|0;
      $133 = (__ZNSt3__211char_traitsIcE6lengthEPKc(8838)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($15,8838,$133);
      __THREW__ = 0;
      $134 = (invoke_iiiii(120,($35|0),($1|0),($15|0),($2|0))|0);
      $135 = __THREW__; __THREW__ = 0;
      $136 = $135&1;
      if ($136) {
       $138 = ___cxa_find_matching_catch_2()|0;
       $139 = tempRet0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($15);
       $$4205 = $138;$$4210 = $139;
       break L4;
      } else {
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($15);
       $137 = ($134|0)==($35|0);
       $$220 = $137 ? $0 : $134;
       $$3 = $$220;
       break L1;
      }
      break;
     }
     case 121:  {
      ;HEAP32[$16>>2]=0|0;HEAP32[$16+4>>2]=0|0;HEAP32[$16+8>>2]=0|0;
      $140 = (__ZNSt3__211char_traitsIcE6lengthEPKc(8841)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($16,8841,$140);
      __THREW__ = 0;
      $141 = (invoke_iiiii(120,($35|0),($1|0),($16|0),($2|0))|0);
      $142 = __THREW__; __THREW__ = 0;
      $143 = $142&1;
      if ($143) {
       $145 = ___cxa_find_matching_catch_2()|0;
       $146 = tempRet0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($16);
       $$4205 = $145;$$4210 = $146;
       break L4;
      } else {
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($16);
       $144 = ($141|0)==($35|0);
       $$221 = $144 ? $0 : $141;
       $$3 = $$221;
       break L1;
      }
      break;
     }
     case 110:  {
      ;HEAP32[$17>>2]=0|0;HEAP32[$17+4>>2]=0|0;HEAP32[$17+8>>2]=0|0;
      $147 = (__ZNSt3__211char_traitsIcE6lengthEPKc(8845)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($17,8845,$147);
      __THREW__ = 0;
      $148 = (invoke_iiiii(120,($35|0),($1|0),($17|0),($2|0))|0);
      $149 = __THREW__; __THREW__ = 0;
      $150 = $149&1;
      if ($150) {
       $152 = ___cxa_find_matching_catch_2()|0;
       $153 = tempRet0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($17);
       $$4205 = $152;$$4210 = $153;
       break L4;
      } else {
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($17);
       $151 = ($148|0)==($35|0);
       $$222 = $151 ? $0 : $148;
       $$3 = $$222;
       break L1;
      }
      break;
     }
     case 111:  {
      ;HEAP32[$18>>2]=0|0;HEAP32[$18+4>>2]=0|0;HEAP32[$18+8>>2]=0|0;
      $154 = (__ZNSt3__211char_traitsIcE6lengthEPKc(8854)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($18,8854,$154);
      __THREW__ = 0;
      $155 = (invoke_iiiii(120,($35|0),($1|0),($18|0),($2|0))|0);
      $156 = __THREW__; __THREW__ = 0;
      $157 = $156&1;
      if ($157) {
       $159 = ___cxa_find_matching_catch_2()|0;
       $160 = tempRet0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($18);
       $$4205 = $159;$$4210 = $160;
       break L4;
      } else {
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($18);
       $158 = ($155|0)==($35|0);
       $$223 = $158 ? $0 : $155;
       $$3 = $$223;
       break L1;
      }
      break;
     }
     case 102:  {
      $161 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_floating_numberIfNS0_2DbEEEPKcS4_S4_RT0_($35,$1,$2)|0);
      $162 = ($161|0)==($35|0);
      $$224 = $162 ? $0 : $161;
      $$3 = $$224;
      break L1;
      break;
     }
     case 100:  {
      $163 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_floating_numberIdNS0_2DbEEEPKcS4_S4_RT0_($35,$1,$2)|0);
      $164 = ($163|0)==($35|0);
      $$225 = $164 ? $0 : $163;
      $$3 = $$225;
      break L1;
      break;
     }
     case 101:  {
      $165 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_floating_numberIeNS0_2DbEEEPKcS4_S4_RT0_($35,$1,$2)|0);
      $166 = ($165|0)==($35|0);
      $$226 = $166 ? $0 : $165;
      $$3 = $$226;
      break L1;
      break;
     }
     case 95:  {
      $167 = HEAP8[$35>>0]|0;
      $168 = ($167<<24>>24)==(90);
      if (!($168)) {
       $$3 = $0;
       break L1;
      }
      $169 = (__ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($34,$1,$2)|0);
      $170 = ($169|0)==($34|0);
      $171 = ($169|0)==($1|0);
      $or$cond = $170 | $171;
      if ($or$cond) {
       $$3 = $0;
       break L1;
      }
      $172 = HEAP8[$169>>0]|0;
      $173 = ($172<<24>>24)==(69);
      $174 = ((($169)) + 1|0);
      $$227 = $173 ? $174 : $0;
      $$3 = $$227;
      break L1;
      break;
     }
     default: {
      $175 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($31,$1,$2)|0);
      $176 = ($175|0)==($31|0);
      $177 = ($175|0)==($1|0);
      $or$cond228 = $176 | $177;
      if ($or$cond228) {
       $$3 = $0;
       break L1;
      }
      $178 = HEAP8[$175>>0]|0;
      $179 = ($178<<24>>24)==(69);
      if ($179) {
       $227 = ((($175)) + 1|0);
       $$3 = $227;
       break L1;
      } else {
       $$0194 = $175;
      }
      while(1) {
       $180 = ($$0194|0)==($1|0);
       $181 = ((($$0194)) + 1|0);
       if ($180) {
        $$3 = $0;
        break L1;
       }
       $182 = HEAP8[$$0194>>0]|0;
       $183 = $182 << 24 >> 24;
       $isdigittmp = (($183) + -48)|0;
       $isdigit = ($isdigittmp>>>0)<(10);
       if ($isdigit) {
        $$0194 = $181;
       } else {
        break;
       }
      }
      $184 = ($$0194|0)!=($175|0);
      $185 = ($182<<24>>24)==(69);
      $or$cond256 = $184 & $185;
      if (!($or$cond256)) {
       $$3 = $0;
       break L1;
      }
      $186 = HEAP32[$2>>2]|0;
      $187 = ((($2)) + 4|0);
      $188 = HEAP32[$187>>2]|0;
      $189 = ($186|0)==($188|0);
      if ($189) {
       $$3 = $0;
       break L1;
      }
      $190 = ((($188)) + -24|0);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($23,$190);
      __THREW__ = 0;
      $191 = (invoke_iiii(97,($23|0),0,(7568|0))|0);
      $192 = __THREW__; __THREW__ = 0;
      $193 = $192&1;
      if ($193) {
       $219 = ___cxa_find_matching_catch_2()|0;
       $220 = tempRet0;
       $$3204 = $219;$$3209 = $220;
      } else {
       ;HEAP32[$22>>2]=HEAP32[$23>>2]|0;HEAP32[$22+4>>2]=HEAP32[$23+4>>2]|0;HEAP32[$22+8>>2]=HEAP32[$23+8>>2]|0;
       $$0$i$i$i = 0;
       while(1) {
        $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
        if ($exitcond$i$i$i) {
         break;
        }
        $194 = (($23) + ($$0$i$i$i<<2)|0);
        HEAP32[$194>>2] = 0;
        $195 = (($$0$i$i$i) + 1)|0;
        $$0$i$i$i = $195;
       }
       __THREW__ = 0;
       $196 = (invoke_iii(95,($22|0),(7566|0))|0);
       $197 = __THREW__; __THREW__ = 0;
       $198 = $197&1;
       if ($198) {
        $221 = ___cxa_find_matching_catch_2()|0;
        $222 = tempRet0;
        $$2203 = $221;$$2208 = $222;
       } else {
        ;HEAP32[$21>>2]=HEAP32[$22>>2]|0;HEAP32[$21+4>>2]=HEAP32[$22+4>>2]|0;HEAP32[$21+8>>2]=HEAP32[$22+8>>2]|0;
        $$0$i$i$i232 = 0;
        while(1) {
         $exitcond$i$i$i233 = ($$0$i$i$i232|0)==(3);
         if ($exitcond$i$i$i233) {
          break;
         }
         $199 = (($22) + ($$0$i$i$i232<<2)|0);
         HEAP32[$199>>2] = 0;
         $200 = (($$0$i$i$i232) + 1)|0;
         $$0$i$i$i232 = $200;
        }
        ;HEAP32[$24>>2]=0|0;HEAP32[$24+4>>2]=0|0;HEAP32[$24+8>>2]=0|0;
        __THREW__ = 0;
        invoke_viii(121,($24|0),($175|0),($$0194|0));
        $201 = __THREW__; __THREW__ = 0;
        $202 = $201&1;
        do {
         if ($202) {
          $223 = ___cxa_find_matching_catch_2()|0;
          $224 = tempRet0;
          $$1202 = $223;$$1207 = $224;
         } else {
          $203 = ((($24)) + 11|0);
          $204 = HEAP8[$203>>0]|0;
          $205 = ($204<<24>>24)<(0);
          $206 = HEAP32[$24>>2]|0;
          $207 = $205 ? $206 : $24;
          $208 = ((($24)) + 4|0);
          $209 = HEAP32[$208>>2]|0;
          $210 = $204&255;
          $211 = $205 ? $209 : $210;
          __THREW__ = 0;
          $212 = (invoke_iiii(88,($21|0),($207|0),($211|0))|0);
          $213 = __THREW__; __THREW__ = 0;
          $214 = $213&1;
          if ($214) {
           $225 = ___cxa_find_matching_catch_2()|0;
           $226 = tempRet0;
           __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($24);
           $$1202 = $225;$$1207 = $226;
           break;
          }
          ;HEAP32[$20>>2]=HEAP32[$21>>2]|0;HEAP32[$20+4>>2]=HEAP32[$21+4>>2]|0;HEAP32[$20+8>>2]=HEAP32[$21+8>>2]|0;
          $$0$i$i$i236 = 0;
          while(1) {
           $exitcond$i$i$i237 = ($$0$i$i$i236|0)==(3);
           if ($exitcond$i$i$i237) {
            break;
           }
           $215 = (($21) + ($$0$i$i$i236<<2)|0);
           HEAP32[$215>>2] = 0;
           $216 = (($$0$i$i$i236) + 1)|0;
           $$0$i$i$i236 = $216;
          }
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($19,$20);
          $217 = HEAP32[$187>>2]|0;
          $218 = ((($217)) + -24|0);
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($218,$19);
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($19);
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($20);
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($24);
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($21);
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($22);
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($23);
          $$3 = $181;
          break L1;
         }
        } while(0);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($21);
        $$2203 = $$1202;$$2208 = $$1207;
       }
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($22);
       $$3204 = $$2203;$$3209 = $$2208;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($23);
      $$4205 = $$3204;$$4210 = $$3209;
     }
     }
    } while(0);
    ___resumeException($$4205|0);
    // unreachable;
   } else {
    $$3 = $0;
   }
  } else {
   $$3 = $0;
  }
 } while(0);
 STACKTOP = sp;return ($$3|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_120parse_function_paramINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0$i$i$i = 0, $$0$i$i$i56 = 0, $$049 = 0, $$052 = 0, $$150 = 0, $$153 = 0, $$2 = 0, $$251 = 0, $$254 = 0, $$3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0;
 var $9 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i57 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $3 = sp + 104|0;
 $4 = sp + 80|0;
 $5 = sp + 64|0;
 $6 = sp + 52|0;
 $7 = sp + 48|0;
 $8 = sp + 24|0;
 $9 = sp + 12|0;
 $10 = sp;
 $11 = $1;
 $12 = $0;
 $13 = (($11) - ($12))|0;
 $14 = ($13|0)>(2);
 L1: do {
  if ($14) {
   $15 = HEAP8[$0>>0]|0;
   $16 = ($15<<24>>24)==(102);
   if ($16) {
    $17 = ((($0)) + 1|0);
    $18 = HEAP8[$17>>0]|0;
    $19 = ((($0)) + 2|0);
    L4: do {
     switch ($18<<24>>24) {
     case 112:  {
      $20 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_cv_qualifiersEPKcS2_Rj($19,$1,$3)|0);
      $21 = (__ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($20,$1)|0);
      $22 = ($21|0)==($1|0);
      L6: do {
       if ($22) {
        $$0 = $0;
       } else {
        $23 = HEAP8[$21>>0]|0;
        $24 = ($23<<24>>24)==(95);
        if ($24) {
         ;HEAP32[$6>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESC_SC_($6,$20,$21);
         __THREW__ = 0;
         $25 = (invoke_iiii(97,($6|0),0,(8757|0))|0);
         $26 = __THREW__; __THREW__ = 0;
         $27 = $26&1;
         do {
          if ($27) {
           $40 = ___cxa_find_matching_catch_2()|0;
           $41 = tempRet0;
           $$049 = $40;$$052 = $41;
          } else {
           ;HEAP32[$5>>2]=HEAP32[$6>>2]|0;HEAP32[$5+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$6+8>>2]|0;
           $$0$i$i$i = 0;
           while(1) {
            $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
            if ($exitcond$i$i$i) {
             break;
            }
            $28 = (($6) + ($$0$i$i$i<<2)|0);
            HEAP32[$28>>2] = 0;
            $29 = (($$0$i$i$i) + 1)|0;
            $$0$i$i$i = $29;
           }
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($4,$5);
           $30 = ((($2)) + 4|0);
           $31 = HEAP32[$30>>2]|0;
           $32 = ((($2)) + 8|0);
           $33 = HEAP32[$32>>2]|0;
           $34 = ($31>>>0)<($33>>>0);
           if ($34) {
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($31,$4);
            $35 = HEAP32[$30>>2]|0;
            $36 = ((($35)) + 24|0);
            HEAP32[$30>>2] = $36;
           } else {
            __THREW__ = 0;
            invoke_vii(105,($2|0),($4|0));
            $37 = __THREW__; __THREW__ = 0;
            $38 = $37&1;
            if ($38) {
             $42 = ___cxa_find_matching_catch_2()|0;
             $43 = tempRet0;
             __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
             __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
             $$049 = $42;$$052 = $43;
             break;
            }
           }
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
           __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
           __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
           $39 = ((($21)) + 1|0);
           $$0 = $39;
           break L6;
          }
         } while(0);
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
         $$251 = $$049;$$254 = $$052;
         break L4;
        } else {
         $$0 = $0;
        }
       }
      } while(0);
      $$3 = $$0;
      break L1;
      break;
     }
     case 76:  {
      $44 = (__ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($19,$1)|0);
      $45 = ($44|0)==($1|0);
      L24: do {
       if ($45) {
        $$2 = $0;
       } else {
        $46 = HEAP8[$44>>0]|0;
        $47 = ($46<<24>>24)==(112);
        if ($47) {
         $48 = ((($44)) + 1|0);
         $49 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_cv_qualifiersEPKcS2_Rj($48,$1,$7)|0);
         $50 = (__ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($49,$1)|0);
         $51 = ($50|0)==($1|0);
         if ($51) {
          $$2 = $0;
         } else {
          $52 = HEAP8[$50>>0]|0;
          $53 = ($52<<24>>24)==(95);
          if ($53) {
           ;HEAP32[$10>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
           __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESC_SC_($10,$49,$50);
           __THREW__ = 0;
           $54 = (invoke_iiii(97,($10|0),0,(8757|0))|0);
           $55 = __THREW__; __THREW__ = 0;
           $56 = $55&1;
           do {
            if ($56) {
             $69 = ___cxa_find_matching_catch_2()|0;
             $70 = tempRet0;
             $$150 = $69;$$153 = $70;
            } else {
             ;HEAP32[$9>>2]=HEAP32[$10>>2]|0;HEAP32[$9+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$9+8>>2]=HEAP32[$10+8>>2]|0;
             $$0$i$i$i56 = 0;
             while(1) {
              $exitcond$i$i$i57 = ($$0$i$i$i56|0)==(3);
              if ($exitcond$i$i$i57) {
               break;
              }
              $57 = (($10) + ($$0$i$i$i56<<2)|0);
              HEAP32[$57>>2] = 0;
              $58 = (($$0$i$i$i56) + 1)|0;
              $$0$i$i$i56 = $58;
             }
             __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($8,$9);
             $59 = ((($2)) + 4|0);
             $60 = HEAP32[$59>>2]|0;
             $61 = ((($2)) + 8|0);
             $62 = HEAP32[$61>>2]|0;
             $63 = ($60>>>0)<($62>>>0);
             if ($63) {
              __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($60,$8);
              $64 = HEAP32[$59>>2]|0;
              $65 = ((($64)) + 24|0);
              HEAP32[$59>>2] = $65;
             } else {
              __THREW__ = 0;
              invoke_vii(105,($2|0),($8|0));
              $66 = __THREW__; __THREW__ = 0;
              $67 = $66&1;
              if ($67) {
               $71 = ___cxa_find_matching_catch_2()|0;
               $72 = tempRet0;
               __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($8);
               __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
               $$150 = $71;$$153 = $72;
               break;
              }
             }
             __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($8);
             __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
             __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($10);
             $68 = ((($50)) + 1|0);
             $$2 = $68;
             break L24;
            }
           } while(0);
           __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($10);
           $$251 = $$150;$$254 = $$153;
           break L4;
          } else {
           $$2 = $0;
          }
         }
        } else {
         $$2 = $0;
        }
       }
      } while(0);
      $$3 = $$2;
      break L1;
      break;
     }
     default: {
      $$3 = $0;
      break L1;
     }
     }
    } while(0);
    ___resumeException($$251|0);
    // unreachable;
   } else {
    $$3 = $0;
   }
  } else {
   $$3 = $0;
  }
 } while(0);
 STACKTOP = sp;return ($$3|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0$i$i$i = 0, $$0$i$i$i50 = 0, $$0$i$i$i53 = 0, $$0$i$i$i57 = 0, $$0$i$i$i61 = 0, $$036 = 0, $$038 = 0, $$1 = 0, $$137 = 0, $$139 = 0, $$2 = 0, $$240 = 0, $$3 = 0, $$341 = 0, $$4 = 0, $$442 = 0, $$5 = 0, $$543 = 0, $$6 = 0, $$644 = 0;
 var $$7 = 0, $$745 = 0, $$pre$i = 0, $$pre$i71 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i51 = 0;
 var $exitcond$i$i$i54 = 0, $exitcond$i$i$i58 = 0, $exitcond$i$i$i62 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $4 = sp + 97|0;
 $5 = sp + 96|0;
 $6 = sp + 84|0;
 $7 = sp + 72|0;
 $8 = sp + 60|0;
 $9 = sp + 48|0;
 $10 = sp + 36|0;
 $11 = sp + 24|0;
 $12 = sp + 12|0;
 $13 = sp;
 $14 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($0,$1,$3)|0);
 $15 = ($14|0)==($0|0);
 L1: do {
  if ($15) {
   $$1 = $0;
  } else {
   $16 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($14,$1,$3)|0);
   $17 = ($16|0)==($14|0);
   $18 = ((($3)) + 4|0);
   if ($17) {
    $153 = HEAP32[$18>>2]|0;
    $154 = ((($153)) + -24|0);
    $156 = $153;
    while(1) {
     $155 = ($156|0)==($154|0);
     if ($155) {
      $$1 = $0;
      break L1;
     }
     $157 = ((($156)) + -24|0);
     HEAP32[$18>>2] = $157;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($157);
     $$pre$i71 = HEAP32[$18>>2]|0;
     $156 = $$pre$i71;
    }
   }
   $19 = HEAP32[$18>>2]|0;
   $20 = HEAP32[$3>>2]|0;
   $21 = (($19) - ($20))|0;
   $22 = (($21|0) / 24)&-1;
   $23 = ($22>>>0)<(2);
   if ($23) {
    $$1 = $0;
   } else {
    $24 = $19;
    $25 = ((($24)) + -24|0);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($6,$25);
    $26 = HEAP32[$18>>2]|0;
    $27 = ((($26)) + -24|0);
    $29 = $26;
    while(1) {
     $28 = ($29|0)==($27|0);
     if ($28) {
      break;
     }
     $30 = ((($29)) + -24|0);
     HEAP32[$18>>2] = $30;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($30);
     $$pre$i = HEAP32[$18>>2]|0;
     $29 = $$pre$i;
    }
    $31 = ((($26)) + -48|0);
    __THREW__ = 0;
    invoke_vii(96,($7|0),($31|0));
    $32 = __THREW__; __THREW__ = 0;
    $33 = $32&1;
    if ($33) {
     $62 = ___cxa_find_matching_catch_2()|0;
     $63 = tempRet0;
     $$7 = $63;$$745 = $62;
    } else {
     $34 = HEAP32[$18>>2]|0;
     $35 = ((($34)) + -24|0);
     $36 = ((($35)) + 11|0);
     $37 = HEAP8[$36>>0]|0;
     $38 = ($37<<24>>24)<(0);
     if ($38) {
      $39 = HEAP32[$35>>2]|0;
      HEAP8[$4>>0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($39,$4);
      $40 = ((($34)) + -20|0);
      HEAP32[$40>>2] = 0;
     } else {
      HEAP8[$5>>0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($35,$5);
      HEAP8[$36>>0] = 0;
     }
     __THREW__ = 0;
     $41 = (invoke_ii(99,(7604|0))|0);
     $42 = __THREW__; __THREW__ = 0;
     $43 = $42&1;
     if ($43) {
      $57 = ___cxa_find_matching_catch_3(0|0)|0;
      $58 = tempRet0;
      ___clang_call_terminate($57);
      // unreachable;
     }
     $44 = ((($2)) + 11|0);
     $45 = HEAP8[$44>>0]|0;
     $46 = ($45<<24>>24)<(0);
     $47 = ((($2)) + 4|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = $45&255;
     $50 = $46 ? $48 : $49;
     $51 = ($41|0)==($50|0);
     if ($51) {
      __THREW__ = 0;
      $52 = (invoke_iiii(100,($2|0),(7604|0),($41|0))|0);
      $53 = __THREW__; __THREW__ = 0;
      $54 = $53&1;
      if ($54) {
       $55 = ___cxa_find_matching_catch_3(0|0)|0;
       $56 = tempRet0;
       ___clang_call_terminate($55);
       // unreachable;
      }
      $59 = ($52|0)==(0);
      if ($59) {
       __THREW__ = 0;
       invoke_vii(93,($35|0),40);
       $60 = __THREW__; __THREW__ = 0;
       $61 = $60&1;
       if ($61) {
        label = 19;
       } else {
        label = 20;
       }
      } else {
       label = 20;
      }
     } else {
      label = 20;
     }
     L30: do {
      if ((label|0) == 20) {
       __THREW__ = 0;
       invoke_viii(117,($13|0),(7568|0),($7|0));
       $66 = __THREW__; __THREW__ = 0;
       $67 = $66&1;
       if ($67) {
        $139 = ___cxa_find_matching_catch_2()|0;
        $140 = tempRet0;
        $$5 = $140;$$543 = $139;
       } else {
        __THREW__ = 0;
        $68 = (invoke_iii(95,($13|0),(7854|0))|0);
        $69 = __THREW__; __THREW__ = 0;
        $70 = $69&1;
        if ($70) {
         $141 = ___cxa_find_matching_catch_2()|0;
         $142 = tempRet0;
         $$4 = $142;$$442 = $141;
        } else {
         ;HEAP32[$12>>2]=HEAP32[$13>>2]|0;HEAP32[$12+4>>2]=HEAP32[$13+4>>2]|0;HEAP32[$12+8>>2]=HEAP32[$13+8>>2]|0;
         $$0$i$i$i = 0;
         while(1) {
          $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
          if ($exitcond$i$i$i) {
           break;
          }
          $71 = (($13) + ($$0$i$i$i<<2)|0);
          HEAP32[$71>>2] = 0;
          $72 = (($$0$i$i$i) + 1)|0;
          $$0$i$i$i = $72;
         }
         $73 = HEAP8[$44>>0]|0;
         $74 = ($73<<24>>24)<(0);
         $75 = HEAP32[$2>>2]|0;
         $76 = $74 ? $75 : $2;
         $77 = HEAP32[$47>>2]|0;
         $78 = $73&255;
         $79 = $74 ? $77 : $78;
         __THREW__ = 0;
         $80 = (invoke_iiii(88,($12|0),($76|0),($79|0))|0);
         $81 = __THREW__; __THREW__ = 0;
         $82 = $81&1;
         if ($82) {
          $143 = ___cxa_find_matching_catch_2()|0;
          $144 = tempRet0;
          $$3 = $144;$$341 = $143;
         } else {
          ;HEAP32[$11>>2]=HEAP32[$12>>2]|0;HEAP32[$11+4>>2]=HEAP32[$12+4>>2]|0;HEAP32[$11+8>>2]=HEAP32[$12+8>>2]|0;
          $$0$i$i$i50 = 0;
          while(1) {
           $exitcond$i$i$i51 = ($$0$i$i$i50|0)==(3);
           if ($exitcond$i$i$i51) {
            break;
           }
           $83 = (($12) + ($$0$i$i$i50<<2)|0);
           HEAP32[$83>>2] = 0;
           $84 = (($$0$i$i$i50) + 1)|0;
           $$0$i$i$i50 = $84;
          }
          __THREW__ = 0;
          $85 = (invoke_iii(95,($11|0),(7563|0))|0);
          $86 = __THREW__; __THREW__ = 0;
          $87 = $86&1;
          if ($87) {
           $145 = ___cxa_find_matching_catch_2()|0;
           $146 = tempRet0;
           $$2 = $146;$$240 = $145;
          } else {
           ;HEAP32[$10>>2]=HEAP32[$11>>2]|0;HEAP32[$10+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$10+8>>2]=HEAP32[$11+8>>2]|0;
           $$0$i$i$i53 = 0;
           while(1) {
            $exitcond$i$i$i54 = ($$0$i$i$i53|0)==(3);
            if ($exitcond$i$i$i54) {
             break;
            }
            $88 = (($11) + ($$0$i$i$i53<<2)|0);
            HEAP32[$88>>2] = 0;
            $89 = (($$0$i$i$i53) + 1)|0;
            $$0$i$i$i53 = $89;
           }
           $90 = ((($6)) + 11|0);
           $91 = HEAP8[$90>>0]|0;
           $92 = ($91<<24>>24)<(0);
           $93 = HEAP32[$6>>2]|0;
           $94 = $92 ? $93 : $6;
           $95 = ((($6)) + 4|0);
           $96 = HEAP32[$95>>2]|0;
           $97 = $91&255;
           $98 = $92 ? $96 : $97;
           __THREW__ = 0;
           $99 = (invoke_iiii(88,($10|0),($94|0),($98|0))|0);
           $100 = __THREW__; __THREW__ = 0;
           $101 = $100&1;
           if ($101) {
            $147 = ___cxa_find_matching_catch_2()|0;
            $148 = tempRet0;
            $$137 = $148;$$139 = $147;
           } else {
            ;HEAP32[$9>>2]=HEAP32[$10>>2]|0;HEAP32[$9+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$9+8>>2]=HEAP32[$10+8>>2]|0;
            $$0$i$i$i57 = 0;
            while(1) {
             $exitcond$i$i$i58 = ($$0$i$i$i57|0)==(3);
             if ($exitcond$i$i$i58) {
              break;
             }
             $102 = (($10) + ($$0$i$i$i57<<2)|0);
             HEAP32[$102>>2] = 0;
             $103 = (($$0$i$i$i57) + 1)|0;
             $$0$i$i$i57 = $103;
            }
            __THREW__ = 0;
            $104 = (invoke_iii(95,($9|0),(7566|0))|0);
            $105 = __THREW__; __THREW__ = 0;
            $106 = $105&1;
            do {
             if ($106) {
              $149 = ___cxa_find_matching_catch_2()|0;
              $150 = tempRet0;
              $$036 = $150;$$038 = $149;
             } else {
              ;HEAP32[$8>>2]=HEAP32[$9>>2]|0;HEAP32[$8+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$9+8>>2]|0;
              $$0$i$i$i61 = 0;
              while(1) {
               $exitcond$i$i$i62 = ($$0$i$i$i61|0)==(3);
               if ($exitcond$i$i$i62) {
                break;
               }
               $107 = (($9) + ($$0$i$i$i61<<2)|0);
               HEAP32[$107>>2] = 0;
               $108 = (($$0$i$i$i61) + 1)|0;
               $$0$i$i$i61 = $108;
              }
              $109 = ((($8)) + 11|0);
              $110 = HEAP8[$109>>0]|0;
              $111 = ($110<<24>>24)<(0);
              $112 = HEAP32[$8>>2]|0;
              $113 = $111 ? $112 : $8;
              $114 = ((($8)) + 4|0);
              $115 = HEAP32[$114>>2]|0;
              $116 = $110&255;
              $117 = $111 ? $115 : $116;
              __THREW__ = 0;
              (invoke_iiii(88,($35|0),($113|0),($117|0))|0);
              $118 = __THREW__; __THREW__ = 0;
              $119 = $118&1;
              if ($119) {
               $151 = ___cxa_find_matching_catch_2()|0;
               $152 = tempRet0;
               __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
               $$036 = $152;$$038 = $151;
               break;
              }
              __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
              __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
              __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($10);
              __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($11);
              __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($12);
              __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($13);
              __THREW__ = 0;
              $120 = (invoke_ii(99,(7604|0))|0);
              $121 = __THREW__; __THREW__ = 0;
              $122 = $121&1;
              if ($122) {
               $134 = ___cxa_find_matching_catch_3(0|0)|0;
               $135 = tempRet0;
               ___clang_call_terminate($134);
               // unreachable;
              }
              $123 = HEAP8[$44>>0]|0;
              $124 = ($123<<24>>24)<(0);
              $125 = HEAP32[$47>>2]|0;
              $126 = $123&255;
              $127 = $124 ? $125 : $126;
              $128 = ($120|0)==($127|0);
              do {
               if ($128) {
                __THREW__ = 0;
                $129 = (invoke_iiii(100,($2|0),(7604|0),($120|0))|0);
                $130 = __THREW__; __THREW__ = 0;
                $131 = $130&1;
                if ($131) {
                 $132 = ___cxa_find_matching_catch_3(0|0)|0;
                 $133 = tempRet0;
                 ___clang_call_terminate($132);
                 // unreachable;
                }
                $136 = ($129|0)==(0);
                if (!($136)) {
                 break;
                }
                __THREW__ = 0;
                invoke_vii(93,($35|0),41);
                $137 = __THREW__; __THREW__ = 0;
                $138 = $137&1;
                if ($138) {
                 label = 19;
                 break L30;
                }
               }
              } while(0);
              __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
              __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
              $$1 = $16;
              break L1;
             }
            } while(0);
            __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
            $$137 = $$036;$$139 = $$038;
           }
           __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($10);
           $$2 = $$137;$$240 = $$139;
          }
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($11);
          $$3 = $$2;$$341 = $$240;
         }
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($12);
         $$4 = $$3;$$442 = $$341;
        }
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($13);
        $$5 = $$4;$$543 = $$442;
       }
       $$6 = $$5;$$644 = $$543;
      }
     } while(0);
     if ((label|0) == 19) {
      $64 = ___cxa_find_matching_catch_2()|0;
      $65 = tempRet0;
      $$6 = $65;$$644 = $64;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
     $$7 = $$6;$$745 = $$644;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
    ___resumeException($$745|0);
    // unreachable;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$1|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_123parse_prefix_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i20 = 0, $$016 = 0, $$018 = 0, $$1 = 0, $$117 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i$i = 0, $exitcond$i$i$i21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $4 = sp + 49|0;
 $5 = sp + 48|0;
 $6 = sp + 36|0;
 $7 = sp + 24|0;
 $8 = sp + 12|0;
 $9 = sp;
 $10 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($0,$1,$3)|0);
 $11 = ($10|0)==($0|0);
 L1: do {
  if ($11) {
   $$018 = $0;
  } else {
   $12 = HEAP32[$3>>2]|0;
   $13 = ((($3)) + 4|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($12|0)==($14|0);
   if ($15) {
    $$018 = $0;
   } else {
    __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EERKSB_PKS8_($8,$2,7568);
    $16 = HEAP32[$13>>2]|0;
    $17 = ((($16)) + -24|0);
    __THREW__ = 0;
    invoke_vii(96,($9|0),($17|0));
    $18 = __THREW__; __THREW__ = 0;
    $19 = $18&1;
    if ($19) {
     $52 = ___cxa_find_matching_catch_2()|0;
     $53 = tempRet0;
     $$1 = $53;$$117 = $52;
    } else {
     $20 = ((($9)) + 11|0);
     $21 = HEAP8[$20>>0]|0;
     $22 = ($21<<24>>24)<(0);
     $23 = HEAP32[$9>>2]|0;
     $24 = $22 ? $23 : $9;
     $25 = ((($9)) + 4|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = $21&255;
     $28 = $22 ? $26 : $27;
     __THREW__ = 0;
     $29 = (invoke_iiii(88,($8|0),($24|0),($28|0))|0);
     $30 = __THREW__; __THREW__ = 0;
     $31 = $30&1;
     do {
      if ($31) {
       $54 = ___cxa_find_matching_catch_2()|0;
       $55 = tempRet0;
       $$0 = $55;$$016 = $54;
      } else {
       ;HEAP32[$7>>2]=HEAP32[$8>>2]|0;HEAP32[$7+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$8+8>>2]|0;
       $$0$i$i$i = 0;
       while(1) {
        $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
        if ($exitcond$i$i$i) {
         break;
        }
        $32 = (($8) + ($$0$i$i$i<<2)|0);
        HEAP32[$32>>2] = 0;
        $33 = (($$0$i$i$i) + 1)|0;
        $$0$i$i$i = $33;
       }
       __THREW__ = 0;
       $34 = (invoke_iii(95,($7|0),(7566|0))|0);
       $35 = __THREW__; __THREW__ = 0;
       $36 = $35&1;
       if ($36) {
        $56 = ___cxa_find_matching_catch_2()|0;
        $57 = tempRet0;
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
        $$0 = $57;$$016 = $56;
        break;
       }
       ;HEAP32[$6>>2]=HEAP32[$7>>2]|0;HEAP32[$6+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$7+8>>2]|0;
       $$0$i$i$i20 = 0;
       while(1) {
        $exitcond$i$i$i21 = ($$0$i$i$i20|0)==(3);
        if ($exitcond$i$i$i21) {
         break;
        }
        $37 = (($7) + ($$0$i$i$i20<<2)|0);
        HEAP32[$37>>2] = 0;
        $38 = (($$0$i$i$i20) + 1)|0;
        $$0$i$i$i20 = $38;
       }
       $39 = HEAP32[$13>>2]|0;
       $40 = ((($39)) + -24|0);
       $41 = ((($40)) + 11|0);
       $42 = HEAP8[$41>>0]|0;
       $43 = ($42<<24>>24)<(0);
       if ($43) {
        $44 = HEAP32[$40>>2]|0;
        HEAP8[$4>>0] = 0;
        __ZNSt3__211char_traitsIcE6assignERcRKc($44,$4);
        $45 = ((($39)) + -20|0);
        HEAP32[$45>>2] = 0;
       } else {
        HEAP8[$5>>0] = 0;
        __ZNSt3__211char_traitsIcE6assignERcRKc($40,$5);
        HEAP8[$41>>0] = 0;
       }
       __THREW__ = 0;
       invoke_vi(92,($40|0));
       $46 = __THREW__; __THREW__ = 0;
       $47 = $46&1;
       if ($47) {
        $48 = ___cxa_find_matching_catch_3(0|0)|0;
        $49 = tempRet0;
        ___clang_call_terminate($48);
        // unreachable;
       }
       ;HEAP32[$40>>2]=HEAP32[$6>>2]|0;HEAP32[$40+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$40+8>>2]=HEAP32[$6+8>>2]|0;
       $$0$i$i$i$i = 0;
       while(1) {
        $exitcond$i$i$i$i = ($$0$i$i$i$i|0)==(3);
        if ($exitcond$i$i$i$i) {
         break;
        }
        $50 = (($6) + ($$0$i$i$i$i<<2)|0);
        HEAP32[$50>>2] = 0;
        $51 = (($$0$i$i$i$i) + 1)|0;
        $$0$i$i$i$i = $51;
       }
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
       $$018 = $10;
       break L1;
      }
     } while(0);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
     $$1 = $$0;$$117 = $$016;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
    ___resumeException($$117|0);
    // unreachable;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$018|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_118parse_alignof_typeINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i25 = 0, $$020 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i$i = 0, $exitcond$i$i$i26 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = sp + 37|0;
 $4 = sp + 36|0;
 $5 = sp + 24|0;
 $6 = sp + 12|0;
 $7 = sp;
 $8 = $1;
 $9 = $0;
 $10 = (($8) - ($9))|0;
 $11 = ($10|0)>(2);
 L1: do {
  if ($11) {
   $12 = HEAP8[$0>>0]|0;
   $13 = ($12<<24>>24)==(97);
   if ($13) {
    $14 = ((($0)) + 1|0);
    $15 = HEAP8[$14>>0]|0;
    $16 = ($15<<24>>24)==(116);
    if ($16) {
     $17 = ((($0)) + 2|0);
     $18 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($17,$1,$2)|0);
     $19 = ($18|0)==($17|0);
     if ($19) {
      $$1 = $0;
     } else {
      $20 = HEAP32[$2>>2]|0;
      $21 = ((($2)) + 4|0);
      $22 = HEAP32[$21>>2]|0;
      $23 = ($20|0)==($22|0);
      if ($23) {
       $$1 = $0;
      } else {
       $24 = ((($22)) + -24|0);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($7,$24);
       __THREW__ = 0;
       $25 = (invoke_iiii(97,($7|0),0,(8747|0))|0);
       $26 = __THREW__; __THREW__ = 0;
       $27 = $26&1;
       do {
        if ($27) {
         $48 = ___cxa_find_matching_catch_2()|0;
         $49 = tempRet0;
         $$0 = $49;$$020 = $48;
        } else {
         ;HEAP32[$6>>2]=HEAP32[$7>>2]|0;HEAP32[$6+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$7+8>>2]|0;
         $$0$i$i$i = 0;
         while(1) {
          $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
          if ($exitcond$i$i$i) {
           break;
          }
          $28 = (($7) + ($$0$i$i$i<<2)|0);
          HEAP32[$28>>2] = 0;
          $29 = (($$0$i$i$i) + 1)|0;
          $$0$i$i$i = $29;
         }
         __THREW__ = 0;
         $30 = (invoke_iii(95,($6|0),(7566|0))|0);
         $31 = __THREW__; __THREW__ = 0;
         $32 = $31&1;
         if ($32) {
          $50 = ___cxa_find_matching_catch_2()|0;
          $51 = tempRet0;
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
          $$0 = $51;$$020 = $50;
          break;
         }
         ;HEAP32[$5>>2]=HEAP32[$6>>2]|0;HEAP32[$5+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$6+8>>2]|0;
         $$0$i$i$i25 = 0;
         while(1) {
          $exitcond$i$i$i26 = ($$0$i$i$i25|0)==(3);
          if ($exitcond$i$i$i26) {
           break;
          }
          $33 = (($6) + ($$0$i$i$i25<<2)|0);
          HEAP32[$33>>2] = 0;
          $34 = (($$0$i$i$i25) + 1)|0;
          $$0$i$i$i25 = $34;
         }
         $35 = HEAP32[$21>>2]|0;
         $36 = ((($35)) + -24|0);
         $37 = ((($36)) + 11|0);
         $38 = HEAP8[$37>>0]|0;
         $39 = ($38<<24>>24)<(0);
         if ($39) {
          $40 = HEAP32[$36>>2]|0;
          HEAP8[$3>>0] = 0;
          __ZNSt3__211char_traitsIcE6assignERcRKc($40,$3);
          $41 = ((($35)) + -20|0);
          HEAP32[$41>>2] = 0;
         } else {
          HEAP8[$4>>0] = 0;
          __ZNSt3__211char_traitsIcE6assignERcRKc($36,$4);
          HEAP8[$37>>0] = 0;
         }
         __THREW__ = 0;
         invoke_vi(92,($36|0));
         $42 = __THREW__; __THREW__ = 0;
         $43 = $42&1;
         if ($43) {
          $44 = ___cxa_find_matching_catch_3(0|0)|0;
          $45 = tempRet0;
          ___clang_call_terminate($44);
          // unreachable;
         }
         ;HEAP32[$36>>2]=HEAP32[$5>>2]|0;HEAP32[$36+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$36+8>>2]=HEAP32[$5+8>>2]|0;
         $$0$i$i$i$i = 0;
         while(1) {
          $exitcond$i$i$i$i = ($$0$i$i$i$i|0)==(3);
          if ($exitcond$i$i$i$i) {
           break;
          }
          $46 = (($5) + ($$0$i$i$i$i<<2)|0);
          HEAP32[$46>>2] = 0;
          $47 = (($$0$i$i$i$i) + 1)|0;
          $$0$i$i$i$i = $47;
         }
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
         $$1 = $18;
         break L1;
        }
       } while(0);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
       ___resumeException($$020|0);
       // unreachable;
      }
     }
    } else {
     $$1 = $0;
    }
   } else {
    $$1 = $0;
   }
  } else {
   $$1 = $0;
  }
 } while(0);
 STACKTOP = sp;return ($$1|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_118parse_alignof_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i25 = 0, $$020 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i$i = 0, $exitcond$i$i$i26 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = sp + 37|0;
 $4 = sp + 36|0;
 $5 = sp + 24|0;
 $6 = sp + 12|0;
 $7 = sp;
 $8 = $1;
 $9 = $0;
 $10 = (($8) - ($9))|0;
 $11 = ($10|0)>(2);
 L1: do {
  if ($11) {
   $12 = HEAP8[$0>>0]|0;
   $13 = ($12<<24>>24)==(97);
   if ($13) {
    $14 = ((($0)) + 1|0);
    $15 = HEAP8[$14>>0]|0;
    $16 = ($15<<24>>24)==(122);
    if ($16) {
     $17 = ((($0)) + 2|0);
     $18 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($17,$1,$2)|0);
     $19 = ($18|0)==($17|0);
     if ($19) {
      $$1 = $0;
     } else {
      $20 = HEAP32[$2>>2]|0;
      $21 = ((($2)) + 4|0);
      $22 = HEAP32[$21>>2]|0;
      $23 = ($20|0)==($22|0);
      if ($23) {
       $$1 = $0;
      } else {
       $24 = ((($22)) + -24|0);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($7,$24);
       __THREW__ = 0;
       $25 = (invoke_iiii(97,($7|0),0,(8747|0))|0);
       $26 = __THREW__; __THREW__ = 0;
       $27 = $26&1;
       do {
        if ($27) {
         $48 = ___cxa_find_matching_catch_2()|0;
         $49 = tempRet0;
         $$0 = $49;$$020 = $48;
        } else {
         ;HEAP32[$6>>2]=HEAP32[$7>>2]|0;HEAP32[$6+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$7+8>>2]|0;
         $$0$i$i$i = 0;
         while(1) {
          $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
          if ($exitcond$i$i$i) {
           break;
          }
          $28 = (($7) + ($$0$i$i$i<<2)|0);
          HEAP32[$28>>2] = 0;
          $29 = (($$0$i$i$i) + 1)|0;
          $$0$i$i$i = $29;
         }
         __THREW__ = 0;
         $30 = (invoke_iii(95,($6|0),(7566|0))|0);
         $31 = __THREW__; __THREW__ = 0;
         $32 = $31&1;
         if ($32) {
          $50 = ___cxa_find_matching_catch_2()|0;
          $51 = tempRet0;
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
          $$0 = $51;$$020 = $50;
          break;
         }
         ;HEAP32[$5>>2]=HEAP32[$6>>2]|0;HEAP32[$5+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$6+8>>2]|0;
         $$0$i$i$i25 = 0;
         while(1) {
          $exitcond$i$i$i26 = ($$0$i$i$i25|0)==(3);
          if ($exitcond$i$i$i26) {
           break;
          }
          $33 = (($6) + ($$0$i$i$i25<<2)|0);
          HEAP32[$33>>2] = 0;
          $34 = (($$0$i$i$i25) + 1)|0;
          $$0$i$i$i25 = $34;
         }
         $35 = HEAP32[$21>>2]|0;
         $36 = ((($35)) + -24|0);
         $37 = ((($36)) + 11|0);
         $38 = HEAP8[$37>>0]|0;
         $39 = ($38<<24>>24)<(0);
         if ($39) {
          $40 = HEAP32[$36>>2]|0;
          HEAP8[$3>>0] = 0;
          __ZNSt3__211char_traitsIcE6assignERcRKc($40,$3);
          $41 = ((($35)) + -20|0);
          HEAP32[$41>>2] = 0;
         } else {
          HEAP8[$4>>0] = 0;
          __ZNSt3__211char_traitsIcE6assignERcRKc($36,$4);
          HEAP8[$37>>0] = 0;
         }
         __THREW__ = 0;
         invoke_vi(92,($36|0));
         $42 = __THREW__; __THREW__ = 0;
         $43 = $42&1;
         if ($43) {
          $44 = ___cxa_find_matching_catch_3(0|0)|0;
          $45 = tempRet0;
          ___clang_call_terminate($44);
          // unreachable;
         }
         ;HEAP32[$36>>2]=HEAP32[$5>>2]|0;HEAP32[$36+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$36+8>>2]=HEAP32[$5+8>>2]|0;
         $$0$i$i$i$i = 0;
         while(1) {
          $exitcond$i$i$i$i = ($$0$i$i$i$i|0)==(3);
          if ($exitcond$i$i$i$i) {
           break;
          }
          $46 = (($5) + ($$0$i$i$i$i<<2)|0);
          HEAP32[$46>>2] = 0;
          $47 = (($$0$i$i$i$i) + 1)|0;
          $$0$i$i$i$i = $47;
         }
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
         $$1 = $18;
         break L1;
        }
       } while(0);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
       ___resumeException($$020|0);
       // unreachable;
      }
     }
    } else {
     $$1 = $0;
    }
   } else {
    $$1 = $0;
   }
  } else {
   $$1 = $0;
  }
 } while(0);
 STACKTOP = sp;return ($$1|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_121parse_const_cast_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i$i = 0, $$0$i$i$i47 = 0, $$0$i$i$i50 = 0, $$0$i$i$i53 = 0, $$1 = 0, $$132 = 0, $$2 = 0, $$233 = 0, $$3 = 0, $$334 = 0, $$341 = 0, $$4 = 0, $$435 = 0, $$pre$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i48 = 0, $exitcond$i$i$i51 = 0, $exitcond$i$i$i54 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $3 = sp + 88|0;
 $4 = sp + 64|0;
 $5 = sp + 48|0;
 $6 = sp + 36|0;
 $7 = sp + 24|0;
 $8 = sp + 12|0;
 $9 = sp;
 $10 = $1;
 $11 = $0;
 $12 = (($10) - ($11))|0;
 $13 = ($12|0)>(2);
 L1: do {
  if ($13) {
   $14 = HEAP8[$0>>0]|0;
   $15 = ($14<<24>>24)==(99);
   if ($15) {
    $16 = ((($0)) + 1|0);
    $17 = HEAP8[$16>>0]|0;
    $18 = ($17<<24>>24)==(99);
    if ($18) {
     $19 = ((($0)) + 2|0);
     $20 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($19,$1,$2)|0);
     $21 = ($20|0)==($19|0);
     if ($21) {
      $$341 = $0;
     } else {
      $22 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($20,$1,$2)|0);
      $23 = ($22|0)==($20|0);
      if ($23) {
       $$341 = $0;
      } else {
       $24 = ((($2)) + 4|0);
       $25 = HEAP32[$24>>2]|0;
       $26 = HEAP32[$2>>2]|0;
       $27 = (($25) - ($26))|0;
       $28 = (($27|0) / 24)&-1;
       $29 = ($28>>>0)<(2);
       if ($29) {
        $$341 = $0;
       } else {
        $30 = $25;
        $31 = ((($30)) + -24|0);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3,$31);
        $32 = HEAP32[$24>>2]|0;
        $33 = ((($32)) + -24|0);
        $35 = $32;
        while(1) {
         $34 = ($35|0)==($33|0);
         if ($34) {
          break;
         }
         $36 = ((($35)) + -24|0);
         HEAP32[$24>>2] = $36;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($36);
         $$pre$i = HEAP32[$24>>2]|0;
         $35 = $$pre$i;
        }
        $37 = ((($32)) + -48|0);
        __THREW__ = 0;
        invoke_vii(96,($9|0),($37|0));
        $38 = __THREW__; __THREW__ = 0;
        $39 = $38&1;
        if ($39) {
         $71 = ___cxa_find_matching_catch_2()|0;
         $72 = tempRet0;
         $$4 = $72;$$435 = $71;
        } else {
         __THREW__ = 0;
         $40 = (invoke_iiii(97,($9|0),0,(8735|0))|0);
         $41 = __THREW__; __THREW__ = 0;
         $42 = $41&1;
         if ($42) {
          $73 = ___cxa_find_matching_catch_2()|0;
          $74 = tempRet0;
          $$3 = $74;$$334 = $73;
         } else {
          ;HEAP32[$8>>2]=HEAP32[$9>>2]|0;HEAP32[$8+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$9+8>>2]|0;
          $$0$i$i$i = 0;
          while(1) {
           $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
           if ($exitcond$i$i$i) {
            break;
           }
           $43 = (($9) + ($$0$i$i$i<<2)|0);
           HEAP32[$43>>2] = 0;
           $44 = (($$0$i$i$i) + 1)|0;
           $$0$i$i$i = $44;
          }
          __THREW__ = 0;
          $45 = (invoke_iii(95,($8|0),(7815|0))|0);
          $46 = __THREW__; __THREW__ = 0;
          $47 = $46&1;
          if ($47) {
           $75 = ___cxa_find_matching_catch_2()|0;
           $76 = tempRet0;
           $$2 = $76;$$233 = $75;
          } else {
           ;HEAP32[$7>>2]=HEAP32[$8>>2]|0;HEAP32[$7+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$8+8>>2]|0;
           $$0$i$i$i47 = 0;
           while(1) {
            $exitcond$i$i$i48 = ($$0$i$i$i47|0)==(3);
            if ($exitcond$i$i$i48) {
             break;
            }
            $48 = (($8) + ($$0$i$i$i47<<2)|0);
            HEAP32[$48>>2] = 0;
            $49 = (($$0$i$i$i47) + 1)|0;
            $$0$i$i$i47 = $49;
           }
           $50 = ((($3)) + 11|0);
           $51 = HEAP8[$50>>0]|0;
           $52 = ($51<<24>>24)<(0);
           $53 = HEAP32[$3>>2]|0;
           $54 = $52 ? $53 : $3;
           $55 = ((($3)) + 4|0);
           $56 = HEAP32[$55>>2]|0;
           $57 = $51&255;
           $58 = $52 ? $56 : $57;
           __THREW__ = 0;
           $59 = (invoke_iiii(88,($7|0),($54|0),($58|0))|0);
           $60 = __THREW__; __THREW__ = 0;
           $61 = $60&1;
           do {
            if ($61) {
             $77 = ___cxa_find_matching_catch_2()|0;
             $78 = tempRet0;
             $$1 = $78;$$132 = $77;
            } else {
             ;HEAP32[$6>>2]=HEAP32[$7>>2]|0;HEAP32[$6+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$7+8>>2]|0;
             $$0$i$i$i50 = 0;
             while(1) {
              $exitcond$i$i$i51 = ($$0$i$i$i50|0)==(3);
              if ($exitcond$i$i$i51) {
               break;
              }
              $62 = (($7) + ($$0$i$i$i50<<2)|0);
              HEAP32[$62>>2] = 0;
              $63 = (($$0$i$i$i50) + 1)|0;
              $$0$i$i$i50 = $63;
             }
             __THREW__ = 0;
             $64 = (invoke_iii(95,($6|0),(7566|0))|0);
             $65 = __THREW__; __THREW__ = 0;
             $66 = $65&1;
             if ($66) {
              $79 = ___cxa_find_matching_catch_2()|0;
              $80 = tempRet0;
              __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
              $$1 = $80;$$132 = $79;
              break;
             }
             ;HEAP32[$5>>2]=HEAP32[$6>>2]|0;HEAP32[$5+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$6+8>>2]|0;
             $$0$i$i$i53 = 0;
             while(1) {
              $exitcond$i$i$i54 = ($$0$i$i$i53|0)==(3);
              if ($exitcond$i$i$i54) {
               break;
              }
              $67 = (($6) + ($$0$i$i$i53<<2)|0);
              HEAP32[$67>>2] = 0;
              $68 = (($$0$i$i$i53) + 1)|0;
              $$0$i$i$i53 = $68;
             }
             __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($4,$5);
             $69 = HEAP32[$24>>2]|0;
             $70 = ((($69)) + -24|0);
             __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($70,$4);
             __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
             __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
             __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
             __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
             __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
             __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
             __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
             $$341 = $22;
             break L1;
            }
           } while(0);
           __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
           $$2 = $$1;$$233 = $$132;
          }
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
          $$3 = $$2;$$334 = $$233;
         }
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
         $$4 = $$3;$$435 = $$334;
        }
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
        ___resumeException($$435|0);
        // unreachable;
       }
      }
     }
    } else {
     $$341 = $0;
    }
   } else {
    $$341 = $0;
   }
  } else {
   $$341 = $0;
  }
 } while(0);
 STACKTOP = sp;return ($$341|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_115parse_call_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$063 = 0, $$6 = 0, $$pre$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, $exitcond$i$i = 0, $exitcond$i$i$i$i = 0, $or$cond = 0, $or$cond77 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 25|0;
 $4 = sp + 24|0;
 $5 = sp + 12|0;
 $6 = sp;
 $7 = $1;
 $8 = $0;
 $9 = (($7) - ($8))|0;
 $10 = ($9|0)>(3);
 L1: do {
  if ($10) {
   $11 = HEAP8[$0>>0]|0;
   $12 = ($11<<24>>24)==(99);
   if ($12) {
    $13 = ((($0)) + 1|0);
    $14 = HEAP8[$13>>0]|0;
    $15 = ($14<<24>>24)==(108);
    if ($15) {
     $16 = ((($0)) + 2|0);
     $17 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($16,$1,$2)|0);
     $18 = ($17|0)==($16|0);
     $19 = ($17|0)==($1|0);
     $or$cond77 = $18 | $19;
     if ($or$cond77) {
      $$6 = $0;
     } else {
      $20 = HEAP32[$2>>2]|0;
      $21 = ((($2)) + 4|0);
      $22 = HEAP32[$21>>2]|0;
      $23 = ($20|0)==($22|0);
      if ($23) {
       $$6 = $0;
      } else {
       $24 = ((($22)) + -12|0);
       $25 = ((($22)) + -24|0);
       $26 = ((($24)) + 11|0);
       $27 = HEAP8[$26>>0]|0;
       $28 = ($27<<24>>24)<(0);
       $29 = HEAP32[$24>>2]|0;
       $30 = $28 ? $29 : $24;
       $31 = ((($22)) + -8|0);
       $32 = HEAP32[$31>>2]|0;
       $33 = $27&255;
       $34 = $28 ? $32 : $33;
       (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($25,$30,$34)|0);
       ;HEAP32[$5>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;
       $$0$i$i = 0;
       while(1) {
        $exitcond$i$i = ($$0$i$i|0)==(3);
        if ($exitcond$i$i) {
         break;
        }
        $35 = (($5) + ($$0$i$i<<2)|0);
        HEAP32[$35>>2] = 0;
        $36 = (($$0$i$i) + 1)|0;
        $$0$i$i = $36;
       }
       $37 = HEAP32[$21>>2]|0;
       $38 = ((($37)) + -12|0);
       $39 = ((($38)) + 11|0);
       $40 = HEAP8[$39>>0]|0;
       $41 = ($40<<24>>24)<(0);
       if ($41) {
        $42 = HEAP32[$38>>2]|0;
        HEAP8[$3>>0] = 0;
        __ZNSt3__211char_traitsIcE6assignERcRKc($42,$3);
        $43 = ((($37)) + -8|0);
        HEAP32[$43>>2] = 0;
       } else {
        HEAP8[$4>>0] = 0;
        __ZNSt3__211char_traitsIcE6assignERcRKc($38,$4);
        HEAP8[$39>>0] = 0;
       }
       __THREW__ = 0;
       invoke_vi(92,($38|0));
       $44 = __THREW__; __THREW__ = 0;
       $45 = $44&1;
       if ($45) {
        $46 = ___cxa_find_matching_catch_3(0|0)|0;
        $47 = tempRet0;
        ___clang_call_terminate($46);
        // unreachable;
       }
       ;HEAP32[$38>>2]=HEAP32[$5>>2]|0;HEAP32[$38+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$38+8>>2]=HEAP32[$5+8>>2]|0;
       $$0$i$i$i$i = 0;
       while(1) {
        $exitcond$i$i$i$i = ($$0$i$i$i$i|0)==(3);
        if ($exitcond$i$i$i$i) {
         break;
        }
        $48 = (($5) + ($$0$i$i$i$i<<2)|0);
        HEAP32[$48>>2] = 0;
        $49 = (($$0$i$i$i$i) + 1)|0;
        $$0$i$i$i$i = $49;
       }
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
       $50 = HEAP32[$21>>2]|0;
       $51 = ((($50)) + -24|0);
       (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($51,7568)|0);
       $52 = ((($6)) + 11|0);
       $53 = ((($6)) + 4|0);
       $$063 = $17;
       while(1) {
        $54 = HEAP8[$$063>>0]|0;
        $55 = ($54<<24>>24)==(69);
        if ($55) {
         label = 30;
         break;
        }
        $56 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($$063,$1,$2)|0);
        $57 = ($56|0)==($$063|0);
        $58 = ($56|0)==($1|0);
        $or$cond = $57 | $58;
        if ($or$cond) {
         $$6 = $0;
         break L1;
        }
        $59 = HEAP32[$2>>2]|0;
        $60 = HEAP32[$21>>2]|0;
        $61 = ($59|0)==($60|0);
        if ($61) {
         $$6 = $0;
         break L1;
        }
        $62 = ((($60)) + -24|0);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($6,$62);
        $63 = HEAP32[$21>>2]|0;
        $64 = ((($63)) + -24|0);
        $66 = $63;
        while(1) {
         $65 = ($66|0)==($64|0);
         if ($65) {
          break;
         }
         $67 = ((($66)) + -24|0);
         HEAP32[$21>>2] = $67;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($67);
         $$pre$i = HEAP32[$21>>2]|0;
         $66 = $$pre$i;
        }
        $68 = HEAP8[$52>>0]|0;
        $69 = ($68<<24>>24)<(0);
        $70 = HEAP32[$53>>2]|0;
        $71 = $68&255;
        $72 = $69 ? $70 : $71;
        $73 = ($72|0)==(0);
        if (!($73)) {
         $74 = HEAP32[$2>>2]|0;
         $75 = ($74|0)==($64|0);
         if ($75) {
          label = 29;
          break;
         }
         $78 = ((($63)) + -48|0);
         $79 = HEAP32[$6>>2]|0;
         $80 = $69 ? $79 : $6;
         __THREW__ = 0;
         (invoke_iiii(88,($78|0),($80|0),($72|0))|0);
         $81 = __THREW__; __THREW__ = 0;
         $82 = $81&1;
         if ($82) {
          label = 26;
          break;
         }
        }
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
        $$063 = $56;
       }
       if ((label|0) == 26) {
        $76 = ___cxa_find_matching_catch_2()|0;
        $77 = tempRet0;
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
        ___resumeException($76|0);
        // unreachable;
       }
       else if ((label|0) == 29) {
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
        $$6 = $0;
        break;
       }
       else if ((label|0) == 30) {
        $83 = HEAP32[$2>>2]|0;
        $84 = HEAP32[$21>>2]|0;
        $85 = ($83|0)==($84|0);
        if ($85) {
         $$6 = $0;
         break;
        }
        $86 = ((($$063)) + 1|0);
        $87 = ((($84)) + -24|0);
        (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($87,7566)|0);
        $$6 = $86;
        break;
       }
      }
     }
    } else {
     $$6 = $0;
    }
   } else {
    $$6 = $0;
   }
  } else {
   $$6 = $0;
  }
 } while(0);
 STACKTOP = sp;return ($$6|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_121parse_conversion_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i$i = 0, $$0$i$i$i107 = 0, $$0$i$i$i110 = 0, $$0$i$i$i113 = 0, $$1 = 0, $$10 = 0, $$1100 = 0, $$175 = 0, $$2 = 0, $$2101 = 0, $$276 = 0, $$3 = 0, $$377 = 0, $$4 = 0, $$4103 = 0, $$478 = 0, $$5104 = 0, $$pre = 0, $$pre$i = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i$i = 0;
 var $exitcond$i$i$i108 = 0, $exitcond$i$i$i111 = 0, $exitcond$i$i$i114 = 0, $or$cond = 0, $or$cond106 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $3 = sp + 88|0;
 $4 = sp + 64|0;
 $5 = sp + 48|0;
 $6 = sp + 36|0;
 $7 = sp + 24|0;
 $8 = sp + 12|0;
 $9 = sp;
 $10 = $1;
 $11 = $0;
 $12 = (($10) - ($11))|0;
 $13 = ($12|0)>(2);
 L1: do {
  if ($13) {
   $14 = HEAP8[$0>>0]|0;
   $15 = ($14<<24>>24)==(99);
   if ($15) {
    $16 = ((($0)) + 1|0);
    $17 = HEAP8[$16>>0]|0;
    $18 = ($17<<24>>24)==(118);
    if ($18) {
     $19 = ((($2)) + 63|0);
     $20 = HEAP8[$19>>0]|0;
     HEAP8[$19>>0] = 0;
     $21 = ((($0)) + 2|0);
     $22 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($21,$1,$2)|0);
     HEAP8[$19>>0] = $20;
     $23 = ($22|0)==($21|0);
     $24 = ($22|0)==($1|0);
     $or$cond = $23 | $24;
     if ($or$cond) {
      $$10 = $0;
     } else {
      $25 = HEAP8[$22>>0]|0;
      $26 = ($25<<24>>24)==(95);
      if ($26) {
       $29 = ((($22)) + 1|0);
       $30 = ($29|0)==($1|0);
       if ($30) {
        $$10 = $0;
        break;
       }
       $31 = HEAP8[$29>>0]|0;
       $32 = ($31<<24>>24)==(69);
       L9: do {
        if ($32) {
         $33 = ((($2)) + 4|0);
         $34 = HEAP32[$33>>2]|0;
         $35 = ((($2)) + 8|0);
         $36 = HEAP32[$35>>2]|0;
         $37 = ($34>>>0)<($36>>>0);
         if ($37) {
          ;HEAP32[$34>>2]=0|0;HEAP32[$34+4>>2]=0|0;HEAP32[$34+8>>2]=0|0;HEAP32[$34+12>>2]=0|0;HEAP32[$34+16>>2]=0|0;HEAP32[$34+20>>2]=0|0;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2Ev($34);
          $38 = HEAP32[$33>>2]|0;
          $39 = ((($38)) + 24|0);
          HEAP32[$33>>2] = $39;
          $$4103 = $29;
          break;
         } else {
          __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE24__emplace_back_slow_pathIJEEEvDpOT_($2);
          $$4103 = $29;
          break;
         }
        } else {
         $$1100 = $29;$41 = $31;
         while(1) {
          $40 = ($41<<24>>24)==(69);
          if ($40) {
           $$4103 = $$1100;
           break L9;
          }
          $42 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($$1100,$1,$2)|0);
          $43 = ($42|0)==($$1100|0);
          $44 = ($42|0)==($1|0);
          $or$cond106 = $43 | $44;
          if ($or$cond106) {
           $$10 = $0;
           break L1;
          }
          $$2101 = $or$cond106 ? $$1100 : $42;
          $$pre = HEAP8[$$2101>>0]|0;
          $$1100 = $42;$41 = $$pre;
         }
        }
       } while(0);
       $45 = ((($$4103)) + 1|0);
       $$5104 = $45;
      } else {
       $27 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($22,$1,$2)|0);
       $28 = ($27|0)==($22|0);
       if ($28) {
        $$10 = $0;
        break;
       } else {
        $$5104 = $27;
       }
      }
      $46 = ((($2)) + 4|0);
      $47 = HEAP32[$46>>2]|0;
      $48 = HEAP32[$2>>2]|0;
      $49 = (($47) - ($48))|0;
      $50 = (($49|0) / 24)&-1;
      $51 = ($50>>>0)<(2);
      if ($51) {
       $$10 = $0;
      } else {
       $52 = $47;
       $53 = ((($52)) + -24|0);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3,$53);
       $54 = HEAP32[$46>>2]|0;
       $55 = ((($54)) + -24|0);
       $57 = $54;
       while(1) {
        $56 = ($57|0)==($55|0);
        if ($56) {
         break;
        }
        $58 = ((($57)) + -24|0);
        HEAP32[$46>>2] = $58;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($58);
        $$pre$i = HEAP32[$46>>2]|0;
        $57 = $$pre$i;
       }
       $59 = ((($54)) + -48|0);
       __THREW__ = 0;
       invoke_vii(96,($9|0),($59|0));
       $60 = __THREW__; __THREW__ = 0;
       $61 = $60&1;
       if ($61) {
        $93 = ___cxa_find_matching_catch_2()|0;
        $94 = tempRet0;
        $$4 = $94;$$478 = $93;
       } else {
        __THREW__ = 0;
        $62 = (invoke_iiii(97,($9|0),0,(7568|0))|0);
        $63 = __THREW__; __THREW__ = 0;
        $64 = $63&1;
        if ($64) {
         $95 = ___cxa_find_matching_catch_2()|0;
         $96 = tempRet0;
         $$3 = $96;$$377 = $95;
        } else {
         ;HEAP32[$8>>2]=HEAP32[$9>>2]|0;HEAP32[$8+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$9+8>>2]|0;
         $$0$i$i$i = 0;
         while(1) {
          $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
          if ($exitcond$i$i$i) {
           break;
          }
          $65 = (($9) + ($$0$i$i$i<<2)|0);
          HEAP32[$65>>2] = 0;
          $66 = (($$0$i$i$i) + 1)|0;
          $$0$i$i$i = $66;
         }
         __THREW__ = 0;
         $67 = (invoke_iii(95,($8|0),(8732|0))|0);
         $68 = __THREW__; __THREW__ = 0;
         $69 = $68&1;
         if ($69) {
          $97 = ___cxa_find_matching_catch_2()|0;
          $98 = tempRet0;
          $$2 = $98;$$276 = $97;
         } else {
          ;HEAP32[$7>>2]=HEAP32[$8>>2]|0;HEAP32[$7+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$8+8>>2]|0;
          $$0$i$i$i107 = 0;
          while(1) {
           $exitcond$i$i$i108 = ($$0$i$i$i107|0)==(3);
           if ($exitcond$i$i$i108) {
            break;
           }
           $70 = (($8) + ($$0$i$i$i107<<2)|0);
           HEAP32[$70>>2] = 0;
           $71 = (($$0$i$i$i107) + 1)|0;
           $$0$i$i$i107 = $71;
          }
          $72 = ((($3)) + 11|0);
          $73 = HEAP8[$72>>0]|0;
          $74 = ($73<<24>>24)<(0);
          $75 = HEAP32[$3>>2]|0;
          $76 = $74 ? $75 : $3;
          $77 = ((($3)) + 4|0);
          $78 = HEAP32[$77>>2]|0;
          $79 = $73&255;
          $80 = $74 ? $78 : $79;
          __THREW__ = 0;
          $81 = (invoke_iiii(88,($7|0),($76|0),($80|0))|0);
          $82 = __THREW__; __THREW__ = 0;
          $83 = $82&1;
          do {
           if ($83) {
            $99 = ___cxa_find_matching_catch_2()|0;
            $100 = tempRet0;
            $$1 = $100;$$175 = $99;
           } else {
            ;HEAP32[$6>>2]=HEAP32[$7>>2]|0;HEAP32[$6+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$7+8>>2]|0;
            $$0$i$i$i110 = 0;
            while(1) {
             $exitcond$i$i$i111 = ($$0$i$i$i110|0)==(3);
             if ($exitcond$i$i$i111) {
              break;
             }
             $84 = (($7) + ($$0$i$i$i110<<2)|0);
             HEAP32[$84>>2] = 0;
             $85 = (($$0$i$i$i110) + 1)|0;
             $$0$i$i$i110 = $85;
            }
            __THREW__ = 0;
            $86 = (invoke_iii(95,($6|0),(7566|0))|0);
            $87 = __THREW__; __THREW__ = 0;
            $88 = $87&1;
            if ($88) {
             $101 = ___cxa_find_matching_catch_2()|0;
             $102 = tempRet0;
             __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
             $$1 = $102;$$175 = $101;
             break;
            }
            ;HEAP32[$5>>2]=HEAP32[$6>>2]|0;HEAP32[$5+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$6+8>>2]|0;
            $$0$i$i$i113 = 0;
            while(1) {
             $exitcond$i$i$i114 = ($$0$i$i$i113|0)==(3);
             if ($exitcond$i$i$i114) {
              break;
             }
             $89 = (($6) + ($$0$i$i$i113<<2)|0);
             HEAP32[$89>>2] = 0;
             $90 = (($$0$i$i$i113) + 1)|0;
             $$0$i$i$i113 = $90;
            }
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($4,$5);
            $91 = HEAP32[$46>>2]|0;
            $92 = ((($91)) + -24|0);
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($92,$4);
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
            __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
            __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
            __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
            __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
            __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
            __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
            $$10 = $$5104;
            break L1;
           }
          } while(0);
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
          $$2 = $$1;$$276 = $$175;
         }
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
         $$3 = $$2;$$377 = $$276;
        }
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
        $$4 = $$3;$$478 = $$377;
       }
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
       ___resumeException($$478|0);
       // unreachable;
      }
     }
    } else {
     $$10 = $0;
    }
   } else {
    $$10 = $0;
   }
  } else {
   $$10 = $0;
  }
 } while(0);
 STACKTOP = sp;return ($$10|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_123parse_dynamic_cast_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i$i = 0, $$0$i$i$i47 = 0, $$0$i$i$i50 = 0, $$0$i$i$i53 = 0, $$1 = 0, $$132 = 0, $$2 = 0, $$233 = 0, $$3 = 0, $$334 = 0, $$341 = 0, $$4 = 0, $$435 = 0, $$pre$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i48 = 0, $exitcond$i$i$i51 = 0, $exitcond$i$i$i54 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $3 = sp + 88|0;
 $4 = sp + 64|0;
 $5 = sp + 48|0;
 $6 = sp + 36|0;
 $7 = sp + 24|0;
 $8 = sp + 12|0;
 $9 = sp;
 $10 = $1;
 $11 = $0;
 $12 = (($10) - ($11))|0;
 $13 = ($12|0)>(2);
 L1: do {
  if ($13) {
   $14 = HEAP8[$0>>0]|0;
   $15 = ($14<<24>>24)==(100);
   if ($15) {
    $16 = ((($0)) + 1|0);
    $17 = HEAP8[$16>>0]|0;
    $18 = ($17<<24>>24)==(99);
    if ($18) {
     $19 = ((($0)) + 2|0);
     $20 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($19,$1,$2)|0);
     $21 = ($20|0)==($19|0);
     if ($21) {
      $$341 = $0;
     } else {
      $22 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($20,$1,$2)|0);
      $23 = ($22|0)==($20|0);
      if ($23) {
       $$341 = $0;
      } else {
       $24 = ((($2)) + 4|0);
       $25 = HEAP32[$24>>2]|0;
       $26 = HEAP32[$2>>2]|0;
       $27 = (($25) - ($26))|0;
       $28 = (($27|0) / 24)&-1;
       $29 = ($28>>>0)<(2);
       if ($29) {
        $$341 = $0;
       } else {
        $30 = $25;
        $31 = ((($30)) + -24|0);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3,$31);
        $32 = HEAP32[$24>>2]|0;
        $33 = ((($32)) + -24|0);
        $35 = $32;
        while(1) {
         $34 = ($35|0)==($33|0);
         if ($34) {
          break;
         }
         $36 = ((($35)) + -24|0);
         HEAP32[$24>>2] = $36;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($36);
         $$pre$i = HEAP32[$24>>2]|0;
         $35 = $$pre$i;
        }
        $37 = ((($32)) + -48|0);
        __THREW__ = 0;
        invoke_vii(96,($9|0),($37|0));
        $38 = __THREW__; __THREW__ = 0;
        $39 = $38&1;
        if ($39) {
         $71 = ___cxa_find_matching_catch_2()|0;
         $72 = tempRet0;
         $$4 = $72;$$435 = $71;
        } else {
         __THREW__ = 0;
         $40 = (invoke_iiii(97,($9|0),0,(8718|0))|0);
         $41 = __THREW__; __THREW__ = 0;
         $42 = $41&1;
         if ($42) {
          $73 = ___cxa_find_matching_catch_2()|0;
          $74 = tempRet0;
          $$3 = $74;$$334 = $73;
         } else {
          ;HEAP32[$8>>2]=HEAP32[$9>>2]|0;HEAP32[$8+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$9+8>>2]|0;
          $$0$i$i$i = 0;
          while(1) {
           $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
           if ($exitcond$i$i$i) {
            break;
           }
           $43 = (($9) + ($$0$i$i$i<<2)|0);
           HEAP32[$43>>2] = 0;
           $44 = (($$0$i$i$i) + 1)|0;
           $$0$i$i$i = $44;
          }
          __THREW__ = 0;
          $45 = (invoke_iii(95,($8|0),(7815|0))|0);
          $46 = __THREW__; __THREW__ = 0;
          $47 = $46&1;
          if ($47) {
           $75 = ___cxa_find_matching_catch_2()|0;
           $76 = tempRet0;
           $$2 = $76;$$233 = $75;
          } else {
           ;HEAP32[$7>>2]=HEAP32[$8>>2]|0;HEAP32[$7+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$8+8>>2]|0;
           $$0$i$i$i47 = 0;
           while(1) {
            $exitcond$i$i$i48 = ($$0$i$i$i47|0)==(3);
            if ($exitcond$i$i$i48) {
             break;
            }
            $48 = (($8) + ($$0$i$i$i47<<2)|0);
            HEAP32[$48>>2] = 0;
            $49 = (($$0$i$i$i47) + 1)|0;
            $$0$i$i$i47 = $49;
           }
           $50 = ((($3)) + 11|0);
           $51 = HEAP8[$50>>0]|0;
           $52 = ($51<<24>>24)<(0);
           $53 = HEAP32[$3>>2]|0;
           $54 = $52 ? $53 : $3;
           $55 = ((($3)) + 4|0);
           $56 = HEAP32[$55>>2]|0;
           $57 = $51&255;
           $58 = $52 ? $56 : $57;
           __THREW__ = 0;
           $59 = (invoke_iiii(88,($7|0),($54|0),($58|0))|0);
           $60 = __THREW__; __THREW__ = 0;
           $61 = $60&1;
           do {
            if ($61) {
             $77 = ___cxa_find_matching_catch_2()|0;
             $78 = tempRet0;
             $$1 = $78;$$132 = $77;
            } else {
             ;HEAP32[$6>>2]=HEAP32[$7>>2]|0;HEAP32[$6+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$7+8>>2]|0;
             $$0$i$i$i50 = 0;
             while(1) {
              $exitcond$i$i$i51 = ($$0$i$i$i50|0)==(3);
              if ($exitcond$i$i$i51) {
               break;
              }
              $62 = (($7) + ($$0$i$i$i50<<2)|0);
              HEAP32[$62>>2] = 0;
              $63 = (($$0$i$i$i50) + 1)|0;
              $$0$i$i$i50 = $63;
             }
             __THREW__ = 0;
             $64 = (invoke_iii(95,($6|0),(7566|0))|0);
             $65 = __THREW__; __THREW__ = 0;
             $66 = $65&1;
             if ($66) {
              $79 = ___cxa_find_matching_catch_2()|0;
              $80 = tempRet0;
              __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
              $$1 = $80;$$132 = $79;
              break;
             }
             ;HEAP32[$5>>2]=HEAP32[$6>>2]|0;HEAP32[$5+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$6+8>>2]|0;
             $$0$i$i$i53 = 0;
             while(1) {
              $exitcond$i$i$i54 = ($$0$i$i$i53|0)==(3);
              if ($exitcond$i$i$i54) {
               break;
              }
              $67 = (($6) + ($$0$i$i$i53<<2)|0);
              HEAP32[$67>>2] = 0;
              $68 = (($$0$i$i$i53) + 1)|0;
              $$0$i$i$i53 = $68;
             }
             __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($4,$5);
             $69 = HEAP32[$24>>2]|0;
             $70 = ((($69)) + -24|0);
             __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($70,$4);
             __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
             __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
             __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
             __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
             __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
             __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
             __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
             $$341 = $22;
             break L1;
            }
           } while(0);
           __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
           $$2 = $$1;$$233 = $$132;
          }
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
          $$3 = $$2;$$334 = $$233;
         }
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
         $$4 = $$3;$$435 = $$334;
        }
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
        ___resumeException($$435|0);
        // unreachable;
       }
      }
     }
    } else {
     $$341 = $0;
    }
   } else {
    $$341 = $0;
   }
  } else {
   $$341 = $0;
  }
 } while(0);
 STACKTOP = sp;return ($$341|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0 = 0, $$0$i$i$i = 0, $$0$i$i$i207 = 0, $$0$i$i$i221 = 0, $$0$i$i$i229 = 0, $$0$i$i$i239 = 0, $$0163 = 0, $$0182$off0 = 0, $$0183 = 0, $$1 = 0, $$1164 = 0, $$1184 = 0, $$1184$ph = 0, $$2185 = 0, $$3 = 0, $$3166 = 0, $$3186 = 0, $$4 = 0, $$4167 = 0;
 var $$5 = 0, $$5168 = 0, $$6181 = 0, $$7 = 0, $$7170 = 0, $$pre = 0, $$pre$i = 0, $$pre$i197 = 0, $$pre$i199 = 0, $$pre$i203 = 0, $$pre$i205 = 0, $$pre$i213 = 0, $$pre$i217 = 0, $$pre$i219 = 0, $$pre$i227 = 0, $$pre$i235 = 0, $$pre$i237 = 0, $$pre$phi281Z2D = 0, $$pre$phi283Z2D = 0, $$pre282 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i208 = 0, $exitcond$i$i$i222 = 0, $exitcond$i$i$i230 = 0, $exitcond$i$i$i240 = 0, $or$cond = 0, $or$cond194 = 0, $or$cond195 = 0, $or$cond196 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $3 = sp + 132|0;
 $4 = sp + 120|0;
 $5 = sp + 108|0;
 $6 = sp + 96|0;
 $7 = sp + 84|0;
 $8 = sp + 72|0;
 $9 = sp + 60|0;
 $10 = sp + 48|0;
 $11 = sp + 36|0;
 $12 = sp + 24|0;
 $13 = sp + 12|0;
 $14 = sp;
 $15 = $1;
 $16 = $0;
 $17 = (($15) - ($16))|0;
 $18 = ($17|0)>(2);
 L1: do {
  if ($18) {
   $19 = HEAP8[$0>>0]|0;
   $20 = ($19<<24>>24)==(103);
   if ($20) {
    $21 = ((($0)) + 1|0);
    $22 = HEAP8[$21>>0]|0;
    $23 = ($22<<24>>24)==(115);
    $24 = ((($0)) + 2|0);
    $$ = $23 ? $24 : $0;
    $$0182$off0 = $23;$$0183 = $$;
   } else {
    $$0182$off0 = 0;$$0183 = $0;
   }
   $25 = (__ZN10__cxxabiv112_GLOBAL__N_126parse_base_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($$0183,$1,$2)|0);
   $26 = ($25|0)==($$0183|0);
   if (!($26)) {
    if (!($$0182$off0)) {
     $$6181 = $25;
     break;
    }
    $27 = HEAP32[$2>>2]|0;
    $28 = ((($2)) + 4|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = ($27|0)==($29|0);
    if ($30) {
     $$6181 = $0;
     break;
    }
    $31 = ((($29)) + -24|0);
    (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($31,0,7640)|0);
    $$6181 = $25;
    break;
   }
   $32 = $$0183;
   $33 = (($15) - ($32))|0;
   $34 = ($33|0)>(2);
   if ($34) {
    $35 = HEAP8[$$0183>>0]|0;
    $36 = ($35<<24>>24)==(115);
    if ($36) {
     $37 = ((($$0183)) + 1|0);
     $38 = HEAP8[$37>>0]|0;
     $39 = ($38<<24>>24)==(114);
     if ($39) {
      $40 = ((($$0183)) + 2|0);
      $41 = HEAP8[$40>>0]|0;
      $42 = ($41<<24>>24)==(78);
      L14: do {
       if ($42) {
        $43 = ((($$0183)) + 3|0);
        $44 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_typeINS0_2DbEEEPKcS4_S4_RT_($43,$1,$2)|0);
        $45 = ($44|0)==($43|0);
        $46 = ($44|0)==($1|0);
        $or$cond = $45 | $46;
        if ($or$cond) {
         $$6181 = $0;
         break L1;
        }
        $47 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($44,$1,$2)|0);
        $48 = ($47|0)==($44|0);
        $$pre = ((($2)) + 4|0);
        do {
         if ($48) {
          $$1184$ph = $44;$$pre$phi281Z2D = $2;
         } else {
          $49 = HEAP32[$$pre>>2]|0;
          $50 = HEAP32[$2>>2]|0;
          $51 = (($49) - ($50))|0;
          $52 = (($51|0) / 24)&-1;
          $53 = ($52>>>0)<(2);
          if ($53) {
           $$6181 = $0;
           break L1;
          }
          $54 = $49;
          $55 = ((($54)) + -24|0);
          __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3,$55);
          $56 = HEAP32[$$pre>>2]|0;
          $57 = ((($56)) + -24|0);
          $59 = $56;
          while(1) {
           $58 = ($59|0)==($57|0);
           if ($58) {
            break;
           }
           $60 = ((($59)) + -24|0);
           HEAP32[$$pre>>2] = $60;
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($60);
           $$pre$i = HEAP32[$$pre>>2]|0;
           $59 = $$pre$i;
          }
          $61 = ((($56)) + -48|0);
          $62 = ((($3)) + 11|0);
          $63 = HEAP8[$62>>0]|0;
          $64 = ($63<<24>>24)<(0);
          $65 = HEAP32[$3>>2]|0;
          $66 = $64 ? $65 : $3;
          $67 = ((($3)) + 4|0);
          $68 = HEAP32[$67>>2]|0;
          $69 = $63&255;
          $70 = $64 ? $68 : $69;
          __THREW__ = 0;
          (invoke_iiii(88,($61|0),($66|0),($70|0))|0);
          $71 = __THREW__; __THREW__ = 0;
          $72 = $71&1;
          if ($72) {
           $79 = ___cxa_find_matching_catch_2()|0;
           $80 = tempRet0;
           __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
           $$7 = $80;$$7170 = $79;
           break L14;
          }
          $73 = ($47|0)==($1|0);
          if (!($73)) {
           __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
           $$1184$ph = $47;$$pre$phi281Z2D = $2;
           break;
          }
          $74 = HEAP32[$$pre>>2]|0;
          $75 = ((($74)) + -24|0);
          $77 = $74;
          while(1) {
           $76 = ($77|0)==($75|0);
           if ($76) {
            break;
           }
           $78 = ((($77)) + -24|0);
           HEAP32[$$pre>>2] = $78;
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($78);
           $$pre$i197 = HEAP32[$$pre>>2]|0;
           $77 = $$pre$i197;
          }
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
          $$6181 = $0;
          break L1;
         }
        } while(0);
        $81 = ((($5)) + 11|0);
        $82 = ((($5)) + 4|0);
        $$1184 = $$1184$ph;
        while(1) {
         $83 = HEAP8[$$1184>>0]|0;
         $84 = ($83<<24>>24)==(69);
         if ($84) {
          label = 43;
          break;
         }
         $85 = (__ZN10__cxxabiv112_GLOBAL__N_132parse_unresolved_qualifier_levelINS0_2DbEEEPKcS4_S4_RT_($$1184,$1,$2)|0);
         $86 = ($85|0)==($$1184|0);
         $87 = ($85|0)==($1|0);
         $or$cond194 = $86 | $87;
         if ($or$cond194) {
          $$6181 = $0;
          break L1;
         }
         $88 = HEAP32[$$pre>>2]|0;
         $89 = HEAP32[$$pre$phi281Z2D>>2]|0;
         $90 = (($88) - ($89))|0;
         $91 = (($90|0) / 24)&-1;
         $92 = ($91>>>0)<(2);
         if ($92) {
          $$6181 = $0;
          break L1;
         }
         $93 = $88;
         $94 = ((($93)) + -24|0);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($4,$94);
         $95 = HEAP32[$$pre>>2]|0;
         $96 = ((($95)) + -24|0);
         $98 = $95;
         while(1) {
          $97 = ($98|0)==($96|0);
          if ($97) {
           break;
          }
          $99 = ((($98)) + -24|0);
          HEAP32[$$pre>>2] = $99;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($99);
          $$pre$i199 = HEAP32[$$pre>>2]|0;
          $98 = $$pre$i199;
         }
         __THREW__ = 0;
         $100 = (invoke_iiii(97,($4|0),0,(7640|0))|0);
         $101 = __THREW__; __THREW__ = 0;
         $102 = $101&1;
         if ($102) {
          label = 40;
          break;
         }
         ;HEAP32[$5>>2]=HEAP32[$4>>2]|0;HEAP32[$5+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$4+8>>2]|0;
         $$0$i$i$i = 0;
         while(1) {
          $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
          if ($exitcond$i$i$i) {
           break;
          }
          $103 = (($4) + ($$0$i$i$i<<2)|0);
          HEAP32[$103>>2] = 0;
          $104 = (($$0$i$i$i) + 1)|0;
          $$0$i$i$i = $104;
         }
         $105 = HEAP32[$$pre>>2]|0;
         $106 = ((($105)) + -24|0);
         $107 = HEAP8[$81>>0]|0;
         $108 = ($107<<24>>24)<(0);
         $109 = HEAP32[$5>>2]|0;
         $110 = $108 ? $109 : $5;
         $111 = HEAP32[$82>>2]|0;
         $112 = $107&255;
         $113 = $108 ? $111 : $112;
         __THREW__ = 0;
         (invoke_iiii(88,($106|0),($110|0),($113|0))|0);
         $114 = __THREW__; __THREW__ = 0;
         $115 = $114&1;
         if ($115) {
          label = 41;
          break;
         }
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
         $$1184 = $85;
        }
        if ((label|0) == 40) {
         $116 = ___cxa_find_matching_catch_2()|0;
         $117 = tempRet0;
         $$0 = $117;$$0163 = $116;
        }
        else if ((label|0) == 41) {
         $118 = ___cxa_find_matching_catch_2()|0;
         $119 = tempRet0;
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
         $$0 = $119;$$0163 = $118;
        }
        else if ((label|0) == 43) {
         $120 = ((($$1184)) + 1|0);
         $121 = (__ZN10__cxxabiv112_GLOBAL__N_126parse_base_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($120,$1,$2)|0);
         $122 = ($121|0)==($120|0);
         if ($122) {
          $123 = HEAP32[$2>>2]|0;
          $124 = HEAP32[$$pre>>2]|0;
          $125 = ($123|0)==($124|0);
          if ($125) {
           $$6181 = $0;
           break L1;
          }
          $126 = ((($124)) + -24|0);
          $128 = $124;
          while(1) {
           $127 = ($128|0)==($126|0);
           if ($127) {
            $$6181 = $0;
            break L1;
           }
           $129 = ((($128)) + -24|0);
           HEAP32[$$pre>>2] = $129;
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($129);
           $$pre$i203 = HEAP32[$$pre>>2]|0;
           $128 = $$pre$i203;
          }
         }
         $130 = HEAP32[$$pre>>2]|0;
         $131 = HEAP32[$$pre$phi281Z2D>>2]|0;
         $132 = (($130) - ($131))|0;
         $133 = (($132|0) / 24)&-1;
         $134 = ($133>>>0)<(2);
         if ($134) {
          $$6181 = $0;
          break L1;
         }
         $135 = $130;
         $136 = ((($135)) + -24|0);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($6,$136);
         $137 = HEAP32[$$pre>>2]|0;
         $138 = ((($137)) + -24|0);
         $140 = $137;
         while(1) {
          $139 = ($140|0)==($138|0);
          if ($139) {
           break;
          }
          $141 = ((($140)) + -24|0);
          HEAP32[$$pre>>2] = $141;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($141);
          $$pre$i205 = HEAP32[$$pre>>2]|0;
          $140 = $$pre$i205;
         }
         __THREW__ = 0;
         $142 = (invoke_iiii(97,($6|0),0,(7640|0))|0);
         $143 = __THREW__; __THREW__ = 0;
         $144 = $143&1;
         do {
          if ($144) {
           $160 = ___cxa_find_matching_catch_2()|0;
           $161 = tempRet0;
           $$1 = $161;$$1164 = $160;
          } else {
           ;HEAP32[$7>>2]=HEAP32[$6>>2]|0;HEAP32[$7+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$6+8>>2]|0;
           $$0$i$i$i207 = 0;
           while(1) {
            $exitcond$i$i$i208 = ($$0$i$i$i207|0)==(3);
            if ($exitcond$i$i$i208) {
             break;
            }
            $145 = (($6) + ($$0$i$i$i207<<2)|0);
            HEAP32[$145>>2] = 0;
            $146 = (($$0$i$i$i207) + 1)|0;
            $$0$i$i$i207 = $146;
           }
           $147 = HEAP32[$$pre>>2]|0;
           $148 = ((($147)) + -24|0);
           $149 = ((($7)) + 11|0);
           $150 = HEAP8[$149>>0]|0;
           $151 = ($150<<24>>24)<(0);
           $152 = HEAP32[$7>>2]|0;
           $153 = $151 ? $152 : $7;
           $154 = ((($7)) + 4|0);
           $155 = HEAP32[$154>>2]|0;
           $156 = $150&255;
           $157 = $151 ? $155 : $156;
           __THREW__ = 0;
           (invoke_iiii(88,($148|0),($153|0),($157|0))|0);
           $158 = __THREW__; __THREW__ = 0;
           $159 = $158&1;
           if ($159) {
            $162 = ___cxa_find_matching_catch_2()|0;
            $163 = tempRet0;
            __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
            $$1 = $163;$$1164 = $162;
            break;
           } else {
            __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
            __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
            $$6181 = $121;
            break L1;
           }
          }
         } while(0);
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
         $$7 = $$1;$$7170 = $$1164;
         break;
        }
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
        $$7 = $$0;$$7170 = $$0163;
       } else {
        $164 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_typeINS0_2DbEEEPKcS4_S4_RT_($40,$1,$2)|0);
        $165 = ($164|0)==($40|0);
        if (!($165)) {
         $166 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($164,$1,$2)|0);
         $167 = ($166|0)==($164|0);
         do {
          if ($167) {
           $$2185 = $164;
          } else {
           $168 = ((($2)) + 4|0);
           $169 = HEAP32[$168>>2]|0;
           $170 = HEAP32[$2>>2]|0;
           $171 = (($169) - ($170))|0;
           $172 = (($171|0) / 24)&-1;
           $173 = ($172>>>0)<(2);
           if ($173) {
            $$6181 = $0;
            break L1;
           }
           $174 = $169;
           $175 = ((($174)) + -24|0);
           __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($8,$175);
           $176 = HEAP32[$168>>2]|0;
           $177 = ((($176)) + -24|0);
           $179 = $176;
           while(1) {
            $178 = ($179|0)==($177|0);
            if ($178) {
             break;
            }
            $180 = ((($179)) + -24|0);
            HEAP32[$168>>2] = $180;
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($180);
            $$pre$i213 = HEAP32[$168>>2]|0;
            $179 = $$pre$i213;
           }
           $181 = ((($176)) + -48|0);
           $182 = ((($8)) + 11|0);
           $183 = HEAP8[$182>>0]|0;
           $184 = ($183<<24>>24)<(0);
           $185 = HEAP32[$8>>2]|0;
           $186 = $184 ? $185 : $8;
           $187 = ((($8)) + 4|0);
           $188 = HEAP32[$187>>2]|0;
           $189 = $183&255;
           $190 = $184 ? $188 : $189;
           __THREW__ = 0;
           (invoke_iiii(88,($181|0),($186|0),($190|0))|0);
           $191 = __THREW__; __THREW__ = 0;
           $192 = $191&1;
           if ($192) {
            $193 = ___cxa_find_matching_catch_2()|0;
            $194 = tempRet0;
            __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
            $$7 = $194;$$7170 = $193;
            break L14;
           } else {
            __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
            $$2185 = $166;
            break;
           }
          }
         } while(0);
         $195 = (__ZN10__cxxabiv112_GLOBAL__N_126parse_base_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($$2185,$1,$2)|0);
         $196 = ($195|0)==($$2185|0);
         if ($196) {
          $197 = HEAP32[$2>>2]|0;
          $198 = ((($2)) + 4|0);
          $199 = HEAP32[$198>>2]|0;
          $200 = ($197|0)==($199|0);
          if ($200) {
           $$6181 = $0;
           break L1;
          }
          $201 = ((($199)) + -24|0);
          $203 = $199;
          while(1) {
           $202 = ($203|0)==($201|0);
           if ($202) {
            $$6181 = $0;
            break L1;
           }
           $204 = ((($203)) + -24|0);
           HEAP32[$198>>2] = $204;
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($204);
           $$pre$i217 = HEAP32[$198>>2]|0;
           $203 = $$pre$i217;
          }
         }
         $205 = ((($2)) + 4|0);
         $206 = HEAP32[$205>>2]|0;
         $207 = HEAP32[$2>>2]|0;
         $208 = (($206) - ($207))|0;
         $209 = (($208|0) / 24)&-1;
         $210 = ($209>>>0)<(2);
         if ($210) {
          $$6181 = $0;
          break L1;
         }
         $211 = $206;
         $212 = ((($211)) + -24|0);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($9,$212);
         $213 = HEAP32[$205>>2]|0;
         $214 = ((($213)) + -24|0);
         $216 = $213;
         while(1) {
          $215 = ($216|0)==($214|0);
          if ($215) {
           break;
          }
          $217 = ((($216)) + -24|0);
          HEAP32[$205>>2] = $217;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($217);
          $$pre$i219 = HEAP32[$205>>2]|0;
          $216 = $$pre$i219;
         }
         __THREW__ = 0;
         $218 = (invoke_iiii(97,($9|0),0,(7640|0))|0);
         $219 = __THREW__; __THREW__ = 0;
         $220 = $219&1;
         do {
          if ($220) {
           $236 = ___cxa_find_matching_catch_2()|0;
           $237 = tempRet0;
           $$3 = $237;$$3166 = $236;
          } else {
           ;HEAP32[$10>>2]=HEAP32[$9>>2]|0;HEAP32[$10+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$10+8>>2]=HEAP32[$9+8>>2]|0;
           $$0$i$i$i221 = 0;
           while(1) {
            $exitcond$i$i$i222 = ($$0$i$i$i221|0)==(3);
            if ($exitcond$i$i$i222) {
             break;
            }
            $221 = (($9) + ($$0$i$i$i221<<2)|0);
            HEAP32[$221>>2] = 0;
            $222 = (($$0$i$i$i221) + 1)|0;
            $$0$i$i$i221 = $222;
           }
           $223 = HEAP32[$205>>2]|0;
           $224 = ((($223)) + -24|0);
           $225 = ((($10)) + 11|0);
           $226 = HEAP8[$225>>0]|0;
           $227 = ($226<<24>>24)<(0);
           $228 = HEAP32[$10>>2]|0;
           $229 = $227 ? $228 : $10;
           $230 = ((($10)) + 4|0);
           $231 = HEAP32[$230>>2]|0;
           $232 = $226&255;
           $233 = $227 ? $231 : $232;
           __THREW__ = 0;
           (invoke_iiii(88,($224|0),($229|0),($233|0))|0);
           $234 = __THREW__; __THREW__ = 0;
           $235 = $234&1;
           if ($235) {
            $238 = ___cxa_find_matching_catch_2()|0;
            $239 = tempRet0;
            __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($10);
            $$3 = $239;$$3166 = $238;
            break;
           } else {
            __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($10);
            __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
            $$6181 = $195;
            break L1;
           }
          }
         } while(0);
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
         $$7 = $$3;$$7170 = $$3166;
         break;
        }
        $240 = (__ZN10__cxxabiv112_GLOBAL__N_132parse_unresolved_qualifier_levelINS0_2DbEEEPKcS4_S4_RT_($40,$1,$2)|0);
        $241 = ($240|0)==($40|0);
        $242 = ($240|0)==($1|0);
        $or$cond195 = $241 | $242;
        if ($or$cond195) {
         $$6181 = $0;
         break L1;
        }
        if ($$0182$off0) {
         $243 = HEAP32[$2>>2]|0;
         $244 = ((($2)) + 4|0);
         $245 = HEAP32[$244>>2]|0;
         $246 = ($243|0)==($245|0);
         if ($246) {
          $$6181 = $0;
          break L1;
         }
         $247 = ((($245)) + -24|0);
         (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($247,0,7640)|0);
         $$pre$phi283Z2D = $244;
        } else {
         $$pre282 = ((($2)) + 4|0);
         $$pre$phi283Z2D = $$pre282;
        }
        $248 = ((($12)) + 11|0);
        $249 = ((($12)) + 4|0);
        $$3186 = $240;
        while(1) {
         $250 = HEAP8[$$3186>>0]|0;
         $251 = ($250<<24>>24)==(69);
         if ($251) {
          label = 109;
          break;
         }
         $252 = (__ZN10__cxxabiv112_GLOBAL__N_132parse_unresolved_qualifier_levelINS0_2DbEEEPKcS4_S4_RT_($$3186,$1,$2)|0);
         $253 = ($252|0)==($$3186|0);
         $254 = ($252|0)==($1|0);
         $or$cond196 = $253 | $254;
         if ($or$cond196) {
          $$6181 = $0;
          break L1;
         }
         $255 = HEAP32[$$pre$phi283Z2D>>2]|0;
         $256 = HEAP32[$2>>2]|0;
         $257 = (($255) - ($256))|0;
         $258 = (($257|0) / 24)&-1;
         $259 = ($258>>>0)<(2);
         if ($259) {
          $$6181 = $0;
          break L1;
         }
         $260 = $255;
         $261 = ((($260)) + -24|0);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($11,$261);
         $262 = HEAP32[$$pre$phi283Z2D>>2]|0;
         $263 = ((($262)) + -24|0);
         $265 = $262;
         while(1) {
          $264 = ($265|0)==($263|0);
          if ($264) {
           break;
          }
          $266 = ((($265)) + -24|0);
          HEAP32[$$pre$phi283Z2D>>2] = $266;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($266);
          $$pre$i227 = HEAP32[$$pre$phi283Z2D>>2]|0;
          $265 = $$pre$i227;
         }
         __THREW__ = 0;
         $267 = (invoke_iiii(97,($11|0),0,(7640|0))|0);
         $268 = __THREW__; __THREW__ = 0;
         $269 = $268&1;
         if ($269) {
          label = 106;
          break;
         }
         ;HEAP32[$12>>2]=HEAP32[$11>>2]|0;HEAP32[$12+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$12+8>>2]=HEAP32[$11+8>>2]|0;
         $$0$i$i$i229 = 0;
         while(1) {
          $exitcond$i$i$i230 = ($$0$i$i$i229|0)==(3);
          if ($exitcond$i$i$i230) {
           break;
          }
          $270 = (($11) + ($$0$i$i$i229<<2)|0);
          HEAP32[$270>>2] = 0;
          $271 = (($$0$i$i$i229) + 1)|0;
          $$0$i$i$i229 = $271;
         }
         $272 = HEAP32[$$pre$phi283Z2D>>2]|0;
         $273 = ((($272)) + -24|0);
         $274 = HEAP8[$248>>0]|0;
         $275 = ($274<<24>>24)<(0);
         $276 = HEAP32[$12>>2]|0;
         $277 = $275 ? $276 : $12;
         $278 = HEAP32[$249>>2]|0;
         $279 = $274&255;
         $280 = $275 ? $278 : $279;
         __THREW__ = 0;
         (invoke_iiii(88,($273|0),($277|0),($280|0))|0);
         $281 = __THREW__; __THREW__ = 0;
         $282 = $281&1;
         if ($282) {
          label = 107;
          break;
         }
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($12);
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($11);
         $$3186 = $252;
        }
        if ((label|0) == 106) {
         $283 = ___cxa_find_matching_catch_2()|0;
         $284 = tempRet0;
         $$4 = $284;$$4167 = $283;
        }
        else if ((label|0) == 107) {
         $285 = ___cxa_find_matching_catch_2()|0;
         $286 = tempRet0;
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($12);
         $$4 = $286;$$4167 = $285;
        }
        else if ((label|0) == 109) {
         $287 = ((($$3186)) + 1|0);
         $288 = (__ZN10__cxxabiv112_GLOBAL__N_126parse_base_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($287,$1,$2)|0);
         $289 = ($288|0)==($287|0);
         if ($289) {
          $290 = HEAP32[$2>>2]|0;
          $291 = HEAP32[$$pre$phi283Z2D>>2]|0;
          $292 = ($290|0)==($291|0);
          if ($292) {
           $$6181 = $0;
           break L1;
          }
          $293 = ((($291)) + -24|0);
          $295 = $291;
          while(1) {
           $294 = ($295|0)==($293|0);
           if ($294) {
            $$6181 = $0;
            break L1;
           }
           $296 = ((($295)) + -24|0);
           HEAP32[$$pre$phi283Z2D>>2] = $296;
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($296);
           $$pre$i235 = HEAP32[$$pre$phi283Z2D>>2]|0;
           $295 = $$pre$i235;
          }
         }
         $297 = HEAP32[$$pre$phi283Z2D>>2]|0;
         $298 = HEAP32[$2>>2]|0;
         $299 = (($297) - ($298))|0;
         $300 = (($299|0) / 24)&-1;
         $301 = ($300>>>0)<(2);
         if ($301) {
          $$6181 = $0;
          break L1;
         }
         $302 = $297;
         $303 = ((($302)) + -24|0);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($13,$303);
         $304 = HEAP32[$$pre$phi283Z2D>>2]|0;
         $305 = ((($304)) + -24|0);
         $307 = $304;
         while(1) {
          $306 = ($307|0)==($305|0);
          if ($306) {
           break;
          }
          $308 = ((($307)) + -24|0);
          HEAP32[$$pre$phi283Z2D>>2] = $308;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($308);
          $$pre$i237 = HEAP32[$$pre$phi283Z2D>>2]|0;
          $307 = $$pre$i237;
         }
         __THREW__ = 0;
         $309 = (invoke_iiii(97,($13|0),0,(7640|0))|0);
         $310 = __THREW__; __THREW__ = 0;
         $311 = $310&1;
         do {
          if ($311) {
           $327 = ___cxa_find_matching_catch_2()|0;
           $328 = tempRet0;
           $$5 = $328;$$5168 = $327;
          } else {
           ;HEAP32[$14>>2]=HEAP32[$13>>2]|0;HEAP32[$14+4>>2]=HEAP32[$13+4>>2]|0;HEAP32[$14+8>>2]=HEAP32[$13+8>>2]|0;
           $$0$i$i$i239 = 0;
           while(1) {
            $exitcond$i$i$i240 = ($$0$i$i$i239|0)==(3);
            if ($exitcond$i$i$i240) {
             break;
            }
            $312 = (($13) + ($$0$i$i$i239<<2)|0);
            HEAP32[$312>>2] = 0;
            $313 = (($$0$i$i$i239) + 1)|0;
            $$0$i$i$i239 = $313;
           }
           $314 = HEAP32[$$pre$phi283Z2D>>2]|0;
           $315 = ((($314)) + -24|0);
           $316 = ((($14)) + 11|0);
           $317 = HEAP8[$316>>0]|0;
           $318 = ($317<<24>>24)<(0);
           $319 = HEAP32[$14>>2]|0;
           $320 = $318 ? $319 : $14;
           $321 = ((($14)) + 4|0);
           $322 = HEAP32[$321>>2]|0;
           $323 = $317&255;
           $324 = $318 ? $322 : $323;
           __THREW__ = 0;
           (invoke_iiii(88,($315|0),($320|0),($324|0))|0);
           $325 = __THREW__; __THREW__ = 0;
           $326 = $325&1;
           if ($326) {
            $329 = ___cxa_find_matching_catch_2()|0;
            $330 = tempRet0;
            __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($14);
            $$5 = $330;$$5168 = $329;
            break;
           } else {
            __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($14);
            __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($13);
            $$6181 = $288;
            break L1;
           }
          }
         } while(0);
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($13);
         $$7 = $$5;$$7170 = $$5168;
         break;
        }
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($11);
        $$7 = $$4;$$7170 = $$4167;
       }
      } while(0);
      ___resumeException($$7170|0);
      // unreachable;
     } else {
      $$6181 = $0;
     }
    } else {
     $$6181 = $0;
    }
   } else {
    $$6181 = $0;
   }
  } else {
   $$6181 = $0;
  }
 } while(0);
 STACKTOP = sp;return ($$6181|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_119parse_dot_star_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$030 = 0, $$3 = 0, $$pre$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 12|0;
 $4 = sp;
 $5 = $1;
 $6 = $0;
 $7 = (($5) - ($6))|0;
 $8 = ($7|0)>(2);
 L1: do {
  if ($8) {
   $9 = HEAP8[$0>>0]|0;
   $10 = ($9<<24>>24)==(100);
   if ($10) {
    $11 = ((($0)) + 1|0);
    $12 = HEAP8[$11>>0]|0;
    $13 = ($12<<24>>24)==(115);
    if ($13) {
     $14 = ((($0)) + 2|0);
     $15 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($14,$1,$2)|0);
     $16 = ($15|0)==($14|0);
     if ($16) {
      $$3 = $0;
     } else {
      $17 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($15,$1,$2)|0);
      $18 = ($17|0)==($15|0);
      if ($18) {
       $$3 = $0;
      } else {
       $19 = ((($2)) + 4|0);
       $20 = HEAP32[$19>>2]|0;
       $21 = HEAP32[$2>>2]|0;
       $22 = (($20) - ($21))|0;
       $23 = (($22|0) / 24)&-1;
       $24 = ($23>>>0)<(2);
       if ($24) {
        $$3 = $0;
       } else {
        $25 = $20;
        $26 = ((($25)) + -24|0);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3,$26);
        $27 = HEAP32[$19>>2]|0;
        $28 = ((($27)) + -24|0);
        $30 = $27;
        while(1) {
         $29 = ($30|0)==($28|0);
         if ($29) {
          break;
         }
         $31 = ((($30)) + -24|0);
         HEAP32[$19>>2] = $31;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($31);
         $$pre$i = HEAP32[$19>>2]|0;
         $30 = $$pre$i;
        }
        __THREW__ = 0;
        invoke_viii(117,($4|0),(7859|0),($3|0));
        $32 = __THREW__; __THREW__ = 0;
        $33 = $32&1;
        do {
         if ($33) {
          $47 = ___cxa_find_matching_catch_2()|0;
          $48 = tempRet0;
          $$0 = $48;$$030 = $47;
         } else {
          $34 = HEAP32[$19>>2]|0;
          $35 = ((($34)) + -24|0);
          $36 = ((($4)) + 11|0);
          $37 = HEAP8[$36>>0]|0;
          $38 = ($37<<24>>24)<(0);
          $39 = HEAP32[$4>>2]|0;
          $40 = $38 ? $39 : $4;
          $41 = ((($4)) + 4|0);
          $42 = HEAP32[$41>>2]|0;
          $43 = $37&255;
          $44 = $38 ? $42 : $43;
          __THREW__ = 0;
          (invoke_iiii(88,($35|0),($40|0),($44|0))|0);
          $45 = __THREW__; __THREW__ = 0;
          $46 = $45&1;
          if ($46) {
           $49 = ___cxa_find_matching_catch_2()|0;
           $50 = tempRet0;
           __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
           $$0 = $50;$$030 = $49;
           break;
          } else {
           __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
           __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
           $$3 = $17;
           break L1;
          }
         }
        } while(0);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
        ___resumeException($$030|0);
        // unreachable;
       }
      }
     }
    } else {
     $$3 = $0;
    }
   } else {
    $$3 = $0;
   }
  } else {
   $$3 = $0;
  }
 } while(0);
 STACKTOP = sp;return ($$3|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_114parse_dot_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$030 = 0, $$3 = 0, $$pre$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 12|0;
 $4 = sp;
 $5 = $1;
 $6 = $0;
 $7 = (($5) - ($6))|0;
 $8 = ($7|0)>(2);
 L1: do {
  if ($8) {
   $9 = HEAP8[$0>>0]|0;
   $10 = ($9<<24>>24)==(100);
   if ($10) {
    $11 = ((($0)) + 1|0);
    $12 = HEAP8[$11>>0]|0;
    $13 = ($12<<24>>24)==(116);
    if ($13) {
     $14 = ((($0)) + 2|0);
     $15 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($14,$1,$2)|0);
     $16 = ($15|0)==($14|0);
     if ($16) {
      $$3 = $0;
     } else {
      $17 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($15,$1,$2)|0);
      $18 = ($17|0)==($15|0);
      if ($18) {
       $$3 = $0;
      } else {
       $19 = ((($2)) + 4|0);
       $20 = HEAP32[$19>>2]|0;
       $21 = HEAP32[$2>>2]|0;
       $22 = (($20) - ($21))|0;
       $23 = (($22|0) / 24)&-1;
       $24 = ($23>>>0)<(2);
       if ($24) {
        $$3 = $0;
       } else {
        $25 = $20;
        $26 = ((($25)) + -24|0);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3,$26);
        $27 = HEAP32[$19>>2]|0;
        $28 = ((($27)) + -24|0);
        $30 = $27;
        while(1) {
         $29 = ($30|0)==($28|0);
         if ($29) {
          break;
         }
         $31 = ((($30)) + -24|0);
         HEAP32[$19>>2] = $31;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($31);
         $$pre$i = HEAP32[$19>>2]|0;
         $30 = $$pre$i;
        }
        __THREW__ = 0;
        invoke_viii(117,($4|0),(7857|0),($3|0));
        $32 = __THREW__; __THREW__ = 0;
        $33 = $32&1;
        do {
         if ($33) {
          $47 = ___cxa_find_matching_catch_2()|0;
          $48 = tempRet0;
          $$0 = $48;$$030 = $47;
         } else {
          $34 = HEAP32[$19>>2]|0;
          $35 = ((($34)) + -24|0);
          $36 = ((($4)) + 11|0);
          $37 = HEAP8[$36>>0]|0;
          $38 = ($37<<24>>24)<(0);
          $39 = HEAP32[$4>>2]|0;
          $40 = $38 ? $39 : $4;
          $41 = ((($4)) + 4|0);
          $42 = HEAP32[$41>>2]|0;
          $43 = $37&255;
          $44 = $38 ? $42 : $43;
          __THREW__ = 0;
          (invoke_iiii(88,($35|0),($40|0),($44|0))|0);
          $45 = __THREW__; __THREW__ = 0;
          $46 = $45&1;
          if ($46) {
           $49 = ___cxa_find_matching_catch_2()|0;
           $50 = tempRet0;
           __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
           $$0 = $50;$$030 = $49;
           break;
          } else {
           __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
           __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
           $$3 = $17;
           break L1;
          }
         }
        } while(0);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
        ___resumeException($$030|0);
        // unreachable;
       }
      }
     }
    } else {
     $$3 = $0;
    }
   } else {
    $$3 = $0;
   }
  } else {
   $$3 = $0;
  }
 } while(0);
 STACKTOP = sp;return ($$3|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_114parse_new_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i175 = 0, $$0$i$i$i187 = 0, $$0$i$i170 = 0, $$0$i$i180 = 0, $$0$i$i193 = 0, $$0$off0216 = 0, $$0108 = 0, $$0109 = 0, $$0136$off0 = 0, $$0136$off0$ = 0, $$0148 = 0, $$0157$off0 = 0, $$0158 = 0, $$1 = 0, $$1110 = 0, $$1149 = 0;
 var $$1159 = 0, $$16 = 0, $$2 = 0, $$2111 = 0, $$3 = 0, $$3112 = 0, $$3141 = 0, $$3161 = 0, $$4 = 0, $$4113 = 0, $$4142 = 0, $$4162215 = 0, $$5 = 0, $$5114 = 0, $$6 = 0, $$6115 = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre$i = 0, $$pre$i168 = 0;
 var $$pre$i178 = 0, $$pre$phi214Z2D = 0, $$pre$phiZ2D = 0, $$pre212 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $exitcond$i$i = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i$i = 0, $exitcond$i$i$i$i176 = 0, $exitcond$i$i$i188 = 0, $exitcond$i$i171 = 0, $exitcond$i$i181 = 0, $exitcond$i$i194 = 0, $not$or$cond = 0, $not$or$cond$demorgan = 0, $or$cond = 0;
 var $or$cond165 = 0, $or$cond166 = 0, $or$cond222 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $3 = sp + 163|0;
 $4 = sp + 162|0;
 $5 = sp + 161|0;
 $6 = sp + 160|0;
 $7 = sp + 148|0;
 $8 = sp + 136|0;
 $9 = sp + 124|0;
 $10 = sp + 112|0;
 $11 = sp + 100|0;
 $12 = sp + 88|0;
 $13 = sp + 76|0;
 $14 = sp + 64|0;
 $15 = sp + 52|0;
 $16 = sp + 40|0;
 $17 = sp + 16|0;
 $18 = sp;
 $19 = $1;
 $20 = $0;
 $21 = (($19) - ($20))|0;
 $22 = ($21|0)>(3);
 L1: do {
  if ($22) {
   $23 = HEAP8[$0>>0]|0;
   $24 = ($23<<24>>24)==(103);
   if ($24) {
    $25 = ((($0)) + 1|0);
    $26 = HEAP8[$25>>0]|0;
    $27 = ($26<<24>>24)==(115);
    $28 = ((($0)) + 2|0);
    $$ = $27 ? $28 : $0;
    $$pre = HEAP8[$$>>0]|0;
    $$0157$off0 = $27;$$0158 = $$;$30 = $$pre;
   } else {
    $$0157$off0 = 0;$$0158 = $0;$30 = $23;
   }
   $29 = ($30<<24>>24)==(110);
   if ($29) {
    $31 = ((($$0158)) + 1|0);
    $32 = HEAP8[$31>>0]|0;
    $33 = ($32<<24>>24)==(97);
    switch ($32<<24>>24) {
    case 97: case 119:  {
     break;
    }
    default: {
     $$16 = $0;
     break L1;
    }
    }
    $34 = ((($$0158)) + 2|0);
    $35 = ($34|0)==($1|0);
    L8: do {
     if (!($35)) {
      $$0136$off0 = 0;$$1159 = $34;
      while(1) {
       $36 = HEAP8[$$1159>>0]|0;
       $37 = ($36<<24>>24)==(95);
       if ($37) {
        break;
       }
       $38 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($$1159,$1,$2)|0);
       $39 = ($38|0)==($$1159|0);
       $40 = ($38|0)==($1|0);
       $or$cond = $39 | $40;
       $not$or$cond$demorgan = $39 | $40;
       $not$or$cond = $not$or$cond$demorgan ^ 1;
       $$0136$off0$ = $$0136$off0 | $not$or$cond;
       if ($or$cond) {
        break L8;
       } else {
        $$0136$off0 = $$0136$off0$;$$1159 = $38;
       }
      }
      $41 = ((($$1159)) + 1|0);
      $42 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($41,$1,$2)|0);
      $43 = ($42|0)==($41|0);
      $44 = ($42|0)==($1|0);
      $or$cond165 = $43 | $44;
      if (!($or$cond165)) {
       $45 = $42;
       $46 = (($19) - ($45))|0;
       $47 = ($46|0)>(2);
       $48 = HEAP8[$42>>0]|0;
       $49 = ($48<<24>>24)==(112);
       $or$cond222 = $47 & $49;
       L14: do {
        if ($or$cond222) {
         $50 = ((($42)) + 1|0);
         $51 = HEAP8[$50>>0]|0;
         $52 = ($51<<24>>24)==(105);
         if (!($52)) {
          break L8;
         }
         $53 = ((($42)) + 2|0);
         $$3161 = $53;
         while(1) {
          $54 = HEAP8[$$3161>>0]|0;
          $55 = ($54<<24>>24)==(69);
          if ($55) {
           $$0$off0216 = 1;$$4162215 = $$3161;
           break L14;
          }
          $56 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($$3161,$1,$2)|0);
          $57 = ($56|0)==($$3161|0);
          $58 = ($56|0)==($1|0);
          $or$cond166 = $57 | $58;
          if ($or$cond166) {
           break L8;
          } else {
           $$3161 = $56;
          }
         }
        } else {
         $59 = ($48<<24>>24)==(69);
         if ($59) {
          $$0$off0216 = 0;$$4162215 = $42;
         } else {
          break L8;
         }
        }
       } while(0);
       ;HEAP32[$7>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
       $$0$i$i = 0;
       while(1) {
        $exitcond$i$i = ($$0$i$i|0)==(3);
        if ($exitcond$i$i) {
         break;
        }
        $60 = (($7) + ($$0$i$i<<2)|0);
        HEAP32[$60>>2] = 0;
        $61 = (($$0$i$i) + 1)|0;
        $$0$i$i = $61;
       }
       L26: do {
        if ($$0$off0216) {
         $62 = HEAP32[$2>>2]|0;
         $63 = ((($2)) + 4|0);
         $64 = HEAP32[$63>>2]|0;
         $65 = ($62|0)==($64|0);
         if ($65) {
          $$1149 = $0;$$4142 = 1;
          label = 103;
         } else {
          $66 = ((($64)) + -24|0);
          __THREW__ = 0;
          invoke_vii(96,($8|0),($66|0));
          $67 = __THREW__; __THREW__ = 0;
          $68 = $67&1;
          if ($68) {
           $85 = ___cxa_find_matching_catch_2()|0;
           $86 = tempRet0;
           $$6 = $86;$$6115 = $85;
           label = 107;
           break;
          }
          $69 = ((($7)) + 11|0);
          $70 = HEAP8[$69>>0]|0;
          $71 = ($70<<24>>24)<(0);
          if ($71) {
           $72 = HEAP32[$7>>2]|0;
           HEAP8[$5>>0] = 0;
           __ZNSt3__211char_traitsIcE6assignERcRKc($72,$5);
           $73 = ((($7)) + 4|0);
           HEAP32[$73>>2] = 0;
          } else {
           HEAP8[$6>>0] = 0;
           __ZNSt3__211char_traitsIcE6assignERcRKc($7,$6);
           HEAP8[$69>>0] = 0;
          }
          __THREW__ = 0;
          invoke_vi(92,($7|0));
          $74 = __THREW__; __THREW__ = 0;
          $75 = $74&1;
          if ($75) {
           $76 = ___cxa_find_matching_catch_3(0|0)|0;
           $77 = tempRet0;
           ___clang_call_terminate($76);
           // unreachable;
          }
          ;HEAP32[$7>>2]=HEAP32[$8>>2]|0;HEAP32[$7+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$8+8>>2]|0;
          $$0$i$i$i$i = 0;
          while(1) {
           $exitcond$i$i$i$i = ($$0$i$i$i$i|0)==(3);
           if ($exitcond$i$i$i$i) {
            break;
           }
           $78 = (($8) + ($$0$i$i$i$i<<2)|0);
           HEAP32[$78>>2] = 0;
           $79 = (($$0$i$i$i$i) + 1)|0;
           $$0$i$i$i$i = $79;
          }
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
          $80 = HEAP32[$63>>2]|0;
          $81 = ((($80)) + -24|0);
          $83 = $80;
          while(1) {
           $82 = ($83|0)==($81|0);
           if ($82) {
            $$pre$phi214Z2D = $63;$$pre$phiZ2D = $2;$91 = $81;
            label = 36;
            break L26;
           }
           $84 = ((($83)) + -24|0);
           HEAP32[$63>>2] = $84;
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($84);
           $$pre$i = HEAP32[$63>>2]|0;
           $83 = $$pre$i;
          }
         }
        } else {
         $$phi$trans$insert = ((($2)) + 4|0);
         $$pre212 = HEAP32[$$phi$trans$insert>>2]|0;
         $$pre$phi214Z2D = $$phi$trans$insert;$$pre$phiZ2D = $2;$91 = $$pre212;
         label = 36;
        }
       } while(0);
       do {
        if ((label|0) == 36) {
         $89 = HEAP32[$$pre$phiZ2D>>2]|0;
         $90 = ($89|0)==($91|0);
         if ($90) {
          $$1149 = $0;$$4142 = 1;
          label = 103;
         } else {
          $92 = ((($91)) + -24|0);
          __THREW__ = 0;
          invoke_vii(96,($9|0),($92|0));
          $93 = __THREW__; __THREW__ = 0;
          $94 = $93&1;
          if ($94) {
           $87 = ___cxa_find_matching_catch_2()|0;
           $88 = tempRet0;
           $$6 = $88;$$6115 = $87;
           label = 107;
           break;
          }
          $95 = HEAP32[$$pre$phi214Z2D>>2]|0;
          $96 = ((($95)) + -24|0);
          $98 = $95;
          while(1) {
           $97 = ($98|0)==($96|0);
           if ($97) {
            break;
           }
           $99 = ((($98)) + -24|0);
           HEAP32[$$pre$phi214Z2D>>2] = $99;
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($99);
           $$pre$i168 = HEAP32[$$pre$phi214Z2D>>2]|0;
           $98 = $$pre$i168;
          }
          ;HEAP32[$10>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
          $$0$i$i170 = 0;
          while(1) {
           $exitcond$i$i171 = ($$0$i$i170|0)==(3);
           if ($exitcond$i$i171) {
            break;
           }
           $100 = (($10) + ($$0$i$i170<<2)|0);
           HEAP32[$100>>2] = 0;
           $101 = (($$0$i$i170) + 1)|0;
           $$0$i$i170 = $101;
          }
          L61: do {
           if ($$0136$off0) {
            $102 = HEAP32[$$pre$phiZ2D>>2]|0;
            $103 = ($102|0)==($96|0);
            if ($103) {
             $$0148 = $0;$$3141 = 1;
             label = 102;
            } else {
             $104 = ((($95)) + -48|0);
             __THREW__ = 0;
             invoke_vii(96,($11|0),($104|0));
             $105 = __THREW__; __THREW__ = 0;
             $106 = $105&1;
             if ($106) {
              $123 = ___cxa_find_matching_catch_2()|0;
              $124 = tempRet0;
              $$5 = $124;$$5114 = $123;
              label = 106;
              break;
             }
             $107 = ((($10)) + 11|0);
             $108 = HEAP8[$107>>0]|0;
             $109 = ($108<<24>>24)<(0);
             if ($109) {
              $110 = HEAP32[$10>>2]|0;
              HEAP8[$3>>0] = 0;
              __ZNSt3__211char_traitsIcE6assignERcRKc($110,$3);
              $111 = ((($10)) + 4|0);
              HEAP32[$111>>2] = 0;
             } else {
              HEAP8[$4>>0] = 0;
              __ZNSt3__211char_traitsIcE6assignERcRKc($10,$4);
              HEAP8[$107>>0] = 0;
             }
             __THREW__ = 0;
             invoke_vi(92,($10|0));
             $112 = __THREW__; __THREW__ = 0;
             $113 = $112&1;
             if ($113) {
              $114 = ___cxa_find_matching_catch_3(0|0)|0;
              $115 = tempRet0;
              ___clang_call_terminate($114);
              // unreachable;
             }
             ;HEAP32[$10>>2]=HEAP32[$11>>2]|0;HEAP32[$10+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$10+8>>2]=HEAP32[$11+8>>2]|0;
             $$0$i$i$i$i175 = 0;
             while(1) {
              $exitcond$i$i$i$i176 = ($$0$i$i$i$i175|0)==(3);
              if ($exitcond$i$i$i$i176) {
               break;
              }
              $116 = (($11) + ($$0$i$i$i$i175<<2)|0);
              HEAP32[$116>>2] = 0;
              $117 = (($$0$i$i$i$i175) + 1)|0;
              $$0$i$i$i$i175 = $117;
             }
             __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($11);
             $118 = HEAP32[$$pre$phi214Z2D>>2]|0;
             $119 = ((($118)) + -24|0);
             $121 = $118;
             while(1) {
              $120 = ($121|0)==($119|0);
              if ($120) {
               label = 59;
               break L61;
              }
              $122 = ((($121)) + -24|0);
              HEAP32[$$pre$phi214Z2D>>2] = $122;
              __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($122);
              $$pre$i178 = HEAP32[$$pre$phi214Z2D>>2]|0;
              $121 = $$pre$i178;
             }
            }
           } else {
            label = 59;
           }
          } while(0);
          L81: do {
           if ((label|0) == 59) {
            ;HEAP32[$12>>2]=0|0;HEAP32[$12+4>>2]=0|0;HEAP32[$12+8>>2]=0|0;
            $$0$i$i180 = 0;
            while(1) {
             $exitcond$i$i181 = ($$0$i$i180|0)==(3);
             if ($exitcond$i$i181) {
              break;
             }
             $125 = (($12) + ($$0$i$i180<<2)|0);
             HEAP32[$125>>2] = 0;
             $126 = (($$0$i$i180) + 1)|0;
             $$0$i$i180 = $126;
            }
            if ($$0157$off0) {
             __THREW__ = 0;
             invoke_vii(122,($12|0),(7640|0));
             $127 = __THREW__; __THREW__ = 0;
             $128 = $127&1;
             if ($128) {
              label = 64;
             } else {
              label = 65;
             }
            } else {
             label = 65;
            }
            L89: do {
             if ((label|0) == 65) {
              if ($33) {
               __THREW__ = 0;
               (invoke_iii(95,($12|0),(7850|0))|0);
               $131 = __THREW__; __THREW__ = 0;
               $132 = $131&1;
               if ($132) {
                label = 64;
                break;
               }
              } else {
               __THREW__ = 0;
               (invoke_iii(95,($12|0),(7600|0))|0);
               $133 = __THREW__; __THREW__ = 0;
               $134 = $133&1;
               if ($134) {
                label = 64;
                break;
               }
              }
              L95: do {
               if ($$0136$off0) {
                __THREW__ = 0;
                invoke_viii(117,($14|0),(7568|0),($10|0));
                $135 = __THREW__; __THREW__ = 0;
                $136 = $135&1;
                if ($136) {
                 $153 = ___cxa_find_matching_catch_2()|0;
                 $154 = tempRet0;
                 $$1 = $154;$$1110 = $153;
                } else {
                 __THREW__ = 0;
                 $137 = (invoke_iii(95,($14|0),(7854|0))|0);
                 $138 = __THREW__; __THREW__ = 0;
                 $139 = $138&1;
                 do {
                  if ($139) {
                   $155 = ___cxa_find_matching_catch_2()|0;
                   $156 = tempRet0;
                   $$0108 = $156;$$0109 = $155;
                  } else {
                   ;HEAP32[$13>>2]=HEAP32[$14>>2]|0;HEAP32[$13+4>>2]=HEAP32[$14+4>>2]|0;HEAP32[$13+8>>2]=HEAP32[$14+8>>2]|0;
                   $$0$i$i$i = 0;
                   while(1) {
                    $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
                    if ($exitcond$i$i$i) {
                     break;
                    }
                    $140 = (($14) + ($$0$i$i$i<<2)|0);
                    HEAP32[$140>>2] = 0;
                    $141 = (($$0$i$i$i) + 1)|0;
                    $$0$i$i$i = $141;
                   }
                   $142 = ((($13)) + 11|0);
                   $143 = HEAP8[$142>>0]|0;
                   $144 = ($143<<24>>24)<(0);
                   $145 = HEAP32[$13>>2]|0;
                   $146 = $144 ? $145 : $13;
                   $147 = ((($13)) + 4|0);
                   $148 = HEAP32[$147>>2]|0;
                   $149 = $143&255;
                   $150 = $144 ? $148 : $149;
                   __THREW__ = 0;
                   (invoke_iiii(88,($12|0),($146|0),($150|0))|0);
                   $151 = __THREW__; __THREW__ = 0;
                   $152 = $151&1;
                   if ($152) {
                    $157 = ___cxa_find_matching_catch_2()|0;
                    $158 = tempRet0;
                    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($13);
                    $$0108 = $158;$$0109 = $157;
                    break;
                   } else {
                    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($13);
                    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($14);
                    break L95;
                   }
                  }
                 } while(0);
                 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($14);
                 $$1 = $$0108;$$1110 = $$0109;
                }
                $$4 = $$1;$$4113 = $$1110;
                break L89;
               }
              } while(0);
              $159 = ((($9)) + 11|0);
              $160 = HEAP8[$159>>0]|0;
              $161 = ($160<<24>>24)<(0);
              $162 = HEAP32[$9>>2]|0;
              $163 = $161 ? $162 : $9;
              $164 = ((($9)) + 4|0);
              $165 = HEAP32[$164>>2]|0;
              $166 = $160&255;
              $167 = $161 ? $165 : $166;
              __THREW__ = 0;
              (invoke_iiii(88,($12|0),($163|0),($167|0))|0);
              $168 = __THREW__; __THREW__ = 0;
              $169 = $168&1;
              if ($169) {
               label = 64;
              } else {
               L114: do {
                if ($$0$off0216) {
                 __THREW__ = 0;
                 invoke_viii(117,($16|0),(7563|0),($7|0));
                 $170 = __THREW__; __THREW__ = 0;
                 $171 = $170&1;
                 if ($171) {
                  $188 = ___cxa_find_matching_catch_2()|0;
                  $189 = tempRet0;
                  $$3 = $189;$$3112 = $188;
                 } else {
                  __THREW__ = 0;
                  $172 = (invoke_iii(95,($16|0),(7566|0))|0);
                  $173 = __THREW__; __THREW__ = 0;
                  $174 = $173&1;
                  do {
                   if ($174) {
                    $190 = ___cxa_find_matching_catch_2()|0;
                    $191 = tempRet0;
                    $$2 = $191;$$2111 = $190;
                   } else {
                    ;HEAP32[$15>>2]=HEAP32[$16>>2]|0;HEAP32[$15+4>>2]=HEAP32[$16+4>>2]|0;HEAP32[$15+8>>2]=HEAP32[$16+8>>2]|0;
                    $$0$i$i$i187 = 0;
                    while(1) {
                     $exitcond$i$i$i188 = ($$0$i$i$i187|0)==(3);
                     if ($exitcond$i$i$i188) {
                      break;
                     }
                     $175 = (($16) + ($$0$i$i$i187<<2)|0);
                     HEAP32[$175>>2] = 0;
                     $176 = (($$0$i$i$i187) + 1)|0;
                     $$0$i$i$i187 = $176;
                    }
                    $177 = ((($15)) + 11|0);
                    $178 = HEAP8[$177>>0]|0;
                    $179 = ($178<<24>>24)<(0);
                    $180 = HEAP32[$15>>2]|0;
                    $181 = $179 ? $180 : $15;
                    $182 = ((($15)) + 4|0);
                    $183 = HEAP32[$182>>2]|0;
                    $184 = $178&255;
                    $185 = $179 ? $183 : $184;
                    __THREW__ = 0;
                    (invoke_iiii(88,($12|0),($181|0),($185|0))|0);
                    $186 = __THREW__; __THREW__ = 0;
                    $187 = $186&1;
                    if ($187) {
                     $192 = ___cxa_find_matching_catch_2()|0;
                     $193 = tempRet0;
                     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($15);
                     $$2 = $193;$$2111 = $192;
                     break;
                    } else {
                     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($15);
                     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($16);
                     break L114;
                    }
                   }
                  } while(0);
                  __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($16);
                  $$3 = $$2;$$3112 = $$2111;
                 }
                 $$4 = $$3;$$4113 = $$3112;
                 break L89;
                }
               } while(0);
               ;HEAP32[$18>>2]=HEAP32[$12>>2]|0;HEAP32[$18+4>>2]=HEAP32[$12+4>>2]|0;HEAP32[$18+8>>2]=HEAP32[$12+8>>2]|0;
               $$0$i$i193 = 0;
               while(1) {
                $exitcond$i$i194 = ($$0$i$i193|0)==(3);
                if ($exitcond$i$i194) {
                 break;
                }
                $194 = (($12) + ($$0$i$i193<<2)|0);
                HEAP32[$194>>2] = 0;
                $195 = (($$0$i$i193) + 1)|0;
                $$0$i$i193 = $195;
               }
               __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($17,$18);
               $196 = HEAP32[$$pre$phi214Z2D>>2]|0;
               $197 = ((($2)) + 8|0);
               $198 = HEAP32[$197>>2]|0;
               $199 = ($196>>>0)<($198>>>0);
               do {
                if ($199) {
                 __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($196,$17);
                 $200 = HEAP32[$$pre$phi214Z2D>>2]|0;
                 $201 = ((($200)) + 24|0);
                 HEAP32[$$pre$phi214Z2D>>2] = $201;
                } else {
                 __THREW__ = 0;
                 invoke_vii(105,($2|0),($17|0));
                 $202 = __THREW__; __THREW__ = 0;
                 $203 = $202&1;
                 if (!($203)) {
                  break;
                 }
                 $205 = ___cxa_find_matching_catch_2()|0;
                 $206 = tempRet0;
                 __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($17);
                 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($18);
                 $$4 = $206;$$4113 = $205;
                 break L89;
                }
               } while(0);
               __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($17);
               __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($18);
               $204 = ((($$4162215)) + 1|0);
               __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($12);
               $$0148 = $204;$$3141 = 0;
               label = 102;
               break L81;
              }
             }
            } while(0);
            if ((label|0) == 64) {
             $129 = ___cxa_find_matching_catch_2()|0;
             $130 = tempRet0;
             $$4 = $130;$$4113 = $129;
            }
            __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($12);
            $$5 = $$4;$$5114 = $$4113;
            label = 106;
           }
          } while(0);
          if ((label|0) == 102) {
           __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($10);
           __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
           $$1149 = $$0148;$$4142 = $$3141;
           label = 103;
           break;
          }
          else if ((label|0) == 106) {
           __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($10);
           __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
           $$6 = $$5;$$6115 = $$5114;
           label = 107;
           break;
          }
         }
        }
       } while(0);
       if ((label|0) == 103) {
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
        $cond = ($$4142|0)==(0);
        if ($cond) {
         $$16 = $$1149;
         break L1;
        } else {
         break;
        }
       }
       else if ((label|0) == 107) {
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
        ___resumeException($$6115|0);
        // unreachable;
       }
      }
     }
    } while(0);
    $$16 = $0;
   } else {
    $$16 = $0;
   }
  } else {
   $$16 = $0;
  }
 } while(0);
 STACKTOP = sp;return ($$16|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_125parse_noexcept_expressionINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i18 = 0, $$015 = 0, $$016 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i$i = 0, $exitcond$i$i$i19 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = sp + 37|0;
 $4 = sp + 36|0;
 $5 = sp + 24|0;
 $6 = sp + 12|0;
 $7 = sp;
 $8 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
 $9 = ($8|0)==($0|0);
 L1: do {
  if ($9) {
   $$016 = $0;
  } else {
   $10 = HEAP32[$2>>2]|0;
   $11 = ((($2)) + 4|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($10|0)==($12|0);
   if ($13) {
    $$016 = $0;
   } else {
    $14 = ((($12)) + -24|0);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($7,$14);
    __THREW__ = 0;
    $15 = (invoke_iiii(97,($7|0),0,(7839|0))|0);
    $16 = __THREW__; __THREW__ = 0;
    $17 = $16&1;
    do {
     if ($17) {
      $38 = ___cxa_find_matching_catch_2()|0;
      $39 = tempRet0;
      $$0 = $39;$$015 = $38;
     } else {
      ;HEAP32[$6>>2]=HEAP32[$7>>2]|0;HEAP32[$6+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$7+8>>2]|0;
      $$0$i$i$i = 0;
      while(1) {
       $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
       if ($exitcond$i$i$i) {
        break;
       }
       $18 = (($7) + ($$0$i$i$i<<2)|0);
       HEAP32[$18>>2] = 0;
       $19 = (($$0$i$i$i) + 1)|0;
       $$0$i$i$i = $19;
      }
      __THREW__ = 0;
      $20 = (invoke_iii(95,($6|0),(7566|0))|0);
      $21 = __THREW__; __THREW__ = 0;
      $22 = $21&1;
      if ($22) {
       $40 = ___cxa_find_matching_catch_2()|0;
       $41 = tempRet0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
       $$0 = $41;$$015 = $40;
       break;
      }
      ;HEAP32[$5>>2]=HEAP32[$6>>2]|0;HEAP32[$5+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$6+8>>2]|0;
      $$0$i$i$i18 = 0;
      while(1) {
       $exitcond$i$i$i19 = ($$0$i$i$i18|0)==(3);
       if ($exitcond$i$i$i19) {
        break;
       }
       $23 = (($6) + ($$0$i$i$i18<<2)|0);
       HEAP32[$23>>2] = 0;
       $24 = (($$0$i$i$i18) + 1)|0;
       $$0$i$i$i18 = $24;
      }
      $25 = HEAP32[$11>>2]|0;
      $26 = ((($25)) + -24|0);
      $27 = ((($26)) + 11|0);
      $28 = HEAP8[$27>>0]|0;
      $29 = ($28<<24>>24)<(0);
      if ($29) {
       $30 = HEAP32[$26>>2]|0;
       HEAP8[$3>>0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($30,$3);
       $31 = ((($25)) + -20|0);
       HEAP32[$31>>2] = 0;
      } else {
       HEAP8[$4>>0] = 0;
       __ZNSt3__211char_traitsIcE6assignERcRKc($26,$4);
       HEAP8[$27>>0] = 0;
      }
      __THREW__ = 0;
      invoke_vi(92,($26|0));
      $32 = __THREW__; __THREW__ = 0;
      $33 = $32&1;
      if ($33) {
       $34 = ___cxa_find_matching_catch_3(0|0)|0;
       $35 = tempRet0;
       ___clang_call_terminate($34);
       // unreachable;
      }
      ;HEAP32[$26>>2]=HEAP32[$5>>2]|0;HEAP32[$26+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$26+8>>2]=HEAP32[$5+8>>2]|0;
      $$0$i$i$i$i = 0;
      while(1) {
       $exitcond$i$i$i$i = ($$0$i$i$i$i|0)==(3);
       if ($exitcond$i$i$i$i) {
        break;
       }
       $36 = (($5) + ($$0$i$i$i$i<<2)|0);
       HEAP32[$36>>2] = 0;
       $37 = (($$0$i$i$i$i) + 1)|0;
       $$0$i$i$i$i = $37;
      }
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
      $$016 = $8;
      break L1;
     }
    } while(0);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
    ___resumeException($$015|0);
    // unreachable;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$016|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_116parse_arrow_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$3 = 0, $$pre$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = $1;
 $5 = $0;
 $6 = (($4) - ($5))|0;
 $7 = ($6|0)>(2);
 do {
  if ($7) {
   $8 = HEAP8[$0>>0]|0;
   $9 = ($8<<24>>24)==(112);
   if ($9) {
    $10 = ((($0)) + 1|0);
    $11 = HEAP8[$10>>0]|0;
    $12 = ($11<<24>>24)==(116);
    if ($12) {
     $13 = ((($0)) + 2|0);
     $14 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($13,$1,$2)|0);
     $15 = ($14|0)==($13|0);
     if ($15) {
      $$3 = $0;
     } else {
      $16 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($14,$1,$2)|0);
      $17 = ($16|0)==($14|0);
      if ($17) {
       $$3 = $0;
      } else {
       $18 = ((($2)) + 4|0);
       $19 = HEAP32[$18>>2]|0;
       $20 = HEAP32[$2>>2]|0;
       $21 = (($19) - ($20))|0;
       $22 = (($21|0) / 24)&-1;
       $23 = ($22>>>0)<(2);
       if ($23) {
        $$3 = $0;
       } else {
        $24 = $19;
        $25 = ((($24)) + -24|0);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3,$25);
        $26 = HEAP32[$18>>2]|0;
        $27 = ((($26)) + -24|0);
        $29 = $26;
        while(1) {
         $28 = ($29|0)==($27|0);
         if ($28) {
          break;
         }
         $30 = ((($29)) + -24|0);
         HEAP32[$18>>2] = $30;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($30);
         $$pre$i = HEAP32[$18>>2]|0;
         $29 = $$pre$i;
        }
        $31 = ((($26)) + -48|0);
        __THREW__ = 0;
        (invoke_iii(95,($31|0),(7836|0))|0);
        $32 = __THREW__; __THREW__ = 0;
        $33 = $32&1;
        if (!($33)) {
         $34 = HEAP32[$18>>2]|0;
         $35 = ((($34)) + -24|0);
         $36 = ((($3)) + 11|0);
         $37 = HEAP8[$36>>0]|0;
         $38 = ($37<<24>>24)<(0);
         $39 = HEAP32[$3>>2]|0;
         $40 = $38 ? $39 : $3;
         $41 = ((($3)) + 4|0);
         $42 = HEAP32[$41>>2]|0;
         $43 = $37&255;
         $44 = $38 ? $42 : $43;
         __THREW__ = 0;
         (invoke_iiii(88,($35|0),($40|0),($44|0))|0);
         $45 = __THREW__; __THREW__ = 0;
         $46 = $45&1;
         if (!($46)) {
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
          $$3 = $16;
          break;
         }
        }
        $47 = ___cxa_find_matching_catch_2()|0;
        $48 = tempRet0;
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
        ___resumeException($47|0);
        // unreachable;
       }
      }
     }
    } else {
     $$3 = $0;
    }
   } else {
    $$3 = $0;
   }
  } else {
   $$3 = $0;
  }
 } while(0);
 STACKTOP = sp;return ($$3|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_127parse_reinterpret_cast_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i$i = 0, $$0$i$i$i47 = 0, $$0$i$i$i50 = 0, $$0$i$i$i53 = 0, $$1 = 0, $$132 = 0, $$2 = 0, $$233 = 0, $$3 = 0, $$334 = 0, $$341 = 0, $$4 = 0, $$435 = 0, $$pre$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i48 = 0, $exitcond$i$i$i51 = 0, $exitcond$i$i$i54 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $3 = sp + 88|0;
 $4 = sp + 64|0;
 $5 = sp + 48|0;
 $6 = sp + 36|0;
 $7 = sp + 24|0;
 $8 = sp + 12|0;
 $9 = sp;
 $10 = $1;
 $11 = $0;
 $12 = (($10) - ($11))|0;
 $13 = ($12|0)>(2);
 L1: do {
  if ($13) {
   $14 = HEAP8[$0>>0]|0;
   $15 = ($14<<24>>24)==(114);
   if ($15) {
    $16 = ((($0)) + 1|0);
    $17 = HEAP8[$16>>0]|0;
    $18 = ($17<<24>>24)==(99);
    if ($18) {
     $19 = ((($0)) + 2|0);
     $20 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($19,$1,$2)|0);
     $21 = ($20|0)==($19|0);
     if ($21) {
      $$341 = $0;
     } else {
      $22 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($20,$1,$2)|0);
      $23 = ($22|0)==($20|0);
      if ($23) {
       $$341 = $0;
      } else {
       $24 = ((($2)) + 4|0);
       $25 = HEAP32[$24>>2]|0;
       $26 = HEAP32[$2>>2]|0;
       $27 = (($25) - ($26))|0;
       $28 = (($27|0) / 24)&-1;
       $29 = ($28>>>0)<(2);
       if ($29) {
        $$341 = $0;
       } else {
        $30 = $25;
        $31 = ((($30)) + -24|0);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3,$31);
        $32 = HEAP32[$24>>2]|0;
        $33 = ((($32)) + -24|0);
        $35 = $32;
        while(1) {
         $34 = ($35|0)==($33|0);
         if ($34) {
          break;
         }
         $36 = ((($35)) + -24|0);
         HEAP32[$24>>2] = $36;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($36);
         $$pre$i = HEAP32[$24>>2]|0;
         $35 = $$pre$i;
        }
        $37 = ((($32)) + -48|0);
        __THREW__ = 0;
        invoke_vii(96,($9|0),($37|0));
        $38 = __THREW__; __THREW__ = 0;
        $39 = $38&1;
        if ($39) {
         $71 = ___cxa_find_matching_catch_2()|0;
         $72 = tempRet0;
         $$4 = $72;$$435 = $71;
        } else {
         __THREW__ = 0;
         $40 = (invoke_iiii(97,($9|0),0,(7818|0))|0);
         $41 = __THREW__; __THREW__ = 0;
         $42 = $41&1;
         if ($42) {
          $73 = ___cxa_find_matching_catch_2()|0;
          $74 = tempRet0;
          $$3 = $74;$$334 = $73;
         } else {
          ;HEAP32[$8>>2]=HEAP32[$9>>2]|0;HEAP32[$8+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$9+8>>2]|0;
          $$0$i$i$i = 0;
          while(1) {
           $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
           if ($exitcond$i$i$i) {
            break;
           }
           $43 = (($9) + ($$0$i$i$i<<2)|0);
           HEAP32[$43>>2] = 0;
           $44 = (($$0$i$i$i) + 1)|0;
           $$0$i$i$i = $44;
          }
          __THREW__ = 0;
          $45 = (invoke_iii(95,($8|0),(7815|0))|0);
          $46 = __THREW__; __THREW__ = 0;
          $47 = $46&1;
          if ($47) {
           $75 = ___cxa_find_matching_catch_2()|0;
           $76 = tempRet0;
           $$2 = $76;$$233 = $75;
          } else {
           ;HEAP32[$7>>2]=HEAP32[$8>>2]|0;HEAP32[$7+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$8+8>>2]|0;
           $$0$i$i$i47 = 0;
           while(1) {
            $exitcond$i$i$i48 = ($$0$i$i$i47|0)==(3);
            if ($exitcond$i$i$i48) {
             break;
            }
            $48 = (($8) + ($$0$i$i$i47<<2)|0);
            HEAP32[$48>>2] = 0;
            $49 = (($$0$i$i$i47) + 1)|0;
            $$0$i$i$i47 = $49;
           }
           $50 = ((($3)) + 11|0);
           $51 = HEAP8[$50>>0]|0;
           $52 = ($51<<24>>24)<(0);
           $53 = HEAP32[$3>>2]|0;
           $54 = $52 ? $53 : $3;
           $55 = ((($3)) + 4|0);
           $56 = HEAP32[$55>>2]|0;
           $57 = $51&255;
           $58 = $52 ? $56 : $57;
           __THREW__ = 0;
           $59 = (invoke_iiii(88,($7|0),($54|0),($58|0))|0);
           $60 = __THREW__; __THREW__ = 0;
           $61 = $60&1;
           do {
            if ($61) {
             $77 = ___cxa_find_matching_catch_2()|0;
             $78 = tempRet0;
             $$1 = $78;$$132 = $77;
            } else {
             ;HEAP32[$6>>2]=HEAP32[$7>>2]|0;HEAP32[$6+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$7+8>>2]|0;
             $$0$i$i$i50 = 0;
             while(1) {
              $exitcond$i$i$i51 = ($$0$i$i$i50|0)==(3);
              if ($exitcond$i$i$i51) {
               break;
              }
              $62 = (($7) + ($$0$i$i$i50<<2)|0);
              HEAP32[$62>>2] = 0;
              $63 = (($$0$i$i$i50) + 1)|0;
              $$0$i$i$i50 = $63;
             }
             __THREW__ = 0;
             $64 = (invoke_iii(95,($6|0),(7566|0))|0);
             $65 = __THREW__; __THREW__ = 0;
             $66 = $65&1;
             if ($66) {
              $79 = ___cxa_find_matching_catch_2()|0;
              $80 = tempRet0;
              __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
              $$1 = $80;$$132 = $79;
              break;
             }
             ;HEAP32[$5>>2]=HEAP32[$6>>2]|0;HEAP32[$5+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$6+8>>2]|0;
             $$0$i$i$i53 = 0;
             while(1) {
              $exitcond$i$i$i54 = ($$0$i$i$i53|0)==(3);
              if ($exitcond$i$i$i54) {
               break;
              }
              $67 = (($6) + ($$0$i$i$i53<<2)|0);
              HEAP32[$67>>2] = 0;
              $68 = (($$0$i$i$i53) + 1)|0;
              $$0$i$i$i53 = $68;
             }
             __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($4,$5);
             $69 = HEAP32[$24>>2]|0;
             $70 = ((($69)) + -24|0);
             __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($70,$4);
             __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
             __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
             __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
             __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
             __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
             __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
             __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
             $$341 = $22;
             break L1;
            }
           } while(0);
           __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
           $$2 = $$1;$$233 = $$132;
          }
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
          $$3 = $$2;$$334 = $$233;
         }
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
         $$4 = $$3;$$435 = $$334;
        }
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
        ___resumeException($$435|0);
        // unreachable;
       }
      }
     }
    } else {
     $$341 = $0;
    }
   } else {
    $$341 = $0;
   }
  } else {
   $$341 = $0;
  }
 } while(0);
 STACKTOP = sp;return ($$341|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_122parse_static_cast_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i$i = 0, $$0$i$i$i47 = 0, $$0$i$i$i50 = 0, $$0$i$i$i53 = 0, $$1 = 0, $$132 = 0, $$2 = 0, $$233 = 0, $$3 = 0, $$334 = 0, $$341 = 0, $$4 = 0, $$435 = 0, $$pre$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i48 = 0, $exitcond$i$i$i51 = 0, $exitcond$i$i$i54 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $3 = sp + 88|0;
 $4 = sp + 64|0;
 $5 = sp + 48|0;
 $6 = sp + 36|0;
 $7 = sp + 24|0;
 $8 = sp + 12|0;
 $9 = sp;
 $10 = $1;
 $11 = $0;
 $12 = (($10) - ($11))|0;
 $13 = ($12|0)>(2);
 L1: do {
  if ($13) {
   $14 = HEAP8[$0>>0]|0;
   $15 = ($14<<24>>24)==(115);
   if ($15) {
    $16 = ((($0)) + 1|0);
    $17 = HEAP8[$16>>0]|0;
    $18 = ($17<<24>>24)==(99);
    if ($18) {
     $19 = ((($0)) + 2|0);
     $20 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($19,$1,$2)|0);
     $21 = ($20|0)==($19|0);
     if ($21) {
      $$341 = $0;
     } else {
      $22 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($20,$1,$2)|0);
      $23 = ($22|0)==($20|0);
      if ($23) {
       $$341 = $0;
      } else {
       $24 = ((($2)) + 4|0);
       $25 = HEAP32[$24>>2]|0;
       $26 = HEAP32[$2>>2]|0;
       $27 = (($25) - ($26))|0;
       $28 = (($27|0) / 24)&-1;
       $29 = ($28>>>0)<(2);
       if ($29) {
        $$341 = $0;
       } else {
        $30 = $25;
        $31 = ((($30)) + -24|0);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3,$31);
        $32 = HEAP32[$24>>2]|0;
        $33 = ((($32)) + -24|0);
        $35 = $32;
        while(1) {
         $34 = ($35|0)==($33|0);
         if ($34) {
          break;
         }
         $36 = ((($35)) + -24|0);
         HEAP32[$24>>2] = $36;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($36);
         $$pre$i = HEAP32[$24>>2]|0;
         $35 = $$pre$i;
        }
        $37 = ((($32)) + -48|0);
        __THREW__ = 0;
        invoke_vii(96,($9|0),($37|0));
        $38 = __THREW__; __THREW__ = 0;
        $39 = $38&1;
        if ($39) {
         $71 = ___cxa_find_matching_catch_2()|0;
         $72 = tempRet0;
         $$4 = $72;$$435 = $71;
        } else {
         __THREW__ = 0;
         $40 = (invoke_iiii(97,($9|0),0,(7802|0))|0);
         $41 = __THREW__; __THREW__ = 0;
         $42 = $41&1;
         if ($42) {
          $73 = ___cxa_find_matching_catch_2()|0;
          $74 = tempRet0;
          $$3 = $74;$$334 = $73;
         } else {
          ;HEAP32[$8>>2]=HEAP32[$9>>2]|0;HEAP32[$8+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$9+8>>2]|0;
          $$0$i$i$i = 0;
          while(1) {
           $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
           if ($exitcond$i$i$i) {
            break;
           }
           $43 = (($9) + ($$0$i$i$i<<2)|0);
           HEAP32[$43>>2] = 0;
           $44 = (($$0$i$i$i) + 1)|0;
           $$0$i$i$i = $44;
          }
          __THREW__ = 0;
          $45 = (invoke_iii(95,($8|0),(7815|0))|0);
          $46 = __THREW__; __THREW__ = 0;
          $47 = $46&1;
          if ($47) {
           $75 = ___cxa_find_matching_catch_2()|0;
           $76 = tempRet0;
           $$2 = $76;$$233 = $75;
          } else {
           ;HEAP32[$7>>2]=HEAP32[$8>>2]|0;HEAP32[$7+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$8+8>>2]|0;
           $$0$i$i$i47 = 0;
           while(1) {
            $exitcond$i$i$i48 = ($$0$i$i$i47|0)==(3);
            if ($exitcond$i$i$i48) {
             break;
            }
            $48 = (($8) + ($$0$i$i$i47<<2)|0);
            HEAP32[$48>>2] = 0;
            $49 = (($$0$i$i$i47) + 1)|0;
            $$0$i$i$i47 = $49;
           }
           $50 = ((($3)) + 11|0);
           $51 = HEAP8[$50>>0]|0;
           $52 = ($51<<24>>24)<(0);
           $53 = HEAP32[$3>>2]|0;
           $54 = $52 ? $53 : $3;
           $55 = ((($3)) + 4|0);
           $56 = HEAP32[$55>>2]|0;
           $57 = $51&255;
           $58 = $52 ? $56 : $57;
           __THREW__ = 0;
           $59 = (invoke_iiii(88,($7|0),($54|0),($58|0))|0);
           $60 = __THREW__; __THREW__ = 0;
           $61 = $60&1;
           do {
            if ($61) {
             $77 = ___cxa_find_matching_catch_2()|0;
             $78 = tempRet0;
             $$1 = $78;$$132 = $77;
            } else {
             ;HEAP32[$6>>2]=HEAP32[$7>>2]|0;HEAP32[$6+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$7+8>>2]|0;
             $$0$i$i$i50 = 0;
             while(1) {
              $exitcond$i$i$i51 = ($$0$i$i$i50|0)==(3);
              if ($exitcond$i$i$i51) {
               break;
              }
              $62 = (($7) + ($$0$i$i$i50<<2)|0);
              HEAP32[$62>>2] = 0;
              $63 = (($$0$i$i$i50) + 1)|0;
              $$0$i$i$i50 = $63;
             }
             __THREW__ = 0;
             $64 = (invoke_iii(95,($6|0),(7566|0))|0);
             $65 = __THREW__; __THREW__ = 0;
             $66 = $65&1;
             if ($66) {
              $79 = ___cxa_find_matching_catch_2()|0;
              $80 = tempRet0;
              __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
              $$1 = $80;$$132 = $79;
              break;
             }
             ;HEAP32[$5>>2]=HEAP32[$6>>2]|0;HEAP32[$5+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$6+8>>2]|0;
             $$0$i$i$i53 = 0;
             while(1) {
              $exitcond$i$i$i54 = ($$0$i$i$i53|0)==(3);
              if ($exitcond$i$i$i54) {
               break;
              }
              $67 = (($6) + ($$0$i$i$i53<<2)|0);
              HEAP32[$67>>2] = 0;
              $68 = (($$0$i$i$i53) + 1)|0;
              $$0$i$i$i53 = $68;
             }
             __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($4,$5);
             $69 = HEAP32[$24>>2]|0;
             $70 = ((($69)) + -24|0);
             __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($70,$4);
             __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
             __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
             __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
             __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
             __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
             __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
             __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
             $$341 = $22;
             break L1;
            }
           } while(0);
           __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
           $$2 = $$1;$$233 = $$132;
          }
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
          $$3 = $$2;$$334 = $$233;
         }
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
         $$4 = $$3;$$435 = $$334;
        }
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
        ___resumeException($$435|0);
        // unreachable;
       }
      }
     }
    } else {
     $$341 = $0;
    }
   } else {
    $$341 = $0;
   }
  } else {
   $$341 = $0;
  }
 } while(0);
 STACKTOP = sp;return ($$341|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_120parse_pack_expansionINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1;
 $4 = $0;
 $5 = (($3) - ($4))|0;
 $6 = ($5|0)>(2);
 if ($6) {
  $7 = HEAP8[$0>>0]|0;
  $8 = ($7<<24>>24)==(115);
  if ($8) {
   $9 = ((($0)) + 1|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = ($10<<24>>24)==(112);
   if ($11) {
    $12 = ((($0)) + 2|0);
    $13 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($12,$1,$2)|0);
    $14 = ($13|0)==($12|0);
    $$ = $14 ? $0 : $13;
    $$1 = $$;
   } else {
    $$1 = $0;
   }
  } else {
   $$1 = $0;
  }
 } else {
  $$1 = $0;
 }
 return ($$1|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_122parse_sizeof_type_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i$i = 0, $$0$i$i$i27 = 0, $$1 = 0, $$121 = 0, $$124 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i28 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = sp + 40|0;
 $4 = sp + 24|0;
 $5 = sp + 12|0;
 $6 = sp;
 $7 = $1;
 $8 = $0;
 $9 = (($7) - ($8))|0;
 $10 = ($9|0)>(2);
 L1: do {
  if ($10) {
   $11 = HEAP8[$0>>0]|0;
   $12 = ($11<<24>>24)==(115);
   if ($12) {
    $13 = ((($0)) + 1|0);
    $14 = HEAP8[$13>>0]|0;
    $15 = ($14<<24>>24)==(116);
    if ($15) {
     $16 = ((($0)) + 2|0);
     $17 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($16,$1,$2)|0);
     $18 = ($17|0)==($16|0);
     if ($18) {
      $$124 = $0;
     } else {
      $19 = HEAP32[$2>>2]|0;
      $20 = ((($2)) + 4|0);
      $21 = HEAP32[$20>>2]|0;
      $22 = ($19|0)==($21|0);
      if ($22) {
       $$124 = $0;
      } else {
       $23 = ((($21)) + -24|0);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($6,$23);
       __THREW__ = 0;
       $24 = (invoke_iiii(97,($6|0),0,(7793|0))|0);
       $25 = __THREW__; __THREW__ = 0;
       $26 = $25&1;
       do {
        if ($26) {
         $36 = ___cxa_find_matching_catch_2()|0;
         $37 = tempRet0;
         $$1 = $37;$$121 = $36;
        } else {
         ;HEAP32[$5>>2]=HEAP32[$6>>2]|0;HEAP32[$5+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$6+8>>2]|0;
         $$0$i$i$i = 0;
         while(1) {
          $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
          if ($exitcond$i$i$i) {
           break;
          }
          $27 = (($6) + ($$0$i$i$i<<2)|0);
          HEAP32[$27>>2] = 0;
          $28 = (($$0$i$i$i) + 1)|0;
          $$0$i$i$i = $28;
         }
         __THREW__ = 0;
         $29 = (invoke_iii(95,($5|0),(7566|0))|0);
         $30 = __THREW__; __THREW__ = 0;
         $31 = $30&1;
         if ($31) {
          $38 = ___cxa_find_matching_catch_2()|0;
          $39 = tempRet0;
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
          $$1 = $39;$$121 = $38;
          break;
         }
         ;HEAP32[$4>>2]=HEAP32[$5>>2]|0;HEAP32[$4+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$5+8>>2]|0;
         $$0$i$i$i27 = 0;
         while(1) {
          $exitcond$i$i$i28 = ($$0$i$i$i27|0)==(3);
          if ($exitcond$i$i$i28) {
           break;
          }
          $32 = (($5) + ($$0$i$i$i27<<2)|0);
          HEAP32[$32>>2] = 0;
          $33 = (($$0$i$i$i27) + 1)|0;
          $$0$i$i$i27 = $33;
         }
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($3,$4);
         $34 = HEAP32[$20>>2]|0;
         $35 = ((($34)) + -24|0);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($35,$3);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
         $$124 = $17;
         break L1;
        }
       } while(0);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
       ___resumeException($$121|0);
       // unreachable;
      }
     }
    } else {
     $$124 = $0;
    }
   } else {
    $$124 = $0;
   }
  } else {
   $$124 = $0;
  }
 } while(0);
 STACKTOP = sp;return ($$124|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_122parse_sizeof_expr_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i$i = 0, $$0$i$i$i27 = 0, $$1 = 0, $$121 = 0, $$124 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i28 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = sp + 40|0;
 $4 = sp + 24|0;
 $5 = sp + 12|0;
 $6 = sp;
 $7 = $1;
 $8 = $0;
 $9 = (($7) - ($8))|0;
 $10 = ($9|0)>(2);
 L1: do {
  if ($10) {
   $11 = HEAP8[$0>>0]|0;
   $12 = ($11<<24>>24)==(115);
   if ($12) {
    $13 = ((($0)) + 1|0);
    $14 = HEAP8[$13>>0]|0;
    $15 = ($14<<24>>24)==(122);
    if ($15) {
     $16 = ((($0)) + 2|0);
     $17 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($16,$1,$2)|0);
     $18 = ($17|0)==($16|0);
     if ($18) {
      $$124 = $0;
     } else {
      $19 = HEAP32[$2>>2]|0;
      $20 = ((($2)) + 4|0);
      $21 = HEAP32[$20>>2]|0;
      $22 = ($19|0)==($21|0);
      if ($22) {
       $$124 = $0;
      } else {
       $23 = ((($21)) + -24|0);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($6,$23);
       __THREW__ = 0;
       $24 = (invoke_iiii(97,($6|0),0,(7793|0))|0);
       $25 = __THREW__; __THREW__ = 0;
       $26 = $25&1;
       do {
        if ($26) {
         $36 = ___cxa_find_matching_catch_2()|0;
         $37 = tempRet0;
         $$1 = $37;$$121 = $36;
        } else {
         ;HEAP32[$5>>2]=HEAP32[$6>>2]|0;HEAP32[$5+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$6+8>>2]|0;
         $$0$i$i$i = 0;
         while(1) {
          $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
          if ($exitcond$i$i$i) {
           break;
          }
          $27 = (($6) + ($$0$i$i$i<<2)|0);
          HEAP32[$27>>2] = 0;
          $28 = (($$0$i$i$i) + 1)|0;
          $$0$i$i$i = $28;
         }
         __THREW__ = 0;
         $29 = (invoke_iii(95,($5|0),(7566|0))|0);
         $30 = __THREW__; __THREW__ = 0;
         $31 = $30&1;
         if ($31) {
          $38 = ___cxa_find_matching_catch_2()|0;
          $39 = tempRet0;
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
          $$1 = $39;$$121 = $38;
          break;
         }
         ;HEAP32[$4>>2]=HEAP32[$5>>2]|0;HEAP32[$4+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$5+8>>2]|0;
         $$0$i$i$i27 = 0;
         while(1) {
          $exitcond$i$i$i28 = ($$0$i$i$i27|0)==(3);
          if ($exitcond$i$i$i28) {
           break;
          }
          $32 = (($5) + ($$0$i$i$i27<<2)|0);
          HEAP32[$32>>2] = 0;
          $33 = (($$0$i$i$i27) + 1)|0;
          $$0$i$i$i27 = $33;
         }
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($3,$4);
         $34 = HEAP32[$20>>2]|0;
         $35 = ((($34)) + -24|0);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($35,$3);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
         $$124 = $17;
         break L1;
        }
       } while(0);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
       ___resumeException($$121|0);
       // unreachable;
      }
     }
    } else {
     $$124 = $0;
    }
   } else {
    $$124 = $0;
   }
  } else {
   $$124 = $0;
  }
 } while(0);
 STACKTOP = sp;return ($$124|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_128parse_sizeof_param_pack_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$041 = 0, $$045 = 0, $$045$in = 0, $$046 = 0, $$1 = 0, $$142 = 0, $$148 = 0, $$2 = 0, $$243 = 0, $$3 = 0, $$344 = 0, $$pre$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $exitcond$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $3 = sp + 76|0;
 $4 = sp + 64|0;
 $5 = sp + 52|0;
 $6 = sp + 40|0;
 $7 = sp + 16|0;
 $8 = sp;
 $9 = $1;
 $10 = $0;
 $11 = (($9) - ($10))|0;
 $12 = ($11|0)>(2);
 L1: do {
  if ($12) {
   $13 = HEAP8[$0>>0]|0;
   $14 = ($13<<24>>24)==(115);
   if ($14) {
    $15 = ((($0)) + 1|0);
    $16 = HEAP8[$15>>0]|0;
    $17 = ($16<<24>>24)==(90);
    if ($17) {
     $18 = ((($0)) + 2|0);
     $19 = HEAP8[$18>>0]|0;
     $20 = ($19<<24>>24)==(84);
     if ($20) {
      $21 = ((($2)) + 4|0);
      $22 = HEAP32[$21>>2]|0;
      $23 = HEAP32[$2>>2]|0;
      $24 = (($22) - ($23))|0;
      $25 = (($24|0) / 24)&-1;
      $26 = (__ZN10__cxxabiv112_GLOBAL__N_120parse_template_paramINS0_2DbEEEPKcS4_S4_RT_($18,$1,$2)|0);
      $27 = HEAP32[$21>>2]|0;
      $28 = HEAP32[$2>>2]|0;
      $29 = (($27) - ($28))|0;
      $30 = (($29|0) / 24)&-1;
      $31 = ($26|0)==($18|0);
      if ($31) {
       $$148 = $0;
      } else {
       ;HEAP32[$3>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
       $32 = (__ZNSt3__211char_traitsIcE6lengthEPKc(7779)|0);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($3,7779,$32);
       $33 = ($25|0)==($30|0);
       L7: do {
        if ($33) {
         label = 26;
        } else {
         $34 = HEAP32[$2>>2]|0;
         $35 = (($34) + (($25*24)|0)|0);
         __THREW__ = 0;
         invoke_vii(96,($4|0),($35|0));
         $36 = __THREW__; __THREW__ = 0;
         $37 = $36&1;
         do {
          if ($37) {
           $70 = ___cxa_find_matching_catch_2()|0;
           $71 = tempRet0;
           $$0 = $71;$$041 = $70;
          } else {
           $38 = ((($4)) + 11|0);
           $39 = HEAP8[$38>>0]|0;
           $40 = ($39<<24>>24)<(0);
           $41 = HEAP32[$4>>2]|0;
           $42 = $40 ? $41 : $4;
           $43 = ((($4)) + 4|0);
           $44 = HEAP32[$43>>2]|0;
           $45 = $39&255;
           $46 = $40 ? $44 : $45;
           __THREW__ = 0;
           (invoke_iiii(88,($3|0),($42|0),($46|0))|0);
           $47 = __THREW__; __THREW__ = 0;
           $48 = $47&1;
           if ($48) {
            $72 = ___cxa_find_matching_catch_2()|0;
            $73 = tempRet0;
            __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
            $$0 = $73;$$041 = $72;
            break;
           }
           __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
           $49 = ((($5)) + 11|0);
           $50 = ((($5)) + 4|0);
           $$045$in = $25;
           while(1) {
            $$045 = (($$045$in) + 1)|0;
            $51 = ($$045|0)==($30|0);
            if ($51) {
             label = 26;
             break L7;
            }
            $52 = HEAP32[$2>>2]|0;
            $53 = (($52) + (($$045*24)|0)|0);
            __THREW__ = 0;
            invoke_vii(96,($6|0),($53|0));
            $54 = __THREW__; __THREW__ = 0;
            $55 = $54&1;
            if ($55) {
             label = 21;
             break;
            }
            __THREW__ = 0;
            $56 = (invoke_iiii(97,($6|0),0,(7790|0))|0);
            $57 = __THREW__; __THREW__ = 0;
            $58 = $57&1;
            if ($58) {
             label = 22;
             break;
            }
            ;HEAP32[$5>>2]=HEAP32[$6>>2]|0;HEAP32[$5+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$6+8>>2]|0;
            $$0$i$i$i = 0;
            while(1) {
             $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
             if ($exitcond$i$i$i) {
              break;
             }
             $59 = (($6) + ($$0$i$i$i<<2)|0);
             HEAP32[$59>>2] = 0;
             $60 = (($$0$i$i$i) + 1)|0;
             $$0$i$i$i = $60;
            }
            $61 = HEAP8[$49>>0]|0;
            $62 = ($61<<24>>24)<(0);
            $63 = HEAP32[$5>>2]|0;
            $64 = $62 ? $63 : $5;
            $65 = HEAP32[$50>>2]|0;
            $66 = $61&255;
            $67 = $62 ? $65 : $66;
            __THREW__ = 0;
            (invoke_iiii(88,($3|0),($64|0),($67|0))|0);
            $68 = __THREW__; __THREW__ = 0;
            $69 = $68&1;
            if ($69) {
             label = 23;
             break;
            }
            __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
            __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
            $$045$in = $$045;
           }
           if ((label|0) == 21) {
            $74 = ___cxa_find_matching_catch_2()|0;
            $75 = tempRet0;
            $$2 = $75;$$243 = $74;
           }
           else if ((label|0) == 22) {
            $76 = ___cxa_find_matching_catch_2()|0;
            $77 = tempRet0;
            $$1 = $77;$$142 = $76;
            label = 24;
           }
           else if ((label|0) == 23) {
            $78 = ___cxa_find_matching_catch_2()|0;
            $79 = tempRet0;
            __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
            $$1 = $79;$$142 = $78;
            label = 24;
           }
           if ((label|0) == 24) {
            __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
            $$2 = $$1;$$243 = $$142;
           }
           $$3 = $$2;$$344 = $$243;
           break L7;
          }
         } while(0);
         $$3 = $$0;$$344 = $$041;
        }
       } while(0);
       do {
        if ((label|0) == 26) {
         __THREW__ = 0;
         (invoke_iii(95,($3|0),(7566|0))|0);
         $80 = __THREW__; __THREW__ = 0;
         $81 = $80&1;
         if ($81) {
          $89 = ___cxa_find_matching_catch_2()|0;
          $90 = tempRet0;
          $$3 = $90;$$344 = $89;
          break;
         } else {
          $$046 = $30;
         }
         while(1) {
          $82 = ($$046|0)==($25|0);
          if ($82) {
           break;
          }
          $83 = HEAP32[$21>>2]|0;
          $84 = ((($83)) + -24|0);
          $86 = $83;
          while(1) {
           $85 = ($86|0)==($84|0);
           if ($85) {
            break;
           }
           $87 = ((($86)) + -24|0);
           HEAP32[$21>>2] = $87;
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($87);
           $$pre$i = HEAP32[$21>>2]|0;
           $86 = $$pre$i;
          }
          $88 = (($$046) + -1)|0;
          $$046 = $88;
         }
         ;HEAP32[$8>>2]=HEAP32[$3>>2]|0;HEAP32[$8+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$3+8>>2]|0;
         $$0$i$i = 0;
         while(1) {
          $exitcond$i$i = ($$0$i$i|0)==(3);
          if ($exitcond$i$i) {
           break;
          }
          $91 = (($3) + ($$0$i$i<<2)|0);
          HEAP32[$91>>2] = 0;
          $92 = (($$0$i$i) + 1)|0;
          $$0$i$i = $92;
         }
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($7,$8);
         $93 = HEAP32[$21>>2]|0;
         $94 = ((($2)) + 8|0);
         $95 = HEAP32[$94>>2]|0;
         $96 = ($93>>>0)<($95>>>0);
         if ($96) {
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($93,$7);
          $97 = HEAP32[$21>>2]|0;
          $98 = ((($97)) + 24|0);
          HEAP32[$21>>2] = $98;
         } else {
          __THREW__ = 0;
          invoke_vii(105,($2|0),($7|0));
          $99 = __THREW__; __THREW__ = 0;
          $100 = $99&1;
          if ($100) {
           $101 = ___cxa_find_matching_catch_2()|0;
           $102 = tempRet0;
           __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($7);
           __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
           $$3 = $102;$$344 = $101;
           break;
          }
         }
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($7);
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
         $$148 = $26;
         break L1;
        }
       } while(0);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
       ___resumeException($$344|0);
       // unreachable;
      }
     } else {
      $$148 = $0;
     }
    } else {
     $$148 = $0;
    }
   } else {
    $$148 = $0;
   }
  } else {
   $$148 = $0;
  }
 } while(0);
 STACKTOP = sp;return ($$148|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_137parse_sizeof_function_param_pack_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i$i = 0, $$0$i$i$i28 = 0, $$1 = 0, $$122 = 0, $$125 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i29 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = sp + 40|0;
 $4 = sp + 24|0;
 $5 = sp + 12|0;
 $6 = sp;
 $7 = $1;
 $8 = $0;
 $9 = (($7) - ($8))|0;
 $10 = ($9|0)>(2);
 L1: do {
  if ($10) {
   $11 = HEAP8[$0>>0]|0;
   $12 = ($11<<24>>24)==(115);
   if ($12) {
    $13 = ((($0)) + 1|0);
    $14 = HEAP8[$13>>0]|0;
    $15 = ($14<<24>>24)==(90);
    if ($15) {
     $16 = ((($0)) + 2|0);
     $17 = HEAP8[$16>>0]|0;
     $18 = ($17<<24>>24)==(102);
     if ($18) {
      $19 = (__ZN10__cxxabiv112_GLOBAL__N_120parse_function_paramINS0_2DbEEEPKcS4_S4_RT_($16,$1,$2)|0);
      $20 = ($19|0)==($16|0);
      if ($20) {
       $$125 = $0;
      } else {
       $21 = HEAP32[$2>>2]|0;
       $22 = ((($2)) + 4|0);
       $23 = HEAP32[$22>>2]|0;
       $24 = ($21|0)==($23|0);
       if ($24) {
        $$125 = $0;
       } else {
        $25 = ((($23)) + -24|0);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($6,$25);
        __THREW__ = 0;
        $26 = (invoke_iiii(97,($6|0),0,(7779|0))|0);
        $27 = __THREW__; __THREW__ = 0;
        $28 = $27&1;
        do {
         if ($28) {
          $38 = ___cxa_find_matching_catch_2()|0;
          $39 = tempRet0;
          $$1 = $39;$$122 = $38;
         } else {
          ;HEAP32[$5>>2]=HEAP32[$6>>2]|0;HEAP32[$5+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$6+8>>2]|0;
          $$0$i$i$i = 0;
          while(1) {
           $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
           if ($exitcond$i$i$i) {
            break;
           }
           $29 = (($6) + ($$0$i$i$i<<2)|0);
           HEAP32[$29>>2] = 0;
           $30 = (($$0$i$i$i) + 1)|0;
           $$0$i$i$i = $30;
          }
          __THREW__ = 0;
          $31 = (invoke_iii(95,($5|0),(7566|0))|0);
          $32 = __THREW__; __THREW__ = 0;
          $33 = $32&1;
          if ($33) {
           $40 = ___cxa_find_matching_catch_2()|0;
           $41 = tempRet0;
           __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
           $$1 = $41;$$122 = $40;
           break;
          }
          ;HEAP32[$4>>2]=HEAP32[$5>>2]|0;HEAP32[$4+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$5+8>>2]|0;
          $$0$i$i$i28 = 0;
          while(1) {
           $exitcond$i$i$i29 = ($$0$i$i$i28|0)==(3);
           if ($exitcond$i$i$i29) {
            break;
           }
           $34 = (($5) + ($$0$i$i$i28<<2)|0);
           HEAP32[$34>>2] = 0;
           $35 = (($$0$i$i$i28) + 1)|0;
           $$0$i$i$i28 = $35;
          }
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($3,$4);
          $36 = HEAP32[$22>>2]|0;
          $37 = ((($36)) + -24|0);
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($37,$3);
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
          $$125 = $19;
          break L1;
         }
        } while(0);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
        ___resumeException($$122|0);
        // unreachable;
       }
      }
     } else {
      $$125 = $0;
     }
    } else {
     $$125 = $0;
    }
   } else {
    $$125 = $0;
   }
  } else {
   $$125 = $0;
  }
 } while(0);
 STACKTOP = sp;return ($$125|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_117parse_typeid_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i$i = 0, $$0$i$i$i30 = 0, $$025 = 0, $$1 = 0, $$123 = 0, $$127 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i31 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = sp + 40|0;
 $4 = sp + 24|0;
 $5 = sp + 12|0;
 $6 = sp;
 $7 = $1;
 $8 = $0;
 $9 = (($7) - ($8))|0;
 $10 = ($9|0)>(2);
 L1: do {
  if ($10) {
   $11 = HEAP8[$0>>0]|0;
   $12 = ($11<<24>>24)==(116);
   if ($12) {
    $13 = ((($0)) + 1|0);
    $14 = HEAP8[$13>>0]|0;
    switch ($14<<24>>24) {
    case 101: case 105:  {
     break;
    }
    default: {
     $$127 = $0;
     break L1;
    }
    }
    $15 = ($14<<24>>24)==(101);
    $16 = ((($0)) + 2|0);
    if ($15) {
     $17 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($16,$1,$2)|0);
     $$025 = $17;
    } else {
     $18 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($16,$1,$2)|0);
     $$025 = $18;
    }
    $19 = ($$025|0)==($16|0);
    if ($19) {
     $$127 = $0;
    } else {
     $20 = HEAP32[$2>>2]|0;
     $21 = ((($2)) + 4|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ($20|0)==($22|0);
     if ($23) {
      $$127 = $0;
     } else {
      $24 = ((($22)) + -24|0);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($6,$24);
      __THREW__ = 0;
      $25 = (invoke_iiii(97,($6|0),0,(7771|0))|0);
      $26 = __THREW__; __THREW__ = 0;
      $27 = $26&1;
      do {
       if ($27) {
        $37 = ___cxa_find_matching_catch_2()|0;
        $38 = tempRet0;
        $$1 = $38;$$123 = $37;
       } else {
        ;HEAP32[$5>>2]=HEAP32[$6>>2]|0;HEAP32[$5+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$6+8>>2]|0;
        $$0$i$i$i = 0;
        while(1) {
         $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
         if ($exitcond$i$i$i) {
          break;
         }
         $28 = (($6) + ($$0$i$i$i<<2)|0);
         HEAP32[$28>>2] = 0;
         $29 = (($$0$i$i$i) + 1)|0;
         $$0$i$i$i = $29;
        }
        __THREW__ = 0;
        $30 = (invoke_iii(95,($5|0),(7566|0))|0);
        $31 = __THREW__; __THREW__ = 0;
        $32 = $31&1;
        if ($32) {
         $39 = ___cxa_find_matching_catch_2()|0;
         $40 = tempRet0;
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
         $$1 = $40;$$123 = $39;
         break;
        }
        ;HEAP32[$4>>2]=HEAP32[$5>>2]|0;HEAP32[$4+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$5+8>>2]|0;
        $$0$i$i$i30 = 0;
        while(1) {
         $exitcond$i$i$i31 = ($$0$i$i$i30|0)==(3);
         if ($exitcond$i$i$i31) {
          break;
         }
         $33 = (($5) + ($$0$i$i$i30<<2)|0);
         HEAP32[$33>>2] = 0;
         $34 = (($$0$i$i$i30) + 1)|0;
         $$0$i$i$i30 = $34;
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($3,$4);
        $35 = HEAP32[$21>>2]|0;
        $36 = ((($35)) + -24|0);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($36,$3);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
        $$127 = $$025;
        break L1;
       }
      } while(0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
      ___resumeException($$123|0);
      // unreachable;
     }
    }
   } else {
    $$127 = $0;
   }
  } else {
   $$127 = $0;
  }
 } while(0);
 STACKTOP = sp;return ($$127|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj6EEERAT__Kc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $4 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($0,$1,5);
 $2 = ((($0)) + 12|0);
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $3 = (($2) + ($$0$i$i<<2)|0);
  HEAP32[$3>>2] = 0;
  $4 = (($$0$i$i) + 1)|0;
  $$0$i$i = $4;
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_116parse_throw_exprINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i$i = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = sp + 24|0;
 $4 = sp + 12|0;
 $5 = sp;
 $6 = $1;
 $7 = $0;
 $8 = (($6) - ($7))|0;
 $9 = ($8|0)>(2);
 if ($9) {
  $10 = HEAP8[$0>>0]|0;
  $11 = ($10<<24>>24)==(116);
  if ($11) {
   $12 = ((($0)) + 1|0);
   $13 = HEAP8[$12>>0]|0;
   $14 = ($13<<24>>24)==(119);
   if ($14) {
    $15 = ((($0)) + 2|0);
    $16 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($15,$1,$2)|0);
    $17 = ($16|0)==($15|0);
    if ($17) {
     $$1 = $0;
    } else {
     $18 = HEAP32[$2>>2]|0;
     $19 = ((($2)) + 4|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($18|0)==($20|0);
     if ($21) {
      $$1 = $0;
     } else {
      $22 = ((($20)) + -24|0);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($5,$22);
      __THREW__ = 0;
      $23 = (invoke_iiii(97,($5|0),0,(7764|0))|0);
      $24 = __THREW__; __THREW__ = 0;
      $25 = $24&1;
      if ($25) {
       $30 = ___cxa_find_matching_catch_2()|0;
       $31 = tempRet0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
       ___resumeException($30|0);
       // unreachable;
      }
      ;HEAP32[$4>>2]=HEAP32[$5>>2]|0;HEAP32[$4+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$5+8>>2]|0;
      $$0$i$i$i = 0;
      while(1) {
       $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
       if ($exitcond$i$i$i) {
        break;
       }
       $26 = (($5) + ($$0$i$i$i<<2)|0);
       HEAP32[$26>>2] = 0;
       $27 = (($$0$i$i$i) + 1)|0;
       $$0$i$i$i = $27;
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($3,$4);
      $28 = HEAP32[$19>>2]|0;
      $29 = ((($28)) + -24|0);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairaSEOS1_($29,$3);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
      $$1 = $16;
     }
    }
   } else {
    $$1 = $0;
   }
  } else {
   $$1 = $0;
  }
 } else {
  $$1 = $0;
 }
 STACKTOP = sp;return ($$1|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__211char_traitsIcE6lengthEPKc($1)|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKcj($0,$1,$2);
 return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKcj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ((($0)) + 11|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)<(0);
 if ($6) {
  $7 = ((($0)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $8 & 2147483647;
  $phitmp$i = (($9) + -1)|0;
  $11 = $phitmp$i;
 } else {
  $11 = 10;
 }
 $10 = ($11>>>0)<($2>>>0);
 do {
  if ($10) {
   if ($6) {
    $19 = ((($0)) + 4|0);
    $20 = HEAP32[$19>>2]|0;
    $23 = $20;
   } else {
    $21 = $5&255;
    $23 = $21;
   }
   $22 = (($2) - ($11))|0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE21__grow_by_and_replaceEjjjjjjPKc($0,$11,$22,$23,0,$23,$2,$1);
  } else {
   if ($6) {
    $12 = HEAP32[$0>>2]|0;
    $13 = $12;
   } else {
    $13 = $0;
   }
   (__ZNSt3__211char_traitsIcE4moveEPcPKcj($13,$1,$2)|0);
   $14 = (($13) + ($2)|0);
   HEAP8[$3>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($14,$3);
   $15 = HEAP8[$4>>0]|0;
   $16 = ($15<<24>>24)<(0);
   if ($16) {
    $17 = ((($0)) + 4|0);
    HEAP32[$17>>2] = $2;
    break;
   } else {
    $18 = $2&255;
    HEAP8[$4>>0] = $18;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv112_GLOBAL__N_126parse_base_unresolved_nameINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$061 = 0, $$062 = 0, $$2 = 0, $$pre$i = 0, $$pre$i68 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 12|0;
 $4 = sp;
 $5 = $1;
 $6 = $0;
 $7 = (($5) - ($6))|0;
 $8 = ($7|0)>(1);
 L1: do {
  if ($8) {
   $9 = HEAP8[$0>>0]|0;
   $10 = ($9<<24>>24)==(111);
   L3: do {
    switch ($9<<24>>24) {
    case 100: case 111:  {
     $11 = ((($0)) + 1|0);
     $12 = HEAP8[$11>>0]|0;
     $13 = ($12<<24>>24)==(110);
     if ($13) {
      $14 = ((($0)) + 2|0);
      if (!($10)) {
       $46 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_destructor_nameINS0_2DbEEEPKcS4_S4_RT_($14,$1,$2)|0);
       $47 = ($46|0)==($14|0);
       $$ = $47 ? $0 : $46;
       $$2 = $$;
       break L1;
      }
      $15 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_operator_nameINS0_2DbEEEPKcS4_S4_RT_($14,$1,$2)|0);
      $16 = ($15|0)==($14|0);
      if ($16) {
       $$2 = $0;
       break L1;
      }
      $17 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($15,$1,$2)|0);
      $18 = ($17|0)==($15|0);
      if ($18) {
       $$2 = $15;
       break L1;
      }
      $19 = ((($2)) + 4|0);
      $20 = HEAP32[$19>>2]|0;
      $21 = HEAP32[$2>>2]|0;
      $22 = (($20) - ($21))|0;
      $23 = (($22|0) / 24)&-1;
      $24 = ($23>>>0)<(2);
      if ($24) {
       $$2 = $17;
       break L1;
      }
      $25 = $20;
      $26 = ((($25)) + -24|0);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3,$26);
      $27 = HEAP32[$19>>2]|0;
      $28 = ((($27)) + -24|0);
      $30 = $27;
      while(1) {
       $29 = ($30|0)==($28|0);
       if ($29) {
        break;
       }
       $31 = ((($30)) + -24|0);
       HEAP32[$19>>2] = $31;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($31);
       $$pre$i = HEAP32[$19>>2]|0;
       $30 = $$pre$i;
      }
      $32 = ((($27)) + -48|0);
      $33 = ((($3)) + 11|0);
      $34 = HEAP8[$33>>0]|0;
      $35 = ($34<<24>>24)<(0);
      $36 = HEAP32[$3>>2]|0;
      $37 = $35 ? $36 : $3;
      $38 = ((($3)) + 4|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = $34&255;
      $41 = $35 ? $39 : $40;
      __THREW__ = 0;
      (invoke_iiii(88,($32|0),($37|0),($41|0))|0);
      $42 = __THREW__; __THREW__ = 0;
      $43 = $42&1;
      if ($43) {
       $44 = ___cxa_find_matching_catch_2()|0;
       $45 = tempRet0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
       $$061 = $45;$$062 = $44;
       break L3;
      } else {
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
       $$2 = $17;
       break L1;
      }
     } else {
      label = 15;
     }
     break;
    }
    default: {
     label = 15;
    }
    }
   } while(0);
   do {
    if ((label|0) == 15) {
     $48 = (__ZN10__cxxabiv112_GLOBAL__N_115parse_simple_idINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
     $49 = ($48|0)==($0|0);
     if (!($49)) {
      $$2 = $48;
      break L1;
     }
     $50 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_operator_nameINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
     $51 = ($50|0)==($0|0);
     if ($51) {
      $$2 = $0;
      break L1;
     }
     $52 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($50,$1,$2)|0);
     $53 = ($52|0)==($50|0);
     if ($53) {
      $$2 = $50;
      break L1;
     }
     $54 = ((($2)) + 4|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = HEAP32[$2>>2]|0;
     $57 = (($55) - ($56))|0;
     $58 = (($57|0) / 24)&-1;
     $59 = ($58>>>0)<(2);
     if ($59) {
      $$2 = $52;
      break L1;
     }
     $60 = $55;
     $61 = ((($60)) + -24|0);
     __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($4,$61);
     $62 = HEAP32[$54>>2]|0;
     $63 = ((($62)) + -24|0);
     $65 = $62;
     while(1) {
      $64 = ($65|0)==($63|0);
      if ($64) {
       break;
      }
      $66 = ((($65)) + -24|0);
      HEAP32[$54>>2] = $66;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($66);
      $$pre$i68 = HEAP32[$54>>2]|0;
      $65 = $$pre$i68;
     }
     $67 = ((($62)) + -48|0);
     $68 = ((($4)) + 11|0);
     $69 = HEAP8[$68>>0]|0;
     $70 = ($69<<24>>24)<(0);
     $71 = HEAP32[$4>>2]|0;
     $72 = $70 ? $71 : $4;
     $73 = ((($4)) + 4|0);
     $74 = HEAP32[$73>>2]|0;
     $75 = $69&255;
     $76 = $70 ? $74 : $75;
     __THREW__ = 0;
     (invoke_iiii(88,($67|0),($72|0),($76|0))|0);
     $77 = __THREW__; __THREW__ = 0;
     $78 = $77&1;
     if ($78) {
      $79 = ___cxa_find_matching_catch_2()|0;
      $80 = tempRet0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      $$061 = $80;$$062 = $79;
      break;
     } else {
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      $$2 = $52;
      break L1;
     }
    }
   } while(0);
   ___resumeException($$062|0);
   // unreachable;
  } else {
   $$2 = $0;
  }
 } while(0);
 STACKTOP = sp;return ($$2|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_typeINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$065 = 0, $$066 = 0, $$067 = 0, $$1 = 0, $$pre$i = 0, $$sroa$0$0$$sroa_idx$i = 0, $$sroa$0$0$$sroa_idx$i72 = 0, $$sroa$0$0$$sroa_idx$i76 = 0, $$sroa$0$0$copyload$i7381 = 0, $$sroa$0$0$copyload$i7780 = 0, $$sroa$0$0$copyload$i82 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $3 = sp + 56|0;
 $4 = sp + 48|0;
 $5 = sp + 32|0;
 $6 = sp + 24|0;
 $7 = sp + 8|0;
 $8 = sp;
 $9 = ($0|0)==($1|0);
 L1: do {
  if ($9) {
   $$1 = $0;
  } else {
   $10 = HEAP8[$0>>0]|0;
   $11 = $10 << 24 >> 24;
   $12 = ((($2)) + 16|0);
   L3: do {
    switch ($11|0) {
    case 84:  {
     $13 = ((($2)) + 4|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = HEAP32[$2>>2]|0;
     $16 = (($14) - ($15))|0;
     $17 = (($16|0) / 24)&-1;
     $18 = (__ZN10__cxxabiv112_GLOBAL__N_120parse_template_paramINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
     $19 = HEAP32[$13>>2]|0;
     $20 = HEAP32[$2>>2]|0;
     $21 = (($19) - ($20))|0;
     $22 = (($21|0) / 24)&-1;
     $23 = ($18|0)!=($0|0);
     $24 = (($17) + 1)|0;
     $25 = ($22|0)==($24|0);
     $or$cond = $23 & $25;
     $26 = $19;
     if ($or$cond) {
      $27 = ((($26)) + -24|0);
      $$sroa$0$0$$sroa_idx$i = ((($2)) + 12|0);
      $$sroa$0$0$copyload$i82 = HEAP32[$$sroa$0$0$$sroa_idx$i>>2]|0;
      HEAP32[$4>>2] = $$sroa$0$0$copyload$i82;
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($3,$27,$4);
      $28 = ((($2)) + 20|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = ((($2)) + 24|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = ($29>>>0)<($31>>>0);
      if ($32) {
       $33 = ((($3)) + 12|0);
       HEAP32[$29>>2] = 0;
       $34 = ((($29)) + 4|0);
       HEAP32[$34>>2] = 0;
       $35 = ((($29)) + 8|0);
       $36 = HEAP32[$33>>2]|0;
       HEAP32[$35>>2] = 0;
       $37 = ((($29)) + 12|0);
       HEAP32[$37>>2] = $36;
       $38 = HEAP32[$3>>2]|0;
       HEAP32[$29>>2] = $38;
       $39 = ((($3)) + 4|0);
       $40 = HEAP32[$39>>2]|0;
       HEAP32[$34>>2] = $40;
       $41 = ((($3)) + 8|0);
       $42 = HEAP32[$41>>2]|0;
       $43 = ((($29)) + 8|0);
       HEAP32[$43>>2] = $42;
       HEAP32[$41>>2] = 0;
       HEAP32[$39>>2] = 0;
       HEAP32[$3>>2] = 0;
       $44 = HEAP32[$28>>2]|0;
       $45 = ((($44)) + 16|0);
       HEAP32[$28>>2] = $45;
      } else {
       __THREW__ = 0;
       invoke_vii(98,($12|0),($3|0));
       $46 = __THREW__; __THREW__ = 0;
       $47 = $46&1;
       if ($47) {
        $48 = ___cxa_find_matching_catch_2()|0;
        $49 = tempRet0;
        __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($3);
        $$065 = $49;$$066 = $48;
        break L3;
       }
      }
      __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($3);
      $$1 = $18;
      break L1;
     } else {
      $$067 = $22;$52 = $26;
      while(1) {
       $50 = ($$067|0)==($17|0);
       if ($50) {
        $$1 = $0;
        break L1;
       }
       $51 = ((($52)) + -24|0);
       $54 = $52;
       while(1) {
        $53 = ($54|0)==($51|0);
        if ($53) {
         break;
        }
        $55 = ((($54)) + -24|0);
        HEAP32[$13>>2] = $55;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($55);
        $$pre$i = HEAP32[$13>>2]|0;
        $54 = $$pre$i;
       }
       $56 = (($$067) + -1)|0;
       $$067 = $56;$52 = $51;
      }
     }
     break;
    }
    case 68:  {
     $57 = (__ZN10__cxxabiv112_GLOBAL__N_114parse_decltypeINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
     $58 = ($57|0)==($0|0);
     if ($58) {
      $$1 = $0;
      break L1;
     }
     $59 = HEAP32[$2>>2]|0;
     $60 = ((($2)) + 4|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = ($59|0)==($61|0);
     if ($62) {
      $$1 = $0;
      break L1;
     }
     $63 = ((($61)) + -24|0);
     $$sroa$0$0$$sroa_idx$i72 = ((($2)) + 12|0);
     $$sroa$0$0$copyload$i7381 = HEAP32[$$sroa$0$0$$sroa_idx$i72>>2]|0;
     HEAP32[$6>>2] = $$sroa$0$0$copyload$i7381;
     __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($5,$63,$6);
     $64 = ((($2)) + 20|0);
     $65 = HEAP32[$64>>2]|0;
     $66 = ((($2)) + 24|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = ($65>>>0)<($67>>>0);
     if ($68) {
      $69 = ((($5)) + 12|0);
      HEAP32[$65>>2] = 0;
      $70 = ((($65)) + 4|0);
      HEAP32[$70>>2] = 0;
      $71 = ((($65)) + 8|0);
      $72 = HEAP32[$69>>2]|0;
      HEAP32[$71>>2] = 0;
      $73 = ((($65)) + 12|0);
      HEAP32[$73>>2] = $72;
      $74 = HEAP32[$5>>2]|0;
      HEAP32[$65>>2] = $74;
      $75 = ((($5)) + 4|0);
      $76 = HEAP32[$75>>2]|0;
      HEAP32[$70>>2] = $76;
      $77 = ((($5)) + 8|0);
      $78 = HEAP32[$77>>2]|0;
      $79 = ((($65)) + 8|0);
      HEAP32[$79>>2] = $78;
      HEAP32[$77>>2] = 0;
      HEAP32[$75>>2] = 0;
      HEAP32[$5>>2] = 0;
      $80 = HEAP32[$64>>2]|0;
      $81 = ((($80)) + 16|0);
      HEAP32[$64>>2] = $81;
     } else {
      __THREW__ = 0;
      invoke_vii(98,($12|0),($5|0));
      $82 = __THREW__; __THREW__ = 0;
      $83 = $82&1;
      if ($83) {
       $84 = ___cxa_find_matching_catch_2()|0;
       $85 = tempRet0;
       __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($5);
       $$065 = $85;$$066 = $84;
       break L3;
      }
     }
     __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($5);
     $$1 = $57;
     break L1;
     break;
    }
    case 83:  {
     $86 = (__ZN10__cxxabiv112_GLOBAL__N_118parse_substitutionINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
     $87 = ($86|0)==($0|0);
     if (!($87)) {
      $$1 = $86;
      break L1;
     }
     $88 = $1;
     $89 = $0;
     $90 = (($88) - ($89))|0;
     $91 = ($90|0)>(2);
     if (!($91)) {
      $$1 = $0;
      break L1;
     }
     $92 = ((($0)) + 1|0);
     $93 = HEAP8[$92>>0]|0;
     $94 = ($93<<24>>24)==(116);
     if (!($94)) {
      $$1 = $0;
      break L1;
     }
     $95 = ((($0)) + 2|0);
     $96 = (__ZN10__cxxabiv112_GLOBAL__N_122parse_unqualified_nameINS0_2DbEEEPKcS4_S4_RT_($95,$1,$2)|0);
     $97 = ($96|0)==($95|0);
     if ($97) {
      $$1 = $0;
      break L1;
     }
     $98 = HEAP32[$2>>2]|0;
     $99 = ((($2)) + 4|0);
     $100 = HEAP32[$99>>2]|0;
     $101 = ($98|0)==($100|0);
     if ($101) {
      $$1 = $0;
      break L1;
     }
     $102 = ((($100)) + -24|0);
     (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($102,0,7862)|0);
     $103 = HEAP32[$99>>2]|0;
     $104 = ((($103)) + -24|0);
     $$sroa$0$0$$sroa_idx$i76 = ((($2)) + 12|0);
     $$sroa$0$0$copyload$i7780 = HEAP32[$$sroa$0$0$$sroa_idx$i76>>2]|0;
     HEAP32[$8>>2] = $$sroa$0$0$copyload$i7780;
     __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_($7,$104,$8);
     $105 = ((($2)) + 20|0);
     $106 = HEAP32[$105>>2]|0;
     $107 = ((($2)) + 24|0);
     $108 = HEAP32[$107>>2]|0;
     $109 = ($106>>>0)<($108>>>0);
     if ($109) {
      $110 = ((($7)) + 12|0);
      HEAP32[$106>>2] = 0;
      $111 = ((($106)) + 4|0);
      HEAP32[$111>>2] = 0;
      $112 = ((($106)) + 8|0);
      $113 = HEAP32[$110>>2]|0;
      HEAP32[$112>>2] = 0;
      $114 = ((($106)) + 12|0);
      HEAP32[$114>>2] = $113;
      $115 = HEAP32[$7>>2]|0;
      HEAP32[$106>>2] = $115;
      $116 = ((($7)) + 4|0);
      $117 = HEAP32[$116>>2]|0;
      HEAP32[$111>>2] = $117;
      $118 = ((($7)) + 8|0);
      $119 = HEAP32[$118>>2]|0;
      $120 = ((($106)) + 8|0);
      HEAP32[$120>>2] = $119;
      HEAP32[$118>>2] = 0;
      HEAP32[$116>>2] = 0;
      HEAP32[$7>>2] = 0;
      $121 = HEAP32[$105>>2]|0;
      $122 = ((($121)) + 16|0);
      HEAP32[$105>>2] = $122;
     } else {
      __THREW__ = 0;
      invoke_vii(98,($12|0),($7|0));
      $123 = __THREW__; __THREW__ = 0;
      $124 = $123&1;
      if ($124) {
       $125 = ___cxa_find_matching_catch_2()|0;
       $126 = tempRet0;
       __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($7);
       $$065 = $126;$$066 = $125;
       break L3;
      }
     }
     __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($7);
     $$1 = $96;
     break L1;
     break;
    }
    default: {
     $$1 = $0;
     break L1;
    }
    }
   } while(0);
   ___resumeException($$066|0);
   // unreachable;
  }
 } while(0);
 STACKTOP = sp;return ($$1|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_132parse_unresolved_qualifier_levelINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (__ZN10__cxxabiv112_GLOBAL__N_115parse_simple_idINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
 return ($3|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_115parse_simple_idINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$3 = 0, $$pre$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ($0|0)==($1|0);
 do {
  if ($4) {
   $$3 = $0;
  } else {
   $5 = (__ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
   $6 = ($5|0)==($0|0);
   if ($6) {
    $$3 = $0;
   } else {
    $7 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($5,$1,$2)|0);
    $8 = ($7|0)==($5|0);
    if ($8) {
     $$3 = $5;
    } else {
     $9 = ((($2)) + 4|0);
     $10 = HEAP32[$9>>2]|0;
     $11 = HEAP32[$2>>2]|0;
     $12 = (($10) - ($11))|0;
     $13 = (($12|0) / 24)&-1;
     $14 = ($13>>>0)<(2);
     if ($14) {
      $$3 = $0;
     } else {
      $15 = $10;
      $16 = ((($15)) + -24|0);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3,$16);
      $17 = HEAP32[$9>>2]|0;
      $18 = ((($17)) + -24|0);
      $20 = $17;
      while(1) {
       $19 = ($20|0)==($18|0);
       if ($19) {
        break;
       }
       $21 = ((($20)) + -24|0);
       HEAP32[$9>>2] = $21;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($21);
       $$pre$i = HEAP32[$9>>2]|0;
       $20 = $$pre$i;
      }
      $22 = ((($17)) + -48|0);
      $23 = ((($3)) + 11|0);
      $24 = HEAP8[$23>>0]|0;
      $25 = ($24<<24>>24)<(0);
      $26 = HEAP32[$3>>2]|0;
      $27 = $25 ? $26 : $3;
      $28 = ((($3)) + 4|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = $24&255;
      $31 = $25 ? $29 : $30;
      __THREW__ = 0;
      (invoke_iiii(88,($22|0),($27|0),($31|0))|0);
      $32 = __THREW__; __THREW__ = 0;
      $33 = $32&1;
      if ($33) {
       $34 = ___cxa_find_matching_catch_2()|0;
       $35 = tempRet0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
       ___resumeException($34|0);
       // unreachable;
      } else {
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
       $$3 = $7;
       break;
      }
     }
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$3|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_122parse_unqualified_nameINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$1 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==($1|0);
 L1: do {
  if ($3) {
   $$1 = $0;
  } else {
   $4 = HEAP8[$0>>0]|0;
   $5 = $4 << 24 >> 24;
   switch ($5|0) {
   case 68: case 67:  {
    $6 = (__ZN10__cxxabiv112_GLOBAL__N_120parse_ctor_dtor_nameINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
    $$1 = $6;
    break L1;
    break;
   }
   case 85:  {
    $7 = (__ZN10__cxxabiv112_GLOBAL__N_123parse_unnamed_type_nameINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
    $$1 = $7;
    break L1;
    break;
   }
   case 57: case 56: case 55: case 54: case 53: case 52: case 51: case 50: case 49:  {
    $8 = (__ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
    $$1 = $8;
    break L1;
    break;
   }
   default: {
    $9 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_operator_nameINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
    return ($9|0);
   }
   }
  }
 } while(0);
 return ($$1|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_120parse_ctor_dtor_nameINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0$i$i$i = 0, $$021 = 0, $$023 = 0, $$1 = 0, $$122 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $3 = sp + 64|0;
 $4 = sp + 48|0;
 $5 = sp + 24|0;
 $6 = sp + 12|0;
 $7 = sp;
 $8 = $1;
 $9 = $0;
 $10 = (($8) - ($9))|0;
 $11 = ($10|0)>(1);
 L1: do {
  if ($11) {
   $12 = HEAP32[$2>>2]|0;
   $13 = ((($2)) + 4|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($12|0)==($14|0);
   if ($15) {
    $$023 = $0;
   } else {
    $16 = HEAP8[$0>>0]|0;
    $17 = $16 << 24 >> 24;
    $18 = ((($0)) + 2|0);
    $19 = ((($2)) + 60|0);
    $20 = ((($0)) + 1|0);
    L4: do {
     switch ($17|0) {
     case 67:  {
      $21 = HEAP8[$20>>0]|0;
      $22 = $21 << 24 >> 24;
      switch ($22|0) {
      case 53: case 51: case 50: case 49:  {
       break;
      }
      default: {
       $$023 = $0;
       break L1;
      }
      }
      $23 = ((($14)) + -24|0);
      __ZN10__cxxabiv112_GLOBAL__N_19base_nameINSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEEEET_RS9_($4,$23);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($3,$4);
      $24 = HEAP32[$13>>2]|0;
      $25 = ((($2)) + 8|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($24>>>0)<($26>>>0);
      if ($27) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($24,$3);
       $28 = HEAP32[$13>>2]|0;
       $29 = ((($28)) + 24|0);
       HEAP32[$13>>2] = $29;
      } else {
       __THREW__ = 0;
       invoke_vii(105,($2|0),($3|0));
       $30 = __THREW__; __THREW__ = 0;
       $31 = $30&1;
       if ($31) {
        $32 = ___cxa_find_matching_catch_2()|0;
        $33 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
        $$1 = $33;$$122 = $32;
        break L4;
       }
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
      HEAP8[$19>>0] = 1;
      $$023 = $18;
      break L1;
      break;
     }
     case 68:  {
      $34 = HEAP8[$20>>0]|0;
      $35 = $34 << 24 >> 24;
      switch ($35|0) {
      case 53: case 50: case 49: case 48:  {
       break;
      }
      default: {
       $$023 = $0;
       break L1;
      }
      }
      $36 = ((($14)) + -24|0);
      __ZN10__cxxabiv112_GLOBAL__N_19base_nameINSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEEEET_RS9_($7,$36);
      __THREW__ = 0;
      $37 = (invoke_iiii(97,($7|0),0,(7638|0))|0);
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      do {
       if ($39) {
        $50 = ___cxa_find_matching_catch_2()|0;
        $51 = tempRet0;
        $$0 = $51;$$021 = $50;
       } else {
        ;HEAP32[$6>>2]=HEAP32[$7>>2]|0;HEAP32[$6+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$7+8>>2]|0;
        $$0$i$i$i = 0;
        while(1) {
         $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
         if ($exitcond$i$i$i) {
          break;
         }
         $40 = (($7) + ($$0$i$i$i<<2)|0);
         HEAP32[$40>>2] = 0;
         $41 = (($$0$i$i$i) + 1)|0;
         $$0$i$i$i = $41;
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($5,$6);
        $42 = HEAP32[$13>>2]|0;
        $43 = ((($2)) + 8|0);
        $44 = HEAP32[$43>>2]|0;
        $45 = ($42>>>0)<($44>>>0);
        if ($45) {
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($42,$5);
         $46 = HEAP32[$13>>2]|0;
         $47 = ((($46)) + 24|0);
         HEAP32[$13>>2] = $47;
        } else {
         __THREW__ = 0;
         invoke_vii(105,($2|0),($5|0));
         $48 = __THREW__; __THREW__ = 0;
         $49 = $48&1;
         if ($49) {
          $52 = ___cxa_find_matching_catch_2()|0;
          $53 = tempRet0;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
          $$0 = $53;$$021 = $52;
          break;
         }
        }
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
        HEAP8[$19>>0] = 1;
        $$023 = $18;
        break L1;
       }
      } while(0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
      $$1 = $$0;$$122 = $$021;
      break;
     }
     default: {
      $$023 = $0;
      break L1;
     }
     }
    } while(0);
    ___resumeException($$122|0);
    // unreachable;
   }
  } else {
   $$023 = $0;
  }
 } while(0);
 STACKTOP = sp;return ($$023|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_123parse_unnamed_type_nameINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i$i$i = 0, $$0105 = 0, $$0105$lcssa = 0, $$0106 = 0, $$0110 = 0, $$0110$lcssa = 0, $$0116 = 0, $$0117 = 0, $$0119 = 0, $$1118 = 0, $$1120 = 0, $$2108 = 0, $$3109 = 0, $$7 = 0, $$byval_copy = 0, $$pre$i = 0, $$pre$i132 = 0, $$pre$i136 = 0, $$pre$i138 = 0, $$pre$i141 = 0;
 var $$pre$i145 = 0, $$pre$i147 = 0, $$pre$i149 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i$i$i = 0, $isdigit = 0, $isdigit127 = 0, $isdigit129 = 0, $isdigit131 = 0, $isdigittmp = 0, $isdigittmp126 = 0, $isdigittmp128 = 0, $isdigittmp130 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $$byval_copy = sp + 104|0;
 $3 = sp + 109|0;
 $4 = sp + 108|0;
 $5 = sp + 80|0;
 $6 = sp + 64|0;
 $7 = sp + 40|0;
 $8 = sp + 28|0;
 $9 = sp + 16|0;
 $10 = sp + 4|0;
 $11 = sp;
 $12 = $1;
 $13 = $0;
 $14 = (($12) - ($13))|0;
 $15 = ($14|0)>(2);
 L1: do {
  if ($15) {
   $16 = HEAP8[$0>>0]|0;
   $17 = ($16<<24>>24)==(85);
   if ($17) {
    $18 = ((($0)) + 1|0);
    $19 = HEAP8[$18>>0]|0;
    $20 = $19 << 24 >> 24;
    $21 = ((($0)) + 2|0);
    L4: do {
     switch ($20|0) {
     case 116:  {
      ;HEAP32[$6>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
      $22 = (__ZNSt3__211char_traitsIcE6lengthEPKc(8369)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($6,8369,$22);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($5,$6);
      $23 = ((($2)) + 4|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = ((($2)) + 8|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($24>>>0)<($26>>>0);
      if ($27) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($24,$5);
       $28 = HEAP32[$23>>2]|0;
       $29 = ((($28)) + 24|0);
       HEAP32[$23>>2] = $29;
      } else {
       __THREW__ = 0;
       invoke_vii(105,($2|0),($5|0));
       $30 = __THREW__; __THREW__ = 0;
       $31 = $30&1;
       if ($31) {
        $38 = ___cxa_find_matching_catch_2()|0;
        $39 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
        $$1118 = $39;$$1120 = $38;
        break L4;
       }
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
      $32 = ($21|0)==($1|0);
      if ($32) {
       $33 = HEAP32[$23>>2]|0;
       $34 = ((($33)) + -24|0);
       $36 = $33;
       while(1) {
        $35 = ($36|0)==($34|0);
        if ($35) {
         $$7 = $0;
         break L1;
        }
        $37 = ((($36)) + -24|0);
        HEAP32[$23>>2] = $37;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($37);
        $$pre$i = HEAP32[$23>>2]|0;
        $36 = $$pre$i;
       }
      }
      $40 = HEAP8[$21>>0]|0;
      $41 = $40 << 24 >> 24;
      $isdigittmp128 = (($41) + -48)|0;
      $isdigit129 = ($isdigittmp128>>>0)<(10);
      if ($isdigit129) {
       $42 = ((($0)) + 3|0);
       $$0110 = $42;
       while(1) {
        $43 = ($$0110|0)==($1|0);
        if ($43) {
         $$0110$lcssa = $1;
         break;
        }
        $44 = HEAP8[$$0110>>0]|0;
        $45 = $44 << 24 >> 24;
        $isdigittmp130 = (($45) + -48)|0;
        $isdigit131 = ($isdigittmp130>>>0)<(10);
        if (!($isdigit131)) {
         $$0110$lcssa = $$0110;
         break;
        }
        $46 = ((($$0110)) + 1|0);
        $$0110 = $46;
       }
       $47 = HEAP32[$23>>2]|0;
       $48 = ((($47)) + -24|0);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendIPKcEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorISC_EE5valueERS7_E4typeESC_SC_($48,$21,$$0110$lcssa);
       $$0116 = $$0110$lcssa;
      } else {
       $$0116 = $21;
      }
      $49 = HEAP32[$23>>2]|0;
      $50 = ((($49)) + -24|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc($50,39);
      $51 = ($$0116|0)==($1|0);
      if (!($51)) {
       $52 = HEAP8[$$0116>>0]|0;
       $53 = ($52<<24>>24)==(95);
       if ($53) {
        $59 = ((($$0116)) + 1|0);
        $$7 = $59;
        break L1;
       }
      }
      $54 = HEAP32[$23>>2]|0;
      $55 = ((($54)) + -24|0);
      $57 = $54;
      while(1) {
       $56 = ($57|0)==($55|0);
       if ($56) {
        $$7 = $0;
        break L1;
       }
       $58 = ((($57)) + -24|0);
       HEAP32[$23>>2] = $58;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($58);
       $$pre$i132 = HEAP32[$23>>2]|0;
       $57 = $$pre$i132;
      }
      break;
     }
     case 108:  {
      ;HEAP32[$8>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;
      $60 = (__ZNSt3__211char_traitsIcE6lengthEPKc(8378)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($8,8378,$60);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($7,$8);
      $61 = ((($2)) + 4|0);
      $62 = HEAP32[$61>>2]|0;
      $63 = ((($2)) + 8|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = ($62>>>0)<($64>>>0);
      if ($65) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($62,$7);
       $66 = HEAP32[$61>>2]|0;
       $67 = ((($66)) + 24|0);
       HEAP32[$61>>2] = $67;
      } else {
       __THREW__ = 0;
       invoke_vii(105,($2|0),($7|0));
       $68 = __THREW__; __THREW__ = 0;
       $69 = $68&1;
       if ($69) {
        $75 = ___cxa_find_matching_catch_2()|0;
        $76 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($7);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
        $$1118 = $76;$$1120 = $75;
        break L4;
       }
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($7);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
      $70 = HEAP8[$21>>0]|0;
      $71 = ($70<<24>>24)==(118);
      L38: do {
       if ($71) {
        $72 = HEAP32[$61>>2]|0;
        $73 = ((($72)) + -24|0);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc($73,41);
        $74 = ((($0)) + 3|0);
        $$2108 = $74;
       } else {
        $77 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($21,$1,$2)|0);
        $78 = ($77|0)==($21|0);
        if ($78) {
         $79 = HEAP32[$61>>2]|0;
         $80 = ((($79)) + -24|0);
         $82 = $79;
         while(1) {
          $81 = ($82|0)==($80|0);
          if ($81) {
           $$7 = $0;
           break L1;
          }
          $83 = ((($82)) + -24|0);
          HEAP32[$61>>2] = $83;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($83);
          $$pre$i136 = HEAP32[$61>>2]|0;
          $82 = $$pre$i136;
         }
        }
        $84 = HEAP32[$61>>2]|0;
        $85 = HEAP32[$2>>2]|0;
        $86 = (($84) - ($85))|0;
        $87 = (($86|0) / 24)&-1;
        $88 = ($87>>>0)<(2);
        if ($88) {
         $$7 = $0;
         break L1;
        }
        $89 = $84;
        $90 = ((($89)) + -24|0);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($9,$90);
        $91 = HEAP32[$61>>2]|0;
        $92 = ((($91)) + -24|0);
        $94 = $91;
        while(1) {
         $93 = ($94|0)==($92|0);
         if ($93) {
          break;
         }
         $95 = ((($94)) + -24|0);
         HEAP32[$61>>2] = $95;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($95);
         $$pre$i138 = HEAP32[$61>>2]|0;
         $94 = $$pre$i138;
        }
        $96 = ((($91)) + -48|0);
        $97 = ((($9)) + 11|0);
        $98 = HEAP8[$97>>0]|0;
        $99 = ($98<<24>>24)<(0);
        $100 = HEAP32[$9>>2]|0;
        $101 = $99 ? $100 : $9;
        $102 = ((($9)) + 4|0);
        $103 = HEAP32[$102>>2]|0;
        $104 = $98&255;
        $105 = $99 ? $103 : $104;
        __THREW__ = 0;
        (invoke_iiii(88,($96|0),($101|0),($105|0))|0);
        $106 = __THREW__; __THREW__ = 0;
        $107 = $106&1;
        L52: do {
         if ($107) {
          label = 42;
         } else {
          $$0106 = $77;
          while(1) {
           __THREW__ = 0;
           $108 = (invoke_iiii(91,($$0106|0),($1|0),($2|0))|0);
           $109 = __THREW__; __THREW__ = 0;
           $110 = $109&1;
           if ($110) {
            label = 42;
            break L52;
           }
           $111 = ($108|0)==($$0106|0);
           if ($111) {
            label = 60;
            break;
           }
           $114 = HEAP32[$61>>2]|0;
           $115 = HEAP32[$2>>2]|0;
           $116 = (($114) - ($115))|0;
           $117 = (($116|0) / 24)&-1;
           $118 = ($117>>>0)<(2);
           if ($118) {
            label = 88;
            break;
           }
           $119 = $114;
           $120 = ((($119)) + -24|0);
           __THREW__ = 0;
           invoke_vii(96,($10|0),($120|0));
           $121 = __THREW__; __THREW__ = 0;
           $122 = $121&1;
           if ($122) {
            label = 59;
            break;
           }
           $123 = HEAP8[$97>>0]|0;
           $124 = ($123<<24>>24)<(0);
           if ($124) {
            $125 = HEAP32[$9>>2]|0;
            HEAP8[$3>>0] = 0;
            __ZNSt3__211char_traitsIcE6assignERcRKc($125,$3);
            HEAP32[$102>>2] = 0;
           } else {
            HEAP8[$4>>0] = 0;
            __ZNSt3__211char_traitsIcE6assignERcRKc($9,$4);
            HEAP8[$97>>0] = 0;
           }
           __THREW__ = 0;
           invoke_vi(92,($9|0));
           $126 = __THREW__; __THREW__ = 0;
           $127 = $126&1;
           if ($127) {
            label = 49;
            break;
           }
           ;HEAP32[$9>>2]=HEAP32[$10>>2]|0;HEAP32[$9+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$9+8>>2]=HEAP32[$10+8>>2]|0;
           $$0$i$i$i$i = 0;
           while(1) {
            $exitcond$i$i$i$i = ($$0$i$i$i$i|0)==(3);
            if ($exitcond$i$i$i$i) {
             break;
            }
            $130 = (($10) + ($$0$i$i$i$i<<2)|0);
            HEAP32[$130>>2] = 0;
            $131 = (($$0$i$i$i$i) + 1)|0;
            $$0$i$i$i$i = $131;
           }
           __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($10);
           $132 = HEAP32[$61>>2]|0;
           $133 = ((($132)) + -24|0);
           $135 = $132;
           while(1) {
            $134 = ($135|0)==($133|0);
            if ($134) {
             break;
            }
            $136 = ((($135)) + -24|0);
            HEAP32[$61>>2] = $136;
            __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($136);
            $$pre$i141 = HEAP32[$61>>2]|0;
            $135 = $$pre$i141;
           }
           $137 = HEAP8[$97>>0]|0;
           $138 = ($137<<24>>24)<(0);
           $139 = HEAP32[$102>>2]|0;
           $140 = $137&255;
           $141 = $138 ? $139 : $140;
           $142 = ($141|0)==(0);
           if ($142) {
            $$0106 = $108;
            continue;
           }
           $143 = ((($132)) + -48|0);
           __THREW__ = 0;
           (invoke_iii(95,($143|0),(7790|0))|0);
           $144 = __THREW__; __THREW__ = 0;
           $145 = $144&1;
           if ($145) {
            label = 42;
            break L52;
           }
           $146 = HEAP32[$61>>2]|0;
           $147 = ((($146)) + -24|0);
           $148 = HEAP8[$97>>0]|0;
           $149 = ($148<<24>>24)<(0);
           $150 = HEAP32[$9>>2]|0;
           $151 = $149 ? $150 : $9;
           $152 = HEAP32[$102>>2]|0;
           $153 = $148&255;
           $154 = $149 ? $152 : $153;
           __THREW__ = 0;
           (invoke_iiii(88,($147|0),($151|0),($154|0))|0);
           $155 = __THREW__; __THREW__ = 0;
           $156 = $155&1;
           if ($156) {
            label = 42;
            break L52;
           } else {
            $$0106 = $108;
           }
          }
          if ((label|0) == 49) {
           $128 = ___cxa_find_matching_catch_3(0|0)|0;
           $129 = tempRet0;
           ___clang_call_terminate($128);
           // unreachable;
          }
          else if ((label|0) == 59) {
           $157 = ___cxa_find_matching_catch_2()|0;
           $158 = tempRet0;
           $$0117 = $158;$$0119 = $157;
           break;
          }
          else if ((label|0) == 60) {
           $159 = HEAP32[$61>>2]|0;
           $160 = ((($159)) + -24|0);
           __THREW__ = 0;
           (invoke_iii(95,($160|0),(7566|0))|0);
           $161 = __THREW__; __THREW__ = 0;
           $162 = $161&1;
           if ($162) {
            label = 42;
            break;
           }
           __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
           $$2108 = $$0106;
           break L38;
          }
          else if ((label|0) == 88) {
           __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
           $$7 = $0;
           break L1;
          }
         }
        } while(0);
        if ((label|0) == 42) {
         $112 = ___cxa_find_matching_catch_2()|0;
         $113 = tempRet0;
         $$0117 = $113;$$0119 = $112;
        }
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
        $$1118 = $$0117;$$1120 = $$0119;
        break L4;
       }
      } while(0);
      $163 = ($$2108|0)==($1|0);
      if (!($163)) {
       $164 = HEAP8[$$2108>>0]|0;
       $165 = ($164<<24>>24)==(69);
       if ($165) {
        $171 = ((($$2108)) + 1|0);
        $172 = ($171|0)==($1|0);
        if ($172) {
         $173 = HEAP32[$61>>2]|0;
         $174 = ((($173)) + -24|0);
         $176 = $173;
         while(1) {
          $175 = ($176|0)==($174|0);
          if ($175) {
           $$7 = $0;
           break L1;
          }
          $177 = ((($176)) + -24|0);
          HEAP32[$61>>2] = $177;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($177);
          $$pre$i147 = HEAP32[$61>>2]|0;
          $176 = $$pre$i147;
         }
        }
        $178 = HEAP8[$171>>0]|0;
        $179 = $178 << 24 >> 24;
        $isdigittmp = (($179) + -48)|0;
        $isdigit = ($isdigittmp>>>0)<(10);
        if ($isdigit) {
         $180 = ((($$2108)) + 2|0);
         $$0105 = $180;
         while(1) {
          $181 = ($$0105|0)==($1|0);
          if ($181) {
           $$0105$lcssa = $1;
           break;
          }
          $182 = HEAP8[$$0105>>0]|0;
          $183 = $182 << 24 >> 24;
          $isdigittmp126 = (($183) + -48)|0;
          $isdigit127 = ($isdigittmp126>>>0)<(10);
          if (!($isdigit127)) {
           $$0105$lcssa = $$0105;
           break;
          }
          $184 = ((($$0105)) + 1|0);
          $$0105 = $184;
         }
         $185 = HEAP32[$61>>2]|0;
         $186 = ((($185)) + -24|0);
         $187 = ((($186)) + 11|0);
         $188 = HEAP8[$187>>0]|0;
         $189 = ($188<<24>>24)<(0);
         if ($189) {
          $190 = HEAP32[$186>>2]|0;
          $192 = $190;
         } else {
          $192 = $186;
         }
         $191 = ((($192)) + 7|0);
         $193 = $191;
         HEAP32[$11>>2] = $193;
         ;HEAP32[$$byval_copy>>2]=HEAP32[$11>>2]|0;
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertIPKcEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorISC_EE5valueENS_11__wrap_iterIPcEEE4typeENSD_ISA_EESC_SC_($186,$$byval_copy,$171,$$0105$lcssa);
         $$3109 = $$0105$lcssa;
        } else {
         $$3109 = $171;
        }
        $194 = ($$3109|0)==($1|0);
        if (!($194)) {
         $195 = HEAP8[$$3109>>0]|0;
         $196 = ($195<<24>>24)==(95);
         if ($196) {
          $202 = ((($$3109)) + 1|0);
          $$7 = $202;
          break L1;
         }
        }
        $197 = HEAP32[$61>>2]|0;
        $198 = ((($197)) + -24|0);
        $200 = $197;
        while(1) {
         $199 = ($200|0)==($198|0);
         if ($199) {
          $$7 = $0;
          break L1;
         }
         $201 = ((($200)) + -24|0);
         HEAP32[$61>>2] = $201;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($201);
         $$pre$i149 = HEAP32[$61>>2]|0;
         $200 = $$pre$i149;
        }
       }
      }
      $166 = HEAP32[$61>>2]|0;
      $167 = ((($166)) + -24|0);
      $169 = $166;
      while(1) {
       $168 = ($169|0)==($167|0);
       if ($168) {
        $$7 = $0;
        break L1;
       }
       $170 = ((($169)) + -24|0);
       HEAP32[$61>>2] = $170;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($170);
       $$pre$i145 = HEAP32[$61>>2]|0;
       $169 = $$pre$i145;
      }
      break;
     }
     default: {
      $$7 = $0;
      break L1;
     }
     }
    } while(0);
    ___resumeException($$1120|0);
    // unreachable;
   } else {
    $$7 = $0;
   }
  } else {
   $$7 = $0;
  }
 } while(0);
 STACKTOP = sp;return ($$7|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_119parse_operator_nameINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0161 = 0, $$0162 = 0, $$3 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $isdigit = 0, $isdigittmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1104|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1104|0);
 $3 = sp + 1080|0;
 $4 = sp + 1056|0;
 $5 = sp + 1032|0;
 $6 = sp + 1008|0;
 $7 = sp + 984|0;
 $8 = sp + 960|0;
 $9 = sp + 936|0;
 $10 = sp + 912|0;
 $11 = sp + 888|0;
 $12 = sp + 864|0;
 $13 = sp + 840|0;
 $14 = sp + 816|0;
 $15 = sp + 792|0;
 $16 = sp + 768|0;
 $17 = sp + 744|0;
 $18 = sp + 720|0;
 $19 = sp + 696|0;
 $20 = sp + 672|0;
 $21 = sp + 648|0;
 $22 = sp + 624|0;
 $23 = sp + 600|0;
 $24 = sp + 576|0;
 $25 = sp + 552|0;
 $26 = sp + 528|0;
 $27 = sp + 504|0;
 $28 = sp + 480|0;
 $29 = sp + 456|0;
 $30 = sp + 432|0;
 $31 = sp + 408|0;
 $32 = sp + 384|0;
 $33 = sp + 360|0;
 $34 = sp + 336|0;
 $35 = sp + 312|0;
 $36 = sp + 288|0;
 $37 = sp + 264|0;
 $38 = sp + 240|0;
 $39 = sp + 216|0;
 $40 = sp + 192|0;
 $41 = sp + 168|0;
 $42 = sp + 144|0;
 $43 = sp + 120|0;
 $44 = sp + 96|0;
 $45 = sp + 72|0;
 $46 = sp + 48|0;
 $47 = sp + 24|0;
 $48 = sp;
 $49 = $1;
 $50 = $0;
 $51 = (($49) - ($50))|0;
 $52 = ($51|0)>(1);
 L1: do {
  if ($52) {
   $53 = HEAP8[$0>>0]|0;
   $54 = $53 << 24 >> 24;
   $55 = ((($0)) + 2|0);
   $56 = ((($0)) + 1|0);
   L3: do {
    switch ($54|0) {
    case 97:  {
     $57 = HEAP8[$56>>0]|0;
     $58 = $57 << 24 >> 24;
     switch ($58|0) {
     case 97:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($3,7868);
      $59 = ((($2)) + 4|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ((($2)) + 8|0);
      $62 = HEAP32[$61>>2]|0;
      $63 = ($60>>>0)<($62>>>0);
      if ($63) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($60,$3);
       $64 = HEAP32[$59>>2]|0;
       $65 = ((($64)) + 24|0);
       HEAP32[$59>>2] = $65;
      } else {
       __THREW__ = 0;
       invoke_vii(105,($2|0),($3|0));
       $66 = __THREW__; __THREW__ = 0;
       $67 = $66&1;
       if ($67) {
        $68 = ___cxa_find_matching_catch_2()|0;
        $69 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
        $$0161 = $68;$$0162 = $69;
        break L3;
       }
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($3);
      $$3 = $55;
      break L1;
      break;
     }
     case 110: case 100:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($4,7879);
      $70 = ((($2)) + 4|0);
      $71 = HEAP32[$70>>2]|0;
      $72 = ((($2)) + 8|0);
      $73 = HEAP32[$72>>2]|0;
      $74 = ($71>>>0)<($73>>>0);
      if ($74) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($71,$4);
       $75 = HEAP32[$70>>2]|0;
       $76 = ((($75)) + 24|0);
       HEAP32[$70>>2] = $76;
      } else {
       __THREW__ = 0;
       invoke_vii(105,($2|0),($4|0));
       $77 = __THREW__; __THREW__ = 0;
       $78 = $77&1;
       if ($78) {
        $79 = ___cxa_find_matching_catch_2()|0;
        $80 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
        $$0161 = $79;$$0162 = $80;
        break L3;
       }
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
      $$3 = $55;
      break L1;
      break;
     }
     case 78:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($5,7889);
      $81 = ((($2)) + 4|0);
      $82 = HEAP32[$81>>2]|0;
      $83 = ((($2)) + 8|0);
      $84 = HEAP32[$83>>2]|0;
      $85 = ($82>>>0)<($84>>>0);
      if ($85) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($82,$5);
       $86 = HEAP32[$81>>2]|0;
       $87 = ((($86)) + 24|0);
       HEAP32[$81>>2] = $87;
      } else {
       __THREW__ = 0;
       invoke_vii(105,($2|0),($5|0));
       $88 = __THREW__; __THREW__ = 0;
       $89 = $88&1;
       if ($89) {
        $90 = ___cxa_find_matching_catch_2()|0;
        $91 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
        $$0161 = $90;$$0162 = $91;
        break L3;
       }
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
      $$3 = $55;
      break L1;
      break;
     }
     case 83:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($6,7900);
      $92 = ((($2)) + 4|0);
      $93 = HEAP32[$92>>2]|0;
      $94 = ((($2)) + 8|0);
      $95 = HEAP32[$94>>2]|0;
      $96 = ($93>>>0)<($95>>>0);
      if ($96) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($93,$6);
       $97 = HEAP32[$92>>2]|0;
       $98 = ((($97)) + 24|0);
       HEAP32[$92>>2] = $98;
      } else {
       __THREW__ = 0;
       invoke_vii(105,($2|0),($6|0));
       $99 = __THREW__; __THREW__ = 0;
       $100 = $99&1;
       if ($100) {
        $101 = ___cxa_find_matching_catch_2()|0;
        $102 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($6);
        $$0161 = $101;$$0162 = $102;
        break L3;
       }
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($6);
      $$3 = $55;
      break L1;
      break;
     }
     default: {
      $$3 = $0;
      break L1;
     }
     }
     break;
    }
    case 99:  {
     $103 = HEAP8[$56>>0]|0;
     $104 = $103 << 24 >> 24;
     switch ($104|0) {
     case 108:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($7,7910);
      $105 = ((($2)) + 4|0);
      $106 = HEAP32[$105>>2]|0;
      $107 = ((($2)) + 8|0);
      $108 = HEAP32[$107>>2]|0;
      $109 = ($106>>>0)<($108>>>0);
      if ($109) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($106,$7);
       $110 = HEAP32[$105>>2]|0;
       $111 = ((($110)) + 24|0);
       HEAP32[$105>>2] = $111;
      } else {
       __THREW__ = 0;
       invoke_vii(105,($2|0),($7|0));
       $112 = __THREW__; __THREW__ = 0;
       $113 = $112&1;
       if ($113) {
        $114 = ___cxa_find_matching_catch_2()|0;
        $115 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($7);
        $$0161 = $114;$$0162 = $115;
        break L3;
       }
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($7);
      $$3 = $55;
      break L1;
      break;
     }
     case 109:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($8,7921);
      $116 = ((($2)) + 4|0);
      $117 = HEAP32[$116>>2]|0;
      $118 = ((($2)) + 8|0);
      $119 = HEAP32[$118>>2]|0;
      $120 = ($117>>>0)<($119>>>0);
      if ($120) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($117,$8);
       $121 = HEAP32[$116>>2]|0;
       $122 = ((($121)) + 24|0);
       HEAP32[$116>>2] = $122;
      } else {
       __THREW__ = 0;
       invoke_vii(105,($2|0),($8|0));
       $123 = __THREW__; __THREW__ = 0;
       $124 = $123&1;
       if ($124) {
        $125 = ___cxa_find_matching_catch_2()|0;
        $126 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($8);
        $$0161 = $125;$$0162 = $126;
        break L3;
       }
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($8);
      $$3 = $55;
      break L1;
      break;
     }
     case 111:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($9,7931);
      $127 = ((($2)) + 4|0);
      $128 = HEAP32[$127>>2]|0;
      $129 = ((($2)) + 8|0);
      $130 = HEAP32[$129>>2]|0;
      $131 = ($128>>>0)<($130>>>0);
      if ($131) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($128,$9);
       $132 = HEAP32[$127>>2]|0;
       $133 = ((($132)) + 24|0);
       HEAP32[$127>>2] = $133;
      } else {
       __THREW__ = 0;
       invoke_vii(105,($2|0),($9|0));
       $134 = __THREW__; __THREW__ = 0;
       $135 = $134&1;
       if ($135) {
        $136 = ___cxa_find_matching_catch_2()|0;
        $137 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($9);
        $$0161 = $136;$$0162 = $137;
        break L3;
       }
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($9);
      $$3 = $55;
      break L1;
      break;
     }
     case 118:  {
      $138 = ((($2)) + 63|0);
      $139 = HEAP8[$138>>0]|0;
      HEAP8[$138>>0] = 0;
      $140 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($55,$1,$2)|0);
      HEAP8[$138>>0] = $139;
      $141 = ($140|0)==($55|0);
      if ($141) {
       $$3 = $0;
       break L1;
      }
      $142 = HEAP32[$2>>2]|0;
      $143 = ((($2)) + 4|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ($142|0)==($144|0);
      if ($145) {
       $$3 = $0;
       break L1;
      }
      $146 = ((($144)) + -24|0);
      (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($146,0,7941)|0);
      $147 = ((($2)) + 60|0);
      HEAP8[$147>>0] = 1;
      $$3 = $140;
      break L1;
      break;
     }
     default: {
      $$3 = $0;
      break L1;
     }
     }
     break;
    }
    case 100:  {
     $148 = HEAP8[$56>>0]|0;
     $149 = $148 << 24 >> 24;
     switch ($149|0) {
     case 97:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj18EEERAT__Kc($10,7951);
      $150 = ((($2)) + 4|0);
      $151 = HEAP32[$150>>2]|0;
      $152 = ((($2)) + 8|0);
      $153 = HEAP32[$152>>2]|0;
      $154 = ($151>>>0)<($153>>>0);
      if ($154) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($151,$10);
       $155 = HEAP32[$150>>2]|0;
       $156 = ((($155)) + 24|0);
       HEAP32[$150>>2] = $156;
      } else {
       __THREW__ = 0;
       invoke_vii(105,($2|0),($10|0));
       $157 = __THREW__; __THREW__ = 0;
       $158 = $157&1;
       if ($158) {
        $159 = ___cxa_find_matching_catch_2()|0;
        $160 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($10);
        $$0161 = $159;$$0162 = $160;
        break L3;
       }
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($10);
      $$3 = $55;
      break L1;
      break;
     }
     case 101:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($11,7969);
      $161 = ((($2)) + 4|0);
      $162 = HEAP32[$161>>2]|0;
      $163 = ((($2)) + 8|0);
      $164 = HEAP32[$163>>2]|0;
      $165 = ($162>>>0)<($164>>>0);
      if ($165) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($162,$11);
       $166 = HEAP32[$161>>2]|0;
       $167 = ((($166)) + 24|0);
       HEAP32[$161>>2] = $167;
      } else {
       __THREW__ = 0;
       invoke_vii(105,($2|0),($11|0));
       $168 = __THREW__; __THREW__ = 0;
       $169 = $168&1;
       if ($169) {
        $170 = ___cxa_find_matching_catch_2()|0;
        $171 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($11);
        $$0161 = $170;$$0162 = $171;
        break L3;
       }
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($11);
      $$3 = $55;
      break L1;
      break;
     }
     case 108:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj16EEERAT__Kc($12);
      $172 = ((($2)) + 4|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = ((($2)) + 8|0);
      $175 = HEAP32[$174>>2]|0;
      $176 = ($173>>>0)<($175>>>0);
      if ($176) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($173,$12);
       $177 = HEAP32[$172>>2]|0;
       $178 = ((($177)) + 24|0);
       HEAP32[$172>>2] = $178;
      } else {
       __THREW__ = 0;
       invoke_vii(105,($2|0),($12|0));
       $179 = __THREW__; __THREW__ = 0;
       $180 = $179&1;
       if ($180) {
        $181 = ___cxa_find_matching_catch_2()|0;
        $182 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($12);
        $$0161 = $181;$$0162 = $182;
        break L3;
       }
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($12);
      $$3 = $55;
      break L1;
      break;
     }
     case 118:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($13,7979);
      $183 = ((($2)) + 4|0);
      $184 = HEAP32[$183>>2]|0;
      $185 = ((($2)) + 8|0);
      $186 = HEAP32[$185>>2]|0;
      $187 = ($184>>>0)<($186>>>0);
      if ($187) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($184,$13);
       $188 = HEAP32[$183>>2]|0;
       $189 = ((($188)) + 24|0);
       HEAP32[$183>>2] = $189;
      } else {
       __THREW__ = 0;
       invoke_vii(105,($2|0),($13|0));
       $190 = __THREW__; __THREW__ = 0;
       $191 = $190&1;
       if ($191) {
        $192 = ___cxa_find_matching_catch_2()|0;
        $193 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($13);
        $$0161 = $192;$$0162 = $193;
        break L3;
       }
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($13);
      $$3 = $55;
      break L1;
      break;
     }
     case 86:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($14,7989);
      $194 = ((($2)) + 4|0);
      $195 = HEAP32[$194>>2]|0;
      $196 = ((($2)) + 8|0);
      $197 = HEAP32[$196>>2]|0;
      $198 = ($195>>>0)<($197>>>0);
      if ($198) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($195,$14);
       $199 = HEAP32[$194>>2]|0;
       $200 = ((($199)) + 24|0);
       HEAP32[$194>>2] = $200;
      } else {
       __THREW__ = 0;
       invoke_vii(105,($2|0),($14|0));
       $201 = __THREW__; __THREW__ = 0;
       $202 = $201&1;
       if ($202) {
        $203 = ___cxa_find_matching_catch_2()|0;
        $204 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($14);
        $$0161 = $203;$$0162 = $204;
        break L3;
       }
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($14);
      $$3 = $55;
      break L1;
      break;
     }
     default: {
      $$3 = $0;
      break L1;
     }
     }
     break;
    }
    case 101:  {
     $205 = HEAP8[$56>>0]|0;
     $206 = $205 << 24 >> 24;
     switch ($206|0) {
     case 111:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($15,8000);
      $207 = ((($2)) + 4|0);
      $208 = HEAP32[$207>>2]|0;
      $209 = ((($2)) + 8|0);
      $210 = HEAP32[$209>>2]|0;
      $211 = ($208>>>0)<($210>>>0);
      if ($211) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($208,$15);
       $212 = HEAP32[$207>>2]|0;
       $213 = ((($212)) + 24|0);
       HEAP32[$207>>2] = $213;
      } else {
       __THREW__ = 0;
       invoke_vii(105,($2|0),($15|0));
       $214 = __THREW__; __THREW__ = 0;
       $215 = $214&1;
       if ($215) {
        $216 = ___cxa_find_matching_catch_2()|0;
        $217 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($15);
        $$0161 = $216;$$0162 = $217;
        break L3;
       }
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($15);
      $$3 = $55;
      break L1;
      break;
     }
     case 79:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($16,8010);
      $218 = ((($2)) + 4|0);
      $219 = HEAP32[$218>>2]|0;
      $220 = ((($2)) + 8|0);
      $221 = HEAP32[$220>>2]|0;
      $222 = ($219>>>0)<($221>>>0);
      if ($222) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($219,$16);
       $223 = HEAP32[$218>>2]|0;
       $224 = ((($223)) + 24|0);
       HEAP32[$218>>2] = $224;
      } else {
       __THREW__ = 0;
       invoke_vii(105,($2|0),($16|0));
       $225 = __THREW__; __THREW__ = 0;
       $226 = $225&1;
       if ($226) {
        $227 = ___cxa_find_matching_catch_2()|0;
        $228 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($16);
        $$0161 = $227;$$0162 = $228;
        break L3;
       }
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($16);
      $$3 = $55;
      break L1;
      break;
     }
     case 113:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($17,8021);
      $229 = ((($2)) + 4|0);
      $230 = HEAP32[$229>>2]|0;
      $231 = ((($2)) + 8|0);
      $232 = HEAP32[$231>>2]|0;
      $233 = ($230>>>0)<($232>>>0);
      if ($233) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($230,$17);
       $234 = HEAP32[$229>>2]|0;
       $235 = ((($234)) + 24|0);
       HEAP32[$229>>2] = $235;
      } else {
       __THREW__ = 0;
       invoke_vii(105,($2|0),($17|0));
       $236 = __THREW__; __THREW__ = 0;
       $237 = $236&1;
       if ($237) {
        $238 = ___cxa_find_matching_catch_2()|0;
        $239 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($17);
        $$0161 = $238;$$0162 = $239;
        break L3;
       }
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($17);
      $$3 = $55;
      break L1;
      break;
     }
     default: {
      $$3 = $0;
      break L1;
     }
     }
     break;
    }
    case 103:  {
     $240 = HEAP8[$56>>0]|0;
     $241 = $240 << 24 >> 24;
     switch ($241|0) {
     case 101:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($18,8032);
      $242 = ((($2)) + 4|0);
      $243 = HEAP32[$242>>2]|0;
      $244 = ((($2)) + 8|0);
      $245 = HEAP32[$244>>2]|0;
      $246 = ($243>>>0)<($245>>>0);
      if ($246) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($243,$18);
       $247 = HEAP32[$242>>2]|0;
       $248 = ((($247)) + 24|0);
       HEAP32[$242>>2] = $248;
      } else {
       __THREW__ = 0;
       invoke_vii(105,($2|0),($18|0));
       $249 = __THREW__; __THREW__ = 0;
       $250 = $249&1;
       if ($250) {
        $251 = ___cxa_find_matching_catch_2()|0;
        $252 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($18);
        $$0161 = $251;$$0162 = $252;
        break L3;
       }
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($18);
      $$3 = $55;
      break L1;
      break;
     }
     case 116:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($19,8043);
      $253 = ((($2)) + 4|0);
      $254 = HEAP32[$253>>2]|0;
      $255 = ((($2)) + 8|0);
      $256 = HEAP32[$255>>2]|0;
      $257 = ($254>>>0)<($256>>>0);
      if ($257) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($254,$19);
       $258 = HEAP32[$253>>2]|0;
       $259 = ((($258)) + 24|0);
       HEAP32[$253>>2] = $259;
      } else {
       __THREW__ = 0;
       invoke_vii(105,($2|0),($19|0));
       $260 = __THREW__; __THREW__ = 0;
       $261 = $260&1;
       if ($261) {
        $262 = ___cxa_find_matching_catch_2()|0;
        $263 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($19);
        $$0161 = $262;$$0162 = $263;
        break L3;
       }
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($19);
      $$3 = $55;
      break L1;
      break;
     }
     default: {
      $$3 = $0;
      break L1;
     }
     }
     break;
    }
    case 105:  {
     $264 = HEAP8[$56>>0]|0;
     $265 = ($264<<24>>24)==(120);
     if (!($265)) {
      $$3 = $0;
      break L1;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($20,8053);
     $266 = ((($2)) + 4|0);
     $267 = HEAP32[$266>>2]|0;
     $268 = ((($2)) + 8|0);
     $269 = HEAP32[$268>>2]|0;
     $270 = ($267>>>0)<($269>>>0);
     if ($270) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($267,$20);
      $271 = HEAP32[$266>>2]|0;
      $272 = ((($271)) + 24|0);
      HEAP32[$266>>2] = $272;
     } else {
      __THREW__ = 0;
      invoke_vii(105,($2|0),($20|0));
      $273 = __THREW__; __THREW__ = 0;
      $274 = $273&1;
      if ($274) {
       $275 = ___cxa_find_matching_catch_2()|0;
       $276 = tempRet0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($20);
       $$0161 = $275;$$0162 = $276;
       break L3;
      }
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($20);
     $$3 = $55;
     break L1;
     break;
    }
    case 108:  {
     $277 = HEAP8[$56>>0]|0;
     $278 = $277 << 24 >> 24;
     switch ($278|0) {
     case 101:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($21,8064);
      $279 = ((($2)) + 4|0);
      $280 = HEAP32[$279>>2]|0;
      $281 = ((($2)) + 8|0);
      $282 = HEAP32[$281>>2]|0;
      $283 = ($280>>>0)<($282>>>0);
      if ($283) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($280,$21);
       $284 = HEAP32[$279>>2]|0;
       $285 = ((($284)) + 24|0);
       HEAP32[$279>>2] = $285;
      } else {
       __THREW__ = 0;
       invoke_vii(105,($2|0),($21|0));
       $286 = __THREW__; __THREW__ = 0;
       $287 = $286&1;
       if ($287) {
        $288 = ___cxa_find_matching_catch_2()|0;
        $289 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($21);
        $$0161 = $288;$$0162 = $289;
        break L3;
       }
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($21);
      $$3 = $55;
      break L1;
      break;
     }
     case 105:  {
      $290 = (__ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($55,$1,$2)|0);
      $291 = ($290|0)==($55|0);
      if ($291) {
       $$3 = $0;
       break L1;
      }
      $292 = HEAP32[$2>>2]|0;
      $293 = ((($2)) + 4|0);
      $294 = HEAP32[$293>>2]|0;
      $295 = ($292|0)==($294|0);
      if ($295) {
       $$3 = $0;
       break L1;
      }
      $296 = ((($294)) + -24|0);
      (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($296,0,8075)|0);
      $$3 = $290;
      break L1;
      break;
     }
     case 115:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($22,8087);
      $297 = ((($2)) + 4|0);
      $298 = HEAP32[$297>>2]|0;
      $299 = ((($2)) + 8|0);
      $300 = HEAP32[$299>>2]|0;
      $301 = ($298>>>0)<($300>>>0);
      if ($301) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($298,$22);
       $302 = HEAP32[$297>>2]|0;
       $303 = ((($302)) + 24|0);
       HEAP32[$297>>2] = $303;
      } else {
       __THREW__ = 0;
       invoke_vii(105,($2|0),($22|0));
       $304 = __THREW__; __THREW__ = 0;
       $305 = $304&1;
       if ($305) {
        $306 = ___cxa_find_matching_catch_2()|0;
        $307 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($22);
        $$0161 = $306;$$0162 = $307;
        break L3;
       }
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($22);
      $$3 = $55;
      break L1;
      break;
     }
     case 83:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj12EEERAT__Kc($23,8098);
      $308 = ((($2)) + 4|0);
      $309 = HEAP32[$308>>2]|0;
      $310 = ((($2)) + 8|0);
      $311 = HEAP32[$310>>2]|0;
      $312 = ($309>>>0)<($311>>>0);
      if ($312) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($309,$23);
       $313 = HEAP32[$308>>2]|0;
       $314 = ((($313)) + 24|0);
       HEAP32[$308>>2] = $314;
      } else {
       __THREW__ = 0;
       invoke_vii(105,($2|0),($23|0));
       $315 = __THREW__; __THREW__ = 0;
       $316 = $315&1;
       if ($316) {
        $317 = ___cxa_find_matching_catch_2()|0;
        $318 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($23);
        $$0161 = $317;$$0162 = $318;
        break L3;
       }
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($23);
      $$3 = $55;
      break L1;
      break;
     }
     case 116:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($24,8110);
      $319 = ((($2)) + 4|0);
      $320 = HEAP32[$319>>2]|0;
      $321 = ((($2)) + 8|0);
      $322 = HEAP32[$321>>2]|0;
      $323 = ($320>>>0)<($322>>>0);
      if ($323) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($320,$24);
       $324 = HEAP32[$319>>2]|0;
       $325 = ((($324)) + 24|0);
       HEAP32[$319>>2] = $325;
      } else {
       __THREW__ = 0;
       invoke_vii(105,($2|0),($24|0));
       $326 = __THREW__; __THREW__ = 0;
       $327 = $326&1;
       if ($327) {
        $328 = ___cxa_find_matching_catch_2()|0;
        $329 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($24);
        $$0161 = $328;$$0162 = $329;
        break L3;
       }
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($24);
      $$3 = $55;
      break L1;
      break;
     }
     default: {
      $$3 = $0;
      break L1;
     }
     }
     break;
    }
    case 109:  {
     $330 = HEAP8[$56>>0]|0;
     $331 = $330 << 24 >> 24;
     switch ($331|0) {
     case 105:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($25,8120);
      $332 = ((($2)) + 4|0);
      $333 = HEAP32[$332>>2]|0;
      $334 = ((($2)) + 8|0);
      $335 = HEAP32[$334>>2]|0;
      $336 = ($333>>>0)<($335>>>0);
      if ($336) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($333,$25);
       $337 = HEAP32[$332>>2]|0;
       $338 = ((($337)) + 24|0);
       HEAP32[$332>>2] = $338;
      } else {
       __THREW__ = 0;
       invoke_vii(105,($2|0),($25|0));
       $339 = __THREW__; __THREW__ = 0;
       $340 = $339&1;
       if ($340) {
        $341 = ___cxa_find_matching_catch_2()|0;
        $342 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($25);
        $$0161 = $341;$$0162 = $342;
        break L3;
       }
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($25);
      $$3 = $55;
      break L1;
      break;
     }
     case 73:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($26,8130);
      $343 = ((($2)) + 4|0);
      $344 = HEAP32[$343>>2]|0;
      $345 = ((($2)) + 8|0);
      $346 = HEAP32[$345>>2]|0;
      $347 = ($344>>>0)<($346>>>0);
      if ($347) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($344,$26);
       $348 = HEAP32[$343>>2]|0;
       $349 = ((($348)) + 24|0);
       HEAP32[$343>>2] = $349;
      } else {
       __THREW__ = 0;
       invoke_vii(105,($2|0),($26|0));
       $350 = __THREW__; __THREW__ = 0;
       $351 = $350&1;
       if ($351) {
        $352 = ___cxa_find_matching_catch_2()|0;
        $353 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($26);
        $$0161 = $352;$$0162 = $353;
        break L3;
       }
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($26);
      $$3 = $55;
      break L1;
      break;
     }
     case 108:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($27,7969);
      $354 = ((($2)) + 4|0);
      $355 = HEAP32[$354>>2]|0;
      $356 = ((($2)) + 8|0);
      $357 = HEAP32[$356>>2]|0;
      $358 = ($355>>>0)<($357>>>0);
      if ($358) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($355,$27);
       $359 = HEAP32[$354>>2]|0;
       $360 = ((($359)) + 24|0);
       HEAP32[$354>>2] = $360;
      } else {
       __THREW__ = 0;
       invoke_vii(105,($2|0),($27|0));
       $361 = __THREW__; __THREW__ = 0;
       $362 = $361&1;
       if ($362) {
        $363 = ___cxa_find_matching_catch_2()|0;
        $364 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($27);
        $$0161 = $363;$$0162 = $364;
        break L3;
       }
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($27);
      $$3 = $55;
      break L1;
      break;
     }
     case 76:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($28,8141);
      $365 = ((($2)) + 4|0);
      $366 = HEAP32[$365>>2]|0;
      $367 = ((($2)) + 8|0);
      $368 = HEAP32[$367>>2]|0;
      $369 = ($366>>>0)<($368>>>0);
      if ($369) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($366,$28);
       $370 = HEAP32[$365>>2]|0;
       $371 = ((($370)) + 24|0);
       HEAP32[$365>>2] = $371;
      } else {
       __THREW__ = 0;
       invoke_vii(105,($2|0),($28|0));
       $372 = __THREW__; __THREW__ = 0;
       $373 = $372&1;
       if ($373) {
        $374 = ___cxa_find_matching_catch_2()|0;
        $375 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($28);
        $$0161 = $374;$$0162 = $375;
        break L3;
       }
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($28);
      $$3 = $55;
      break L1;
      break;
     }
     case 109:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($29,8152);
      $376 = ((($2)) + 4|0);
      $377 = HEAP32[$376>>2]|0;
      $378 = ((($2)) + 8|0);
      $379 = HEAP32[$378>>2]|0;
      $380 = ($377>>>0)<($379>>>0);
      if ($380) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($377,$29);
       $381 = HEAP32[$376>>2]|0;
       $382 = ((($381)) + 24|0);
       HEAP32[$376>>2] = $382;
      } else {
       __THREW__ = 0;
       invoke_vii(105,($2|0),($29|0));
       $383 = __THREW__; __THREW__ = 0;
       $384 = $383&1;
       if ($384) {
        $385 = ___cxa_find_matching_catch_2()|0;
        $386 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($29);
        $$0161 = $385;$$0162 = $386;
        break L3;
       }
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($29);
      $$3 = $55;
      break L1;
      break;
     }
     default: {
      $$3 = $0;
      break L1;
     }
     }
     break;
    }
    case 110:  {
     $387 = HEAP8[$56>>0]|0;
     $388 = $387 << 24 >> 24;
     switch ($388|0) {
     case 97:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj15EEERAT__Kc($30,8163);
      $389 = ((($2)) + 4|0);
      $390 = HEAP32[$389>>2]|0;
      $391 = ((($2)) + 8|0);
      $392 = HEAP32[$391>>2]|0;
      $393 = ($390>>>0)<($392>>>0);
      if ($393) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($390,$30);
       $394 = HEAP32[$389>>2]|0;
       $395 = ((($394)) + 24|0);
       HEAP32[$389>>2] = $395;
      } else {
       __THREW__ = 0;
       invoke_vii(105,($2|0),($30|0));
       $396 = __THREW__; __THREW__ = 0;
       $397 = $396&1;
       if ($397) {
        $398 = ___cxa_find_matching_catch_2()|0;
        $399 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($30);
        $$0161 = $398;$$0162 = $399;
        break L3;
       }
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($30);
      $$3 = $55;
      break L1;
      break;
     }
     case 101:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($31,8178);
      $400 = ((($2)) + 4|0);
      $401 = HEAP32[$400>>2]|0;
      $402 = ((($2)) + 8|0);
      $403 = HEAP32[$402>>2]|0;
      $404 = ($401>>>0)<($403>>>0);
      if ($404) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($401,$31);
       $405 = HEAP32[$400>>2]|0;
       $406 = ((($405)) + 24|0);
       HEAP32[$400>>2] = $406;
      } else {
       __THREW__ = 0;
       invoke_vii(105,($2|0),($31|0));
       $407 = __THREW__; __THREW__ = 0;
       $408 = $407&1;
       if ($408) {
        $409 = ___cxa_find_matching_catch_2()|0;
        $410 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($31);
        $$0161 = $409;$$0162 = $410;
        break L3;
       }
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($31);
      $$3 = $55;
      break L1;
      break;
     }
     case 103:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($32,8120);
      $411 = ((($2)) + 4|0);
      $412 = HEAP32[$411>>2]|0;
      $413 = ((($2)) + 8|0);
      $414 = HEAP32[$413>>2]|0;
      $415 = ($412>>>0)<($414>>>0);
      if ($415) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($412,$32);
       $416 = HEAP32[$411>>2]|0;
       $417 = ((($416)) + 24|0);
       HEAP32[$411>>2] = $417;
      } else {
       __THREW__ = 0;
       invoke_vii(105,($2|0),($32|0));
       $418 = __THREW__; __THREW__ = 0;
       $419 = $418&1;
       if ($419) {
        $420 = ___cxa_find_matching_catch_2()|0;
        $421 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($32);
        $$0161 = $420;$$0162 = $421;
        break L3;
       }
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($32);
      $$3 = $55;
      break L1;
      break;
     }
     case 116:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($33,8189);
      $422 = ((($2)) + 4|0);
      $423 = HEAP32[$422>>2]|0;
      $424 = ((($2)) + 8|0);
      $425 = HEAP32[$424>>2]|0;
      $426 = ($423>>>0)<($425>>>0);
      if ($426) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($423,$33);
       $427 = HEAP32[$422>>2]|0;
       $428 = ((($427)) + 24|0);
       HEAP32[$422>>2] = $428;
      } else {
       __THREW__ = 0;
       invoke_vii(105,($2|0),($33|0));
       $429 = __THREW__; __THREW__ = 0;
       $430 = $429&1;
       if ($430) {
        $431 = ___cxa_find_matching_catch_2()|0;
        $432 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($33);
        $$0161 = $431;$$0162 = $432;
        break L3;
       }
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($33);
      $$3 = $55;
      break L1;
      break;
     }
     case 119:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj13EEERAT__Kc($34,8199);
      $433 = ((($2)) + 4|0);
      $434 = HEAP32[$433>>2]|0;
      $435 = ((($2)) + 8|0);
      $436 = HEAP32[$435>>2]|0;
      $437 = ($434>>>0)<($436>>>0);
      if ($437) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($434,$34);
       $438 = HEAP32[$433>>2]|0;
       $439 = ((($438)) + 24|0);
       HEAP32[$433>>2] = $439;
      } else {
       __THREW__ = 0;
       invoke_vii(105,($2|0),($34|0));
       $440 = __THREW__; __THREW__ = 0;
       $441 = $440&1;
       if ($441) {
        $442 = ___cxa_find_matching_catch_2()|0;
        $443 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($34);
        $$0161 = $442;$$0162 = $443;
        break L3;
       }
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($34);
      $$3 = $55;
      break L1;
      break;
     }
     default: {
      $$3 = $0;
      break L1;
     }
     }
     break;
    }
    case 111:  {
     $444 = HEAP8[$56>>0]|0;
     $445 = $444 << 24 >> 24;
     switch ($445|0) {
     case 111:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($35,8212);
      $446 = ((($2)) + 4|0);
      $447 = HEAP32[$446>>2]|0;
      $448 = ((($2)) + 8|0);
      $449 = HEAP32[$448>>2]|0;
      $450 = ($447>>>0)<($449>>>0);
      if ($450) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($447,$35);
       $451 = HEAP32[$446>>2]|0;
       $452 = ((($451)) + 24|0);
       HEAP32[$446>>2] = $452;
      } else {
       __THREW__ = 0;
       invoke_vii(105,($2|0),($35|0));
       $453 = __THREW__; __THREW__ = 0;
       $454 = $453&1;
       if ($454) {
        $455 = ___cxa_find_matching_catch_2()|0;
        $456 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($35);
        $$0161 = $455;$$0162 = $456;
        break L3;
       }
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($35);
      $$3 = $55;
      break L1;
      break;
     }
     case 114:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($36,8223);
      $457 = ((($2)) + 4|0);
      $458 = HEAP32[$457>>2]|0;
      $459 = ((($2)) + 8|0);
      $460 = HEAP32[$459>>2]|0;
      $461 = ($458>>>0)<($460>>>0);
      if ($461) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($458,$36);
       $462 = HEAP32[$457>>2]|0;
       $463 = ((($462)) + 24|0);
       HEAP32[$457>>2] = $463;
      } else {
       __THREW__ = 0;
       invoke_vii(105,($2|0),($36|0));
       $464 = __THREW__; __THREW__ = 0;
       $465 = $464&1;
       if ($465) {
        $466 = ___cxa_find_matching_catch_2()|0;
        $467 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($36);
        $$0161 = $466;$$0162 = $467;
        break L3;
       }
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($36);
      $$3 = $55;
      break L1;
      break;
     }
     case 82:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($37,8233);
      $468 = ((($2)) + 4|0);
      $469 = HEAP32[$468>>2]|0;
      $470 = ((($2)) + 8|0);
      $471 = HEAP32[$470>>2]|0;
      $472 = ($469>>>0)<($471>>>0);
      if ($472) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($469,$37);
       $473 = HEAP32[$468>>2]|0;
       $474 = ((($473)) + 24|0);
       HEAP32[$468>>2] = $474;
      } else {
       __THREW__ = 0;
       invoke_vii(105,($2|0),($37|0));
       $475 = __THREW__; __THREW__ = 0;
       $476 = $475&1;
       if ($476) {
        $477 = ___cxa_find_matching_catch_2()|0;
        $478 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($37);
        $$0161 = $477;$$0162 = $478;
        break L3;
       }
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($37);
      $$3 = $55;
      break L1;
      break;
     }
     default: {
      $$3 = $0;
      break L1;
     }
     }
     break;
    }
    case 112:  {
     $479 = HEAP8[$56>>0]|0;
     $480 = $479 << 24 >> 24;
     switch ($480|0) {
     case 109:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj12EEERAT__Kc($38,8244);
      $481 = ((($2)) + 4|0);
      $482 = HEAP32[$481>>2]|0;
      $483 = ((($2)) + 8|0);
      $484 = HEAP32[$483>>2]|0;
      $485 = ($482>>>0)<($484>>>0);
      if ($485) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($482,$38);
       $486 = HEAP32[$481>>2]|0;
       $487 = ((($486)) + 24|0);
       HEAP32[$481>>2] = $487;
      } else {
       __THREW__ = 0;
       invoke_vii(105,($2|0),($38|0));
       $488 = __THREW__; __THREW__ = 0;
       $489 = $488&1;
       if ($489) {
        $490 = ___cxa_find_matching_catch_2()|0;
        $491 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($38);
        $$0161 = $490;$$0162 = $491;
        break L3;
       }
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($38);
      $$3 = $55;
      break L1;
      break;
     }
     case 108:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($39,8256);
      $492 = ((($2)) + 4|0);
      $493 = HEAP32[$492>>2]|0;
      $494 = ((($2)) + 8|0);
      $495 = HEAP32[$494>>2]|0;
      $496 = ($493>>>0)<($495>>>0);
      if ($496) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($493,$39);
       $497 = HEAP32[$492>>2]|0;
       $498 = ((($497)) + 24|0);
       HEAP32[$492>>2] = $498;
      } else {
       __THREW__ = 0;
       invoke_vii(105,($2|0),($39|0));
       $499 = __THREW__; __THREW__ = 0;
       $500 = $499&1;
       if ($500) {
        $501 = ___cxa_find_matching_catch_2()|0;
        $502 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($39);
        $$0161 = $501;$$0162 = $502;
        break L3;
       }
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($39);
      $$3 = $55;
      break L1;
      break;
     }
     case 76:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($40,8266);
      $503 = ((($2)) + 4|0);
      $504 = HEAP32[$503>>2]|0;
      $505 = ((($2)) + 8|0);
      $506 = HEAP32[$505>>2]|0;
      $507 = ($504>>>0)<($506>>>0);
      if ($507) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($504,$40);
       $508 = HEAP32[$503>>2]|0;
       $509 = ((($508)) + 24|0);
       HEAP32[$503>>2] = $509;
      } else {
       __THREW__ = 0;
       invoke_vii(105,($2|0),($40|0));
       $510 = __THREW__; __THREW__ = 0;
       $511 = $510&1;
       if ($511) {
        $512 = ___cxa_find_matching_catch_2()|0;
        $513 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($40);
        $$0161 = $512;$$0162 = $513;
        break L3;
       }
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($40);
      $$3 = $55;
      break L1;
      break;
     }
     case 112:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($41,8277);
      $514 = ((($2)) + 4|0);
      $515 = HEAP32[$514>>2]|0;
      $516 = ((($2)) + 8|0);
      $517 = HEAP32[$516>>2]|0;
      $518 = ($515>>>0)<($517>>>0);
      if ($518) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($515,$41);
       $519 = HEAP32[$514>>2]|0;
       $520 = ((($519)) + 24|0);
       HEAP32[$514>>2] = $520;
      } else {
       __THREW__ = 0;
       invoke_vii(105,($2|0),($41|0));
       $521 = __THREW__; __THREW__ = 0;
       $522 = $521&1;
       if ($522) {
        $523 = ___cxa_find_matching_catch_2()|0;
        $524 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($41);
        $$0161 = $523;$$0162 = $524;
        break L3;
       }
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($41);
      $$3 = $55;
      break L1;
      break;
     }
     case 115:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($42,8256);
      $525 = ((($2)) + 4|0);
      $526 = HEAP32[$525>>2]|0;
      $527 = ((($2)) + 8|0);
      $528 = HEAP32[$527>>2]|0;
      $529 = ($526>>>0)<($528>>>0);
      if ($529) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($526,$42);
       $530 = HEAP32[$525>>2]|0;
       $531 = ((($530)) + 24|0);
       HEAP32[$525>>2] = $531;
      } else {
       __THREW__ = 0;
       invoke_vii(105,($2|0),($42|0));
       $532 = __THREW__; __THREW__ = 0;
       $533 = $532&1;
       if ($533) {
        $534 = ___cxa_find_matching_catch_2()|0;
        $535 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($42);
        $$0161 = $534;$$0162 = $535;
        break L3;
       }
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($42);
      $$3 = $55;
      break L1;
      break;
     }
     case 116:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($43,8288);
      $536 = ((($2)) + 4|0);
      $537 = HEAP32[$536>>2]|0;
      $538 = ((($2)) + 8|0);
      $539 = HEAP32[$538>>2]|0;
      $540 = ($537>>>0)<($539>>>0);
      if ($540) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($537,$43);
       $541 = HEAP32[$536>>2]|0;
       $542 = ((($541)) + 24|0);
       HEAP32[$536>>2] = $542;
      } else {
       __THREW__ = 0;
       invoke_vii(105,($2|0),($43|0));
       $543 = __THREW__; __THREW__ = 0;
       $544 = $543&1;
       if ($544) {
        $545 = ___cxa_find_matching_catch_2()|0;
        $546 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($43);
        $$0161 = $545;$$0162 = $546;
        break L3;
       }
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($43);
      $$3 = $55;
      break L1;
      break;
     }
     default: {
      $$3 = $0;
      break L1;
     }
     }
     break;
    }
    case 113:  {
     $547 = HEAP8[$56>>0]|0;
     $548 = ($547<<24>>24)==(117);
     if (!($548)) {
      $$3 = $0;
      break L1;
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($44,8299);
     $549 = ((($2)) + 4|0);
     $550 = HEAP32[$549>>2]|0;
     $551 = ((($2)) + 8|0);
     $552 = HEAP32[$551>>2]|0;
     $553 = ($550>>>0)<($552>>>0);
     if ($553) {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($550,$44);
      $554 = HEAP32[$549>>2]|0;
      $555 = ((($554)) + 24|0);
      HEAP32[$549>>2] = $555;
     } else {
      __THREW__ = 0;
      invoke_vii(105,($2|0),($44|0));
      $556 = __THREW__; __THREW__ = 0;
      $557 = $556&1;
      if ($557) {
       $558 = ___cxa_find_matching_catch_2()|0;
       $559 = tempRet0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($44);
       $$0161 = $558;$$0162 = $559;
       break L3;
      }
     }
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($44);
     $$3 = $55;
     break L1;
     break;
    }
    case 114:  {
     $560 = HEAP8[$56>>0]|0;
     $561 = $560 << 24 >> 24;
     switch ($561|0) {
     case 109:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($45,8309);
      $562 = ((($2)) + 4|0);
      $563 = HEAP32[$562>>2]|0;
      $564 = ((($2)) + 8|0);
      $565 = HEAP32[$564>>2]|0;
      $566 = ($563>>>0)<($565>>>0);
      if ($566) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($563,$45);
       $567 = HEAP32[$562>>2]|0;
       $568 = ((($567)) + 24|0);
       HEAP32[$562>>2] = $568;
      } else {
       __THREW__ = 0;
       invoke_vii(105,($2|0),($45|0));
       $569 = __THREW__; __THREW__ = 0;
       $570 = $569&1;
       if ($570) {
        $571 = ___cxa_find_matching_catch_2()|0;
        $572 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($45);
        $$0161 = $571;$$0162 = $572;
        break L3;
       }
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($45);
      $$3 = $55;
      break L1;
      break;
     }
     case 77:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($46,8319);
      $573 = ((($2)) + 4|0);
      $574 = HEAP32[$573>>2]|0;
      $575 = ((($2)) + 8|0);
      $576 = HEAP32[$575>>2]|0;
      $577 = ($574>>>0)<($576>>>0);
      if ($577) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($574,$46);
       $578 = HEAP32[$573>>2]|0;
       $579 = ((($578)) + 24|0);
       HEAP32[$573>>2] = $579;
      } else {
       __THREW__ = 0;
       invoke_vii(105,($2|0),($46|0));
       $580 = __THREW__; __THREW__ = 0;
       $581 = $580&1;
       if ($581) {
        $582 = ___cxa_find_matching_catch_2()|0;
        $583 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($46);
        $$0161 = $582;$$0162 = $583;
        break L3;
       }
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($46);
      $$3 = $55;
      break L1;
      break;
     }
     case 115:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($47,8330);
      $584 = ((($2)) + 4|0);
      $585 = HEAP32[$584>>2]|0;
      $586 = ((($2)) + 8|0);
      $587 = HEAP32[$586>>2]|0;
      $588 = ($585>>>0)<($587>>>0);
      if ($588) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($585,$47);
       $589 = HEAP32[$584>>2]|0;
       $590 = ((($589)) + 24|0);
       HEAP32[$584>>2] = $590;
      } else {
       __THREW__ = 0;
       invoke_vii(105,($2|0),($47|0));
       $591 = __THREW__; __THREW__ = 0;
       $592 = $591&1;
       if ($592) {
        $593 = ___cxa_find_matching_catch_2()|0;
        $594 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($47);
        $$0161 = $593;$$0162 = $594;
        break L3;
       }
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($47);
      $$3 = $55;
      break L1;
      break;
     }
     case 83:  {
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj12EEERAT__Kc($48,8341);
      $595 = ((($2)) + 4|0);
      $596 = HEAP32[$595>>2]|0;
      $597 = ((($2)) + 8|0);
      $598 = HEAP32[$597>>2]|0;
      $599 = ($596>>>0)<($598>>>0);
      if ($599) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($596,$48);
       $600 = HEAP32[$595>>2]|0;
       $601 = ((($600)) + 24|0);
       HEAP32[$595>>2] = $601;
      } else {
       __THREW__ = 0;
       invoke_vii(105,($2|0),($48|0));
       $602 = __THREW__; __THREW__ = 0;
       $603 = $602&1;
       if ($603) {
        $604 = ___cxa_find_matching_catch_2()|0;
        $605 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($48);
        $$0161 = $604;$$0162 = $605;
        break L3;
       }
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($48);
      $$3 = $55;
      break L1;
      break;
     }
     default: {
      $$3 = $0;
      break L1;
     }
     }
     break;
    }
    case 118:  {
     $606 = HEAP8[$56>>0]|0;
     $607 = $606 << 24 >> 24;
     $isdigittmp = (($607) + -48)|0;
     $isdigit = ($isdigittmp>>>0)<(10);
     if (!($isdigit)) {
      $$3 = $0;
      break L1;
     }
     $608 = (__ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_($55,$1,$2)|0);
     $609 = ($608|0)==($55|0);
     if ($609) {
      $$3 = $0;
      break L1;
     }
     $610 = HEAP32[$2>>2]|0;
     $611 = ((($2)) + 4|0);
     $612 = HEAP32[$611>>2]|0;
     $613 = ($610|0)==($612|0);
     if ($613) {
      $$3 = $0;
      break L1;
     }
     $614 = ((($612)) + -24|0);
     (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($614,0,7941)|0);
     $$3 = $608;
     break L1;
     break;
    }
    default: {
     $$3 = $0;
     break L1;
    }
    }
   } while(0);
   ___resumeException($$0161|0);
   // unreachable;
  } else {
   $$3 = $0;
  }
 } while(0);
 STACKTOP = sp;return ($$3|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj11EEERAT__Kc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $4 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($0,$1,10);
 $2 = ((($0)) + 12|0);
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $3 = (($2) + ($$0$i$i<<2)|0);
  HEAP32[$3>>2] = 0;
  $4 = (($$0$i$i) + 1)|0;
  $$0$i$i = $4;
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj10EEERAT__Kc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $4 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($0,$1,9);
 $2 = ((($0)) + 12|0);
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $3 = (($2) + ($$0$i$i<<2)|0);
  HEAP32[$3>>2] = 0;
  $4 = (($$0$i$i) + 1)|0;
  $$0$i$i = $4;
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj18EEERAT__Kc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $4 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($0,$1,17);
 $2 = ((($0)) + 12|0);
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $3 = (($2) + ($$0$i$i<<2)|0);
  HEAP32[$3>>2] = 0;
  $4 = (($$0$i$i) + 1)|0;
  $$0$i$i = $4;
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj16EEERAT__Kc($0) {
 $0 = $0|0;
 var $$0$i$i = 0, $1 = 0, $2 = 0, $3 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($0,8353,15);
 $1 = ((($0)) + 12|0);
 ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $2 = (($1) + ($$0$i$i<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($$0$i$i) + 1)|0;
  $$0$i$i = $3;
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj12EEERAT__Kc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $4 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($0,$1,11);
 $2 = ((($0)) + 12|0);
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $3 = (($2) + ($$0$i$i<<2)|0);
  HEAP32[$3>>2] = 0;
  $4 = (($$0$i$i) + 1)|0;
  $$0$i$i = $4;
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj15EEERAT__Kc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $4 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($0,$1,14);
 $2 = ((($0)) + 12|0);
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $3 = (($2) + ($$0$i$i<<2)|0);
  HEAP32[$3>>2] = 0;
  $4 = (($$0$i$i) + 1)|0;
  $$0$i$i = $4;
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj13EEERAT__Kc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $4 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($0,$1,12);
 $2 = ((($0)) + 12|0);
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $3 = (($2) + ($$0$i$i<<2)|0);
  HEAP32[$3>>2] = 0;
  $4 = (($$0$i$i) + 1)|0;
  $$0$i$i = $4;
 }
 return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendIPKcEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorISC_EE5valueERS7_E4typeESC_SC_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$028 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, $scevgep = 0, $scevgep1 = 0, $scevgep2 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $1;
 $4 = sp;
 $5 = ((($0)) + 11|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)<(0);
 if ($7) {
  $9 = ((($0)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($0)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $12 & 2147483647;
  $phitmp$i = (($13) + -1)|0;
  $18 = $10;$19 = $phitmp$i;
 } else {
  $8 = $6&255;
  $18 = $8;$19 = 10;
 }
 $14 = $2;
 $15 = (($14) - ($3))|0;
 $16 = ($15|0)==(0);
 do {
  if (!($16)) {
   $17 = (($19) - ($18))|0;
   $20 = ($17>>>0)<($15>>>0);
   $21 = (($18) + ($15))|0;
   if ($20) {
    $22 = (($21) - ($19))|0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9__grow_byEjjjjjj($0,$19,$22,$18,$18,0);
    $$pre = HEAP8[$5>>0]|0;
    $24 = $$pre;
   } else {
    $24 = $6;
   }
   $23 = ($24<<24>>24)<(0);
   if ($23) {
    $25 = HEAP32[$0>>2]|0;
    $27 = $25;
   } else {
    $27 = $0;
   }
   $26 = (($27) + ($18)|0);
   $28 = (($18) - ($3))|0;
   $scevgep = (($2) + ($28)|0);
   $scevgep1 = $scevgep;
   $$0 = $26;$$028 = $1;
   while(1) {
    $29 = ($$028|0)==($2|0);
    if ($29) {
     break;
    }
    __ZNSt3__211char_traitsIcE6assignERcRKc($$0,$$028);
    $30 = ((($$0)) + 1|0);
    $31 = ((($$028)) + 1|0);
    $$0 = $30;$$028 = $31;
   }
   $scevgep2 = (($27) + ($scevgep1)|0);
   HEAP8[$4>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($scevgep2,$4);
   $32 = HEAP8[$5>>0]|0;
   $33 = ($32<<24>>24)<(0);
   if ($33) {
    $34 = ((($0)) + 4|0);
    HEAP32[$34>>2] = $21;
    break;
   } else {
    $35 = $21&255;
    HEAP8[$5>>0] = $35;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$018 = 0, $$019 = 0, $$pn = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 1|0;
 $3 = sp;
 HEAP8[$2>>0] = $1;
 $4 = ((($0)) + 11|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)<(0);
 if ($6) {
  $8 = ((($0)) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $9 & 2147483647;
  $11 = (($10) + -1)|0;
  $12 = ((($0)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $$018 = $13;$$019 = $11;
 } else {
  $7 = $5&255;
  $$018 = $7;$$019 = 10;
 }
 $14 = ($$018|0)==($$019|0);
 if ($14) {
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9__grow_byEjjjjjj($0,$$019,1,$$019,$$019,0);
  $15 = HEAP8[$4>>0]|0;
  $16 = ($15<<24>>24)<(0);
  $17 = (($$019) + 1)|0;
  if ($16) {
   $23 = $17;
   label = 8;
  } else {
   $20 = $17;
   label = 7;
  }
 } else {
  $18 = (($$018) + 1)|0;
  if ($6) {
   $23 = $18;
   label = 8;
  } else {
   $20 = $18;
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $19 = $20&255;
  HEAP8[$4>>0] = $19;
  $$pn = $0;
 }
 else if ((label|0) == 8) {
  $21 = HEAP32[$0>>2]|0;
  $22 = ((($0)) + 4|0);
  HEAP32[$22>>2] = $23;
  $$pn = $21;
 }
 $$0 = (($$pn) + ($$018)|0);
 __ZNSt3__211char_traitsIcE6assignERcRKc($$0,$2);
 $24 = ((($$0)) + 1|0);
 HEAP8[$3>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($24,$3);
 STACKTOP = sp;return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertIPKcEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorISC_EE5valueENS_11__wrap_iterIPcEEE4typeENSD_ISA_EESC_SC_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$047 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = ((($0)) + 11|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)<(0);
 if ($7) {
  $12 = HEAP32[$0>>2]|0;
  $13 = HEAP32[$1>>2]|0;
  $14 = (($13) - ($12))|0;
  $15 = ((($0)) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($0)) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $18 & 2147483647;
  $phitmp$i = (($19) + -1)|0;
  $25 = $16;$26 = $phitmp$i;$31 = $14;
 } else {
  $8 = $0;
  $9 = HEAP32[$1>>2]|0;
  $10 = (($9) - ($8))|0;
  $11 = $6&255;
  $25 = $11;$26 = 10;$31 = $10;
 }
 $20 = $3;
 $21 = $2;
 $22 = (($20) - ($21))|0;
 $23 = ($22|0)==(0);
 L5: do {
  if (!($23)) {
   $24 = (($26) - ($25))|0;
   $27 = ($24>>>0)<($22>>>0);
   $28 = (($25) + ($22))|0;
   if ($27) {
    $36 = (($28) - ($26))|0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9__grow_byEjjjjjj($0,$26,$36,$25,$31,$22);
    $37 = HEAP32[$0>>2]|0;
    $$047 = $37;
   } else {
    if ($7) {
     $29 = HEAP32[$0>>2]|0;
     $34 = $29;
    } else {
     $34 = $0;
    }
    $30 = (($25) - ($31))|0;
    $32 = ($30|0)==(0);
    if ($32) {
     $$047 = $34;
    } else {
     $33 = (($34) + ($31)|0);
     $35 = (($33) + ($22)|0);
     (__ZNSt3__211char_traitsIcE4moveEPcPKcj($35,$33,$30)|0);
     $$047 = $34;
    }
   }
   $38 = HEAP8[$5>>0]|0;
   $39 = ($38<<24>>24)<(0);
   if ($39) {
    $40 = ((($0)) + 4|0);
    HEAP32[$40>>2] = $28;
   } else {
    $41 = $28&255;
    HEAP8[$5>>0] = $41;
   }
   $42 = (($$047) + ($28)|0);
   HEAP8[$4>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($42,$4);
   $43 = (($$047) + ($31)|0);
   $$0 = $2;$$1 = $43;
   while(1) {
    $44 = ($$0|0)==($3|0);
    if ($44) {
     break L5;
    }
    __ZNSt3__211char_traitsIcE6assignERcRKc($$1,$$0);
    $45 = ((($$1)) + 1|0);
    $46 = ((($$0)) + 1|0);
    $$0 = $46;$$1 = $45;
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9__grow_byEjjjjjj($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = (-17 - ($1))|0;
 $7 = ($6>>>0)<($2>>>0);
 if ($7) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
 }
 $8 = ((($0)) + 11|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = ($9<<24>>24)<(0);
 if ($10) {
  $11 = HEAP32[$0>>2]|0;
  $22 = $11;
 } else {
  $22 = $0;
 }
 $12 = ($1>>>0)<(2147483623);
 if ($12) {
  $13 = (($2) + ($1))|0;
  $14 = $1 << 1;
  $15 = ($13>>>0)<($14>>>0);
  $$sroa$speculated = $15 ? $14 : $13;
  $16 = ($$sroa$speculated>>>0)<(11);
  $17 = (($$sroa$speculated) + 16)|0;
  $18 = $17 & -16;
  $phitmp = $16 ? 11 : $18;
  $19 = $phitmp;
 } else {
  $19 = -17;
 }
 $20 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($19)|0);
 $21 = ($4|0)==(0);
 if (!($21)) {
  (__ZNSt3__211char_traitsIcE4copyEPcPKcj($20,$22,$4)|0);
 }
 $23 = (($3) - ($4))|0;
 $24 = ($23|0)==(0);
 if (!($24)) {
  $25 = (($20) + ($4)|0);
  $26 = (($25) + ($5)|0);
  $27 = (($22) + ($4)|0);
  (__ZNSt3__211char_traitsIcE4copyEPcPKcj($26,$27,$23)|0);
 }
 $28 = ($1|0)==(10);
 if (!($28)) {
  __ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE10deallocateEPcj($22);
 }
 HEAP32[$0>>2] = $20;
 $29 = $19 | -2147483648;
 $30 = ((($0)) + 8|0);
 HEAP32[$30>>2] = $29;
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_19base_nameINSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEEEET_RS9_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$0$i$i = 0, $$032$ph = 0, $$033 = 0, $$033$ph = 0, $$1 = 0, $$2 = 0, $$2$pn = 0, $$pre = 0, $$pre52 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 11|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)<(0);
 $5 = ((($1)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $3&255;
 $8 = $4 ? $6 : $7;
 $9 = ($8|0)==(0);
 L1: do {
  if ($9) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($0,$1);
  } else {
   __THREW__ = 0;
   $10 = (invoke_ii(99,(8388|0))|0);
   $11 = __THREW__; __THREW__ = 0;
   $12 = $11&1;
   if ($12) {
    $24 = ___cxa_find_matching_catch_3(0|0)|0;
    $25 = tempRet0;
    ___clang_call_terminate($24);
    // unreachable;
   }
   $13 = HEAP8[$2>>0]|0;
   $14 = ($13<<24>>24)<(0);
   $15 = HEAP32[$5>>2]|0;
   $16 = $13&255;
   $17 = $14 ? $15 : $16;
   $18 = ($10|0)==($17|0);
   if ($18) {
    __THREW__ = 0;
    $19 = (invoke_iiii(100,($1|0),(8388|0),($10|0))|0);
    $20 = __THREW__; __THREW__ = 0;
    $21 = $20&1;
    if ($21) {
     $22 = ___cxa_find_matching_catch_3(0|0)|0;
     $23 = tempRet0;
     ___clang_call_terminate($22);
     // unreachable;
    }
    $26 = ($19|0)==(0);
    if ($26) {
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKc($1,8400);
     ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
     $27 = (__ZNSt3__211char_traitsIcE6lengthEPKc(8471)|0);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($0,8471,$27);
     break;
    }
   }
   __THREW__ = 0;
   $28 = (invoke_ii(99,(8484|0))|0);
   $29 = __THREW__; __THREW__ = 0;
   $30 = $29&1;
   if ($30) {
    $42 = ___cxa_find_matching_catch_3(0|0)|0;
    $43 = tempRet0;
    ___clang_call_terminate($42);
    // unreachable;
   }
   $31 = HEAP8[$2>>0]|0;
   $32 = ($31<<24>>24)<(0);
   $33 = HEAP32[$5>>2]|0;
   $34 = $31&255;
   $35 = $32 ? $33 : $34;
   $36 = ($28|0)==($35|0);
   if ($36) {
    __THREW__ = 0;
    $37 = (invoke_iiii(100,($1|0),(8484|0),($28|0))|0);
    $38 = __THREW__; __THREW__ = 0;
    $39 = $38&1;
    if ($39) {
     $40 = ___cxa_find_matching_catch_3(0|0)|0;
     $41 = tempRet0;
     ___clang_call_terminate($40);
     // unreachable;
    }
    $44 = ($37|0)==(0);
    if ($44) {
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKc($1,8497);
     ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
     $45 = (__ZNSt3__211char_traitsIcE6lengthEPKc(8547)|0);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($0,8547,$45);
     break;
    }
   }
   __THREW__ = 0;
   $46 = (invoke_ii(99,(8561|0))|0);
   $47 = __THREW__; __THREW__ = 0;
   $48 = $47&1;
   if ($48) {
    $60 = ___cxa_find_matching_catch_3(0|0)|0;
    $61 = tempRet0;
    ___clang_call_terminate($60);
    // unreachable;
   }
   $49 = HEAP8[$2>>0]|0;
   $50 = ($49<<24>>24)<(0);
   $51 = HEAP32[$5>>2]|0;
   $52 = $49&255;
   $53 = $50 ? $51 : $52;
   $54 = ($46|0)==($53|0);
   if ($54) {
    __THREW__ = 0;
    $55 = (invoke_iiii(100,($1|0),(8561|0),($46|0))|0);
    $56 = __THREW__; __THREW__ = 0;
    $57 = $56&1;
    if ($57) {
     $58 = ___cxa_find_matching_catch_3(0|0)|0;
     $59 = tempRet0;
     ___clang_call_terminate($58);
     // unreachable;
    }
    $62 = ($55|0)==(0);
    if ($62) {
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKc($1,8574);
     ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
     $63 = (__ZNSt3__211char_traitsIcE6lengthEPKc(8624)|0);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($0,8624,$63);
     break;
    }
   }
   __THREW__ = 0;
   $64 = (invoke_ii(99,(8638|0))|0);
   $65 = __THREW__; __THREW__ = 0;
   $66 = $65&1;
   if ($66) {
    $78 = ___cxa_find_matching_catch_3(0|0)|0;
    $79 = tempRet0;
    ___clang_call_terminate($78);
    // unreachable;
   }
   $67 = HEAP8[$2>>0]|0;
   $68 = ($67<<24>>24)<(0);
   $69 = HEAP32[$5>>2]|0;
   $70 = $67&255;
   $71 = $68 ? $69 : $70;
   $72 = ($64|0)==($71|0);
   do {
    if ($72) {
     __THREW__ = 0;
     $73 = (invoke_iiii(100,($1|0),(8638|0),($64|0))|0);
     $74 = __THREW__; __THREW__ = 0;
     $75 = $74&1;
     if ($75) {
      $76 = ___cxa_find_matching_catch_3(0|0)|0;
      $77 = tempRet0;
      ___clang_call_terminate($76);
      // unreachable;
     }
     $80 = ($73|0)==(0);
     if ($80) {
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKc($1,8652);
      ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
      $81 = (__ZNSt3__211char_traitsIcE6lengthEPKc(8703)|0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($0,8703,$81);
      break L1;
     } else {
      $$pre = HEAP8[$2>>0]|0;
      $$pre52 = HEAP32[$5>>2]|0;
      $83 = $$pre;$88 = $$pre52;
      break;
     }
    } else {
     $83 = $67;$88 = $69;
    }
   } while(0);
   $82 = ($83<<24>>24)<(0);
   $84 = HEAP32[$1>>2]|0;
   $85 = $82 ? $84 : $1;
   $86 = $83&255;
   $87 = $82 ? $88 : $86;
   $89 = (($85) + ($87)|0);
   $90 = ((($89)) + -1|0);
   $91 = HEAP8[$90>>0]|0;
   $92 = ($91<<24>>24)==(62);
   L46: do {
    if ($92) {
     $$032$ph = 1;$$033$ph = $89;
     L47: while(1) {
      $$033 = $$033$ph;
      L49: while(1) {
       $93 = ((($$033)) + -1|0);
       $94 = ($93|0)==($85|0);
       if ($94) {
        break L47;
       }
       $97 = ((($$033)) + -2|0);
       $98 = HEAP8[$97>>0]|0;
       switch ($98<<24>>24) {
       case 60:  {
        label = 39;
        break L49;
        break;
       }
       case 62:  {
        label = 40;
        break L49;
        break;
       }
       default: {
        $$033 = $93;
       }
       }
      }
      if ((label|0) == 39) {
       label = 0;
       $99 = (($$032$ph) + -1)|0;
       $100 = ($99|0)==(0);
       if ($100) {
        $$2 = $97;
        break L46;
       } else {
        $$032$ph = $99;$$033$ph = $93;
        continue;
       }
      }
      else if ((label|0) == 40) {
       label = 0;
       $101 = (($$032$ph) + 1)|0;
       $$032$ph = $101;$$033$ph = $93;
       continue;
      }
     }
     ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
     $$0$i$i = 0;
     while(1) {
      $exitcond$i$i = ($$0$i$i|0)==(3);
      if ($exitcond$i$i) {
       break L1;
      }
      $95 = (($0) + ($$0$i$i<<2)|0);
      HEAP32[$95>>2] = 0;
      $96 = (($$0$i$i) + 1)|0;
      $$0$i$i = $96;
     }
    } else {
     $$2 = $89;
    }
   } while(0);
   $$2$pn = $$2;
   while(1) {
    $$0 = ((($$2$pn)) + -1|0);
    $102 = ($$0|0)==($85|0);
    if ($102) {
     $$1 = $85;
     break;
    }
    $103 = HEAP8[$$0>>0]|0;
    $104 = ($103<<24>>24)==(58);
    if ($104) {
     $$1 = $$2$pn;
     break;
    } else {
     $$2$pn = $$0;
    }
   }
   ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESC_SC_($0,$$1,$$2);
  }
 } while(0);
 return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $2 = ((($1)) + 11|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)<(0);
 if ($4) {
  $5 = HEAP32[$1>>2]|0;
  $6 = ((($1)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($0,$5,$7);
 } else {
  ;HEAP32[$0>>2]=HEAP32[$1>>2]|0;HEAP32[$0+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$1+8>>2]|0;
 }
 return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESC_SC_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$021 = 0, $$021$ph = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $scevgep23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $1;
 $4 = sp;
 $5 = $2;
 $6 = (($5) - ($3))|0;
 $7 = ($6>>>0)>(4294967279);
 if ($7) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  label = 5;
 } else {
  $8 = ($6>>>0)<(11);
  if ($8) {
   $9 = $6&255;
   $10 = ((($0)) + 11|0);
   HEAP8[$10>>0] = $9;
   $$021$ph = $0;
  } else {
   label = 5;
  }
 }
 if ((label|0) == 5) {
  $11 = (($6) + 16)|0;
  $12 = $11 & -16;
  $13 = (__ZN10__cxxabiv112_GLOBAL__N_112malloc_allocIcE8allocateEj($12)|0);
  HEAP32[$0>>2] = $13;
  $14 = $12 | -2147483648;
  $15 = ((($0)) + 8|0);
  HEAP32[$15>>2] = $14;
  $16 = ((($0)) + 4|0);
  HEAP32[$16>>2] = $6;
  $$021$ph = $13;
 }
 $17 = $2;
 $18 = (($17) - ($3))|0;
 $$0 = $1;$$021 = $$021$ph;
 while(1) {
  $19 = ($$0|0)==($2|0);
  if ($19) {
   break;
  }
  __ZNSt3__211char_traitsIcE6assignERcRKc($$021,$$0);
  $20 = ((($$0)) + 1|0);
  $21 = ((($$021)) + 1|0);
  $$0 = $20;$$021 = $21;
 }
 $scevgep23 = (($$021$ph) + ($18)|0);
 HEAP8[$4>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($scevgep23,$4);
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv112_GLOBAL__N_121parse_destructor_nameINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$019 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==($1|0);
 if ($3) {
  $$1 = $0;
 } else {
  $4 = (__ZN10__cxxabiv112_GLOBAL__N_121parse_unresolved_typeINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
  $5 = ($4|0)==($0|0);
  if ($5) {
   $6 = (__ZN10__cxxabiv112_GLOBAL__N_115parse_simple_idINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
   $$019 = $6;
  } else {
   $$019 = $4;
  }
  $7 = ($$019|0)==($0|0);
  if ($7) {
   $$1 = $0;
  } else {
   $8 = HEAP32[$2>>2]|0;
   $9 = ((($2)) + 4|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($8|0)==($10|0);
   if ($11) {
    $$1 = $0;
   } else {
    $12 = ((($10)) + -24|0);
    (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($12,0,7638)|0);
    $$1 = $$019;
   }
  }
 }
 return ($$1|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2Ev($0) {
 $0 = $0|0;
 var $$0$i$i = 0, $$0$i$i1 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $exitcond$i$i = 0, $exitcond$i$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $1 = (($0) + ($$0$i$i<<2)|0);
  HEAP32[$1>>2] = 0;
  $2 = (($$0$i$i) + 1)|0;
  $$0$i$i = $2;
 }
 $3 = ((($0)) + 12|0);
 ;HEAP32[$3>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
 $$0$i$i1 = 0;
 while(1) {
  $exitcond$i$i2 = ($$0$i$i1|0)==(3);
  if ($exitcond$i$i2) {
   break;
  }
  $4 = (($3) + ($$0$i$i1<<2)|0);
  HEAP32[$4>>2] = 0;
  $5 = (($$0$i$i1) + 1)|0;
  $$0$i$i1 = $5;
 }
 return;
}
function __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE24__emplace_back_slow_pathIJEEEvDpOT_($0) {
 $0 = $0|0;
 var $$sroa$speculated$$i = 0, $$sroa$speculated$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp;
 $2 = ((($0)) + 12|0);
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$0>>2]|0;
 $6 = (($4) - ($5))|0;
 $7 = (($6|0) / 24)&-1;
 $8 = (($7) + 1)|0;
 $9 = (__ZNKSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE8max_sizeEv($0)|0);
 $10 = ($9>>>0)<($8>>>0);
 if ($10) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
 }
 $11 = ((($0)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$0>>2]|0;
 $14 = (($12) - ($13))|0;
 $15 = (($14|0) / 24)&-1;
 $16 = $9 >>> 1;
 $17 = ($15>>>0)<($16>>>0);
 $18 = $15 << 1;
 $19 = ($18>>>0)<($8>>>0);
 $$sroa$speculated$i = $19 ? $8 : $18;
 $$sroa$speculated$$i = $17 ? $$sroa$speculated$i : $9;
 $20 = HEAP32[$3>>2]|0;
 $21 = (($20) - ($13))|0;
 $22 = (($21|0) / 24)&-1;
 __ZNSt3__214__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($1,$$sroa$speculated$$i,$22,$2);
 $23 = ((($1)) + 8|0);
 $24 = HEAP32[$23>>2]|0;
 ;HEAP32[$24>>2]=0|0;HEAP32[$24+4>>2]=0|0;HEAP32[$24+8>>2]=0|0;HEAP32[$24+12>>2]=0|0;HEAP32[$24+16>>2]=0|0;HEAP32[$24+20>>2]=0|0;
 __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2Ev($24);
 $25 = ((($24)) + 24|0);
 HEAP32[$23>>2] = $25;
 __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($0,$1);
 __ZNSt3__214__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNKSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE8max_sizeEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 178956970;
}
function __ZNSt3__214__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEEC2EjjS6_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 12|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 16|0);
 HEAP32[$5>>2] = $3;
 $6 = ($1|0)==(0);
 if ($6) {
  $8 = 0;
 } else {
  $7 = (__ZN10__cxxabiv112_GLOBAL__N_111short_allocINS0_11string_pairELj4096EE8allocateEj($3,$1)|0);
  $8 = $7;
 }
 HEAP32[$0>>2] = $8;
 $9 = (($8) + (($2*24)|0)|0);
 $10 = ((($0)) + 8|0);
 HEAP32[$10>>2] = $9;
 $11 = ((($0)) + 4|0);
 HEAP32[$11>>2] = $9;
 $12 = (($8) + (($1*24)|0)|0);
 $13 = ((($0)) + 12|0);
 HEAP32[$13>>2] = $12;
 return;
}
function __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 4|0);
 $$0$i = $4;
 while(1) {
  $6 = ($$0$i|0)==($2|0);
  if ($6) {
   break;
  }
  $7 = HEAP32[$5>>2]|0;
  $8 = ((($7)) + -24|0);
  $9 = ((($$0$i)) + -24|0);
  __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($8,$9);
  $10 = HEAP32[$5>>2]|0;
  $11 = ((($10)) + -24|0);
  HEAP32[$5>>2] = $11;
  $$0$i = $9;
 }
 $12 = HEAP32[$0>>2]|0;
 $13 = HEAP32[$5>>2]|0;
 HEAP32[$0>>2] = $13;
 HEAP32[$5>>2] = $12;
 $14 = ((($1)) + 8|0);
 $15 = HEAP32[$3>>2]|0;
 $16 = HEAP32[$14>>2]|0;
 HEAP32[$3>>2] = $16;
 HEAP32[$14>>2] = $15;
 $17 = ((($0)) + 8|0);
 $18 = ((($1)) + 12|0);
 $19 = HEAP32[$17>>2]|0;
 $20 = HEAP32[$18>>2]|0;
 HEAP32[$17>>2] = $20;
 HEAP32[$18>>2] = $19;
 $21 = HEAP32[$5>>2]|0;
 HEAP32[$1>>2] = $21;
 return;
}
function __ZNSt3__214__split_bufferIN10__cxxabiv112_GLOBAL__N_111string_pairERNS2_11short_allocIS3_Lj4096EEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 while(1) {
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==($2|0);
  if ($5) {
   break;
  }
  $6 = ((($4)) + -24|0);
  HEAP32[$3>>2] = $6;
  __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($6);
 }
 $7 = HEAP32[$0>>2]|0;
 $8 = ($7|0)==(0|0);
 if (!($8)) {
  $9 = $7;
  $10 = ((($0)) + 16|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($0)) + 12|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) - ($9))|0;
  $15 = (($14|0) / 24)&-1;
  __ZN10__cxxabiv112_GLOBAL__N_111short_allocINS0_11string_pairELj4096EE10deallocateEPS2_j($11,$7,$15);
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111short_allocINS0_11string_pairELj4096EE8allocateEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ($1*24)|0;
 $4 = (__ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE8allocateEj($2,$3)|0);
 return ($4|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE8allocateEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE8align_upEj($1)|0);
 $3 = ((($0)) + 4096|0);
 $4 = ((($0)) + 4096|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $3;
 $7 = $5;
 $8 = (($6) - ($7))|0;
 $9 = ($8>>>0)<($2>>>0);
 if ($9) {
  $11 = (_malloc($2)|0);
  $$0 = $11;
 } else {
  $10 = (($5) + ($2)|0);
  HEAP32[$4>>2] = $10;
  $$0 = $5;
 }
 return ($$0|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$0$i$i$i = 0, $$024 = 0, $$025 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i$i$i = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = sp + 24|0;
 $5 = sp + 12|0;
 $6 = sp;
 $7 = (__ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($0,$1)|0);
 $8 = ($7|0)==($0|0);
 $9 = ($7|0)==($1|0);
 $or$cond = $8 | $9;
 if ($or$cond) {
  $$1 = $0;
 } else {
  $10 = HEAP8[$7>>0]|0;
  $11 = ($10<<24>>24)==(69);
  if ($11) {
   $12 = ((($2)) + 11|0);
   $13 = HEAP8[$12>>0]|0;
   $14 = ($13<<24>>24)<(0);
   $15 = ((($2)) + 4|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = $13&255;
   $18 = $14 ? $16 : $17;
   $19 = ($18>>>0)>(3);
   L4: do {
    if ($19) {
     __ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_($6,7568,$2);
     __THREW__ = 0;
     $20 = (invoke_iii(95,($6|0),(7566|0))|0);
     $21 = __THREW__; __THREW__ = 0;
     $22 = $21&1;
     do {
      if ($22) {
       $34 = ___cxa_find_matching_catch_2()|0;
       $35 = tempRet0;
       $$0 = $35;$$024 = $34;
      } else {
       ;HEAP32[$5>>2]=HEAP32[$6>>2]|0;HEAP32[$5+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$6+8>>2]|0;
       $$0$i$i$i = 0;
       while(1) {
        $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
        if ($exitcond$i$i$i) {
         break;
        }
        $23 = (($6) + ($$0$i$i$i<<2)|0);
        HEAP32[$23>>2] = 0;
        $24 = (($$0$i$i$i) + 1)|0;
        $$0$i$i$i = $24;
       }
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($4,$5);
       $25 = ((($3)) + 4|0);
       $26 = HEAP32[$25>>2]|0;
       $27 = ((($3)) + 8|0);
       $28 = HEAP32[$27>>2]|0;
       $29 = ($26>>>0)<($28>>>0);
       if ($29) {
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($26,$4);
        $30 = HEAP32[$25>>2]|0;
        $31 = ((($30)) + 24|0);
        HEAP32[$25>>2] = $31;
       } else {
        __THREW__ = 0;
        invoke_vii(105,($3|0),($4|0));
        $32 = __THREW__; __THREW__ = 0;
        $33 = $32&1;
        if ($33) {
         $36 = ___cxa_find_matching_catch_2()|0;
         $37 = tempRet0;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
         $$0 = $37;$$024 = $36;
         break;
        }
       }
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($4);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
       break L4;
      }
     } while(0);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
     ___resumeException($$024|0);
     // unreachable;
    } else {
     $38 = ((($3)) + 4|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = ((($3)) + 8|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = ($39>>>0)<($41>>>0);
     if ($42) {
      ;HEAP32[$39>>2]=0|0;HEAP32[$39+4>>2]=0|0;HEAP32[$39+8>>2]=0|0;HEAP32[$39+12>>2]=0|0;HEAP32[$39+16>>2]=0|0;HEAP32[$39+20>>2]=0|0;
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2Ev($39);
      $43 = HEAP32[$38>>2]|0;
      $44 = ((($43)) + 24|0);
      HEAP32[$38>>2] = $44;
      break;
     } else {
      __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE24__emplace_back_slow_pathIJEEEvDpOT_($3);
      break;
     }
    }
   } while(0);
   $45 = HEAP8[$0>>0]|0;
   $46 = ($45<<24>>24)==(110);
   $47 = ((($3)) + 4|0);
   if ($46) {
    $48 = HEAP32[$47>>2]|0;
    $49 = ((($48)) + -24|0);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc($49,45);
    $50 = ((($0)) + 1|0);
    $$025 = $50;
   } else {
    $$025 = $0;
   }
   $51 = HEAP32[$47>>2]|0;
   $52 = ((($51)) + -24|0);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendIPKcEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr38__libcpp_string_gets_noexcept_iteratorISC_EE5valueERS7_E4typeESC_SC_($52,$$025,$7);
   $53 = HEAP8[$12>>0]|0;
   $54 = ($53<<24>>24)<(0);
   $55 = HEAP32[$15>>2]|0;
   $56 = $53&255;
   $57 = $54 ? $55 : $56;
   $58 = ($57>>>0)<(4);
   if ($58) {
    $59 = HEAP32[$47>>2]|0;
    $60 = ((($59)) + -24|0);
    $61 = HEAP32[$2>>2]|0;
    $62 = $54 ? $61 : $2;
    (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj($60,$62,$57)|0);
   }
   $63 = ((($7)) + 1|0);
   $$1 = $63;
  } else {
   $$1 = $0;
  }
 }
 STACKTOP = sp;return ($$1|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj5EEERAT__Kc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $4 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($0,$1,4);
 $2 = ((($0)) + 12|0);
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $3 = (($2) + ($$0$i$i<<2)|0);
  HEAP32[$3>>2] = 0;
  $4 = (($$0$i$i) + 1)|0;
  $$0$i$i = $4;
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_121parse_floating_numberIfNS0_2DbEEEPKcS4_S4_RT0_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i = 0, $$049$add = 0, $$049$idx = 0, $$049$ptr = 0, $$050 = 0, $$07$i$i = 0, $$247$ph = 0, $$3 = 0, $$add = 0, $$ptr = 0, $$v = 0, $$v56 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isdigit = 0, $isdigit55 = 0, $isdigittmp = 0, $isdigittmp54 = 0, $vararg_buffer = 0;
 var dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $vararg_buffer = sp;
 $3 = sp + 48|0;
 $4 = sp + 56|0;
 $5 = sp + 24|0;
 $6 = sp + 8|0;
 $7 = $1;
 $8 = $0;
 $9 = (($7) - ($8))|0;
 $10 = ($9>>>0)>(8);
 L1: do {
  if ($10) {
   $$049$idx = 0;$$050 = $3;
   while(1) {
    $$049$ptr = (($0) + ($$049$idx)|0);
    $11 = ($$049$idx|0)==(8);
    $12 = HEAP8[$$049$ptr>>0]|0;
    $13 = $12 << 24 >> 24;
    $$049$add = $$049$idx | 1;
    $$ptr = (($0) + ($$049$add)|0);
    if ($11) {
     label = 6;
     break;
    }
    $14 = (_isxdigit($13)|0);
    $15 = ($14|0)==(0);
    if ($15) {
     break;
    }
    $isdigittmp = (($13) + -48)|0;
    $isdigit = ($isdigittmp>>>0)<(10);
    $$v = $isdigit ? 0 : 9;
    $16 = (($$v) + ($13))|0;
    $17 = HEAP8[$$ptr>>0]|0;
    $18 = $17 << 24 >> 24;
    $isdigittmp54 = (($18) + -48)|0;
    $isdigit55 = ($isdigittmp54>>>0)<(10);
    $$v56 = $isdigit55 ? 208 : 169;
    $19 = $16 << 4;
    $20 = (($18) + ($19))|0;
    $21 = (($20) + ($$v56))|0;
    $22 = $21&255;
    HEAP8[$$050>>0] = $22;
    $$add = (($$049$idx) + 2)|0;
    $23 = ((($$050)) + 1|0);
    $$049$idx = $$add;$$050 = $23;
   }
   do {
    if ((label|0) == 6) {
     $24 = ($12<<24>>24)==(69);
     if ($24) {
      $25 = ($3|0)==($$050|0);
      L11: do {
       if (!($25)) {
        $$0$i$i = $$050;$$07$i$i = $3;
        while(1) {
         $26 = ((($$0$i$i)) + -1|0);
         $27 = ($$07$i$i>>>0)<($26>>>0);
         if (!($27)) {
          break L11;
         }
         $28 = HEAP8[$$07$i$i>>0]|0;
         $29 = HEAP8[$26>>0]|0;
         HEAP8[$$07$i$i>>0] = $29;
         HEAP8[$26>>0] = $28;
         $30 = ((($$07$i$i)) + 1|0);
         $$0$i$i = $26;$$07$i$i = $30;
        }
       }
      } while(0);
      dest=$4; stop=dest+24|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
      $31 = +HEAPF32[$3>>2];
      $32 = $31;
      HEAPF64[$vararg_buffer>>3] = $32;
      $33 = (_snprintf($4,24,8880,$vararg_buffer)|0);
      $34 = ($33>>>0)>(23);
      if ($34) {
       break;
      }
      ;HEAP32[$6>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($6,$4,$33);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($5,$6);
      $35 = ((($2)) + 4|0);
      $36 = HEAP32[$35>>2]|0;
      $37 = ((($2)) + 8|0);
      $38 = HEAP32[$37>>2]|0;
      $39 = ($36>>>0)<($38>>>0);
      if ($39) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($36,$5);
       $40 = HEAP32[$35>>2]|0;
       $41 = ((($40)) + 24|0);
       HEAP32[$35>>2] = $41;
      } else {
       __THREW__ = 0;
       invoke_vii(105,($2|0),($5|0));
       $42 = __THREW__; __THREW__ = 0;
       $43 = $42&1;
       if ($43) {
        $44 = ___cxa_find_matching_catch_2()|0;
        $45 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
        ___resumeException($44|0);
        // unreachable;
       }
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
      $$247$ph = $$ptr;
     } else {
      $$247$ph = $0;
     }
     $$3 = $$247$ph;
     break L1;
    }
   } while(0);
   $$3 = $0;
  } else {
   $$3 = $0;
  }
 } while(0);
 STACKTOP = sp;return ($$3|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_121parse_floating_numberIdNS0_2DbEEEPKcS4_S4_RT0_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i = 0, $$049$add = 0, $$049$idx = 0, $$049$ptr = 0, $$050 = 0, $$07$i$i = 0, $$247$ph = 0, $$3 = 0, $$add = 0, $$ptr = 0, $$v = 0, $$v56 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isdigit = 0, $isdigit55 = 0, $isdigittmp = 0, $isdigittmp54 = 0, $vararg_buffer = 0, dest = 0;
 var label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $vararg_buffer = sp + 8|0;
 $3 = sp;
 $4 = sp + 56|0;
 $5 = sp + 32|0;
 $6 = sp + 16|0;
 $7 = $1;
 $8 = $0;
 $9 = (($7) - ($8))|0;
 $10 = ($9>>>0)>(16);
 L1: do {
  if ($10) {
   $$049$idx = 0;$$050 = $3;
   while(1) {
    $$049$ptr = (($0) + ($$049$idx)|0);
    $11 = ($$049$idx|0)==(16);
    $12 = HEAP8[$$049$ptr>>0]|0;
    $13 = $12 << 24 >> 24;
    $$049$add = $$049$idx | 1;
    $$ptr = (($0) + ($$049$add)|0);
    if ($11) {
     label = 6;
     break;
    }
    $14 = (_isxdigit($13)|0);
    $15 = ($14|0)==(0);
    if ($15) {
     break;
    }
    $isdigittmp = (($13) + -48)|0;
    $isdigit = ($isdigittmp>>>0)<(10);
    $$v = $isdigit ? 0 : 9;
    $16 = (($$v) + ($13))|0;
    $17 = HEAP8[$$ptr>>0]|0;
    $18 = $17 << 24 >> 24;
    $isdigittmp54 = (($18) + -48)|0;
    $isdigit55 = ($isdigittmp54>>>0)<(10);
    $$v56 = $isdigit55 ? 208 : 169;
    $19 = $16 << 4;
    $20 = (($18) + ($19))|0;
    $21 = (($20) + ($$v56))|0;
    $22 = $21&255;
    HEAP8[$$050>>0] = $22;
    $$add = (($$049$idx) + 2)|0;
    $23 = ((($$050)) + 1|0);
    $$049$idx = $$add;$$050 = $23;
   }
   do {
    if ((label|0) == 6) {
     $24 = ($12<<24>>24)==(69);
     if ($24) {
      $25 = ($3|0)==($$050|0);
      L11: do {
       if (!($25)) {
        $$0$i$i = $$050;$$07$i$i = $3;
        while(1) {
         $26 = ((($$0$i$i)) + -1|0);
         $27 = ($$07$i$i>>>0)<($26>>>0);
         if (!($27)) {
          break L11;
         }
         $28 = HEAP8[$$07$i$i>>0]|0;
         $29 = HEAP8[$26>>0]|0;
         HEAP8[$$07$i$i>>0] = $29;
         HEAP8[$26>>0] = $28;
         $30 = ((($$07$i$i)) + 1|0);
         $$0$i$i = $26;$$07$i$i = $30;
        }
       }
      } while(0);
      dest=$4; stop=dest+32|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
      $31 = +HEAPF64[$3>>3];
      HEAPF64[$vararg_buffer>>3] = $31;
      $32 = (_snprintf($4,32,8877,$vararg_buffer)|0);
      $33 = ($32>>>0)>(31);
      if ($33) {
       break;
      }
      ;HEAP32[$6>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($6,$4,$32);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($5,$6);
      $34 = ((($2)) + 4|0);
      $35 = HEAP32[$34>>2]|0;
      $36 = ((($2)) + 8|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ($35>>>0)<($37>>>0);
      if ($38) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($35,$5);
       $39 = HEAP32[$34>>2]|0;
       $40 = ((($39)) + 24|0);
       HEAP32[$34>>2] = $40;
      } else {
       __THREW__ = 0;
       invoke_vii(105,($2|0),($5|0));
       $41 = __THREW__; __THREW__ = 0;
       $42 = $41&1;
       if ($42) {
        $43 = ___cxa_find_matching_catch_2()|0;
        $44 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
        ___resumeException($43|0);
        // unreachable;
       }
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
      $$247$ph = $$ptr;
     } else {
      $$247$ph = $0;
     }
     $$3 = $$247$ph;
     break L1;
    }
   } while(0);
   $$3 = $0;
  } else {
   $$3 = $0;
  }
 } while(0);
 STACKTOP = sp;return ($$3|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_121parse_floating_numberIeNS0_2DbEEEPKcS4_S4_RT0_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i = 0, $$049$add = 0, $$049$idx = 0, $$049$ptr = 0, $$050 = 0, $$07$i$i = 0, $$247$ph = 0, $$3 = 0, $$add = 0, $$ptr = 0, $$v = 0, $$v56 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isdigit = 0, $isdigit55 = 0, $isdigittmp = 0, $isdigittmp54 = 0, $vararg_buffer = 0, dest = 0;
 var label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $vararg_buffer = sp + 8|0;
 $3 = sp;
 $4 = sp + 56|0;
 $5 = sp + 32|0;
 $6 = sp + 16|0;
 $7 = $1;
 $8 = $0;
 $9 = (($7) - ($8))|0;
 $10 = ($9>>>0)>(20);
 L1: do {
  if ($10) {
   $$049$idx = 0;$$050 = $3;
   while(1) {
    $$049$ptr = (($0) + ($$049$idx)|0);
    $11 = ($$049$idx|0)==(20);
    $12 = HEAP8[$$049$ptr>>0]|0;
    $13 = $12 << 24 >> 24;
    $$049$add = $$049$idx | 1;
    $$ptr = (($0) + ($$049$add)|0);
    if ($11) {
     label = 6;
     break;
    }
    $14 = (_isxdigit($13)|0);
    $15 = ($14|0)==(0);
    if ($15) {
     break;
    }
    $isdigittmp = (($13) + -48)|0;
    $isdigit = ($isdigittmp>>>0)<(10);
    $$v = $isdigit ? 0 : 9;
    $16 = (($$v) + ($13))|0;
    $17 = HEAP8[$$ptr>>0]|0;
    $18 = $17 << 24 >> 24;
    $isdigittmp54 = (($18) + -48)|0;
    $isdigit55 = ($isdigittmp54>>>0)<(10);
    $$v56 = $isdigit55 ? 208 : 169;
    $19 = $16 << 4;
    $20 = (($18) + ($19))|0;
    $21 = (($20) + ($$v56))|0;
    $22 = $21&255;
    HEAP8[$$050>>0] = $22;
    $$add = (($$049$idx) + 2)|0;
    $23 = ((($$050)) + 1|0);
    $$049$idx = $$add;$$050 = $23;
   }
   do {
    if ((label|0) == 6) {
     $24 = ($12<<24>>24)==(69);
     if ($24) {
      $25 = ($3|0)==($$050|0);
      L11: do {
       if (!($25)) {
        $$0$i$i = $$050;$$07$i$i = $3;
        while(1) {
         $26 = ((($$0$i$i)) + -1|0);
         $27 = ($$07$i$i>>>0)<($26>>>0);
         if (!($27)) {
          break L11;
         }
         $28 = HEAP8[$$07$i$i>>0]|0;
         $29 = HEAP8[$26>>0]|0;
         HEAP8[$$07$i$i>>0] = $29;
         HEAP8[$26>>0] = $28;
         $30 = ((($$07$i$i)) + 1|0);
         $$0$i$i = $26;$$07$i$i = $30;
        }
       }
      } while(0);
      dest=$4; stop=dest+40|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
      $31 = +HEAPF64[$3>>3];
      HEAPF64[$vararg_buffer>>3] = $31;
      $32 = (_snprintf($4,40,8872,$vararg_buffer)|0);
      $33 = ($32>>>0)>(39);
      if ($33) {
       break;
      }
      ;HEAP32[$6>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($6,$4,$32);
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ENSt3__212basic_stringIcNS2_11char_traitsIcEENS0_12malloc_allocIcEEEE($5,$6);
      $34 = ((($2)) + 4|0);
      $35 = HEAP32[$34>>2]|0;
      $36 = ((($2)) + 8|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ($35>>>0)<($37>>>0);
      if ($38) {
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2EOS1_($35,$5);
       $39 = HEAP32[$34>>2]|0;
       $40 = ((($39)) + 24|0);
       HEAP32[$34>>2] = $40;
      } else {
       __THREW__ = 0;
       invoke_vii(105,($2|0),($5|0));
       $41 = __THREW__; __THREW__ = 0;
       $42 = $41&1;
       if ($42) {
        $43 = ___cxa_find_matching_catch_2()|0;
        $44 = tempRet0;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
        ___resumeException($43|0);
        // unreachable;
       }
      }
      __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($5);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
      $$247$ph = $$ptr;
     } else {
      $$247$ph = $0;
     }
     $$3 = $$247$ph;
     break L1;
    }
   } while(0);
   $$3 = $0;
  } else {
   $$3 = $0;
  }
 } while(0);
 STACKTOP = sp;return ($$3|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj14EEERAT__Kc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $4 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($0,$1,13);
 $2 = ((($0)) + 12|0);
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $3 = (($2) + ($$0$i$i<<2)|0);
  HEAP32[$3>>2] = 0;
  $4 = (($$0$i$i) + 1)|0;
  $$0$i$i = $4;
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_117parse_nested_nameINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0136 = 0, $$0151$off0$ph = 0, $$0157 = 0, $$1 = 0, $$10 = 0, $$10146 = 0, $$11 = 0, $$11147 = 0, $$1137 = 0, $$1158 = 0, $$12 = 0, $$12148 = 0, $$13 = 0, $$13149 = 0, $$14 = 0, $$14150 = 0, $$2 = 0, $$2138 = 0, $$2159 = 0;
 var $$2159$ph = 0, $$3 = 0, $$3139 = 0, $$4 = 0, $$4140 = 0, $$4166 = 0, $$5 = 0, $$5141 = 0, $$6 = 0, $$6142 = 0, $$7 = 0, $$7143 = 0, $$8 = 0, $$8144 = 0, $$9 = 0, $$9145 = 0, $$pre$i = 0, $$pre$i183 = 0, $$pre$i185 = 0, $$pre$i194 = 0;
 var $$pre$i203 = 0, $$pre$i211 = 0, $$pre$i220 = 0, $$sink = 0, $$sroa$0$0$$sroa_idx$i207 = 0, $$sroa$0$0$copyload$i191226 = 0, $$sroa$0$0$copyload$i200224 = 0, $$sroa$0$0$copyload$i208223 = 0, $$sroa$0$0$copyload$i217225 = 0, $$sroa$0$0$copyload$i227 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0;
 var $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0;
 var $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0;
 var $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0;
 var $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0;
 var $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0;
 var $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0;
 var $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0;
 var $399 = 0, $4 = 0, $40 = 0, $400 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond179 = 0, $or$cond180 = 0, $or$cond181 = 0, $or$cond182 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $3 = sp + 224|0;
 $4 = sp + 212|0;
 $5 = sp + 200|0;
 $6 = sp + 184|0;
 $7 = sp + 176|0;
 $8 = sp + 164|0;
 $9 = sp + 152|0;
 $10 = sp + 136|0;
 $11 = sp + 128|0;
 $12 = sp + 116|0;
 $13 = sp + 104|0;
 $14 = sp + 88|0;
 $15 = sp + 84|0;
 $16 = sp + 72|0;
 $17 = sp + 56|0;
 $18 = sp + 48|0;
 $19 = sp + 36|0;
 $20 = sp + 24|0;
 $21 = sp + 8|0;
 $22 = sp;
 $23 = ($0|0)==($1|0);
 L1: do {
  if ($23) {
   $$4166 = $0;
  } else {
   $24 = HEAP8[$0>>0]|0;
   $25 = ($24<<24>>24)==(78);
   if ($25) {
    $26 = ((($0)) + 1|0);
    $27 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_cv_qualifiersEPKcS2_Rj($26,$1,$3)|0);
    $28 = ($27|0)==($1|0);
    L4: do {
     if (!($28)) {
      $29 = ((($2)) + 52|0);
      HEAP32[$29>>2] = 0;
      $30 = HEAP8[$27>>0]|0;
      $31 = ((($27)) + 1|0);
      switch ($30<<24>>24) {
      case 82:  {
       $$sink = 1;
       label = 6;
       break;
      }
      case 79:  {
       $$sink = 2;
       label = 6;
       break;
      }
      default: {
       $$0157 = $27;
      }
      }
      if ((label|0) == 6) {
       HEAP32[$29>>2] = $$sink;
       $$0157 = $31;
      }
      $32 = ((($2)) + 4|0);
      $33 = HEAP32[$32>>2]|0;
      $34 = ((($2)) + 8|0);
      $35 = HEAP32[$34>>2]|0;
      $36 = ($33>>>0)<($35>>>0);
      if ($36) {
       ;HEAP32[$33>>2]=0|0;HEAP32[$33+4>>2]=0|0;HEAP32[$33+8>>2]=0|0;HEAP32[$33+12>>2]=0|0;HEAP32[$33+16>>2]=0|0;HEAP32[$33+20>>2]=0|0;
       __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2Ev($33);
       $37 = HEAP32[$32>>2]|0;
       $38 = ((($37)) + 24|0);
       HEAP32[$32>>2] = $38;
      } else {
       __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE24__emplace_back_slow_pathIJEEEvDpOT_($2);
      }
      $39 = $1;
      $40 = $$0157;
      $41 = (($39) - ($40))|0;
      $42 = ($41|0)>(1);
      if ($42) {
       $43 = HEAP8[$$0157>>0]|0;
       $44 = ($43<<24>>24)==(83);
       if ($44) {
        $45 = ((($$0157)) + 1|0);
        $46 = HEAP8[$45>>0]|0;
        $47 = ($46<<24>>24)==(116);
        if ($47) {
         $48 = ((($$0157)) + 2|0);
         $49 = HEAP32[$32>>2]|0;
         $50 = ((($49)) + -24|0);
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKc($50,8944);
         $$1158 = $48;
        } else {
         $$1158 = $$0157;
        }
       } else {
        $$1158 = $$0157;
       }
      } else {
       $$1158 = $$0157;
      }
      $51 = ($$1158|0)==($1|0);
      if ($51) {
       $80 = HEAP32[$32>>2]|0;
       $81 = ((($80)) + -24|0);
       $83 = $80;
       while(1) {
        $82 = ($83|0)==($81|0);
        if ($82) {
         break L4;
        }
        $84 = ((($83)) + -24|0);
        HEAP32[$32>>2] = $84;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($84);
        $$pre$i = HEAP32[$32>>2]|0;
        $83 = $$pre$i;
       }
      }
      $52 = ((($2)) + 16|0);
      $53 = ((($16)) + 11|0);
      $54 = ((($16)) + 4|0);
      $$sroa$0$0$$sroa_idx$i207 = ((($2)) + 12|0);
      $55 = ((($2)) + 20|0);
      $56 = ((($2)) + 24|0);
      $57 = ((($17)) + 12|0);
      $58 = ((($17)) + 4|0);
      $59 = ((($17)) + 8|0);
      $60 = ((($21)) + 12|0);
      $61 = ((($21)) + 4|0);
      $62 = ((($21)) + 8|0);
      $63 = ((($20)) + 11|0);
      $64 = ((($20)) + 4|0);
      $65 = ((($5)) + 11|0);
      $66 = ((($5)) + 4|0);
      $67 = ((($6)) + 12|0);
      $68 = ((($6)) + 4|0);
      $69 = ((($6)) + 8|0);
      $70 = ((($10)) + 12|0);
      $71 = ((($10)) + 4|0);
      $72 = ((($10)) + 8|0);
      $73 = ((($9)) + 11|0);
      $74 = ((($9)) + 4|0);
      $75 = ((($14)) + 12|0);
      $76 = ((($14)) + 4|0);
      $77 = ((($14)) + 8|0);
      $78 = ((($13)) + 11|0);
      $79 = ((($13)) + 4|0);
      $$0151$off0$ph = 0;$$2159$ph = $$1158;
      L26: while(1) {
       $$2159 = $$2159$ph;
       L28: while(1) {
        $85 = HEAP8[$$2159>>0]|0;
        $86 = ($85<<24>>24)==(69);
        $87 = ((($$2159)) + 1|0);
        if ($86) {
         label = 143;
         break L26;
        }
        $88 = $85 << 24 >> 24;
        switch ($88|0) {
        case 83:  {
         label = 21;
         break L28;
         break;
        }
        case 84:  {
         label = 48;
         break L28;
         break;
        }
        case 68:  {
         label = 73;
         break L28;
         break;
        }
        case 73:  {
         break;
        }
        case 76:  {
         $328 = ($87|0)==($1|0);
         if ($328) {
          break L4;
         } else {
          $$2159 = $87;
          continue L28;
         }
         break;
        }
        default: {
         break L28;
        }
        }
        $283 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_template_argsINS0_2DbEEEPKcS4_S4_RT_($$2159,$1,$2)|0);
        $284 = ($283|0)==($$2159|0);
        $285 = ($283|0)==($1|0);
        $or$cond181 = $284 | $285;
        if ($or$cond181) {
         break L4;
        }
        $286 = HEAP32[$32>>2]|0;
        $287 = ((($286)) + -24|0);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($16,$287);
        $288 = HEAP32[$32>>2]|0;
        $289 = ((($288)) + -24|0);
        $291 = $288;
        while(1) {
         $290 = ($291|0)==($289|0);
         if ($290) {
          break;
         }
         $292 = ((($291)) + -24|0);
         HEAP32[$32>>2] = $292;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($292);
         $$pre$i203 = HEAP32[$32>>2]|0;
         $291 = $$pre$i203;
        }
        $293 = ((($288)) + -48|0);
        $294 = HEAP8[$53>>0]|0;
        $295 = ($294<<24>>24)<(0);
        $296 = HEAP32[$16>>2]|0;
        $297 = $295 ? $296 : $16;
        $298 = HEAP32[$54>>2]|0;
        $299 = $294&255;
        $300 = $295 ? $298 : $299;
        __THREW__ = 0;
        (invoke_iiii(88,($293|0),($297|0),($300|0))|0);
        $301 = __THREW__; __THREW__ = 0;
        $302 = $301&1;
        if ($302) {
         label = 110;
         break L26;
        }
        $303 = HEAP32[$32>>2]|0;
        $304 = ((($303)) + -24|0);
        $$sroa$0$0$copyload$i208223 = HEAP32[$$sroa$0$0$$sroa_idx$i207>>2]|0;
        HEAP32[$18>>2] = $$sroa$0$0$copyload$i208223;
        __THREW__ = 0;
        invoke_viii(101,($17|0),($304|0),($18|0));
        $305 = __THREW__; __THREW__ = 0;
        $306 = $305&1;
        if ($306) {
         label = 111;
         break L26;
        }
        $307 = HEAP32[$55>>2]|0;
        $308 = HEAP32[$56>>2]|0;
        $309 = ($307>>>0)<($308>>>0);
        if ($309) {
         HEAP32[$307>>2] = 0;
         $310 = ((($307)) + 4|0);
         HEAP32[$310>>2] = 0;
         $311 = ((($307)) + 8|0);
         $312 = HEAP32[$57>>2]|0;
         HEAP32[$311>>2] = 0;
         $313 = ((($307)) + 12|0);
         HEAP32[$313>>2] = $312;
         $314 = HEAP32[$17>>2]|0;
         HEAP32[$307>>2] = $314;
         $315 = HEAP32[$58>>2]|0;
         HEAP32[$310>>2] = $315;
         $316 = HEAP32[$59>>2]|0;
         $317 = ((($307)) + 8|0);
         HEAP32[$317>>2] = $316;
         HEAP32[$59>>2] = 0;
         HEAP32[$58>>2] = 0;
         HEAP32[$17>>2] = 0;
         $318 = HEAP32[$55>>2]|0;
         $319 = ((($318)) + 16|0);
         HEAP32[$55>>2] = $319;
        } else {
         __THREW__ = 0;
         invoke_vii(98,($52|0),($17|0));
         $320 = __THREW__; __THREW__ = 0;
         $321 = $320&1;
         if ($321) {
          label = 112;
          break L26;
         }
        }
        __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($17);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($16);
        $$2159 = $283;
       }
       L45: do {
        if ((label|0) == 21) {
         label = 0;
         $89 = ($87|0)==($1|0);
         if (!($89)) {
          $90 = HEAP8[$87>>0]|0;
          $91 = ($90<<24>>24)==(116);
          if ($91) {
           break;
          }
         }
         $92 = (__ZN10__cxxabiv112_GLOBAL__N_118parse_substitutionINS0_2DbEEEPKcS4_S4_RT_($$2159,$1,$2)|0);
         $93 = ($92|0)==($$2159|0);
         $94 = ($92|0)==($1|0);
         $or$cond = $93 | $94;
         if ($or$cond) {
          break L4;
         }
         $95 = HEAP32[$32>>2]|0;
         $96 = ((($95)) + -24|0);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($4,$96);
         $97 = HEAP32[$32>>2]|0;
         $98 = ((($97)) + -24|0);
         $100 = $97;
         while(1) {
          $99 = ($100|0)==($98|0);
          if ($99) {
           break;
          }
          $101 = ((($100)) + -24|0);
          HEAP32[$32>>2] = $101;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($101);
          $$pre$i183 = HEAP32[$32>>2]|0;
          $100 = $$pre$i183;
         }
         $102 = ((($97)) + -48|0);
         $103 = ((($102)) + 11|0);
         $104 = HEAP8[$103>>0]|0;
         $105 = ($104<<24>>24)<(0);
         if ($105) {
          $106 = ((($97)) + -44|0);
          $107 = HEAP32[$106>>2]|0;
          $110 = $107;
         } else {
          $108 = $104&255;
          $110 = $108;
         }
         $109 = ($110|0)==(0);
         if ($109) {
          __THREW__ = 0;
          invoke_vii(123,($102|0),($4|0));
          $153 = __THREW__; __THREW__ = 0;
          $154 = $153&1;
          if ($154) {
           label = 38;
           break L26;
          }
         } else {
          __THREW__ = 0;
          invoke_viii(117,($5|0),(7640|0),($4|0));
          $111 = __THREW__; __THREW__ = 0;
          $112 = $111&1;
          if ($112) {
           label = 39;
           break L26;
          }
          $113 = HEAP32[$32>>2]|0;
          $114 = ((($113)) + -24|0);
          $115 = HEAP8[$65>>0]|0;
          $116 = ($115<<24>>24)<(0);
          $117 = HEAP32[$5>>2]|0;
          $118 = $116 ? $117 : $5;
          $119 = HEAP32[$66>>2]|0;
          $120 = $115&255;
          $121 = $116 ? $119 : $120;
          __THREW__ = 0;
          (invoke_iiii(88,($114|0),($118|0),($121|0))|0);
          $122 = __THREW__; __THREW__ = 0;
          $123 = $122&1;
          if ($123) {
           label = 40;
           break L26;
          }
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
          $124 = HEAP32[$32>>2]|0;
          $125 = ((($124)) + -24|0);
          $$sroa$0$0$copyload$i227 = HEAP32[$$sroa$0$0$$sroa_idx$i207>>2]|0;
          HEAP32[$7>>2] = $$sroa$0$0$copyload$i227;
          __THREW__ = 0;
          invoke_viii(101,($6|0),($125|0),($7|0));
          $126 = __THREW__; __THREW__ = 0;
          $127 = $126&1;
          if ($127) {
           label = 42;
           break L26;
          }
          $128 = HEAP32[$55>>2]|0;
          $129 = HEAP32[$56>>2]|0;
          $130 = ($128>>>0)<($129>>>0);
          if ($130) {
           HEAP32[$128>>2] = 0;
           $131 = ((($128)) + 4|0);
           HEAP32[$131>>2] = 0;
           $132 = ((($128)) + 8|0);
           $133 = HEAP32[$67>>2]|0;
           HEAP32[$132>>2] = 0;
           $134 = ((($128)) + 12|0);
           HEAP32[$134>>2] = $133;
           $135 = HEAP32[$6>>2]|0;
           HEAP32[$128>>2] = $135;
           $136 = HEAP32[$68>>2]|0;
           HEAP32[$131>>2] = $136;
           $137 = HEAP32[$69>>2]|0;
           $138 = ((($128)) + 8|0);
           HEAP32[$138>>2] = $137;
           HEAP32[$69>>2] = 0;
           HEAP32[$68>>2] = 0;
           HEAP32[$6>>2] = 0;
           $139 = HEAP32[$55>>2]|0;
           $140 = ((($139)) + 16|0);
           HEAP32[$55>>2] = $140;
          } else {
           __THREW__ = 0;
           invoke_vii(98,($52|0),($6|0));
           $141 = __THREW__; __THREW__ = 0;
           $142 = $141&1;
           if ($142) {
            label = 43;
            break L26;
           }
          }
          __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($6);
         }
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
         $$0151$off0$ph = 1;$$2159$ph = $92;
         continue L26;
        }
        else if ((label|0) == 48) {
         label = 0;
         $155 = (__ZN10__cxxabiv112_GLOBAL__N_120parse_template_paramINS0_2DbEEEPKcS4_S4_RT_($$2159,$1,$2)|0);
         $156 = ($155|0)==($$2159|0);
         $157 = ($155|0)==($1|0);
         $or$cond179 = $156 | $157;
         if ($or$cond179) {
          break L4;
         }
         $158 = HEAP32[$32>>2]|0;
         $159 = ((($158)) + -24|0);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($8,$159);
         $160 = HEAP32[$32>>2]|0;
         $161 = ((($160)) + -24|0);
         $163 = $160;
         while(1) {
          $162 = ($163|0)==($161|0);
          if ($162) {
           break;
          }
          $164 = ((($163)) + -24|0);
          HEAP32[$32>>2] = $164;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($164);
          $$pre$i185 = HEAP32[$32>>2]|0;
          $163 = $$pre$i185;
         }
         $165 = ((($160)) + -48|0);
         $166 = ((($165)) + 11|0);
         $167 = HEAP8[$166>>0]|0;
         $168 = ($167<<24>>24)<(0);
         if ($168) {
          $169 = ((($160)) + -44|0);
          $170 = HEAP32[$169>>2]|0;
          $173 = $170;
         } else {
          $171 = $167&255;
          $173 = $171;
         }
         $172 = ($173|0)==(0);
         if ($172) {
          __THREW__ = 0;
          invoke_vii(123,($165|0),($8|0));
          $193 = __THREW__; __THREW__ = 0;
          $194 = $193&1;
          if ($194) {
           label = 59;
           break L26;
          }
         } else {
          __THREW__ = 0;
          invoke_viii(117,($9|0),(7640|0),($8|0));
          $174 = __THREW__; __THREW__ = 0;
          $175 = $174&1;
          if ($175) {
           label = 60;
           break L26;
          }
          $176 = HEAP32[$32>>2]|0;
          $177 = ((($176)) + -24|0);
          $178 = HEAP8[$73>>0]|0;
          $179 = ($178<<24>>24)<(0);
          $180 = HEAP32[$9>>2]|0;
          $181 = $179 ? $180 : $9;
          $182 = HEAP32[$74>>2]|0;
          $183 = $178&255;
          $184 = $179 ? $182 : $183;
          __THREW__ = 0;
          (invoke_iiii(88,($177|0),($181|0),($184|0))|0);
          $185 = __THREW__; __THREW__ = 0;
          $186 = $185&1;
          if ($186) {
           label = 61;
           break L26;
          }
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
         }
         $195 = HEAP32[$32>>2]|0;
         $196 = ((($195)) + -24|0);
         $$sroa$0$0$copyload$i191226 = HEAP32[$$sroa$0$0$$sroa_idx$i207>>2]|0;
         HEAP32[$11>>2] = $$sroa$0$0$copyload$i191226;
         __THREW__ = 0;
         invoke_viii(101,($10|0),($196|0),($11|0));
         $197 = __THREW__; __THREW__ = 0;
         $198 = $197&1;
         if ($198) {
          label = 69;
          break L26;
         }
         $199 = HEAP32[$55>>2]|0;
         $200 = HEAP32[$56>>2]|0;
         $201 = ($199>>>0)<($200>>>0);
         if ($201) {
          HEAP32[$199>>2] = 0;
          $202 = ((($199)) + 4|0);
          HEAP32[$202>>2] = 0;
          $203 = ((($199)) + 8|0);
          $204 = HEAP32[$70>>2]|0;
          HEAP32[$203>>2] = 0;
          $205 = ((($199)) + 12|0);
          HEAP32[$205>>2] = $204;
          $206 = HEAP32[$10>>2]|0;
          HEAP32[$199>>2] = $206;
          $207 = HEAP32[$71>>2]|0;
          HEAP32[$202>>2] = $207;
          $208 = HEAP32[$72>>2]|0;
          $209 = ((($199)) + 8|0);
          HEAP32[$209>>2] = $208;
          HEAP32[$72>>2] = 0;
          HEAP32[$71>>2] = 0;
          HEAP32[$10>>2] = 0;
          $210 = HEAP32[$55>>2]|0;
          $211 = ((($210)) + 16|0);
          HEAP32[$55>>2] = $211;
         } else {
          __THREW__ = 0;
          invoke_vii(98,($52|0),($10|0));
          $212 = __THREW__; __THREW__ = 0;
          $213 = $212&1;
          if ($213) {
           label = 70;
           break L26;
          }
         }
         __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($10);
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
         $$0151$off0$ph = 1;$$2159$ph = $155;
         continue L26;
        }
        else if ((label|0) == 73) {
         label = 0;
         $218 = ($87|0)==($1|0);
         if (!($218)) {
          $219 = HEAP8[$87>>0]|0;
          switch ($219<<24>>24) {
          case 84: case 116:  {
           break;
          }
          default: {
           break L45;
          }
          }
         }
         $220 = (__ZN10__cxxabiv112_GLOBAL__N_114parse_decltypeINS0_2DbEEEPKcS4_S4_RT_($$2159,$1,$2)|0);
         $221 = ($220|0)==($$2159|0);
         $222 = ($220|0)==($1|0);
         $or$cond180 = $221 | $222;
         if ($or$cond180) {
          break L4;
         }
         $223 = HEAP32[$32>>2]|0;
         $224 = ((($223)) + -24|0);
         __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($12,$224);
         $225 = HEAP32[$32>>2]|0;
         $226 = ((($225)) + -24|0);
         $228 = $225;
         while(1) {
          $227 = ($228|0)==($226|0);
          if ($227) {
           break;
          }
          $229 = ((($228)) + -24|0);
          HEAP32[$32>>2] = $229;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($229);
          $$pre$i194 = HEAP32[$32>>2]|0;
          $228 = $$pre$i194;
         }
         $230 = ((($225)) + -48|0);
         $231 = ((($230)) + 11|0);
         $232 = HEAP8[$231>>0]|0;
         $233 = ($232<<24>>24)<(0);
         if ($233) {
          $234 = ((($225)) + -44|0);
          $235 = HEAP32[$234>>2]|0;
          $238 = $235;
         } else {
          $236 = $232&255;
          $238 = $236;
         }
         $237 = ($238|0)==(0);
         if ($237) {
          __THREW__ = 0;
          invoke_vii(123,($230|0),($12|0));
          $258 = __THREW__; __THREW__ = 0;
          $259 = $258&1;
          if ($259) {
           label = 86;
           break L26;
          }
         } else {
          __THREW__ = 0;
          invoke_viii(117,($13|0),(7640|0),($12|0));
          $239 = __THREW__; __THREW__ = 0;
          $240 = $239&1;
          if ($240) {
           label = 87;
           break L26;
          }
          $241 = HEAP32[$32>>2]|0;
          $242 = ((($241)) + -24|0);
          $243 = HEAP8[$78>>0]|0;
          $244 = ($243<<24>>24)<(0);
          $245 = HEAP32[$13>>2]|0;
          $246 = $244 ? $245 : $13;
          $247 = HEAP32[$79>>2]|0;
          $248 = $243&255;
          $249 = $244 ? $247 : $248;
          __THREW__ = 0;
          (invoke_iiii(88,($242|0),($246|0),($249|0))|0);
          $250 = __THREW__; __THREW__ = 0;
          $251 = $250&1;
          if ($251) {
           label = 88;
           break L26;
          }
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($13);
         }
         $260 = HEAP32[$32>>2]|0;
         $261 = ((($260)) + -24|0);
         $$sroa$0$0$copyload$i200224 = HEAP32[$$sroa$0$0$$sroa_idx$i207>>2]|0;
         HEAP32[$15>>2] = $$sroa$0$0$copyload$i200224;
         __THREW__ = 0;
         invoke_viii(101,($14|0),($261|0),($15|0));
         $262 = __THREW__; __THREW__ = 0;
         $263 = $262&1;
         if ($263) {
          label = 96;
          break L26;
         }
         $264 = HEAP32[$55>>2]|0;
         $265 = HEAP32[$56>>2]|0;
         $266 = ($264>>>0)<($265>>>0);
         if ($266) {
          HEAP32[$264>>2] = 0;
          $267 = ((($264)) + 4|0);
          HEAP32[$267>>2] = 0;
          $268 = ((($264)) + 8|0);
          $269 = HEAP32[$75>>2]|0;
          HEAP32[$268>>2] = 0;
          $270 = ((($264)) + 12|0);
          HEAP32[$270>>2] = $269;
          $271 = HEAP32[$14>>2]|0;
          HEAP32[$264>>2] = $271;
          $272 = HEAP32[$76>>2]|0;
          HEAP32[$267>>2] = $272;
          $273 = HEAP32[$77>>2]|0;
          $274 = ((($264)) + 8|0);
          HEAP32[$274>>2] = $273;
          HEAP32[$77>>2] = 0;
          HEAP32[$76>>2] = 0;
          HEAP32[$14>>2] = 0;
          $275 = HEAP32[$55>>2]|0;
          $276 = ((($275)) + 16|0);
          HEAP32[$55>>2] = $276;
         } else {
          __THREW__ = 0;
          invoke_vii(98,($52|0),($14|0));
          $277 = __THREW__; __THREW__ = 0;
          $278 = $277&1;
          if ($278) {
           label = 97;
           break L26;
          }
         }
         __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($14);
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($12);
         $$0151$off0$ph = 1;$$2159$ph = $220;
         continue L26;
        }
       } while(0);
       $329 = (__ZN10__cxxabiv112_GLOBAL__N_122parse_unqualified_nameINS0_2DbEEEPKcS4_S4_RT_($$2159,$1,$2)|0);
       $330 = ($329|0)==($$2159|0);
       $331 = ($329|0)==($1|0);
       $or$cond182 = $330 | $331;
       if ($or$cond182) {
        break L4;
       }
       $332 = HEAP32[$32>>2]|0;
       $333 = ((($332)) + -24|0);
       __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($19,$333);
       $334 = HEAP32[$32>>2]|0;
       $335 = ((($334)) + -24|0);
       $337 = $334;
       while(1) {
        $336 = ($337|0)==($335|0);
        if ($336) {
         break;
        }
        $338 = ((($337)) + -24|0);
        HEAP32[$32>>2] = $338;
        __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($338);
        $$pre$i211 = HEAP32[$32>>2]|0;
        $337 = $$pre$i211;
       }
       $339 = ((($334)) + -48|0);
       $340 = ((($339)) + 11|0);
       $341 = HEAP8[$340>>0]|0;
       $342 = ($341<<24>>24)<(0);
       if ($342) {
        $343 = ((($334)) + -44|0);
        $344 = HEAP32[$343>>2]|0;
        $347 = $344;
       } else {
        $345 = $341&255;
        $347 = $345;
       }
       $346 = ($347|0)==(0);
       if ($346) {
        __THREW__ = 0;
        invoke_vii(123,($339|0),($19|0));
        $367 = __THREW__; __THREW__ = 0;
        $368 = $367&1;
        if ($368) {
         label = 127;
         break;
        }
       } else {
        __THREW__ = 0;
        invoke_viii(117,($20|0),(7640|0),($19|0));
        $348 = __THREW__; __THREW__ = 0;
        $349 = $348&1;
        if ($349) {
         label = 128;
         break;
        }
        $350 = HEAP32[$32>>2]|0;
        $351 = ((($350)) + -24|0);
        $352 = HEAP8[$63>>0]|0;
        $353 = ($352<<24>>24)<(0);
        $354 = HEAP32[$20>>2]|0;
        $355 = $353 ? $354 : $20;
        $356 = HEAP32[$64>>2]|0;
        $357 = $352&255;
        $358 = $353 ? $356 : $357;
        __THREW__ = 0;
        (invoke_iiii(88,($351|0),($355|0),($358|0))|0);
        $359 = __THREW__; __THREW__ = 0;
        $360 = $359&1;
        if ($360) {
         label = 129;
         break;
        }
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($20);
       }
       $369 = HEAP32[$32>>2]|0;
       $370 = ((($369)) + -24|0);
       $$sroa$0$0$copyload$i217225 = HEAP32[$$sroa$0$0$$sroa_idx$i207>>2]|0;
       HEAP32[$22>>2] = $$sroa$0$0$copyload$i217225;
       __THREW__ = 0;
       invoke_viii(101,($21|0),($370|0),($22|0));
       $371 = __THREW__; __THREW__ = 0;
       $372 = $371&1;
       if ($372) {
        label = 138;
        break;
       }
       $373 = HEAP32[$55>>2]|0;
       $374 = HEAP32[$56>>2]|0;
       $375 = ($373>>>0)<($374>>>0);
       if ($375) {
        HEAP32[$373>>2] = 0;
        $376 = ((($373)) + 4|0);
        HEAP32[$376>>2] = 0;
        $377 = ((($373)) + 8|0);
        $378 = HEAP32[$60>>2]|0;
        HEAP32[$377>>2] = 0;
        $379 = ((($373)) + 12|0);
        HEAP32[$379>>2] = $378;
        $380 = HEAP32[$21>>2]|0;
        HEAP32[$373>>2] = $380;
        $381 = HEAP32[$61>>2]|0;
        HEAP32[$376>>2] = $381;
        $382 = HEAP32[$62>>2]|0;
        $383 = ((($373)) + 8|0);
        HEAP32[$383>>2] = $382;
        HEAP32[$62>>2] = 0;
        HEAP32[$61>>2] = 0;
        HEAP32[$21>>2] = 0;
        $384 = HEAP32[$55>>2]|0;
        $385 = ((($384)) + 16|0);
        HEAP32[$55>>2] = $385;
       } else {
        __THREW__ = 0;
        invoke_vii(98,($52|0),($21|0));
        $386 = __THREW__; __THREW__ = 0;
        $387 = $386&1;
        if ($387) {
         label = 139;
         break;
        }
       }
       __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($21);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($19);
       $$0151$off0$ph = 1;$$2159$ph = $329;
      }
      switch (label|0) {
       case 38: {
        $143 = ___cxa_find_matching_catch_2()|0;
        $144 = tempRet0;
        $$2 = $144;$$2138 = $143;
        label = 47;
        break;
       }
       case 39: {
        $145 = ___cxa_find_matching_catch_2()|0;
        $146 = tempRet0;
        $$0 = $146;$$0136 = $145;
        label = 41;
        break;
       }
       case 40: {
        $147 = ___cxa_find_matching_catch_2()|0;
        $148 = tempRet0;
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
        $$0 = $148;$$0136 = $147;
        label = 41;
        break;
       }
       case 42: {
        $149 = ___cxa_find_matching_catch_2()|0;
        $150 = tempRet0;
        $$1 = $150;$$1137 = $149;
        label = 44;
        break;
       }
       case 43: {
        $151 = ___cxa_find_matching_catch_2()|0;
        $152 = tempRet0;
        __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($6);
        $$1 = $152;$$1137 = $151;
        label = 44;
        break;
       }
       case 59: {
        $187 = ___cxa_find_matching_catch_2()|0;
        $188 = tempRet0;
        $$5 = $188;$$5141 = $187;
        label = 72;
        break;
       }
       case 60: {
        $189 = ___cxa_find_matching_catch_2()|0;
        $190 = tempRet0;
        $$3 = $190;$$3139 = $189;
        label = 62;
        break;
       }
       case 61: {
        $191 = ___cxa_find_matching_catch_2()|0;
        $192 = tempRet0;
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
        $$3 = $192;$$3139 = $191;
        label = 62;
        break;
       }
       case 69: {
        $214 = ___cxa_find_matching_catch_2()|0;
        $215 = tempRet0;
        $$4 = $215;$$4140 = $214;
        label = 71;
        break;
       }
       case 70: {
        $216 = ___cxa_find_matching_catch_2()|0;
        $217 = tempRet0;
        __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($10);
        $$4 = $217;$$4140 = $216;
        label = 71;
        break;
       }
       case 86: {
        $252 = ___cxa_find_matching_catch_2()|0;
        $253 = tempRet0;
        $$8 = $253;$$8144 = $252;
        label = 99;
        break;
       }
       case 87: {
        $254 = ___cxa_find_matching_catch_2()|0;
        $255 = tempRet0;
        $$6 = $255;$$6142 = $254;
        label = 89;
        break;
       }
       case 88: {
        $256 = ___cxa_find_matching_catch_2()|0;
        $257 = tempRet0;
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($13);
        $$6 = $257;$$6142 = $256;
        label = 89;
        break;
       }
       case 96: {
        $279 = ___cxa_find_matching_catch_2()|0;
        $280 = tempRet0;
        $$7 = $280;$$7143 = $279;
        label = 98;
        break;
       }
       case 97: {
        $281 = ___cxa_find_matching_catch_2()|0;
        $282 = tempRet0;
        __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($14);
        $$7 = $282;$$7143 = $281;
        label = 98;
        break;
       }
       case 110: {
        $322 = ___cxa_find_matching_catch_2()|0;
        $323 = tempRet0;
        $$10 = $323;$$10146 = $322;
        label = 114;
        break;
       }
       case 111: {
        $324 = ___cxa_find_matching_catch_2()|0;
        $325 = tempRet0;
        $$9 = $325;$$9145 = $324;
        label = 113;
        break;
       }
       case 112: {
        $326 = ___cxa_find_matching_catch_2()|0;
        $327 = tempRet0;
        __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($17);
        $$9 = $327;$$9145 = $326;
        label = 113;
        break;
       }
       case 127: {
        $361 = ___cxa_find_matching_catch_2()|0;
        $362 = tempRet0;
        $$13 = $362;$$13149 = $361;
        label = 141;
        break;
       }
       case 128: {
        $363 = ___cxa_find_matching_catch_2()|0;
        $364 = tempRet0;
        $$11 = $364;$$11147 = $363;
        label = 130;
        break;
       }
       case 129: {
        $365 = ___cxa_find_matching_catch_2()|0;
        $366 = tempRet0;
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($20);
        $$11 = $366;$$11147 = $365;
        label = 130;
        break;
       }
       case 138: {
        $388 = ___cxa_find_matching_catch_2()|0;
        $389 = tempRet0;
        $$12 = $389;$$12148 = $388;
        label = 140;
        break;
       }
       case 139: {
        $390 = ___cxa_find_matching_catch_2()|0;
        $391 = tempRet0;
        __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($21);
        $$12 = $391;$$12148 = $390;
        label = 140;
        break;
       }
       case 143: {
        $392 = HEAP32[$3>>2]|0;
        $393 = ((($2)) + 48|0);
        HEAP32[$393>>2] = $392;
        L158: do {
         if ($$0151$off0$ph) {
          $394 = HEAP32[$52>>2]|0;
          $395 = HEAP32[$55>>2]|0;
          $396 = ($394|0)==($395|0);
          if (!($396)) {
           $397 = ((($395)) + -16|0);
           $399 = $395;
           while(1) {
            $398 = ($399|0)==($397|0);
            if ($398) {
             break L158;
            }
            $400 = ((($399)) + -16|0);
            HEAP32[$55>>2] = $400;
            __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($400);
            $$pre$i220 = HEAP32[$55>>2]|0;
            $399 = $$pre$i220;
           }
          }
         }
        } while(0);
        $$4166 = $87;
        break L1;
        break;
       }
      }
      if ((label|0) == 41) {
       $$2 = $$0;$$2138 = $$0136;
       label = 47;
      }
      else if ((label|0) == 44) {
       $$2 = $$1;$$2138 = $$1137;
       label = 47;
      }
      else if ((label|0) == 62) {
       $$5 = $$3;$$5141 = $$3139;
       label = 72;
      }
      else if ((label|0) == 71) {
       $$5 = $$4;$$5141 = $$4140;
       label = 72;
      }
      else if ((label|0) == 89) {
       $$8 = $$6;$$8144 = $$6142;
       label = 99;
      }
      else if ((label|0) == 98) {
       $$8 = $$7;$$8144 = $$7143;
       label = 99;
      }
      else if ((label|0) == 113) {
       $$10 = $$9;$$10146 = $$9145;
       label = 114;
      }
      else if ((label|0) == 130) {
       $$13 = $$11;$$13149 = $$11147;
       label = 141;
      }
      else if ((label|0) == 140) {
       $$13 = $$12;$$13149 = $$12148;
       label = 141;
      }
      if ((label|0) == 47) {
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
       $$14 = $$2;$$14150 = $$2138;
      }
      else if ((label|0) == 72) {
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
       $$14 = $$5;$$14150 = $$5141;
      }
      else if ((label|0) == 99) {
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($12);
       $$14 = $$8;$$14150 = $$8144;
      }
      else if ((label|0) == 114) {
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($16);
       $$14 = $$10;$$14150 = $$10146;
      }
      else if ((label|0) == 141) {
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($19);
       $$14 = $$13;$$14150 = $$13149;
      }
      ___resumeException($$14150|0);
      // unreachable;
     }
    } while(0);
    $$4166 = $0;
   } else {
    $$4166 = $0;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$4166|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_116parse_local_nameINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$068 = 0, $$069 = 0, $$4 = 0, $$pre$i = 0, $$pre$i78 = 0, $$pre$i80 = 0, $$pre$i83 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 12|0;
 $4 = sp;
 $5 = ($0|0)==($1|0);
 L1: do {
  if ($5) {
   $$4 = $0;
  } else {
   $6 = HEAP8[$0>>0]|0;
   $7 = ($6<<24>>24)==(90);
   if ($7) {
    $8 = ((($0)) + 1|0);
    $9 = (__ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($8,$1,$2)|0);
    $10 = ($9|0)==($8|0);
    $11 = ($9|0)==($1|0);
    $or$cond = $10 | $11;
    if ($or$cond) {
     $$4 = $0;
    } else {
     $12 = HEAP8[$9>>0]|0;
     $13 = ($12<<24>>24)==(69);
     if ($13) {
      $14 = ((($9)) + 1|0);
      $15 = ($14|0)==($1|0);
      if ($15) {
       $$4 = $0;
      } else {
       $16 = HEAP8[$14>>0]|0;
       $17 = $16 << 24 >> 24;
       $18 = ((($9)) + 2|0);
       switch ($17|0) {
       case 115:  {
        $19 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_discriminatorEPKcS2_($18,$1)|0);
        $20 = HEAP32[$2>>2]|0;
        $21 = ((($2)) + 4|0);
        $22 = HEAP32[$21>>2]|0;
        $23 = ($20|0)==($22|0);
        if ($23) {
         $$4 = $19;
         break L1;
        }
        $24 = ((($22)) + -24|0);
        (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc($24,8927)|0);
        $$4 = $19;
        break L1;
        break;
       }
       case 100:  {
        $25 = ($18|0)==($1|0);
        if ($25) {
         $$4 = $0;
         break L1;
        }
        $26 = (__ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($18,$1)|0);
        $27 = ($26|0)==($1|0);
        if ($27) {
         $$4 = $0;
         break L1;
        }
        $28 = HEAP8[$26>>0]|0;
        $29 = ($28<<24>>24)==(95);
        if (!($29)) {
         $$4 = $0;
         break L1;
        }
        $30 = ((($26)) + 1|0);
        $31 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_($30,$1,$2)|0);
        $32 = ($31|0)==($30|0);
        $33 = ((($2)) + 4|0);
        if ($32) {
         $64 = HEAP32[$33>>2]|0;
         $65 = ((($64)) + -24|0);
         $67 = $64;
         while(1) {
          $66 = ($67|0)==($65|0);
          if ($66) {
           $$4 = $0;
           break L1;
          }
          $68 = ((($67)) + -24|0);
          HEAP32[$33>>2] = $68;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($68);
          $$pre$i78 = HEAP32[$33>>2]|0;
          $67 = $$pre$i78;
         }
        }
        $34 = HEAP32[$33>>2]|0;
        $35 = HEAP32[$2>>2]|0;
        $36 = (($34) - ($35))|0;
        $37 = (($36|0) / 24)&-1;
        $38 = ($37>>>0)<(2);
        if ($38) {
         $$4 = $0;
         break L1;
        }
        $39 = $34;
        $40 = ((($39)) + -24|0);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($3,$40);
        $41 = HEAP32[$33>>2]|0;
        $42 = ((($41)) + -24|0);
        $44 = $41;
        while(1) {
         $43 = ($44|0)==($42|0);
         if ($43) {
          break;
         }
         $45 = ((($44)) + -24|0);
         HEAP32[$33>>2] = $45;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($45);
         $$pre$i = HEAP32[$33>>2]|0;
         $44 = $$pre$i;
        }
        $46 = ((($41)) + -48|0);
        __THREW__ = 0;
        (invoke_iii(95,($46|0),(7640|0))|0);
        $47 = __THREW__; __THREW__ = 0;
        $48 = $47&1;
        if (!($48)) {
         $49 = HEAP32[$33>>2]|0;
         $50 = ((($49)) + -24|0);
         $51 = ((($3)) + 11|0);
         $52 = HEAP8[$51>>0]|0;
         $53 = ($52<<24>>24)<(0);
         $54 = HEAP32[$3>>2]|0;
         $55 = $53 ? $54 : $3;
         $56 = ((($3)) + 4|0);
         $57 = HEAP32[$56>>2]|0;
         $58 = $52&255;
         $59 = $53 ? $57 : $58;
         __THREW__ = 0;
         (invoke_iiii(88,($50|0),($55|0),($59|0))|0);
         $60 = __THREW__; __THREW__ = 0;
         $61 = $60&1;
         if (!($61)) {
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
          $$4 = $31;
          break L1;
         }
        }
        $62 = ___cxa_find_matching_catch_2()|0;
        $63 = tempRet0;
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($3);
        $$068 = $63;$$069 = $62;
        break;
       }
       default: {
        $69 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_($14,$1,$2)|0);
        $70 = ($69|0)==($14|0);
        if ($70) {
         $103 = ((($2)) + 4|0);
         $104 = HEAP32[$103>>2]|0;
         $105 = ((($104)) + -24|0);
         $107 = $104;
         while(1) {
          $106 = ($107|0)==($105|0);
          if ($106) {
           $$4 = $0;
           break L1;
          }
          $108 = ((($107)) + -24|0);
          HEAP32[$103>>2] = $108;
          __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($108);
          $$pre$i83 = HEAP32[$103>>2]|0;
          $107 = $$pre$i83;
         }
        }
        $71 = (__ZN10__cxxabiv112_GLOBAL__N_119parse_discriminatorEPKcS2_($69,$1)|0);
        $72 = ((($2)) + 4|0);
        $73 = HEAP32[$72>>2]|0;
        $74 = HEAP32[$2>>2]|0;
        $75 = (($73) - ($74))|0;
        $76 = (($75|0) / 24)&-1;
        $77 = ($76>>>0)<(2);
        if ($77) {
         $$4 = $71;
         break L1;
        }
        $78 = $73;
        $79 = ((($78)) + -24|0);
        __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($4,$79);
        $80 = HEAP32[$72>>2]|0;
        $81 = ((($80)) + -24|0);
        $83 = $80;
        while(1) {
         $82 = ($83|0)==($81|0);
         if ($82) {
          break;
         }
         $84 = ((($83)) + -24|0);
         HEAP32[$72>>2] = $84;
         __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($84);
         $$pre$i80 = HEAP32[$72>>2]|0;
         $83 = $$pre$i80;
        }
        $85 = ((($80)) + -48|0);
        __THREW__ = 0;
        (invoke_iii(95,($85|0),(7640|0))|0);
        $86 = __THREW__; __THREW__ = 0;
        $87 = $86&1;
        if (!($87)) {
         $88 = HEAP32[$72>>2]|0;
         $89 = ((($88)) + -24|0);
         $90 = ((($4)) + 11|0);
         $91 = HEAP8[$90>>0]|0;
         $92 = ($91<<24>>24)<(0);
         $93 = HEAP32[$4>>2]|0;
         $94 = $92 ? $93 : $4;
         $95 = ((($4)) + 4|0);
         $96 = HEAP32[$95>>2]|0;
         $97 = $91&255;
         $98 = $92 ? $96 : $97;
         __THREW__ = 0;
         (invoke_iiii(88,($89|0),($94|0),($98|0))|0);
         $99 = __THREW__; __THREW__ = 0;
         $100 = $99&1;
         if (!($100)) {
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
          $$4 = $71;
          break L1;
         }
        }
        $101 = ___cxa_find_matching_catch_2()|0;
        $102 = tempRet0;
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($4);
        $$068 = $102;$$069 = $101;
       }
       }
       ___resumeException($$069|0);
       // unreachable;
      }
     } else {
      $$4 = $0;
     }
    }
   } else {
    $$4 = $0;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$4|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_119parse_unscoped_nameINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$026$off0 = 0, $$027 = 0, $$1 = 0, $$mux = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $brmerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1;
 $4 = $0;
 $5 = (($3) - ($4))|0;
 $6 = ($5|0)>(1);
 if ($6) {
  $7 = HEAP8[$0>>0]|0;
  $8 = ($7<<24>>24)==(83);
  if ($8) {
   $9 = ((($0)) + 1|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = ($10<<24>>24)==(116);
   if ($11) {
    $12 = ((($0)) + 2|0);
    $13 = ($12|0)==($1|0);
    if ($13) {
     $$026$off0 = 0;$$027 = $1;
    } else {
     $14 = HEAP8[$12>>0]|0;
     $15 = ($14<<24>>24)==(76);
     $16 = ((($0)) + 3|0);
     $$ = $15 ? $16 : $12;
     $$026$off0 = 0;$$027 = $$;
    }
   } else {
    $$026$off0 = 1;$$027 = $0;
   }
  } else {
   $$026$off0 = 1;$$027 = $0;
  }
  $17 = (__ZN10__cxxabiv112_GLOBAL__N_122parse_unqualified_nameINS0_2DbEEEPKcS4_S4_RT_($$027,$1,$2)|0);
  $18 = ($17|0)==($$027|0);
  $brmerge = $$026$off0 | $18;
  $$mux = $18 ? $0 : $17;
  if ($brmerge) {
   $$1 = $$mux;
  } else {
   $19 = HEAP32[$2>>2]|0;
   $20 = ((($2)) + 4|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ($19|0)==($21|0);
   if ($22) {
    $$1 = $0;
   } else {
    $23 = ((($21)) + -24|0);
    (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($23,0,7862)|0);
    $$1 = $17;
   }
  }
 } else {
  $$1 = $0;
 }
 return ($$1|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_119parse_discriminatorEPKcS2_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$0 = 0, $$029 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $isdigit = 0, $isdigit32 = 0, $isdigit34 = 0, $isdigit36 = 0, $isdigittmp = 0, $isdigittmp31 = 0, $isdigittmp33 = 0, $isdigittmp35 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==($1|0);
 L1: do {
  if ($2) {
   $$1 = $0;
  } else {
   $3 = HEAP8[$0>>0]|0;
   $4 = ($3<<24>>24)==(95);
   $5 = ((($0)) + 1|0);
   if (!($4)) {
    $16 = $3 << 24 >> 24;
    $isdigittmp = (($16) + -48)|0;
    $isdigit = ($isdigittmp>>>0)<(10);
    if ($isdigit) {
     $$0 = $5;
    } else {
     $$1 = $0;
     break;
    }
    while(1) {
     $17 = ($$0|0)==($1|0);
     if ($17) {
      $$1 = $1;
      break L1;
     }
     $18 = HEAP8[$$0>>0]|0;
     $19 = $18 << 24 >> 24;
     $isdigittmp31 = (($19) + -48)|0;
     $isdigit32 = ($isdigittmp31>>>0)<(10);
     if (!($isdigit32)) {
      $$1 = $$0;
      break L1;
     }
     $20 = ((($$0)) + 1|0);
     $$0 = $20;
    }
   }
   $6 = ($5|0)==($1|0);
   if ($6) {
    $$1 = $0;
   } else {
    $7 = HEAP8[$5>>0]|0;
    $8 = $7 << 24 >> 24;
    $isdigittmp33 = (($8) + -48)|0;
    $isdigit34 = ($isdigittmp33>>>0)<(10);
    $9 = ((($0)) + 2|0);
    if ($isdigit34) {
     $$1 = $9;
    } else {
     $10 = ($7<<24>>24)==(95);
     if ($10) {
      $$029 = $9;
      while(1) {
       $11 = ($$029|0)==($1|0);
       $12 = ((($$029)) + 1|0);
       if ($11) {
        $$1 = $0;
        break L1;
       }
       $13 = HEAP8[$$029>>0]|0;
       $14 = $13 << 24 >> 24;
       $isdigittmp35 = (($14) + -48)|0;
       $isdigit36 = ($isdigittmp35>>>0)<(10);
       if ($isdigit36) {
        $$029 = $12;
       } else {
        break;
       }
      }
      $15 = ($13<<24>>24)==(95);
      $$ = $15 ? $12 : $0;
      return ($$|0);
     } else {
      $$1 = $0;
     }
    }
   }
  }
 } while(0);
 return ($$1|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEaSERKS7_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==($1|0);
 if (!($2)) {
  $3 = ((($1)) + 11|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ($4<<24>>24)<(0);
  $6 = HEAP32[$1>>2]|0;
  $7 = $5 ? $6 : $1;
  $8 = ((($1)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $4&255;
  $11 = $5 ? $9 : $10;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKcj($0,$7,$11);
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj22EEERAT__Kc($0) {
 $0 = $0|0;
 var $$0$i$i = 0, $1 = 0, $2 = 0, $3 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($0,8959,21);
 $1 = ((($0)) + 12|0);
 ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $2 = (($1) + ($$0$i$i<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($$0$i$i) + 1)|0;
  $$0$i$i = $3;
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lj4096EEEEELj4096EEC2IS4_EERKNS1_IT_Lj4096EEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$0>>2] = $2;
 return;
}
function __ZNSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEENS4_IS8_Lj4096EEEE24__emplace_back_slow_pathIJS5_EEEvDpOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sroa$speculated$$i = 0, $$sroa$speculated$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 20|0;
 $3 = sp;
 $4 = ((($0)) + 12|0);
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$0>>2]|0;
 $8 = (($6) - ($7))|0;
 $9 = $8 >> 4;
 $10 = (($9) + 1)|0;
 $11 = (__ZNKSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEENS4_IS8_Lj4096EEEE8max_sizeEv($0)|0);
 $12 = ($11>>>0)<($10>>>0);
 if ($12) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
 }
 $13 = ((($0)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = HEAP32[$0>>2]|0;
 $16 = (($14) - ($15))|0;
 $17 = $16 >> 4;
 $18 = $11 >>> 1;
 $19 = ($17>>>0)<($18>>>0);
 $20 = $16 >> 3;
 $21 = ($20>>>0)<($10>>>0);
 $$sroa$speculated$i = $21 ? $10 : $20;
 $$sroa$speculated$$i = $19 ? $$sroa$speculated$i : $11;
 $22 = HEAP32[$5>>2]|0;
 $23 = (($22) - ($15))|0;
 $24 = $23 >> 4;
 __ZNSt3__214__split_bufferINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEEERNS5_IS9_Lj4096EEEEC2EjjSB_($3,$$sroa$speculated$$i,$24,$4);
 $25 = ((($3)) + 8|0);
 $26 = HEAP32[$25>>2]|0;
 __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lj4096EEEEELj4096EEC2IS4_EERKNS1_IT_Lj4096EEE($2,$1);
 HEAP32[$26>>2] = 0;
 $27 = ((($26)) + 4|0);
 HEAP32[$27>>2] = 0;
 $28 = ((($26)) + 8|0);
 $29 = HEAP32[$2>>2]|0;
 HEAP32[$28>>2] = 0;
 $30 = ((($26)) + 12|0);
 HEAP32[$30>>2] = $29;
 $31 = ((($26)) + 16|0);
 HEAP32[$25>>2] = $31;
 __ZNSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEENS4_IS8_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS8_RS9_EE($0,$3);
 __ZNSt3__214__split_bufferINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEEERNS5_IS9_Lj4096EEEED2Ev($3);
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv112_GLOBAL__N_118parse_template_argINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$051 = 0, $$4 = 0, $$58 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond57 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==($1|0);
 L1: do {
  if ($3) {
   $$4 = $0;
  } else {
   $4 = HEAP8[$0>>0]|0;
   $5 = $4 << 24 >> 24;
   $6 = ((($0)) + 1|0);
   switch ($5|0) {
   case 88:  {
    $7 = (__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_($6,$1,$2)|0);
    $8 = ($7|0)==($6|0);
    $9 = ($7|0)==($1|0);
    $or$cond = $8 | $9;
    if ($or$cond) {
     $$4 = $0;
     break L1;
    }
    $10 = HEAP8[$7>>0]|0;
    $11 = ($10<<24>>24)==(69);
    $12 = ((($7)) + 1|0);
    $$ = $11 ? $12 : $0;
    $$4 = $$;
    break L1;
    break;
   }
   case 74:  {
    $13 = ($6|0)==($1|0);
    if ($13) {
     $$4 = $0;
     break L1;
    } else {
     $$051 = $6;
    }
    while(1) {
     $14 = HEAP8[$$051>>0]|0;
     $15 = ($14<<24>>24)==(69);
     if ($15) {
      break;
     }
     $16 = (__ZN10__cxxabiv112_GLOBAL__N_118parse_template_argINS0_2DbEEEPKcS4_S4_RT_($$051,$1,$2)|0);
     $17 = ($16|0)==($$051|0);
     if ($17) {
      $$4 = $0;
      break L1;
     } else {
      $$051 = $16;
     }
    }
    $18 = ((($$051)) + 1|0);
    $$4 = $18;
    break L1;
    break;
   }
   case 76:  {
    $19 = ($6|0)==($1|0);
    if (!($19)) {
     $20 = HEAP8[$6>>0]|0;
     $21 = ($20<<24>>24)==(90);
     if ($21) {
      $22 = ((($0)) + 2|0);
      $23 = (__ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($22,$1,$2)|0);
      $24 = ($23|0)==($22|0);
      $25 = ($23|0)==($1|0);
      $or$cond57 = $24 | $25;
      if ($or$cond57) {
       $$4 = $0;
       break L1;
      }
      $26 = HEAP8[$23>>0]|0;
      $27 = ($26<<24>>24)==(69);
      $28 = ((($23)) + 1|0);
      $$58 = $27 ? $28 : $0;
      $$4 = $$58;
      break L1;
     }
    }
    $29 = (__ZN10__cxxabiv112_GLOBAL__N_118parse_expr_primaryINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
    $$4 = $29;
    break L1;
    break;
   }
   default: {
    $30 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2)|0);
    $$4 = $30;
    break L1;
   }
   }
  }
 } while(0);
 return ($$4|0);
}
function __ZNKSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEENS4_IS8_Lj4096EEEE8max_sizeEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 268435455;
}
function __ZNSt3__214__split_bufferINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEEERNS5_IS9_Lj4096EEEEC2EjjSB_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 12|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 16|0);
 HEAP32[$5>>2] = $3;
 $6 = ($1|0)==(0);
 if ($6) {
  $8 = 0;
 } else {
  $7 = (__ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS3_INS0_11string_pairENS1_IS4_Lj4096EEEEENS1_IS6_Lj4096EEEEELj4096EE8allocateEj($3,$1)|0);
  $8 = $7;
 }
 HEAP32[$0>>2] = $8;
 $9 = (($8) + ($2<<4)|0);
 $10 = ((($0)) + 8|0);
 HEAP32[$10>>2] = $9;
 $11 = ((($0)) + 4|0);
 HEAP32[$11>>2] = $9;
 $12 = (($8) + ($1<<4)|0);
 $13 = ((($0)) + 12|0);
 HEAP32[$13>>2] = $12;
 return;
}
function __ZNSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEENS4_IS8_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS8_RS9_EE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 4|0);
 $$0$i = $4;
 while(1) {
  $6 = ($$0$i|0)==($2|0);
  if ($6) {
   break;
  }
  $7 = HEAP32[$5>>2]|0;
  $8 = ((($7)) + -16|0);
  $9 = ((($$0$i)) + -16|0);
  $10 = ((($$0$i)) + -4|0);
  HEAP32[$8>>2] = 0;
  $11 = ((($7)) + -12|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($7)) + -8|0);
  $13 = HEAP32[$10>>2]|0;
  HEAP32[$12>>2] = 0;
  $14 = ((($7)) + -4|0);
  HEAP32[$14>>2] = $13;
  $15 = HEAP32[$9>>2]|0;
  HEAP32[$8>>2] = $15;
  $16 = ((($$0$i)) + -12|0);
  $17 = HEAP32[$16>>2]|0;
  HEAP32[$11>>2] = $17;
  $18 = ((($$0$i)) + -8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($7)) + -8|0);
  HEAP32[$20>>2] = $19;
  HEAP32[$18>>2] = 0;
  HEAP32[$16>>2] = 0;
  HEAP32[$9>>2] = 0;
  $21 = HEAP32[$5>>2]|0;
  $22 = ((($21)) + -16|0);
  HEAP32[$5>>2] = $22;
  $$0$i = $9;
 }
 $23 = HEAP32[$0>>2]|0;
 $24 = HEAP32[$5>>2]|0;
 HEAP32[$0>>2] = $24;
 HEAP32[$5>>2] = $23;
 $25 = ((($1)) + 8|0);
 $26 = HEAP32[$3>>2]|0;
 $27 = HEAP32[$25>>2]|0;
 HEAP32[$3>>2] = $27;
 HEAP32[$25>>2] = $26;
 $28 = ((($0)) + 8|0);
 $29 = ((($1)) + 12|0);
 $30 = HEAP32[$28>>2]|0;
 $31 = HEAP32[$29>>2]|0;
 HEAP32[$28>>2] = $31;
 HEAP32[$29>>2] = $30;
 $32 = HEAP32[$5>>2]|0;
 HEAP32[$1>>2] = $32;
 return;
}
function __ZNSt3__214__split_bufferINS_6vectorINS1_IN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEEERNS5_IS9_Lj4096EEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 while(1) {
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==($2|0);
  if ($5) {
   break;
  }
  $6 = ((($4)) + -16|0);
  HEAP32[$3>>2] = $6;
  __ZNSt3__213__vector_baseINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEENS5_IS7_Lj4096EEEED2Ev($6);
 }
 $7 = HEAP32[$0>>2]|0;
 $8 = ($7|0)==(0|0);
 if (!($8)) {
  $9 = $7;
  $10 = ((($0)) + 16|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($0)) + 12|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) - ($9))|0;
  $15 = $14 >> 4;
  __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS3_INS0_11string_pairENS1_IS4_Lj4096EEEEENS1_IS6_Lj4096EEEEELj4096EE10deallocateEPS8_j($11,$7,$15);
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS3_INS0_11string_pairENS1_IS4_Lj4096EEEEENS1_IS6_Lj4096EEEEELj4096EE8allocateEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = $1 << 4;
 $4 = (__ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE8allocateEj($2,$3)|0);
 return ($4|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj3EEERAT__Kc($0) {
 $0 = $0|0;
 var $$0$i$i = 0, $1 = 0, $2 = 0, $3 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($0,8984,2);
 $1 = ((($0)) + 12|0);
 ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $2 = (($1) + ($$0$i$i<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($$0$i$i) + 1)|0;
  $$0$i$i = $3;
 }
 return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7replaceEjjPKcj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$014 = 0, $$069 = 0, $$070 = 0, $$074 = 0, $$215 = 0, $$3 = 0, $$316 = 0, $$373 = 0, $$377 = 0, $$4 = 0, $$sroa$speculated = 0, $$sroa$speculated18 = 0, $$sroa$speculated19 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $or$cond = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = ((($0)) + 11|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)<(0);
 if ($5) {
  $8 = ((($0)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9>>>0)<(11);
  $$sroa$speculated18 = $10 ? $9 : 11;
  $11 = ((($0)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $12 & 2147483647;
  $phitmp$i = (($13) + -1)|0;
  $$sroa$speculated19 = $$sroa$speculated18;$15 = $9;$17 = $phitmp$i;
 } else {
  $6 = $4&255;
  $7 = ($6>>>0)<(11);
  $$sroa$speculated = $7 ? $6 : 11;
  $$sroa$speculated19 = $$sroa$speculated;$15 = $6;$17 = 10;
 }
 $14 = (($$sroa$speculated19) - ($15))|0;
 $16 = (($14) + ($17))|0;
 $18 = ($16>>>0)<($1>>>0);
 if ($18) {
  $47 = (($15) + ($1))|0;
  $48 = (($47) - ($$sroa$speculated19))|0;
  $49 = (($48) - ($17))|0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE21__grow_by_and_replaceEjjjjjjPKc($0,$17,$49,$15,0,$$sroa$speculated19,$1,8987);
 } else {
  if ($5) {
   $19 = HEAP32[$0>>2]|0;
   $25 = $19;
  } else {
   $25 = $0;
  }
  $20 = ($$sroa$speculated19|0)==($1|0);
  do {
   if ($20) {
    $$215 = $1;$$3 = 0;$$373 = 8987;$$377 = $1;
    label = 17;
   } else {
    $21 = (($15) - ($$sroa$speculated19))|0;
    $22 = ($21|0)==(0);
    if ($22) {
     $$215 = $$sroa$speculated19;$$3 = 0;$$373 = 8987;$$377 = $1;
     label = 17;
    } else {
     $23 = ($$sroa$speculated19>>>0)>($1>>>0);
     if ($23) {
      (__ZNSt3__211char_traitsIcE4moveEPcPKcj($25,8987,$1)|0);
      $37 = (($25) + ($1)|0);
      $38 = (($25) + ($$sroa$speculated19)|0);
      (__ZNSt3__211char_traitsIcE4moveEPcPKcj($37,$38,$21)|0);
      $$316 = $$sroa$speculated19;$$4 = $1;
      break;
     }
     $24 = ($25>>>0)<(8987>>>0);
     $26 = (($25) + ($15)|0);
     $27 = ($26>>>0)>(8987>>>0);
     $or$cond = $24 & $27;
     do {
      if ($or$cond) {
       $28 = (($25) + ($$sroa$speculated19)|0);
       $29 = ($28>>>0)>(8987>>>0);
       if ($29) {
        (__ZNSt3__211char_traitsIcE4moveEPcPKcj($25,8987,$$sroa$speculated19)|0);
        $32 = (8987 + ($1)|0);
        $33 = (($1) - ($$sroa$speculated19))|0;
        $$014 = 0;$$069 = $$sroa$speculated19;$$070 = $32;$$074 = $33;
        break;
       } else {
        $30 = (($1) - ($$sroa$speculated19))|0;
        $31 = (8987 + ($30)|0);
        $$014 = $$sroa$speculated19;$$069 = 0;$$070 = $31;$$074 = $1;
        break;
       }
      } else {
       $$014 = $$sroa$speculated19;$$069 = 0;$$070 = 8987;$$074 = $1;
      }
     } while(0);
     $34 = (($25) + ($$069)|0);
     $35 = (($34) + ($$074)|0);
     $36 = (($34) + ($$014)|0);
     (__ZNSt3__211char_traitsIcE4moveEPcPKcj($35,$36,$21)|0);
     $$215 = $$014;$$3 = $$069;$$373 = $$070;$$377 = $$074;
     label = 17;
    }
   }
  } while(0);
  if ((label|0) == 17) {
   $39 = (($25) + ($$3)|0);
   (__ZNSt3__211char_traitsIcE4moveEPcPKcj($39,$$373,$$377)|0);
   $$316 = $$215;$$4 = $$377;
  }
  $40 = (($$4) - ($$316))|0;
  $41 = (($40) + ($15))|0;
  $42 = HEAP8[$3>>0]|0;
  $43 = ($42<<24>>24)<(0);
  if ($43) {
   $44 = ((($0)) + 4|0);
   HEAP32[$44>>2] = $41;
  } else {
   $45 = $41&255;
   HEAP8[$3>>0] = $45;
  }
  $46 = (($25) + ($41)|0);
  HEAP8[$2>>0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($46,$2);
 }
 STACKTOP = sp;return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$1 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $phitmp$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = ((($0)) + 11|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)<(0);
 if ($7) {
  $8 = ((($0)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $12 = $9;
 } else {
  $10 = $6&255;
  $12 = $10;
 }
 $11 = ($12>>>0)<($1>>>0);
 if ($11) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_out_of_rangeEv($0);
  $$pre = HEAP8[$5>>0]|0;
  $14 = $$pre;
 } else {
  $14 = $6;
 }
 $13 = ($14<<24>>24)<(0);
 if ($13) {
  $15 = ((($0)) + 8|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $16 & 2147483647;
  $phitmp$i = (($17) + -1)|0;
  $19 = $phitmp$i;
 } else {
  $19 = 10;
 }
 $18 = (($19) - ($12))|0;
 $20 = ($18>>>0)<($3>>>0);
 $21 = (($12) + ($3))|0;
 if ($20) {
  $38 = (($21) - ($19))|0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE21__grow_by_and_replaceEjjjjjjPKc($0,$19,$38,$12,$1,0,$3,$2);
 } else {
  $22 = ($3|0)==(0);
  if (!($22)) {
   if ($13) {
    $23 = HEAP32[$0>>2]|0;
    $27 = $23;
   } else {
    $27 = $0;
   }
   $24 = (($12) - ($1))|0;
   $25 = ($24|0)==(0);
   $26 = (($27) + ($1)|0);
   if ($25) {
    $$1 = $2;
   } else {
    $28 = (($26) + ($3)|0);
    $29 = ($26>>>0)<=($2>>>0);
    $30 = (($27) + ($12)|0);
    $31 = ($30>>>0)>($2>>>0);
    $or$cond = $29 & $31;
    $32 = (($2) + ($3)|0);
    $$0 = $or$cond ? $32 : $2;
    (__ZNSt3__211char_traitsIcE4moveEPcPKcj($28,$26,$24)|0);
    $$1 = $$0;
   }
   (__ZNSt3__211char_traitsIcE4moveEPcPKcj($26,$$1,$3)|0);
   $33 = HEAP8[$5>>0]|0;
   $34 = ($33<<24>>24)<(0);
   if ($34) {
    $35 = ((($0)) + 4|0);
    HEAP32[$35>>2] = $21;
   } else {
    $36 = $21&255;
    HEAP8[$5>>0] = $36;
   }
   $37 = (($27) + ($21)|0);
   HEAP8[$4>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($37,$4);
  }
 }
 STACKTOP = sp;return ($0|0);
}
function __ZNKSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE8max_sizeEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 268435455;
}
function __ZNSt3__214__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEEC2EjjS9_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 12|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 16|0);
 HEAP32[$5>>2] = $3;
 $6 = ($1|0)==(0);
 if ($6) {
  $8 = 0;
 } else {
  $7 = (__ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lj4096EEEEELj4096EE8allocateEj($3,$1)|0);
  $8 = $7;
 }
 HEAP32[$0>>2] = $8;
 $9 = (($8) + ($2<<4)|0);
 $10 = ((($0)) + 8|0);
 HEAP32[$10>>2] = $9;
 $11 = ((($0)) + 4|0);
 HEAP32[$11>>2] = $9;
 $12 = (($8) + ($1<<4)|0);
 $13 = ((($0)) + 12|0);
 HEAP32[$13>>2] = $12;
 return;
}
function __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 4|0);
 $$0$i = $4;
 while(1) {
  $6 = ($$0$i|0)==($2|0);
  if ($6) {
   break;
  }
  $7 = HEAP32[$5>>2]|0;
  $8 = ((($7)) + -16|0);
  $9 = ((($$0$i)) + -16|0);
  $10 = ((($$0$i)) + -4|0);
  HEAP32[$8>>2] = 0;
  $11 = ((($7)) + -12|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($7)) + -8|0);
  $13 = HEAP32[$10>>2]|0;
  HEAP32[$12>>2] = 0;
  $14 = ((($7)) + -4|0);
  HEAP32[$14>>2] = $13;
  $15 = HEAP32[$9>>2]|0;
  HEAP32[$8>>2] = $15;
  $16 = ((($$0$i)) + -12|0);
  $17 = HEAP32[$16>>2]|0;
  HEAP32[$11>>2] = $17;
  $18 = ((($$0$i)) + -8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($7)) + -8|0);
  HEAP32[$20>>2] = $19;
  HEAP32[$18>>2] = 0;
  HEAP32[$16>>2] = 0;
  HEAP32[$9>>2] = 0;
  $21 = HEAP32[$5>>2]|0;
  $22 = ((($21)) + -16|0);
  HEAP32[$5>>2] = $22;
  $$0$i = $9;
 }
 $23 = HEAP32[$0>>2]|0;
 $24 = HEAP32[$5>>2]|0;
 HEAP32[$0>>2] = $24;
 HEAP32[$5>>2] = $23;
 $25 = ((($1)) + 8|0);
 $26 = HEAP32[$3>>2]|0;
 $27 = HEAP32[$25>>2]|0;
 HEAP32[$3>>2] = $27;
 HEAP32[$25>>2] = $26;
 $28 = ((($0)) + 8|0);
 $29 = ((($1)) + 12|0);
 $30 = HEAP32[$28>>2]|0;
 $31 = HEAP32[$29>>2]|0;
 HEAP32[$28>>2] = $31;
 HEAP32[$29>>2] = $30;
 $32 = HEAP32[$5>>2]|0;
 HEAP32[$1>>2] = $32;
 return;
}
function __ZNSt3__214__split_bufferINS_6vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS3_11short_allocIS4_Lj4096EEEEERNS5_IS7_Lj4096EEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 while(1) {
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==($2|0);
  if ($5) {
   break;
  }
  $6 = ((($4)) + -16|0);
  HEAP32[$3>>2] = $6;
  __ZNSt3__213__vector_baseIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEED2Ev($6);
 }
 $7 = HEAP32[$0>>2]|0;
 $8 = ($7|0)==(0|0);
 if (!($8)) {
  $9 = $7;
  $10 = ((($0)) + 16|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($0)) + 12|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) - ($9))|0;
  $15 = $14 >> 4;
  __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lj4096EEEEELj4096EE10deallocateEPS6_j($11,$7,$15);
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS0_11string_pairENS1_IS4_Lj4096EEEEELj4096EE8allocateEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = $1 << 4;
 $4 = (__ZN10__cxxabiv112_GLOBAL__N_15arenaILj4096EE8allocateEj($2,$3)|0);
 return ($4|0);
}
function __ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE8allocateEj($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNKSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE8max_sizeEv($0)|0);
 $2 = ($1|0)==(0);
 if ($2) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
 }
 $3 = ((($0)) + 12|0);
 $4 = (__ZN10__cxxabiv112_GLOBAL__N_111short_allocINS0_11string_pairELj4096EE8allocateEj($3,1)|0);
 $5 = ((($0)) + 4|0);
 HEAP32[$5>>2] = $4;
 HEAP32[$0>>2] = $4;
 $6 = ((($4)) + 24|0);
 $7 = ((($0)) + 8|0);
 HEAP32[$7>>2] = $6;
 return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE5eraseEjj($0) {
 $0 = $0|0;
 var $$pre = 0, $$sroa$speculated = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ((($0)) + 11|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)<(0);
 if ($4) {
  $5 = ((($0)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = HEAP32[$0>>2]|0;
  $13 = $7;$9 = $6;
 } else {
  $8 = $3&255;
  $13 = $0;$9 = $8;
 }
 $not$ = ($9|0)!=(0);
 $$sroa$speculated = $not$&1;
 $10 = (($9) - ($$sroa$speculated))|0;
 $11 = ($10|0)==(0);
 if ($11) {
  $15 = $3;
 } else {
  $12 = (($13) + ($$sroa$speculated)|0);
  (__ZNSt3__211char_traitsIcE4moveEPcPKcj($13,$12,$10)|0);
  $$pre = HEAP8[$2>>0]|0;
  $15 = $$pre;
 }
 $14 = ($15<<24>>24)<(0);
 if ($14) {
  $16 = ((($0)) + 4|0);
  HEAP32[$16>>2] = $10;
 } else {
  $17 = $10&255;
  HEAP8[$2>>0] = $17;
 }
 $18 = (($13) + ($10)|0);
 HEAP8[$1>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($18,$1);
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj8EEERAT__Kc($0) {
 $0 = $0|0;
 var $$0$i$i = 0, $1 = 0, $2 = 0, $3 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($0,8760,7);
 $1 = ((($0)) + 12|0);
 ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $2 = (($1) + ($$0$i$i<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($$0$i$i) + 1)|0;
  $$0$i$i = $3;
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj4EEERAT__Kc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $4 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($0,$1,3);
 $2 = ((($0)) + 12|0);
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $3 = (($2) + ($$0$i$i<<2)|0);
  HEAP32[$3>>2] = 0;
  $4 = (($$0$i$i) + 1)|0;
  $$0$i$i = $4;
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj19EEERAT__Kc($0) {
 $0 = $0|0;
 var $$0$i$i = 0, $1 = 0, $2 = 0, $3 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($0,9180,18);
 $1 = ((($0)) + 12|0);
 ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $2 = (($1) + ($$0$i$i<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($$0$i$i) + 1)|0;
  $$0$i$i = $3;
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj9EEERAT__Kc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $4 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($0,$1,8);
 $2 = ((($0)) + 12|0);
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $3 = (($2) + ($$0$i$i<<2)|0);
  HEAP32[$3>>2] = 0;
  $4 = (($$0$i$i) + 1)|0;
  $$0$i$i = $4;
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj7EEERAT__Kc($0) {
 $0 = $0|0;
 var $$0$i$i = 0, $1 = 0, $2 = 0, $3 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcj($0,9173,6);
 $1 = ((($0)) + 12|0);
 ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $2 = (($1) + ($$0$i$i<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($$0$i$i) + 1)|0;
  $$0$i$i = $3;
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_110save_valueIjEC2ERj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = $1;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$1>>2]|0;
 HEAP32[$2>>2] = $3;
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_110save_valueIbEC2ERb($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = $1;
 $2 = ((($0)) + 4|0);
 $3 = HEAP8[$1>>0]|0;
 HEAP8[$2>>0] = $3;
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_118parse_special_nameINS0_2DbEEEPKcS4_S4_RT_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i158 = 0, $$0$i$i$i161 = 0, $$0137 = 0, $$0140 = 0, $$11 = 0, $$1138 = 0, $$1141 = 0, $$2139 = 0, $$2142 = 0, $$4156 = 0, $$8 = 0, $$8151 = 0, $$pre$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i$i = 0, $exitcond$i$i$i159 = 0, $exitcond$i$i$i162 = 0, $or$cond = 0, $switch = 0, $trunc = 0, $trunc$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = sp + 61|0;
 $4 = sp + 60|0;
 $5 = sp + 48|0;
 $6 = sp + 36|0;
 $7 = sp + 24|0;
 $8 = sp + 12|0;
 $9 = sp;
 $10 = $1;
 $11 = $0;
 $12 = (($10) - ($11))|0;
 $13 = ($12|0)>(2);
 L1: do {
  if ($13) {
   $14 = HEAP8[$0>>0]|0;
   $15 = $14 << 24 >> 24;
   $16 = ((($0)) + 2|0);
   $17 = ((($0)) + 1|0);
   switch ($15|0) {
   case 84:  {
    break;
   }
   case 71:  {
    $142 = HEAP8[$17>>0]|0;
    $143 = $142 << 24 >> 24;
    switch ($143|0) {
    case 86:  {
     $144 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_($16,$1,$2)|0);
     $145 = ($144|0)==($16|0);
     if ($145) {
      $$11 = $0;
      label = 73;
      break L1;
     }
     $146 = HEAP32[$2>>2]|0;
     $147 = ((($2)) + 4|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = ($146|0)==($148|0);
     if ($149) {
      $$8 = $0;
      break L1;
     }
     $150 = ((($148)) + -24|0);
     (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($150,0,9398)|0);
     $$11 = $144;
     label = 73;
     break L1;
     break;
    }
    case 82:  {
     $151 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_($16,$1,$2)|0);
     $152 = ($151|0)==($16|0);
     if ($152) {
      $$11 = $0;
      label = 73;
      break L1;
     }
     $153 = HEAP32[$2>>2]|0;
     $154 = ((($2)) + 4|0);
     $155 = HEAP32[$154>>2]|0;
     $156 = ($153|0)==($155|0);
     if ($156) {
      $$8 = $0;
      break L1;
     }
     $157 = ((($155)) + -24|0);
     (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($157,0,9418)|0);
     $$11 = $151;
     label = 73;
     break L1;
     break;
    }
    default: {
     $$11 = $0;
     label = 73;
     break L1;
    }
    }
    break;
   }
   default: {
    $$11 = $0;
    label = 73;
    break L1;
   }
   }
   $18 = HEAP8[$17>>0]|0;
   $19 = $18 << 24 >> 24;
   switch ($19|0) {
   case 86:  {
    $20 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($16,$1,$2)|0);
    $21 = ($20|0)==($16|0);
    if ($21) {
     $$11 = $0;
     label = 73;
     break L1;
    }
    $22 = HEAP32[$2>>2]|0;
    $23 = ((($2)) + 4|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ($22|0)==($24|0);
    if ($25) {
     $$8 = $0;
     break L1;
    }
    $26 = ((($24)) + -24|0);
    (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($26,0,9247)|0);
    $$11 = $20;
    label = 73;
    break L1;
    break;
   }
   case 84:  {
    $27 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($16,$1,$2)|0);
    $28 = ($27|0)==($16|0);
    if ($28) {
     $$11 = $0;
     label = 73;
     break L1;
    }
    $29 = HEAP32[$2>>2]|0;
    $30 = ((($2)) + 4|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = ($29|0)==($31|0);
    if ($32) {
     $$8 = $0;
     break L1;
    }
    $33 = ((($31)) + -24|0);
    (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($33,0,9259)|0);
    $$11 = $27;
    label = 73;
    break L1;
    break;
   }
   case 73:  {
    $34 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($16,$1,$2)|0);
    $35 = ($34|0)==($16|0);
    if ($35) {
     $$11 = $0;
     label = 73;
     break L1;
    }
    $36 = HEAP32[$2>>2]|0;
    $37 = ((($2)) + 4|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = ($36|0)==($38|0);
    if ($39) {
     $$8 = $0;
     break L1;
    }
    $40 = ((($38)) + -24|0);
    (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($40,0,9268)|0);
    $$11 = $34;
    label = 73;
    break L1;
    break;
   }
   case 83:  {
    $41 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($16,$1,$2)|0);
    $42 = ($41|0)==($16|0);
    if ($42) {
     $$11 = $0;
     label = 73;
     break L1;
    }
    $43 = HEAP32[$2>>2]|0;
    $44 = ((($2)) + 4|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = ($43|0)==($45|0);
    if ($46) {
     $$8 = $0;
     break L1;
    }
    $47 = ((($45)) + -24|0);
    (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($47,0,9282)|0);
    $$11 = $41;
    label = 73;
    break L1;
    break;
   }
   case 99:  {
    $48 = (__ZN10__cxxabiv112_GLOBAL__N_117parse_call_offsetEPKcS2_($16,$1)|0);
    $49 = ($48|0)==($16|0);
    if ($49) {
     $$11 = $0;
     label = 73;
     break L1;
    }
    $50 = (__ZN10__cxxabiv112_GLOBAL__N_117parse_call_offsetEPKcS2_($48,$1)|0);
    $51 = ($50|0)==($48|0);
    if ($51) {
     $$11 = $0;
     label = 73;
     break L1;
    }
    $52 = (__ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($50,$1,$2)|0);
    $53 = ($52|0)==($50|0);
    if ($53) {
     $$11 = $0;
     label = 73;
     break L1;
    }
    $54 = HEAP32[$2>>2]|0;
    $55 = ((($2)) + 4|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = ($54|0)==($56|0);
    if ($57) {
     $$8 = $0;
     break L1;
    }
    $58 = ((($56)) + -24|0);
    (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($58,0,9301)|0);
    $$11 = $52;
    label = 73;
    break L1;
    break;
   }
   case 67:  {
    $59 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($16,$1,$2)|0);
    $60 = ($59|0)==($16|0);
    if ($60) {
     $$11 = $0;
     label = 73;
     break L1;
    }
    $61 = (__ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($59,$1)|0);
    $62 = ($61|0)==($59|0);
    $63 = ($61|0)==($1|0);
    $or$cond = $62 | $63;
    if ($or$cond) {
     $$11 = $0;
     label = 73;
     break L1;
    }
    $64 = HEAP8[$61>>0]|0;
    $65 = ($64<<24>>24)==(95);
    if (!($65)) {
     $$11 = $0;
     label = 73;
     break L1;
    }
    $66 = ((($61)) + 1|0);
    $67 = (__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_($66,$1,$2)|0);
    $68 = ($67|0)==($66|0);
    if ($68) {
     $$11 = $0;
     label = 73;
     break L1;
    }
    $69 = ((($2)) + 4|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = HEAP32[$2>>2]|0;
    $72 = (($70) - ($71))|0;
    $73 = (($72|0) / 24)&-1;
    $74 = ($73>>>0)<(2);
    if ($74) {
     $$8 = $0;
     break L1;
    }
    $75 = $70;
    $76 = ((($75)) + -24|0);
    __ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv($5,$76);
    $77 = HEAP32[$69>>2]|0;
    $78 = ((($77)) + -24|0);
    $80 = $77;
    while(1) {
     $79 = ($80|0)==($78|0);
     if ($79) {
      break;
     }
     $81 = ((($80)) + -24|0);
     HEAP32[$69>>2] = $81;
     __ZN10__cxxabiv112_GLOBAL__N_111string_pairD2Ev($81);
     $$pre$i = HEAP32[$69>>2]|0;
     $80 = $$pre$i;
    }
    __THREW__ = 0;
    $82 = (invoke_iiii(97,($5|0),0,(9328|0))|0);
    $83 = __THREW__; __THREW__ = 0;
    $84 = $83&1;
    if ($84) {
     $123 = ___cxa_find_matching_catch_2()|0;
     $124 = tempRet0;
     $$2139 = $124;$$2142 = $123;
    } else {
     ;HEAP32[$8>>2]=HEAP32[$5>>2]|0;HEAP32[$8+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$5+8>>2]|0;
     $$0$i$i$i161 = 0;
     while(1) {
      $exitcond$i$i$i162 = ($$0$i$i$i161|0)==(3);
      if ($exitcond$i$i$i162) {
       break;
      }
      $85 = (($5) + ($$0$i$i$i161<<2)|0);
      HEAP32[$85>>2] = 0;
      $86 = (($$0$i$i$i161) + 1)|0;
      $$0$i$i$i161 = $86;
     }
     __THREW__ = 0;
     $87 = (invoke_iii(95,($8|0),(9353|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      $125 = ___cxa_find_matching_catch_2()|0;
      $126 = tempRet0;
      $$1138 = $126;$$1141 = $125;
     } else {
      ;HEAP32[$7>>2]=HEAP32[$8>>2]|0;HEAP32[$7+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$8+8>>2]|0;
      $$0$i$i$i158 = 0;
      while(1) {
       $exitcond$i$i$i159 = ($$0$i$i$i158|0)==(3);
       if ($exitcond$i$i$i159) {
        break;
       }
       $90 = (($8) + ($$0$i$i$i158<<2)|0);
       HEAP32[$90>>2] = 0;
       $91 = (($$0$i$i$i158) + 1)|0;
       $$0$i$i$i158 = $91;
      }
      $92 = HEAP32[$69>>2]|0;
      $93 = ((($92)) + -24|0);
      __THREW__ = 0;
      invoke_vii(96,($9|0),($93|0));
      $94 = __THREW__; __THREW__ = 0;
      $95 = $94&1;
      do {
       if ($95) {
        $127 = ___cxa_find_matching_catch_2()|0;
        $128 = tempRet0;
        $$0137 = $128;$$0140 = $127;
       } else {
        $96 = ((($9)) + 11|0);
        $97 = HEAP8[$96>>0]|0;
        $98 = ($97<<24>>24)<(0);
        $99 = HEAP32[$9>>2]|0;
        $100 = $98 ? $99 : $9;
        $101 = ((($9)) + 4|0);
        $102 = HEAP32[$101>>2]|0;
        $103 = $97&255;
        $104 = $98 ? $102 : $103;
        __THREW__ = 0;
        $105 = (invoke_iiii(88,($7|0),($100|0),($104|0))|0);
        $106 = __THREW__; __THREW__ = 0;
        $107 = $106&1;
        if ($107) {
         $129 = ___cxa_find_matching_catch_2()|0;
         $130 = tempRet0;
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
         $$0137 = $130;$$0140 = $129;
         break;
        }
        ;HEAP32[$6>>2]=HEAP32[$7>>2]|0;HEAP32[$6+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$7+8>>2]|0;
        $$0$i$i$i = 0;
        while(1) {
         $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
         if ($exitcond$i$i$i) {
          break;
         }
         $108 = (($7) + ($$0$i$i$i<<2)|0);
         HEAP32[$108>>2] = 0;
         $109 = (($$0$i$i$i) + 1)|0;
         $$0$i$i$i = $109;
        }
        $110 = HEAP32[$69>>2]|0;
        $111 = ((($110)) + -24|0);
        $112 = ((($111)) + 11|0);
        $113 = HEAP8[$112>>0]|0;
        $114 = ($113<<24>>24)<(0);
        if ($114) {
         $115 = HEAP32[$111>>2]|0;
         HEAP8[$3>>0] = 0;
         __ZNSt3__211char_traitsIcE6assignERcRKc($115,$3);
         $116 = ((($110)) + -20|0);
         HEAP32[$116>>2] = 0;
        } else {
         HEAP8[$4>>0] = 0;
         __ZNSt3__211char_traitsIcE6assignERcRKc($111,$4);
         HEAP8[$112>>0] = 0;
        }
        __THREW__ = 0;
        invoke_vi(92,($111|0));
        $117 = __THREW__; __THREW__ = 0;
        $118 = $117&1;
        if ($118) {
         $119 = ___cxa_find_matching_catch_3(0|0)|0;
         $120 = tempRet0;
         ___clang_call_terminate($119);
         // unreachable;
        }
        ;HEAP32[$111>>2]=HEAP32[$6>>2]|0;HEAP32[$111+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$111+8>>2]=HEAP32[$6+8>>2]|0;
        $$0$i$i$i$i = 0;
        while(1) {
         $exitcond$i$i$i$i = ($$0$i$i$i$i|0)==(3);
         if ($exitcond$i$i$i$i) {
          break;
         }
         $121 = (($6) + ($$0$i$i$i$i<<2)|0);
         HEAP32[$121>>2] = 0;
         $122 = (($$0$i$i$i$i) + 1)|0;
         $$0$i$i$i$i = $122;
        }
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($6);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($9);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
        $$11 = $67;
        label = 73;
        break L1;
       }
      } while(0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($7);
      $$1138 = $$0137;$$1141 = $$0140;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($8);
     $$2139 = $$1138;$$2142 = $$1141;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEED2Ev($5);
    ___resumeException($$2142|0);
    // unreachable;
    break;
   }
   default: {
    $131 = (__ZN10__cxxabiv112_GLOBAL__N_117parse_call_offsetEPKcS2_($17,$1)|0);
    $132 = ($131|0)==($17|0);
    do {
     if ($132) {
      $$4156 = 3;$$8151 = $0;
     } else {
      $133 = (__ZN10__cxxabiv112_GLOBAL__N_114parse_encodingINS0_2DbEEEPKcS4_S4_RT_($131,$1,$2)|0);
      $134 = ($133|0)==($131|0);
      if ($134) {
       $$4156 = 0;$$8151 = $0;
      } else {
       $135 = HEAP32[$2>>2]|0;
       $136 = ((($2)) + 4|0);
       $137 = HEAP32[$136>>2]|0;
       $138 = ($135|0)==($137|0);
       if ($138) {
        $$4156 = 1;$$8151 = $0;
       } else {
        $139 = HEAP8[$16>>0]|0;
        $140 = ($139<<24>>24)==(118);
        $141 = ((($137)) + -24|0);
        if ($140) {
         (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($141,0,9358)|0);
         $$4156 = 0;$$8151 = $133;
         break;
        } else {
         (__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc($141,0,9376)|0);
         $$4156 = 0;$$8151 = $133;
         break;
        }
       }
      }
     }
    } while(0);
    $trunc = $$4156&255;
    $trunc$clear = $trunc & 3;
    switch ($trunc$clear<<24>>24) {
    case 3: case 0:  {
     $$11 = $$8151;
     label = 73;
     break L1;
     break;
    }
    default: {
    }
    }
    $switch = ($$4156|0)==(0);
    if ($switch) {
     $$11 = $$8151;
     label = 73;
     break L1;
    } else {
     $$8 = $0;
     break L1;
    }
   }
   }
  } else {
   $$11 = $0;
   label = 73;
  }
 } while(0);
 if ((label|0) == 73) {
  $$8 = $$11;
 }
 STACKTOP = sp;return ($$8|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_110save_valueIbED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = HEAP32[$0>>2]|0;
 HEAP8[$3>>0] = $2;
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_110save_valueIjED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 HEAP32[$3>>2] = $2;
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_117parse_call_offsetEPKcS2_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$3 = 0, $$34 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond32 = 0, $or$cond33 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==($1|0);
 L1: do {
  if ($2) {
   $$3 = $0;
  } else {
   $3 = HEAP8[$0>>0]|0;
   $4 = $3 << 24 >> 24;
   $5 = ((($0)) + 1|0);
   switch ($4|0) {
   case 104:  {
    $6 = (__ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($5,$1)|0);
    $7 = ($6|0)==($5|0);
    $8 = ($6|0)==($1|0);
    $or$cond = $7 | $8;
    if ($or$cond) {
     $$3 = $0;
     break L1;
    }
    $9 = HEAP8[$6>>0]|0;
    $10 = ($9<<24>>24)==(95);
    $11 = ((($6)) + 1|0);
    $$ = $10 ? $11 : $0;
    return ($$|0);
    break;
   }
   case 118:  {
    break;
   }
   default: {
    $$3 = $0;
    break L1;
   }
   }
   $12 = (__ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($5,$1)|0);
   $13 = ($12|0)==($5|0);
   $14 = ($12|0)==($1|0);
   $or$cond32 = $13 | $14;
   if ($or$cond32) {
    $$3 = $0;
   } else {
    $15 = HEAP8[$12>>0]|0;
    $16 = ($15<<24>>24)==(95);
    if ($16) {
     $17 = ((($12)) + 1|0);
     $18 = (__ZN10__cxxabiv112_GLOBAL__N_112parse_numberEPKcS2_($17,$1)|0);
     $19 = ($18|0)==($17|0);
     $20 = ($18|0)==($1|0);
     $or$cond33 = $19 | $20;
     if ($or$cond33) {
      $$3 = $0;
     } else {
      $21 = HEAP8[$18>>0]|0;
      $22 = ($21<<24>>24)==(95);
      $23 = ((($18)) + 1|0);
      $$34 = $22 ? $23 : $0;
      $$3 = $$34;
     }
    } else {
     $$3 = $0;
    }
   }
  }
 } while(0);
 return ($$3|0);
}
function __ZN10__cxxabiv112_GLOBAL__N_111short_allocINS0_11string_pairELj4096EEC2ERNS0_5arenaILj4096EEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = $1;
 return;
}
function __ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEC2EjRKS6_RKS7_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = 0;
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$1>>2]|0;
 HEAP32[$3>>2] = 0;
 $5 = ((($0)) + 12|0);
 HEAP32[$5>>2] = $4;
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_111short_allocINSt3__26vectorINS3_INS0_11string_pairENS1_IS4_Lj4096EEEEENS1_IS6_Lj4096EEEEELj4096EEC2ERNS0_5arenaILj4096EEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = $1;
 return;
}
function __ZNSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEENS4_IS8_Lj4096EEEEC2EjRKS8_RKS9_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = 0;
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$1>>2]|0;
 HEAP32[$3>>2] = 0;
 $5 = ((($0)) + 12|0);
 HEAP32[$5>>2] = $4;
 return;
}
function __ZNSt9bad_allocC2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (1744);
 return;
}
function __ZSt15get_new_handlerv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[3140]|0;HEAP32[3140] = (($0+0)|0);
 $1 = $0;
 return ($1|0);
}
function ___cxa_can_catch($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $4;
 $5 = HEAP32[$0>>2]|0;
 $6 = ((($5)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_iiii[$7 & 127]($0,$1,$3)|0);
 $9 = $8&1;
 if ($8) {
  $10 = HEAP32[$3>>2]|0;
  HEAP32[$2>>2] = $10;
 }
 STACKTOP = sp;return ($9|0);
}
function ___cxa_is_pointer_type($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $4 = 0;
 } else {
  $2 = (___dynamic_cast($0,352,472,0)|0);
  $phitmp = ($2|0)!=(0|0);
  $4 = $phitmp;
 }
 $3 = $4&1;
 return ($3|0);
}
function runPostSets() {
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
    end = (ptr + num)|0;

    value = value & 0xff;
    if ((num|0) >= 67 /* 64 bytes for an unrolled loop + 3 bytes for unaligned head*/) {
      while ((ptr&3) != 0) {
        HEAP8[((ptr)>>0)]=value;
        ptr = (ptr+1)|0;
      }

      aligned_end = (end & -4)|0;
      block_aligned_end = (aligned_end - 64)|0;
      value4 = value | (value << 8) | (value << 16) | (value << 24);

      while((ptr|0) <= (block_aligned_end|0)) {
        HEAP32[((ptr)>>2)]=value4;
        HEAP32[(((ptr)+(4))>>2)]=value4;
        HEAP32[(((ptr)+(8))>>2)]=value4;
        HEAP32[(((ptr)+(12))>>2)]=value4;
        HEAP32[(((ptr)+(16))>>2)]=value4;
        HEAP32[(((ptr)+(20))>>2)]=value4;
        HEAP32[(((ptr)+(24))>>2)]=value4;
        HEAP32[(((ptr)+(28))>>2)]=value4;
        HEAP32[(((ptr)+(32))>>2)]=value4;
        HEAP32[(((ptr)+(36))>>2)]=value4;
        HEAP32[(((ptr)+(40))>>2)]=value4;
        HEAP32[(((ptr)+(44))>>2)]=value4;
        HEAP32[(((ptr)+(48))>>2)]=value4;
        HEAP32[(((ptr)+(52))>>2)]=value4;
        HEAP32[(((ptr)+(56))>>2)]=value4;
        HEAP32[(((ptr)+(60))>>2)]=value4;
        ptr = (ptr + 64)|0;
      }

      while ((ptr|0) < (aligned_end|0) ) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    // The remaining bytes.
    while ((ptr|0) < (end|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (end-num)|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    var aligned_dest_end = 0;
    var block_aligned_dest_end = 0;
    var dest_end = 0;
    // Test against a benchmarked cutoff limit for when HEAPU8.set() becomes faster to use.
    if ((num|0) >=
      8192
    ) {
      return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    }

    ret = dest|0;
    dest_end = (dest + num)|0;
    if ((dest&3) == (src&3)) {
      // The initial unaligned < 4-byte front.
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      aligned_dest_end = (dest_end & -4)|0;
      block_aligned_dest_end = (aligned_dest_end - 64)|0;
      while ((dest|0) <= (block_aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        HEAP32[(((dest)+(4))>>2)]=((HEAP32[(((src)+(4))>>2)])|0);
        HEAP32[(((dest)+(8))>>2)]=((HEAP32[(((src)+(8))>>2)])|0);
        HEAP32[(((dest)+(12))>>2)]=((HEAP32[(((src)+(12))>>2)])|0);
        HEAP32[(((dest)+(16))>>2)]=((HEAP32[(((src)+(16))>>2)])|0);
        HEAP32[(((dest)+(20))>>2)]=((HEAP32[(((src)+(20))>>2)])|0);
        HEAP32[(((dest)+(24))>>2)]=((HEAP32[(((src)+(24))>>2)])|0);
        HEAP32[(((dest)+(28))>>2)]=((HEAP32[(((src)+(28))>>2)])|0);
        HEAP32[(((dest)+(32))>>2)]=((HEAP32[(((src)+(32))>>2)])|0);
        HEAP32[(((dest)+(36))>>2)]=((HEAP32[(((src)+(36))>>2)])|0);
        HEAP32[(((dest)+(40))>>2)]=((HEAP32[(((src)+(40))>>2)])|0);
        HEAP32[(((dest)+(44))>>2)]=((HEAP32[(((src)+(44))>>2)])|0);
        HEAP32[(((dest)+(48))>>2)]=((HEAP32[(((src)+(48))>>2)])|0);
        HEAP32[(((dest)+(52))>>2)]=((HEAP32[(((src)+(52))>>2)])|0);
        HEAP32[(((dest)+(56))>>2)]=((HEAP32[(((src)+(56))>>2)])|0);
        HEAP32[(((dest)+(60))>>2)]=((HEAP32[(((src)+(60))>>2)])|0);
        dest = (dest+64)|0;
        src = (src+64)|0;
      }
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    } else {
      // In the unaligned copy case, unroll a bit as well.
      aligned_dest_end = (dest_end - 4)|0;
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        HEAP8[(((dest)+(1))>>0)]=((HEAP8[(((src)+(1))>>0)])|0);
        HEAP8[(((dest)+(2))>>0)]=((HEAP8[(((src)+(2))>>0)])|0);
        HEAP8[(((dest)+(3))>>0)]=((HEAP8[(((src)+(3))>>0)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    }
    // The remaining unaligned < 4 byte tail.
    while ((dest|0) < (dest_end|0)) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
    }
    return ret|0;
}
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    $rem = $rem | 0;
    var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
    $n_sroa_0_0_extract_trunc = $a$0;
    $n_sroa_1_4_extract_shift$0 = $a$1;
    $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
    $d_sroa_0_0_extract_trunc = $b$0;
    $d_sroa_1_4_extract_shift$0 = $b$1;
    $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
    if (($n_sroa_1_4_extract_trunc | 0) == 0) {
      $4 = ($rem | 0) != 0;
      if (($d_sroa_1_4_extract_trunc | 0) == 0) {
        if ($4) {
          HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$4) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
    $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
    do {
      if (($d_sroa_0_0_extract_trunc | 0) == 0) {
        if ($17) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
            HEAP32[$rem + 4 >> 2] = 0;
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        if (($n_sroa_0_0_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0;
            HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
        if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0 | $a$0 & -1;
            HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
          }
          $_0$1 = 0;
          $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($51 >>> 0 <= 30) {
          $57 = $51 + 1 | 0;
          $58 = 31 - $51 | 0;
          $sr_1_ph = $57;
          $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$17) {
          $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
          $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          if ($119 >>> 0 <= 31) {
            $125 = $119 + 1 | 0;
            $126 = 31 - $119 | 0;
            $130 = $119 - 31 >> 31;
            $sr_1_ph = $125;
            $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
            $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
            $q_sroa_0_1_ph = 0;
            $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
            break;
          }
          if (($rem | 0) == 0) {
            $_0$1 = 0;
            $_0$0 = 0;
            return (tempRet0 = $_0$1, $_0$0) | 0;
          }
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
        if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
          $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
          $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          $89 = 64 - $88 | 0;
          $91 = 32 - $88 | 0;
          $92 = $91 >> 31;
          $95 = $88 - 32 | 0;
          $105 = $95 >> 31;
          $sr_1_ph = $88;
          $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
          $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
          $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
          $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
          break;
        }
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
          HEAP32[$rem + 4 >> 2] = 0;
        }
        if (($d_sroa_0_0_extract_trunc | 0) == 1) {
          $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$0 = 0 | $a$0 & -1;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        } else {
          $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
          $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
          $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
      }
    } while (0);
    if (($sr_1_ph | 0) == 0) {
      $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
      $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
      $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
      $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = 0;
    } else {
      $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
      $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
      $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
      $137$1 = tempRet0;
      $q_sroa_1_1198 = $q_sroa_1_1_ph;
      $q_sroa_0_1199 = $q_sroa_0_1_ph;
      $r_sroa_1_1200 = $r_sroa_1_1_ph;
      $r_sroa_0_1201 = $r_sroa_0_1_ph;
      $sr_1202 = $sr_1_ph;
      $carry_0203 = 0;
      while (1) {
        $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
        $149 = $carry_0203 | $q_sroa_0_1199 << 1;
        $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
        $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
        _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
        $150$1 = tempRet0;
        $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
        $152 = $151$0 & 1;
        $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
        $r_sroa_0_0_extract_trunc = $154$0;
        $r_sroa_1_4_extract_trunc = tempRet0;
        $155 = $sr_1202 - 1 | 0;
        if (($155 | 0) == 0) {
          break;
        } else {
          $q_sroa_1_1198 = $147;
          $q_sroa_0_1199 = $149;
          $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
          $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
          $sr_1202 = $155;
          $carry_0203 = $152;
        }
      }
      $q_sroa_1_1_lcssa = $147;
      $q_sroa_0_1_lcssa = $149;
      $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
      $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = $152;
    }
    $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
    $q_sroa_0_0_insert_ext75$1 = 0;
    $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
    if (($rem | 0) != 0) {
      HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
      HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
    }
    $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
    $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $1$0 = 0;
    $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
    return $1$0 | 0;
}
function ___muldsi3($a, $b) {
    $a = $a | 0;
    $b = $b | 0;
    var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
    $1 = $a & 65535;
    $2 = $b & 65535;
    $3 = Math_imul($2, $1) | 0;
    $6 = $a >>> 16;
    $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
    $11 = $b >>> 16;
    $12 = Math_imul($11, $1) | 0;
    return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
    $x_sroa_0_0_extract_trunc = $a$0;
    $y_sroa_0_0_extract_trunc = $b$0;
    $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
    $1$1 = tempRet0;
    $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
    return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function _sbrk(increment) {
    increment = increment|0;
    var oldDynamicTop = 0;
    var oldDynamicTopOnChange = 0;
    var newDynamicTop = 0;
    var totalMemory = 0;
    increment = ((increment + 15) & -16)|0;
    oldDynamicTop = HEAP32[DYNAMICTOP_PTR>>2]|0;
    newDynamicTop = oldDynamicTop + increment | 0;

    if (((increment|0) > 0 & (newDynamicTop|0) < (oldDynamicTop|0)) // Detect and fail if we would wrap around signed 32-bit int.
      | (newDynamicTop|0) < 0) { // Also underflow, sbrk() should be able to be used to subtract.
      abortOnCannotGrowMemory()|0;
      ___setErrNo(12);
      return -1;
    }

    HEAP32[DYNAMICTOP_PTR>>2] = newDynamicTop;
    totalMemory = getTotalMemory()|0;
    if ((newDynamicTop|0) > (totalMemory|0)) {
      if ((enlargeMemory()|0) == 0) {
        ___setErrNo(12);
        HEAP32[DYNAMICTOP_PTR>>2] = oldDynamicTop;
        return -1;
      }
    }
    return oldDynamicTop|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $rem = 0, __stackBase__ = 0;
    __stackBase__ = STACKTOP;
    STACKTOP = STACKTOP + 16 | 0;
    $rem = __stackBase__ | 0;
    ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
    STACKTOP = __stackBase__;
    return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function _llvm_bswap_i32(x) {
    x = x|0;
    return (((x&0xff)<<24) | (((x>>8)&0xff)<<16) | (((x>>16)&0xff)<<8) | (x>>>24))|0;
}

  
function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&127](a1|0,a2|0,a3|0)|0;
}


function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  FUNCTION_TABLE_viiiii[index&63](a1|0,a2|0,a3|0,a4|0,a5|0);
}


function dynCall_i(index) {
  index = index|0;
  
  return FUNCTION_TABLE_i[index&127]()|0;
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&127](a1|0);
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&127](a1|0,a2|0);
}


function dynCall_viiiid(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=+a5;
  FUNCTION_TABLE_viiiid[index&63](a1|0,a2|0,a3|0,a4|0,+a5);
}


function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&127](a1|0)|0;
}


function dynCall_viii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  FUNCTION_TABLE_viii[index&127](a1|0,a2|0,a3|0);
}


function dynCall_v(index) {
  index = index|0;
  
  FUNCTION_TABLE_v[index&127]();
}


function dynCall_iiiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return FUNCTION_TABLE_iiiii[index&127](a1|0,a2|0,a3|0,a4|0)|0;
}


function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  FUNCTION_TABLE_viiiiii[index&63](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&127](a1|0,a2|0)|0;
}


function dynCall_iiiiid(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=+a5;
  return FUNCTION_TABLE_iiiiid[index&63](a1|0,a2|0,a3|0,a4|0,+a5)|0;
}


function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&127](a1|0,a2|0,a3|0,a4|0);
}

function b0(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(0);return 0;
}
function b1(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(1);
}
function b2() {
 ; nullFunc_i(2);return 0;
}
function b3(p0) {
 p0 = p0|0; nullFunc_vi(3);
}
function __emval_decref__wrapper(p0) {
 p0 = p0|0; __emval_decref(p0|0);
}
function b4(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(4);
}
function b5(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = +p4; nullFunc_viiiid(5);
}
function b6(p0) {
 p0 = p0|0; nullFunc_ii(6);return 0;
}
function b7(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(7);
}
function b8() {
 ; nullFunc_v(8);
}
function ___cxa_end_catch__wrapper() {
 ; ___cxa_end_catch();
}
function b9(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(9);return 0;
}
function b10(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(10);
}
function b11(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(11);return 0;
}
function b12(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = +p4; nullFunc_iiiiid(12);return 0;
}
function b13(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(13);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_iiii = [b0,b0,___stdio_write,___stdio_seek,___stdout_write,_sn_write,b0,b0,b0,b0,b0,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv
,b0,__ZNK10__cxxabiv119__pointer_type_info9can_catchEPKNS_16__shim_type_infoERPv,b0,__ZNK10__cxxabiv116__enum_type_info9can_catchEPKNS_16__shim_type_infoERPv,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZN10emscripten8internal15FunctionInvokerIPFNS_3valERKNSt3__26vectorIiNS3_9allocatorIiEEEEjES2_S9_JjEE6invokeEPSB_PS7_j,__ZN10emscripten8internal12VectorAccessINSt3__26vectorIiNS2_9allocatorIiEEEEE3setERS6_jRKi,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,___stdio_read,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKcj
,__ZN10__cxxabiv112_GLOBAL__N_118parse_special_nameINS0_2DbEEEPKcS4_S4_RT_,__ZN10__cxxabiv112_GLOBAL__N_110parse_nameINS0_2DbEEEPKcS4_S4_RT_,__ZN10__cxxabiv112_GLOBAL__N_110parse_typeINS0_2DbEEEPKcS4_S4_RT_,b0,b0,b0,b0,b0,__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKc,b0,b0,__ZNKSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7compareEjjPKcj,b0,b0,b0,__ZN10__cxxabiv112_GLOBAL__N_117parse_source_nameINS0_2DbEEEPKcS4_S4_RT_,b0,b0,b0,b0,b0,b0,__ZN10__cxxabiv112_GLOBAL__N_118parse_template_argINS0_2DbEEEPKcS4_S4_RT_,b0,b0,b0,b0,__ZN10__cxxabiv112_GLOBAL__N_116parse_expressionINS0_2DbEEEPKcS4_S4_RT_,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0];
var FUNCTION_TABLE_viiiii = [b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b1,b1,b1,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1];
var FUNCTION_TABLE_i = [b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZN10emscripten8internal12operator_newINSt3__26vectorIiNS2_9allocatorIiEEEEJEEEPT_DpOT0_,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZN10emscripten8internal12operator_newIN15score_estimator5GobanEJEEEPT_DpOT0_
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,___cxa_get_globals_fast,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2];
var FUNCTION_TABLE_vi = [b3,b3,b3,b3,b3,b3,b3,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,b3,b3,b3,b3,__ZN10__cxxabiv120__si_class_type_infoD0Ev,b3,b3,b3,__ZNSt9bad_allocD2Ev,__ZNSt9bad_allocD0Ev,b3,__ZNSt11logic_errorD2Ev,__ZNSt11logic_errorD0Ev,b3,__ZNSt12length_errorD0Ev,__ZNSt12out_of_rangeD0Ev,__ZN10__cxxabiv123__fundamental_type_infoD0Ev,b3
,__ZN10__cxxabiv119__pointer_type_infoD0Ev,b3,__ZN10__cxxabiv116__enum_type_infoD0Ev,b3,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,b3,b3,b3,b3,b3,b3,__ZN10emscripten8internal14raw_destructorINSt3__26vectorIiNS2_9allocatorIiEEEEEEvPT_,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__emval_decref__wrapper,b3,b3,b3,__ZN10emscripten8internal14raw_destructorIN15score_estimator5GobanEEEvPT_,b3
,b3,b3,b3,b3,b3,__ZN15score_estimator5Goban5printEv,b3,b3,b3,b3,b3,__ZN15score_estimator5GobanC2Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE7reserveEj,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE5eraseEjj,__ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE8allocateEj,b3,b3,b3,b3,__ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ILj22EEERAT__Kc,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3];
var FUNCTION_TABLE_vii = [b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__26vectorIiNS_9allocatorIiEEE9push_backERKi,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNKSt3__26vectorIiNS_9allocatorIiEEE17__annotate_shrinkEj,b4,b4,b4,__ZNSt3__26vectorIiNS_9allocatorIiEEE26__swap_out_circular_bufferERNS_14__split_bufferIiRS2_EE,b4,b4,b4
,b4,b4,b4,b4,b4,b4,__ZN10emscripten8internal13MethodInvokerIMN15score_estimator5GobanEFvvEvPS3_JEE6invokeERKS5_S6_,__ZN15score_estimator5Goban14getScoreVectorEv,b4,b4,b4,b4,__ZNSt3__26vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIRKiEEvOT_,b4,b4,__ZNSt3__26vectorIiNS_9allocatorIiEEE8allocateEj,b4,__ZN15score_estimator5GobanC2ERKS0_,b4,__ZNSt11logic_errorC2EPKc,__ZNSt3__218__libcpp_refstringC2EPKc,b4,b4,b4,_abort_message,b4,__ZN10__cxxabiv112_GLOBAL__N_12DbC2ILj4096EEERNS0_5arenaIXT_EEE,__ZNSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEENS4_IS8_Lj4096EEEE24__emplace_back_slow_pathIJRNS2_5arenaILj4096EEEEEEvDpOT_,b4,b4
,b4,b4,b4,b4,__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE9push_backEc,b4,b4,__ZN10__cxxabiv112_GLOBAL__N_111string_pair9move_fullEv,b4,__ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE21__push_back_slow_pathIS6_EEvOT_,b4,b4,b4,b4,b4,b4,__ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIS3_EEvOT_,__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_,__ZN10__cxxabiv112_GLOBAL__N_111string_pairC2ERKS1_,b4,b4,__ZNSt3__26vectorINS0_INS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEEENS4_IS8_Lj4096EEEE24__emplace_back_slow_pathIJS5_EEEvDpOT_,b4,__ZNSt3__26vectorINS0_IN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEENS4_IS6_Lj4096EEEE24__emplace_back_slow_pathIJS5_EEEvDpOT_,__ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEE21__push_back_slow_pathIRKS3_EEvOT_,b4,b4,b4,b4,b4
,b4,b4,b4,__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6assignEPKc,__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEaSERKS7_,b4,b4,b4,b4];
var FUNCTION_TABLE_viiiid = [b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,__ZN15score_estimator5Goban8estimateENS_5ColorEif,b5,b5,b5];
var FUNCTION_TABLE_ii = [b6,___stdio_close,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNKSt9bad_alloc4whatEv,b6,b6,__ZNKSt11logic_error4whatEv,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN10emscripten8internal13getActualTypeINSt3__26vectorIiNS2_9allocatorIiEEEEEEPKvPT_,b6,b6,__ZN10emscripten8internal7InvokerIPNSt3__26vectorIiNS2_9allocatorIiEEEEJEE6invokeEPFS7_vE,b6,b6,__ZNKSt3__26vectorIiNS_9allocatorIiEEE4sizeEv,b6,b6,b6,b6,b6,b6,__ZN10emscripten8internal11BindingTypeINS_3valEE10toWireTypeERKS2_,b6,b6,b6,__ZN10emscripten8internal13getActualTypeIN15score_estimator5GobanEEEPKvPT_,b6,b6
,__ZN10emscripten8internal7InvokerIPN15score_estimator5GobanEJEE6invokeEPFS4_vE,b6,b6,__ZN15score_estimator5Goban5scoreEv,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorIiNS2_9allocatorIiEEEEE10toWireTypeEOS6_,__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNSt3__211char_traitsIcE6lengthEPKc,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6];
var FUNCTION_TABLE_viii = [b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZNSt3__26vectorIiNS_9allocatorIiEEE6resizeEjRKi,b7,b7,b7,b7,__ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorIiNS2_9allocatorIiEEEEFvRKiEvPS6_JS8_EE6invokeERKSA_SB_i,b7,b7,b7,__ZN10emscripten8internal12VectorAccessINSt3__26vectorIiNS2_9allocatorIiEEEEE3getERKS6_j,b7,b7,b7,b7,b7,b7,__ZNSt3__214__split_bufferIiRNS_9allocatorIiEEE18__construct_at_endEjRKi,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZN15score_estimator5Goban13populateBoardENSt3__26vectorIiNS1_9allocatorIiEEEEi,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZNSt3__26vectorIN10__cxxabiv112_GLOBAL__N_111string_pairENS2_11short_allocIS3_Lj4096EEEEC2EjRKS3_RKS5_,__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEC2ERKS7_jjRKS6_,__ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EERKSB_PKS8_,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZNSt3__2plIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEEENS_12basic_stringIT_T0_T1_EEPKS8_RKSB_,b7
,b7,b7,__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESC_SC_,b7,b7,b7,b7,b7,b7];
var FUNCTION_TABLE_v = [b8,b8,b8,b8,b8,b8,__ZL25default_terminate_handlerv,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev,b8,b8,b8,___cxa_end_catch__wrapper,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8];
var FUNCTION_TABLE_iiiii = [b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZN10emscripten8internal15FunctionInvokerIPFbRNSt3__26vectorIiNS2_9allocatorIiEEEEjRKiEbS7_JjS9_EE6invokeEPSB_PS6_ji,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6insertEjPKcj,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZN10__cxxabiv112_GLOBAL__N_123parse_binary_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_
,__ZN10__cxxabiv112_GLOBAL__N_123parse_prefix_expressionINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_,__ZN10__cxxabiv112_GLOBAL__N_121parse_integer_literalINS0_2DbEEEPKcS4_S4_RKNT_6StringERS5_,b9,b9,b9,b9,b9,b9,b9];
var FUNCTION_TABLE_viiiiii = [b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b10,b10,b10,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10];
var FUNCTION_TABLE_iii = [b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,__ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorIiNS2_9allocatorIiEEEEKFjvEjPKS6_JEE6invokeERKS8_SA_,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,__ZN10emscripten8internal13MethodInvokerIMN15score_estimator5GobanEFivEiPS3_JEE6invokeERKS5_S6_,b11,b11,b11,__ZN10emscripten8internal13MethodInvokerIMN15score_estimator5GobanEFNSt3__26vectorIiNS4_9allocatorIiEEEEvES8_PS3_JEE6invokeERKSA_SB_,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6appendEPKc,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11];
var FUNCTION_TABLE_iiiiid = [b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,__ZN10emscripten8internal13MethodInvokerIMN15score_estimator5GobanEFS3_NS2_5ColorEifES3_PS3_JS4_ifEE6invokeERKS6_S7_S4_if,b12,b12];
var FUNCTION_TABLE_viiii = [b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b13,b13,b13,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b13,b13,b13,b13,b13,b13,b13,__ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorIiNS2_9allocatorIiEEEEFvjRKiEvPS6_JjS8_EE6invokeERKSA_SB_ji,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,__ZN10emscripten8internal13MethodInvokerIMN15score_estimator5GobanEFvNSt3__26vectorIiNS4_9allocatorIiEEEEiEvPS3_JS8_iEE6invokeERKSA_SB_PS8_i,b13,b13,b13,b13,b13,__ZNSt3__26vectorIiNS_9allocatorIiEEE18__construct_at_endIPiEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES7_S7_j,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,__ZN10__cxxabiv112_GLOBAL__N_18demangleINS0_2DbEEEvPKcS4_RT_Ri,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,__ZNSt3__212basic_stringIcNS_11char_traitsIcEEN10__cxxabiv112_GLOBAL__N_112malloc_allocIcEEE6__initEPKcjj,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13];

  return { _main: _main, stackSave: stackSave, getTempRet0: getTempRet0, _memset: _memset, setThrew: setThrew, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _sbrk: _sbrk, ___cxa_is_pointer_type: ___cxa_is_pointer_type, _llvm_cttz_i32: _llvm_cttz_i32, ___cxa_demangle: ___cxa_demangle, _memcpy: _memcpy, _llvm_bswap_i32: _llvm_bswap_i32, ___muldi3: ___muldi3, ___uremdi3: ___uremdi3, stackAlloc: stackAlloc, _i64Subtract: _i64Subtract, __GLOBAL__sub_I_bind_cpp: __GLOBAL__sub_I_bind_cpp, ___udivmoddi4: ___udivmoddi4, setTempRet0: setTempRet0, _i64Add: _i64Add, _emscripten_get_global_libc: _emscripten_get_global_libc, ___getTypeName: ___getTypeName, ___udivdi3: ___udivdi3, ___errno_location: ___errno_location, ___muldsi3: ___muldsi3, ___cxa_can_catch: ___cxa_can_catch, _free: _free, runPostSets: runPostSets, __GLOBAL__sub_I_estimator_cc: __GLOBAL__sub_I_estimator_cc, establishStackSpace: establishStackSpace, _memmove: _memmove, stackRestore: stackRestore, _malloc: _malloc, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiii: dynCall_iiii, dynCall_viiiii: dynCall_viiiii, dynCall_i: dynCall_i, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_viiiid: dynCall_viiiid, dynCall_ii: dynCall_ii, dynCall_viii: dynCall_viii, dynCall_v: dynCall_v, dynCall_iiiii: dynCall_iiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_iii: dynCall_iii, dynCall_iiiiid: dynCall_iiiiid, dynCall_viiii: dynCall_viiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var real__main = asm["_main"]; asm["_main"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__main.apply(null, arguments);
};

var real_stackSave = asm["stackSave"]; asm["stackSave"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real_stackSave.apply(null, arguments);
};

var real_getTempRet0 = asm["getTempRet0"]; asm["getTempRet0"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real_getTempRet0.apply(null, arguments);
};

var real_setThrew = asm["setThrew"]; asm["setThrew"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real_setThrew.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Shl.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"]; asm["_sbrk"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__sbrk.apply(null, arguments);
};

var real____cxa_is_pointer_type = asm["___cxa_is_pointer_type"]; asm["___cxa_is_pointer_type"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____cxa_is_pointer_type.apply(null, arguments);
};

var real__llvm_cttz_i32 = asm["_llvm_cttz_i32"]; asm["_llvm_cttz_i32"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__llvm_cttz_i32.apply(null, arguments);
};

var real____cxa_demangle = asm["___cxa_demangle"]; asm["___cxa_demangle"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____cxa_demangle.apply(null, arguments);
};

var real__llvm_bswap_i32 = asm["_llvm_bswap_i32"]; asm["_llvm_bswap_i32"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__llvm_bswap_i32.apply(null, arguments);
};

var real____muldi3 = asm["___muldi3"]; asm["___muldi3"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____muldi3.apply(null, arguments);
};

var real____uremdi3 = asm["___uremdi3"]; asm["___uremdi3"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____uremdi3.apply(null, arguments);
};

var real_stackAlloc = asm["stackAlloc"]; asm["stackAlloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real_stackAlloc.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Subtract.apply(null, arguments);
};

var real___GLOBAL__sub_I_bind_cpp = asm["__GLOBAL__sub_I_bind_cpp"]; asm["__GLOBAL__sub_I_bind_cpp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___GLOBAL__sub_I_bind_cpp.apply(null, arguments);
};

var real____udivmoddi4 = asm["___udivmoddi4"]; asm["___udivmoddi4"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____udivmoddi4.apply(null, arguments);
};

var real_setTempRet0 = asm["setTempRet0"]; asm["setTempRet0"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real_setTempRet0.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Add.apply(null, arguments);
};

var real__emscripten_get_global_libc = asm["_emscripten_get_global_libc"]; asm["_emscripten_get_global_libc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_get_global_libc.apply(null, arguments);
};

var real____getTypeName = asm["___getTypeName"]; asm["___getTypeName"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____getTypeName.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"]; asm["___udivdi3"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____udivdi3.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____errno_location.apply(null, arguments);
};

var real____muldsi3 = asm["___muldsi3"]; asm["___muldsi3"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____muldsi3.apply(null, arguments);
};

var real____cxa_can_catch = asm["___cxa_can_catch"]; asm["___cxa_can_catch"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____cxa_can_catch.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__free.apply(null, arguments);
};

var real___GLOBAL__sub_I_estimator_cc = asm["__GLOBAL__sub_I_estimator_cc"]; asm["__GLOBAL__sub_I_estimator_cc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___GLOBAL__sub_I_estimator_cc.apply(null, arguments);
};

var real_establishStackSpace = asm["establishStackSpace"]; asm["establishStackSpace"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real_establishStackSpace.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__memmove.apply(null, arguments);
};

var real_stackRestore = asm["stackRestore"]; asm["stackRestore"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real_stackRestore.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__malloc.apply(null, arguments);
};
var _main = Module["_main"] = asm["_main"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var getTempRet0 = Module["getTempRet0"] = asm["getTempRet0"];
var _memset = Module["_memset"] = asm["_memset"];
var setThrew = Module["setThrew"] = asm["setThrew"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var _llvm_cttz_i32 = Module["_llvm_cttz_i32"] = asm["_llvm_cttz_i32"];
var ___cxa_demangle = Module["___cxa_demangle"] = asm["___cxa_demangle"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var __GLOBAL__sub_I_bind_cpp = Module["__GLOBAL__sub_I_bind_cpp"] = asm["__GLOBAL__sub_I_bind_cpp"];
var ___udivmoddi4 = Module["___udivmoddi4"] = asm["___udivmoddi4"];
var setTempRet0 = Module["setTempRet0"] = asm["setTempRet0"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _emscripten_get_global_libc = Module["_emscripten_get_global_libc"] = asm["_emscripten_get_global_libc"];
var ___getTypeName = Module["___getTypeName"] = asm["___getTypeName"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___muldsi3 = Module["___muldsi3"] = asm["___muldsi3"];
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var _free = Module["_free"] = asm["_free"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var __GLOBAL__sub_I_estimator_cc = Module["__GLOBAL__sub_I_estimator_cc"] = asm["__GLOBAL__sub_I_estimator_cc"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_viiiid = Module["dynCall_viiiid"] = asm["dynCall_viiiid"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiiiid = Module["dynCall_iiiiid"] = asm["dynCall_iiiiid"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
;
Runtime.stackAlloc = Module['stackAlloc'];
Runtime.stackSave = Module['stackSave'];
Runtime.stackRestore = Module['stackRestore'];
Runtime.establishStackSpace = Module['establishStackSpace'];
Runtime.setTempRet0 = Module['setTempRet0'];
Runtime.getTempRet0 = Module['getTempRet0'];


// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;






/**
 * @constructor
 * @extends {Error}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      var toLog = e;
      if (e && typeof e === 'object' && e.stack) {
        toLog = [e, e.stack];
      }
      Module.printErr('exception thrown: ' + toLog);
      Module['quit'](1, e);
    }
  } finally {
    calledMain = true;
  }
}




/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') implicitly called by end of main(), but noExitRuntime, so not exiting the runtime (you can use emscripten_force_exit, if you want to force a true shutdown)');
    return;
  }

  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)');
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  }
  Module['quit'](status, new ExitStatus(status));
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

Module["noExitRuntime"] = true;

run();

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}



